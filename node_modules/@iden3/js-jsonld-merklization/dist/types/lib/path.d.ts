import { Hasher, Parts } from './types/types';
import { JsonLdContextNormalized } from 'jsonld-context-parser';
export declare class Path {
    parts: Parts;
    hasher: Hasher;
    constructor(parts?: Parts, hasher?: Hasher);
    reverse(): Parts;
    append(p: Parts): void;
    prepend(p: Parts): void;
    mtEntry(): Promise<bigint>;
    pathFromContext(docStr: string, path: string): Promise<void>;
    typeFromContext(ctxStr: string, path: string): Promise<string>;
    private static getTypeMapping;
    static newPath: (parts: Parts) => Path;
    private static pathFromDocument;
    static newPathFromCtx(docStr: string, path: string): Promise<Path>;
    static getContextPathKey: (docStr: string, ctxTyp: string, fieldPath: string) => Promise<Path>;
    static fromDocument(ldCTX: JsonLdContextNormalized | null, docStr: string, path: string): Promise<Path>;
    static newTypeFromContext(contextStr: string, path: string): Promise<string>;
}
