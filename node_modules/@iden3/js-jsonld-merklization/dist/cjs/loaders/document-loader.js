"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.documentLoader = exports.FetchDocumentLoader = void 0;
require("cross-fetch/polyfill");
const jsonld_context_parser_1 = require("jsonld-context-parser");
const http_link_header_1 = require("http-link-header");
const relative_to_absolute_iri_1 = require("relative-to-absolute-iri");
/**
 * Loads documents via the fetch API.
 */
class FetchDocumentLoader {
    constructor(fetcher) {
        this.fetcher = fetcher;
    }
    async load(url) {
        const response = await (this.fetcher || fetch)(url, {
            headers: new Headers({ accept: 'application/json, application/ld+json' })
        });
        if (response.ok && response.headers) {
            let mediaType = response.headers.get('Content-Type');
            if (mediaType) {
                const colonPos = mediaType.indexOf(';');
                if (colonPos > 0) {
                    mediaType = mediaType.substr(0, colonPos);
                }
            }
            if (mediaType === 'application/json' || mediaType === 'application/ld+json') {
                // Return JSON-LD if proper content type was returned
                return await response.json();
            }
            else if (mediaType === 'text/plain') {
                const text = await response.text();
                return JSON.parse(text);
            }
            else {
                // Check for alternate link for a non-JSON-LD response
                if (response.headers.has('Link')) {
                    let alternateUrl;
                    response.headers.forEach((value, key) => {
                        if (key === 'link') {
                            const linkHeader = (0, http_link_header_1.parse)(value);
                            const v1 = linkHeader.get('type', 'application/ld+json');
                            const v2 = linkHeader.get('type', 'application/json');
                            for (const link of v1 ? v1 : v2) {
                                if (link.rel === 'alternate') {
                                    if (alternateUrl) {
                                        throw new Error('Multiple JSON-LD alternate links were found on ' + url);
                                    }
                                    alternateUrl = (0, relative_to_absolute_iri_1.resolve)(link.uri, url);
                                }
                            }
                        }
                    });
                    if (alternateUrl) {
                        return this.load(alternateUrl);
                    }
                }
                throw new jsonld_context_parser_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);
            }
        }
        else {
            throw new Error(response.statusText || `Status code: ${response.status}`);
        }
    }
}
exports.FetchDocumentLoader = FetchDocumentLoader;
exports.documentLoader = new FetchDocumentLoader();
//# sourceMappingURL=document-loader.js.map