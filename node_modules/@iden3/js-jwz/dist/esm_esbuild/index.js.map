{
  "version": 3,
  "sources": ["../../node_modules/@esbuild-plugins/node-globals-polyfill/_virtual-process-polyfill_.js", "../../node_modules/@esbuild-plugins/node-globals-polyfill/Buffer.js", "../../node_modules/@esbuild-plugins/node-globals-polyfill/_buffer.js", "node-modules-polyfills:events", "node-modules-polyfills-commonjs:events", "../../node_modules/readable-stream/lib/internal/streams/stream-browser.js", "node-modules-polyfills:buffer", "node-modules-polyfills-commonjs:buffer", "node-modules-polyfills:process", "../../node_modules/rollup-plugin-node-polyfills/polyfills/inherits.js", "node-modules-polyfills:util", "node-modules-polyfills-commonjs:util", "../../node_modules/readable-stream/lib/internal/streams/buffer_list.js", "../../node_modules/readable-stream/lib/internal/streams/destroy.js", "../../node_modules/readable-stream/errors-browser.js", "../../node_modules/readable-stream/lib/internal/streams/state.js", "../../node_modules/inherits/inherits_browser.js", "../../node_modules/util-deprecate/browser.js", "../../node_modules/readable-stream/lib/_stream_writable.js", "../../node_modules/readable-stream/lib/_stream_duplex.js", "../../node_modules/safe-buffer/index.js", "../../node_modules/string_decoder/lib/string_decoder.js", "../../node_modules/readable-stream/lib/internal/streams/end-of-stream.js", "../../node_modules/readable-stream/lib/internal/streams/async_iterator.js", "../../node_modules/readable-stream/lib/internal/streams/from-browser.js", "../../node_modules/readable-stream/lib/_stream_readable.js", "../../node_modules/readable-stream/lib/_stream_transform.js", "../../node_modules/readable-stream/lib/_stream_passthrough.js", "../../node_modules/readable-stream/lib/internal/streams/pipeline.js", "../../node_modules/readable-stream/readable-browser.js", "../../node_modules/blake-hash/lib/api/blake.js", "../../node_modules/blake-hash/lib/api/index.js", "../../node_modules/blake-hash/lib/blake.js", "../../node_modules/blake-hash/lib/blake256.js", "../../node_modules/blake-hash/lib/blake224.js", "../../node_modules/blake-hash/lib/blake512.js", "../../node_modules/blake-hash/lib/blake384.js", "../../node_modules/blake-hash/lib/index.js", "../../node_modules/blake-hash/js.js", "node-modules-polyfills:crypto", "../../node_modules/wasmcurves/src/utils.js", "../../node_modules/wasmcurves/src/build_int.js", "../../node_modules/wasmcurves/src/build_timesscalar.js", "../../node_modules/wasmcurves/src/build_batchinverse.js", "../../node_modules/wasmcurves/src/build_batchconvertion.js", "../../node_modules/wasmcurves/src/build_batchop.js", "../../node_modules/wasmcurves/src/bigint.js", "../../node_modules/wasmcurves/src/build_f1m.js", "../../node_modules/wasmcurves/src/build_f1.js", "../../node_modules/wasmcurves/src/build_f2m.js", "../../node_modules/wasmcurves/src/build_f3m.js", "../../node_modules/wasmcurves/src/build_timesscalarnaf.js", "../../node_modules/wasmcurves/src/build_multiexp.js", "../../node_modules/wasmcurves/src/build_curve_jacobian_a0.js", "../../node_modules/wasmcurves/src/build_fft.js", "../../node_modules/wasmcurves/src/build_pol.js", "../../node_modules/wasmcurves/src/build_qap.js", "../../node_modules/wasmcurves/src/build_applykey.js", "../../node_modules/wasmcurves/src/bn128/build_bn128.js", "../../node_modules/wasmcurves/src/bls12381/build_bls12381.js", "../../node_modules/wasmcurves/index.js", "../../node_modules/web-worker/cjs/browser.js", "../../node_modules/base64-js/index.js", "../../node_modules/ieee754/index.js", "../../node_modules/buffer/index.js", "node-modules-polyfills-commonjs:crypto", "../../node_modules/cross-sha256/index.js", "../../node_modules/base58-js/private/base58_chars.js", "../../node_modules/base58-js/public/base58_to_binary.js", "../../node_modules/base58-js/private/create_base58_map.js", "../../node_modules/base58-js/public/binary_to_base58.js", "../../node_modules/base58-js/public/index.js", "../../node_modules/rfc4648/lib/index.js", "node-modules-polyfills:fs", "../../node_modules/nanoassert/index.js", "../../node_modules/b4a/lib/ascii.js", "../../node_modules/b4a/lib/base64.js", "../../node_modules/b4a/lib/hex.js", "../../node_modules/b4a/lib/utf8.js", "../../node_modules/b4a/lib/utf16le.js", "../../node_modules/b4a/browser.js", "../../node_modules/blake2b-wasm/blake2b.js", "../../node_modules/blake2b-wasm/index.js", "node-modules-polyfills-commonjs:fs", "node-modules-polyfills:path", "node-modules-polyfills-commonjs:path", "../../node_modules/ejs/lib/utils.js", "../../node_modules/ejs/lib/ejs.js", "../../node_modules/js-sha3/src/sha3.js", "../../src/index.ts", "../../src/hash.ts", "../../node_modules/@iden3/js-iden3-core/src/index.ts", "../../node_modules/@iden3/js-iden3-core/src/claim.ts", "../../node_modules/@iden3/js-iden3-core/src/schemaHash.ts", "../../node_modules/@iden3/js-crypto/src/index.ts", "../../node_modules/@iden3/js-crypto/src/babyjub/index.ts", "../../node_modules/@iden3/js-crypto/src/babyjub/eddsa.ts", "../../node_modules/@iden3/js-crypto/src/hex.ts", "../../node_modules/@iden3/js-crypto/src/babyjub/babyjub.ts", "../../node_modules/@iden3/js-crypto/src/ff.ts", "../../node_modules/ffjavascript/main.js", "../../node_modules/ffjavascript/src/scalar.js", "../../node_modules/ffjavascript/src/polfield.js", "../../node_modules/ffjavascript/src/f1field.js", "../../node_modules/ffjavascript/src/futils.js", "../../node_modules/ffjavascript/src/fsqrt.js", "../../node_modules/ffjavascript/src/random.js", "../../node_modules/ffjavascript/src/chacha.js", "../../node_modules/ffjavascript/src/fft.js", "../../node_modules/ffjavascript/src/f2field.js", "../../node_modules/ffjavascript/src/f3field.js", "../../node_modules/ffjavascript/src/ec.js", "../../node_modules/ffjavascript/src/bn128.js", "../../node_modules/ffjavascript/src/engine.js", "../../node_modules/ffjavascript/src/wasm_field1.js", "../../node_modules/ffjavascript/src/utils.js", "../../node_modules/ffjavascript/src/engine_batchconvert.js", "../../node_modules/ffjavascript/src/bigbuffer.js", "../../node_modules/ffjavascript/src/wasm_field2.js", "../../node_modules/ffjavascript/src/wasm_field3.js", "../../node_modules/ffjavascript/src/wasm_curve.js", "../../node_modules/ffjavascript/src/threadman.js", "../../node_modules/ffjavascript/src/threadman_thread.js", "node-modules-polyfills:os", "../../node_modules/ffjavascript/src/engine_applykey.js", "../../node_modules/ffjavascript/src/engine_pairing.js", "../../node_modules/ffjavascript/src/engine_multiexp.js", "../../node_modules/ffjavascript/src/engine_fft.js", "../../node_modules/wasmbuilder/main.js", "../../node_modules/wasmbuilder/src/modulebuilder.js", "../../node_modules/wasmbuilder/src/functionbuilder.js", "../../node_modules/wasmbuilder/src/codebuilder.js", "../../node_modules/wasmbuilder/src/utils.js", "../../node_modules/wasmbuilder/src/modulebuilder_wat.js", "../../node_modules/wasmbuilder/src/functionbuilder_wat.js", "../../node_modules/wasmbuilder/src/codebuilder_wat.js", "../../node_modules/wasmbuilder/src/protoboard.js", "../../node_modules/ffjavascript/src/bls12381.js", "../../node_modules/ffjavascript/src/curves.js", "../../node_modules/@iden3/js-crypto/src/poseidon/index.ts", "../../node_modules/@iden3/js-crypto/src/poseidon/poseidon-opt.ts", "../../node_modules/@iden3/js-crypto/src/babyjub/eddsa-keys.ts", "../../node_modules/@iden3/js-iden3-core/src/constants.ts", "../../node_modules/@iden3/js-iden3-core/src/elemBytes.ts", "../../node_modules/@iden3/js-iden3-core/src/utils.ts", "../../node_modules/@iden3/js-iden3-core/src/id.ts", "../../node_modules/@iden3/js-iden3-core/src/did.ts", "../../src/jwz.ts", "../../src/proving.ts", "../../node_modules/rfc4648/lib/index.mjs", "../../src/authGroth16.ts", "../../src/common.ts", "../../src/witness_calculator.ts", "../../node_modules/snarkjs/main.js", "../../node_modules/snarkjs/src/groth16.js", "../../node_modules/snarkjs/src/groth16_fullprove.js", "../../node_modules/snarkjs/src/groth16_prove.js", "../../node_modules/@iden3/binfileutils/src/binfileutils.js", "../../node_modules/fastfile/src/fastfile.js", "../../node_modules/fastfile/src/osfile.js", "../../node_modules/fastfile/src/memfile.js", "../../node_modules/fastfile/src/bigmemfile.js", "node-modules-polyfills:constants", "../../node_modules/snarkjs/src/zkey_utils.js", "../../node_modules/snarkjs/node_modules/ffjavascript/main.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/scalar.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/polfield.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/f1field.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/futils.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/fsqrt.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/random.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/chacha.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/fft.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/f2field.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/f3field.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/ec.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/bn128.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/engine.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/wasm_field1.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/utils.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/engine_batchconvert.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/bigbuffer.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/wasm_field2.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/wasm_field3.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/wasm_curve.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/threadman.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/threadman_thread.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/engine_applykey.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/engine_pairing.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/engine_multiexp.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/engine_fft.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/bls12381.js", "../../node_modules/snarkjs/node_modules/ffjavascript/src/curves.js", "../../node_modules/snarkjs/src/curves.js", "../../node_modules/snarkjs/src/misc.js", "node-modules-polyfills:readline", "../../node_modules/snarkjs/src/wtns_utils.js", "../../node_modules/snarkjs/src/wtns_calculate.js", "../../node_modules/circom_runtime/main.js", "../../node_modules/circom_runtime/js/witness_calculator.js", "../../node_modules/circom_runtime/js/utils.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/main.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/scalar.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/polfield.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/f1field.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/futils.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/fsqrt.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/random.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/chacha.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/fft.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/f2field.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/f3field.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/ec.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/bn128.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/engine.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/wasm_field1.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/utils.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/engine_batchconvert.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/bigbuffer.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/wasm_field2.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/wasm_field3.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/wasm_curve.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/threadman.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/threadman_thread.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/engine_applykey.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/engine_pairing.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/engine_multiexp.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/engine_fft.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/bls12381.js", "../../node_modules/circom_runtime/node_modules/ffjavascript/src/curves.js", "../../node_modules/snarkjs/src/groth16_verify.js", "../../node_modules/snarkjs/src/groth16_exportsoliditycalldata.js", "../../node_modules/snarkjs/src/powersoftau.js", "../../node_modules/snarkjs/src/powersoftau_new.js", "../../node_modules/snarkjs/src/powersoftau_utils.js", "../../node_modules/snarkjs/src/keypair.js", "../../node_modules/snarkjs/src/powersoftau_export_challenge.js", "../../node_modules/snarkjs/src/powersoftau_import.js", "../../node_modules/snarkjs/src/powersoftau_verify.js", "../../node_modules/snarkjs/src/powersoftau_challenge_contribute.js", "../../node_modules/snarkjs/src/mpc_applykey.js", "../../node_modules/snarkjs/src/powersoftau_beacon.js", "../../node_modules/snarkjs/src/powersoftau_contribute.js", "../../node_modules/snarkjs/src/powersoftau_preparephase2.js", "../../node_modules/snarkjs/src/powersoftau_truncate.js", "../../node_modules/snarkjs/src/powersoftau_convert.js", "../../node_modules/snarkjs/src/powersoftau_export_json.js", "../../node_modules/snarkjs/src/r1cs.js", "../../node_modules/snarkjs/src/r1cs_print.js", "../../node_modules/snarkjs/src/r1cs_info.js", "../../node_modules/r1csfile/src/r1csfile.js", "../../node_modules/r1csfile/node_modules/ffjavascript/main.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/scalar.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/polfield.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/f1field.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/futils.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/fsqrt.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/random.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/chacha.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/fft.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/f2field.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/f3field.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/ec.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/bn128.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/engine.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/wasm_field1.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/utils.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/engine_batchconvert.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/bigbuffer.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/wasm_field2.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/wasm_field3.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/wasm_curve.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/threadman.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/threadman_thread.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/engine_applykey.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/engine_pairing.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/engine_multiexp.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/engine_fft.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/bls12381.js", "../../node_modules/r1csfile/node_modules/ffjavascript/src/curves.js", "../../node_modules/@iden3/bigarray/src/bigarray.js", "../../node_modules/snarkjs/src/r1cs_export_json.js", "../../node_modules/snarkjs/src/wtns.js", "../../node_modules/snarkjs/src/wtns_debug.js", "../../node_modules/snarkjs/src/loadsyms.js", "../../node_modules/snarkjs/src/wtns_export_json.js", "../../node_modules/snarkjs/src/zkey.js", "../../node_modules/snarkjs/src/zkey_new.js", "../../node_modules/snarkjs/src/bigarray.js", "../../node_modules/snarkjs/src/zkey_export_bellman.js", "../../node_modules/snarkjs/src/zkey_import_bellman.js", "../../node_modules/snarkjs/src/zkey_verify_fromr1cs.js", "../../node_modules/snarkjs/src/zkey_verify_frominit.js", "../../node_modules/snarkjs/src/zkey_contribute.js", "../../node_modules/snarkjs/src/zkey_beacon.js", "../../node_modules/snarkjs/src/zkey_export_json.js", "../../node_modules/snarkjs/src/zkey_bellman_contribute.js", "../../node_modules/snarkjs/src/zkey_export_verificationkey.js", "../../node_modules/snarkjs/src/zkey_export_solidityverifier.js", "../../node_modules/snarkjs/src/plonk.js", "../../node_modules/snarkjs/src/plonk_setup.js", "../../node_modules/snarkjs/src/plonk_fullprove.js", "../../node_modules/snarkjs/src/plonk_prove.js", "../../node_modules/snarkjs/src/plonk_verify.js", "../../node_modules/snarkjs/src/plonk_exportsoliditycalldata.js", "../../src/authV2Groth16.ts", "../../node_modules/@iden3/js-merkletree/src/index.ts", "../../node_modules/@iden3/js-merkletree/src/constants/index.ts", "../../node_modules/@iden3/js-merkletree/src/constants/hash.ts", "../../node_modules/@iden3/js-merkletree/src/constants/node.ts", "../../node_modules/@iden3/js-merkletree/src/constants/data.ts", "../../node_modules/@iden3/js-merkletree/src/constants/proof.ts", "../../node_modules/@iden3/js-merkletree/src/constants/field.ts", "../../node_modules/@iden3/js-merkletree/src/lib/index.ts", "../../node_modules/@iden3/js-merkletree/src/lib/db/index.ts", "../../node_modules/@iden3/js-merkletree/src/lib/db/inMemory.ts", "../../node_modules/@iden3/js-merkletree/src/lib/hash/hash.ts", "../../node_modules/@iden3/js-merkletree/src/lib/utils/index.ts", "../../node_modules/@iden3/js-merkletree/src/lib/utils/bytes.ts", "../../node_modules/@iden3/js-merkletree/src/lib/utils/crypto.ts", "../../node_modules/@iden3/js-merkletree/src/lib/utils/hash.ts", "../../node_modules/@iden3/js-merkletree/src/lib/utils/bigint.ts", "../../node_modules/@iden3/js-merkletree/src/lib/utils/poseidon.ts", "../../node_modules/@iden3/js-merkletree/src/lib/utils/entry.ts", "../../node_modules/@iden3/js-merkletree/src/lib/utils/circom.ts", "../../node_modules/@iden3/js-merkletree/src/lib/utils/merkletree.ts", "../../node_modules/@iden3/js-merkletree/src/lib/utils/proof.ts", "../../node_modules/@iden3/js-merkletree/src/lib/utils/node.ts", "../../node_modules/@iden3/js-merkletree/src/lib/errors/proof.ts", "../../node_modules/@iden3/js-merkletree/src/lib/db/localStorage.ts", "../../node_modules/@iden3/js-merkletree/src/lib/entry/index.ts", "../../node_modules/@iden3/js-merkletree/src/lib/errors/index.ts", "../../node_modules/@iden3/js-merkletree/src/lib/errors/merkletree.ts", "../../node_modules/@iden3/js-merkletree/src/lib/errors/db.ts", "../../node_modules/@iden3/js-merkletree/src/lib/merkletree/index.ts", "../../node_modules/@iden3/js-merkletree/src/lib/merkletree/circom.ts", "../../node_modules/@iden3/js-merkletree/src/lib/merkletree/proof.ts", "../../node_modules/@iden3/js-merkletree/src/types/index.ts", "../../node_modules/@iden3/js-merkletree/dist/esm/types/hash.js", "../../node_modules/@iden3/js-merkletree/dist/esm/types/node.js", "../../node_modules/@iden3/js-merkletree/dist/esm/types/bytes.js", "../../node_modules/@iden3/js-merkletree/dist/esm/types/storage.js", "../../node_modules/@iden3/js-merkletree/dist/esm/types/merkletree.js"],
  "sourcesContent": ["// shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined')\n}\nfunction defaultClearTimeout() {\n    throw new Error('clearTimeout has not been defined')\n}\nvar cachedSetTimeout = defaultSetTimout\nvar cachedClearTimeout = defaultClearTimeout\nif (typeof global.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout\n}\nif (typeof global.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout\n}\n\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0)\n    }\n    // if setTimeout wasn't available but was latter defined\n    if (\n        (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&\n        setTimeout\n    ) {\n        cachedSetTimeout = setTimeout\n        return setTimeout(fun, 0)\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0)\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0)\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0)\n        }\n    }\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker)\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if (\n        (cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) &&\n        clearTimeout\n    ) {\n        cachedClearTimeout = clearTimeout\n        return clearTimeout(marker)\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker)\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker)\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker)\n        }\n    }\n}\nvar queue = []\nvar draining = false\nvar currentQueue\nvar queueIndex = -1\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return\n    }\n    draining = false\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue)\n    } else {\n        queueIndex = -1\n    }\n    if (queue.length) {\n        drainQueue()\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return\n    }\n    var timeout = runTimeout(cleanUpNextTick)\n    draining = true\n\n    var len = queue.length\n    while (len) {\n        currentQueue = queue\n        queue = []\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run()\n            }\n        }\n        queueIndex = -1\n        len = queue.length\n    }\n    currentQueue = null\n    draining = false\n    runClearTimeout(timeout)\n}\nfunction nextTick(fun) {\n    var args = new Array(arguments.length - 1)\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i]\n        }\n    }\n    queue.push(new Item(fun, args))\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue)\n    }\n}\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun\n    this.array = array\n}\nItem.prototype.run = function() {\n    this.fun.apply(null, this.array)\n}\nvar title = 'browser'\nvar platform = 'browser'\nvar browser = true\nvar env = {}\nvar argv = []\nvar version = '' // empty string to avoid regexp issues\nvar versions = {}\nvar release = {}\nvar config = {}\n\nfunction noop() {}\n\nvar on = noop\nvar addListener = noop\nvar once = noop\nvar off = noop\nvar removeListener = noop\nvar removeAllListeners = noop\nvar emit = noop\n\nfunction binding(name) {\n    throw new Error('process.binding is not supported')\n}\n\nfunction cwd() {\n    return '/'\n}\nfunction chdir(dir) {\n    throw new Error('process.chdir is not supported')\n}\nfunction umask() {\n    return 0\n}\n\n// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\nvar performance = global.performance || {}\nvar performanceNow =\n    performance.now ||\n    performance.mozNow ||\n    performance.msNow ||\n    performance.oNow ||\n    performance.webkitNow ||\n    function() {\n        return new Date().getTime()\n    }\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nfunction hrtime(previousTimestamp) {\n    var clocktime = performanceNow.call(performance) * 1e-3\n    var seconds = Math.floor(clocktime)\n    var nanoseconds = Math.floor((clocktime % 1) * 1e9)\n    if (previousTimestamp) {\n        seconds = seconds - previousTimestamp[0]\n        nanoseconds = nanoseconds - previousTimestamp[1]\n        if (nanoseconds < 0) {\n            seconds--\n            nanoseconds += 1e9\n        }\n    }\n    return [seconds, nanoseconds]\n}\n\nvar startTime = new Date()\nfunction uptime() {\n    var currentTime = new Date()\n    var dif = currentTime - startTime\n    return dif / 1000\n}\n\nexport var process = {\n    nextTick: nextTick,\n    title: title,\n    browser: browser,\n    env: env,\n    argv: argv,\n    version: version,\n    versions: versions,\n    on: on,\n    addListener: addListener,\n    once: once,\n    off: off,\n    removeListener: removeListener,\n    removeAllListeners: removeAllListeners,\n    emit: emit,\n    binding: binding,\n    cwd: cwd,\n    chdir: chdir,\n    umask: umask,\n    hrtime: hrtime,\n    platform: platform,\n    release: release,\n    config: config,\n    uptime: uptime,\n}\n\n// replace process.env.VAR with define\n\nconst defines = {\n\n}\nObject.keys(defines).forEach((key) => {\n    const segs = key.split('.')\n    let target = process\n    for (let i = 0; i < segs.length; i++) {\n        const seg = segs[i]\n        if (i === segs.length - 1) {\n            target[seg] = defines[key]\n        } else {\n            target = target[seg] || (target[seg] = {})\n        }\n    }\n})\n", "// taken from https://github.com/calvinmetcalf/buffer-es6\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\nvar inited = false\nfunction init() {\n    inited = true\n    var code =\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n    for (var i = 0, len = code.length; i < len; ++i) {\n        lookup[i] = code[i]\n        revLookup[code.charCodeAt(i)] = i\n    }\n\n    revLookup['-'.charCodeAt(0)] = 62\n    revLookup['_'.charCodeAt(0)] = 63\n}\n\nfunction base64toByteArray(b64) {\n    if (!inited) {\n        init()\n    }\n    var i, j, l, tmp, placeHolders, arr\n    var len = b64.length\n\n    if (len % 4 > 0) {\n        throw new Error('Invalid string. Length must be a multiple of 4')\n    }\n\n    // the number of equal signs (place holders)\n    // if there are two placeholders, than the two characters before it\n    // represent one byte\n    // if there is only one, then the three characters before it represent 2 bytes\n    // this is just a cheap hack to not do indexOf twice\n    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n    // base64 is 4/3 + up to two characters of the original data\n    arr = new Arr((len * 3) / 4 - placeHolders)\n\n    // if there are placeholders, only get up to the last complete 4 chars\n    l = placeHolders > 0 ? len - 4 : len\n\n    var L = 0\n\n    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n        tmp =\n            (revLookup[b64.charCodeAt(i)] << 18) |\n            (revLookup[b64.charCodeAt(i + 1)] << 12) |\n            (revLookup[b64.charCodeAt(i + 2)] << 6) |\n            revLookup[b64.charCodeAt(i + 3)]\n        arr[L++] = (tmp >> 16) & 0xff\n        arr[L++] = (tmp >> 8) & 0xff\n        arr[L++] = tmp & 0xff\n    }\n\n    if (placeHolders === 2) {\n        tmp =\n            (revLookup[b64.charCodeAt(i)] << 2) |\n            (revLookup[b64.charCodeAt(i + 1)] >> 4)\n        arr[L++] = tmp & 0xff\n    } else if (placeHolders === 1) {\n        tmp =\n            (revLookup[b64.charCodeAt(i)] << 10) |\n            (revLookup[b64.charCodeAt(i + 1)] << 4) |\n            (revLookup[b64.charCodeAt(i + 2)] >> 2)\n        arr[L++] = (tmp >> 8) & 0xff\n        arr[L++] = tmp & 0xff\n    }\n\n    return arr\n}\n\nfunction tripletToBase64(num) {\n    return (\n        lookup[(num >> 18) & 0x3f] +\n        lookup[(num >> 12) & 0x3f] +\n        lookup[(num >> 6) & 0x3f] +\n        lookup[num & 0x3f]\n    )\n}\n\nfunction encodeChunk(uint8, start, end) {\n    var tmp\n    var output = []\n    for (var i = start; i < end; i += 3) {\n        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2]\n        output.push(tripletToBase64(tmp))\n    }\n    return output.join('')\n}\n\nfunction base64fromByteArray(uint8) {\n    if (!inited) {\n        init()\n    }\n    var tmp\n    var len = uint8.length\n    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n    var output = ''\n    var parts = []\n    var maxChunkLength = 16383 // must be multiple of 3\n\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n        parts.push(\n            encodeChunk(\n                uint8,\n                i,\n                i + maxChunkLength > len2 ? len2 : i + maxChunkLength,\n            ),\n        )\n    }\n\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1]\n        output += lookup[tmp >> 2]\n        output += lookup[(tmp << 4) & 0x3f]\n        output += '=='\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n        output += lookup[tmp >> 10]\n        output += lookup[(tmp >> 4) & 0x3f]\n        output += lookup[(tmp << 2) & 0x3f]\n        output += '='\n    }\n\n    parts.push(output)\n\n    return parts.join('')\n}\n\nvar INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT =\n    global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : true\n\nfunction kMaxLength() {\n    return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff\n}\n\nfunction createBuffer(that, length) {\n    if (kMaxLength() < length) {\n        throw new RangeError('Invalid typed array length')\n    }\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        // Return an augmented `Uint8Array` instance, for best performance\n        that = new Uint8Array(length)\n        that.__proto__ = Buffer.prototype\n    } else {\n        // Fallback: Return an object instance of the Buffer class\n        if (that === null) {\n            that = new Buffer(length)\n        }\n        that.length = length\n    }\n\n    return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nexport function Buffer(arg, encodingOrOffset, length) {\n    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n        return new Buffer(arg, encodingOrOffset, length)\n    }\n\n    // Common case.\n    if (typeof arg === 'number') {\n        if (typeof encodingOrOffset === 'string') {\n            throw new Error(\n                'If encoding is specified then the first argument must be a string',\n            )\n        }\n        return allocUnsafe(this, arg)\n    }\n    return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function(arr) {\n    arr.__proto__ = Buffer.prototype\n    return arr\n}\n\nfunction from(that, value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n        throw new TypeError('\"value\" argument must not be a number')\n    }\n\n    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n        return fromArrayBuffer(that, value, encodingOrOffset, length)\n    }\n\n    if (typeof value === 'string') {\n        return fromString(that, value, encodingOrOffset)\n    }\n\n    return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function(value, encodingOrOffset, length) {\n    return from(null, value, encodingOrOffset, length)\n}\n\nBuffer.kMaxLength = kMaxLength()\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n    Buffer.prototype.__proto__ = Uint8Array.prototype\n    Buffer.__proto__ = Uint8Array\n    if (\n        typeof Symbol !== 'undefined' &&\n        Symbol.species &&\n        Buffer[Symbol.species] === Buffer\n    ) {\n        // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n        // Object.defineProperty(Buffer, Symbol.species, {\n        //   value: null,\n        //   configurable: true\n        // })\n    }\n}\n\nfunction assertSize(size) {\n    if (typeof size !== 'number') {\n        throw new TypeError('\"size\" argument must be a number')\n    } else if (size < 0) {\n        throw new RangeError('\"size\" argument must not be negative')\n    }\n}\n\nfunction alloc(that, size, fill, encoding) {\n    assertSize(size)\n    if (size <= 0) {\n        return createBuffer(that, size)\n    }\n    if (fill !== undefined) {\n        // Only pay attention to encoding if it's a string. This\n        // prevents accidentally sending in a number that would\n        // be interpretted as a start offset.\n        return typeof encoding === 'string'\n            ? createBuffer(that, size).fill(fill, encoding)\n            : createBuffer(that, size).fill(fill)\n    }\n    return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function(size, fill, encoding) {\n    return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe(that, size) {\n    assertSize(size)\n    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n    if (!Buffer.TYPED_ARRAY_SUPPORT) {\n        for (var i = 0; i < size; ++i) {\n            that[i] = 0\n        }\n    }\n    return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function(size) {\n    return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function(size) {\n    return allocUnsafe(null, size)\n}\n\nfunction fromString(that, string, encoding) {\n    if (typeof encoding !== 'string' || encoding === '') {\n        encoding = 'utf8'\n    }\n\n    if (!Buffer.isEncoding(encoding)) {\n        throw new TypeError('\"encoding\" must be a valid string encoding')\n    }\n\n    var length = byteLength(string, encoding) | 0\n    that = createBuffer(that, length)\n\n    var actual = that.write(string, encoding)\n\n    if (actual !== length) {\n        // Writing a hex string, for example, that contains invalid characters will\n        // cause everything after the first invalid character to be ignored. (e.g.\n        // 'abxxcd' will be treated as 'ab')\n        that = that.slice(0, actual)\n    }\n\n    return that\n}\n\nfunction fromArrayLike(that, array) {\n    var length = array.length < 0 ? 0 : checked(array.length) | 0\n    that = createBuffer(that, length)\n    for (var i = 0; i < length; i += 1) {\n        that[i] = array[i] & 255\n    }\n    return that\n}\n\nfunction fromArrayBuffer(that, array, byteOffset, length) {\n    array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\n        throw new RangeError(\"'offset' is out of bounds\")\n    }\n\n    if (array.byteLength < byteOffset + (length || 0)) {\n        throw new RangeError(\"'length' is out of bounds\")\n    }\n\n    if (byteOffset === undefined && length === undefined) {\n        array = new Uint8Array(array)\n    } else if (length === undefined) {\n        array = new Uint8Array(array, byteOffset)\n    } else {\n        array = new Uint8Array(array, byteOffset, length)\n    }\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        // Return an augmented `Uint8Array` instance, for best performance\n        that = array\n        that.__proto__ = Buffer.prototype\n    } else {\n        // Fallback: Return an object instance of the Buffer class\n        that = fromArrayLike(that, array)\n    }\n    return that\n}\n\nfunction fromObject(that, obj) {\n    if (internalIsBuffer(obj)) {\n        var len = checked(obj.length) | 0\n        that = createBuffer(that, len)\n\n        if (that.length === 0) {\n            return that\n        }\n\n        obj.copy(that, 0, 0, len)\n        return that\n    }\n\n    if (obj) {\n        if (\n            (typeof ArrayBuffer !== 'undefined' &&\n                obj.buffer instanceof ArrayBuffer) ||\n            'length' in obj\n        ) {\n            if (typeof obj.length !== 'number' || isnan(obj.length)) {\n                return createBuffer(that, 0)\n            }\n            return fromArrayLike(that, obj)\n        }\n\n        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n            return fromArrayLike(that, obj.data)\n        }\n    }\n\n    throw new TypeError(\n        'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.',\n    )\n}\n\nfunction checked(length) {\n    // Note: cannot use `length < kMaxLength()` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= kMaxLength()) {\n        throw new RangeError(\n            'Attempt to allocate Buffer larger than maximum ' +\n                'size: 0x' +\n                kMaxLength().toString(16) +\n                ' bytes',\n        )\n    }\n    return length | 0\n}\n\nexport function SlowBuffer(length) {\n    if (+length != length) {\n        // eslint-disable-line eqeqeq\n        length = 0\n    }\n    return Buffer.alloc(+length)\n}\nBuffer.isBuffer = isBuffer\nfunction internalIsBuffer(b) {\n    return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare(a, b) {\n    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n        throw new TypeError('Arguments must be Buffers')\n    }\n\n    if (a === b) return 0\n\n    var x = a.length\n    var y = b.length\n\n    for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n        if (a[i] !== b[i]) {\n            x = a[i]\n            y = b[i]\n            break\n        }\n    }\n\n    if (x < y) return -1\n    if (y < x) return 1\n    return 0\n}\n\nBuffer.isEncoding = function isEncoding(encoding) {\n    switch (String(encoding).toLowerCase()) {\n        case 'hex':\n        case 'utf8':\n        case 'utf-8':\n        case 'ascii':\n        case 'latin1':\n        case 'binary':\n        case 'base64':\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n            return true\n        default:\n            return false\n    }\n}\n\nBuffer.concat = function concat(list, length) {\n    if (!Array.isArray(list)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n\n    if (list.length === 0) {\n        return Buffer.alloc(0)\n    }\n\n    var i\n    if (length === undefined) {\n        length = 0\n        for (i = 0; i < list.length; ++i) {\n            length += list[i].length\n        }\n    }\n\n    var buffer = Buffer.allocUnsafe(length)\n    var pos = 0\n    for (i = 0; i < list.length; ++i) {\n        var buf = list[i]\n        if (!internalIsBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers')\n        }\n        buf.copy(buffer, pos)\n        pos += buf.length\n    }\n    return buffer\n}\n\nfunction byteLength(string, encoding) {\n    if (internalIsBuffer(string)) {\n        return string.length\n    }\n    if (\n        typeof ArrayBuffer !== 'undefined' &&\n        typeof ArrayBuffer.isView === 'function' &&\n        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)\n    ) {\n        return string.byteLength\n    }\n    if (typeof string !== 'string') {\n        string = '' + string\n    }\n\n    var len = string.length\n    if (len === 0) return 0\n\n    // Use a for loop to avoid recursion\n    var loweredCase = false\n    for (;;) {\n        switch (encoding) {\n            case 'ascii':\n            case 'latin1':\n            case 'binary':\n                return len\n            case 'utf8':\n            case 'utf-8':\n            case undefined:\n                return utf8ToBytes(string).length\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n                return len * 2\n            case 'hex':\n                return len >>> 1\n            case 'base64':\n                return base64ToBytes(string).length\n            default:\n                if (loweredCase) return utf8ToBytes(string).length // assume utf8\n                encoding = ('' + encoding).toLowerCase()\n                loweredCase = true\n        }\n    }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString(encoding, start, end) {\n    var loweredCase = false\n\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n    if (start === undefined || start < 0) {\n        start = 0\n    }\n    // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n    if (start > this.length) {\n        return ''\n    }\n\n    if (end === undefined || end > this.length) {\n        end = this.length\n    }\n\n    if (end <= 0) {\n        return ''\n    }\n\n    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n    end >>>= 0\n    start >>>= 0\n\n    if (end <= start) {\n        return ''\n    }\n\n    if (!encoding) encoding = 'utf8'\n\n    while (true) {\n        switch (encoding) {\n            case 'hex':\n                return hexSlice(this, start, end)\n\n            case 'utf8':\n            case 'utf-8':\n                return utf8Slice(this, start, end)\n\n            case 'ascii':\n                return asciiSlice(this, start, end)\n\n            case 'latin1':\n            case 'binary':\n                return latin1Slice(this, start, end)\n\n            case 'base64':\n                return base64Slice(this, start, end)\n\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n                return utf16leSlice(this, start, end)\n\n            default:\n                if (loweredCase)\n                    throw new TypeError('Unknown encoding: ' + encoding)\n                encoding = (encoding + '').toLowerCase()\n                loweredCase = true\n        }\n    }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap(b, n, m) {\n    var i = b[n]\n    b[n] = b[m]\n    b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16() {\n    var len = this.length\n    if (len % 2 !== 0) {\n        throw new RangeError('Buffer size must be a multiple of 16-bits')\n    }\n    for (var i = 0; i < len; i += 2) {\n        swap(this, i, i + 1)\n    }\n    return this\n}\n\nBuffer.prototype.swap32 = function swap32() {\n    var len = this.length\n    if (len % 4 !== 0) {\n        throw new RangeError('Buffer size must be a multiple of 32-bits')\n    }\n    for (var i = 0; i < len; i += 4) {\n        swap(this, i, i + 3)\n        swap(this, i + 1, i + 2)\n    }\n    return this\n}\n\nBuffer.prototype.swap64 = function swap64() {\n    var len = this.length\n    if (len % 8 !== 0) {\n        throw new RangeError('Buffer size must be a multiple of 64-bits')\n    }\n    for (var i = 0; i < len; i += 8) {\n        swap(this, i, i + 7)\n        swap(this, i + 1, i + 6)\n        swap(this, i + 2, i + 5)\n        swap(this, i + 3, i + 4)\n    }\n    return this\n}\n\nBuffer.prototype.toString = function toString() {\n    var length = this.length | 0\n    if (length === 0) return ''\n    if (arguments.length === 0) return utf8Slice(this, 0, length)\n    return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals(b) {\n    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n    if (this === b) return true\n    return Buffer.compare(this, b) === 0\n}\n\n\nBuffer.prototype.compare = function compare(\n    target,\n    start,\n    end,\n    thisStart,\n    thisEnd,\n) {\n    if (!internalIsBuffer(target)) {\n        throw new TypeError('Argument must be a Buffer')\n    }\n\n    if (start === undefined) {\n        start = 0\n    }\n    if (end === undefined) {\n        end = target ? target.length : 0\n    }\n    if (thisStart === undefined) {\n        thisStart = 0\n    }\n    if (thisEnd === undefined) {\n        thisEnd = this.length\n    }\n\n    if (\n        start < 0 ||\n        end > target.length ||\n        thisStart < 0 ||\n        thisEnd > this.length\n    ) {\n        throw new RangeError('out of range index')\n    }\n\n    if (thisStart >= thisEnd && start >= end) {\n        return 0\n    }\n    if (thisStart >= thisEnd) {\n        return -1\n    }\n    if (start >= end) {\n        return 1\n    }\n\n    start >>>= 0\n    end >>>= 0\n    thisStart >>>= 0\n    thisEnd >>>= 0\n\n    if (this === target) return 0\n\n    var x = thisEnd - thisStart\n    var y = end - start\n    var len = Math.min(x, y)\n\n    var thisCopy = this.slice(thisStart, thisEnd)\n    var targetCopy = target.slice(start, end)\n\n    for (var i = 0; i < len; ++i) {\n        if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i]\n            y = targetCopy[i]\n            break\n        }\n    }\n\n    if (x < y) return -1\n    if (y < x) return 1\n    return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer.length === 0) return -1\n\n    // Normalize byteOffset\n    if (typeof byteOffset === 'string') {\n        encoding = byteOffset\n        byteOffset = 0\n    } else if (byteOffset > 0x7fffffff) {\n        byteOffset = 0x7fffffff\n    } else if (byteOffset < -0x80000000) {\n        byteOffset = -0x80000000\n    }\n    byteOffset = +byteOffset // Coerce to Number.\n    if (isNaN(byteOffset)) {\n        // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n        byteOffset = dir ? 0 : buffer.length - 1\n    }\n\n    // Normalize byteOffset: negative offsets start from the end of the buffer\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n    if (byteOffset >= buffer.length) {\n        if (dir) return -1\n        else byteOffset = buffer.length - 1\n    } else if (byteOffset < 0) {\n        if (dir) byteOffset = 0\n        else return -1\n    }\n\n    // Normalize val\n    if (typeof val === 'string') {\n        val = Buffer.from(val, encoding)\n    }\n\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\n    if (internalIsBuffer(val)) {\n        // Special case: looking for empty string/buffer always fails\n        if (val.length === 0) {\n            return -1\n        }\n        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n    } else if (typeof val === 'number') {\n        val = val & 0xff // Search for a byte value [0-255]\n        if (\n            Buffer.TYPED_ARRAY_SUPPORT &&\n            typeof Uint8Array.prototype.indexOf === 'function'\n        ) {\n            if (dir) {\n                return Uint8Array.prototype.indexOf.call(\n                    buffer,\n                    val,\n                    byteOffset,\n                )\n            } else {\n                return Uint8Array.prototype.lastIndexOf.call(\n                    buffer,\n                    val,\n                    byteOffset,\n                )\n            }\n        }\n        return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n    }\n\n    throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n    var indexSize = 1\n    var arrLength = arr.length\n    var valLength = val.length\n\n    if (encoding !== undefined) {\n        encoding = String(encoding).toLowerCase()\n        if (\n            encoding === 'ucs2' ||\n            encoding === 'ucs-2' ||\n            encoding === 'utf16le' ||\n            encoding === 'utf-16le'\n        ) {\n            if (arr.length < 2 || val.length < 2) {\n                return -1\n            }\n            indexSize = 2\n            arrLength /= 2\n            valLength /= 2\n            byteOffset /= 2\n        }\n    }\n\n    function read(buf, i) {\n        if (indexSize === 1) {\n            return buf[i]\n        } else {\n            return buf.readUInt16BE(i * indexSize)\n        }\n    }\n\n    var i\n    if (dir) {\n        var foundIndex = -1\n        for (i = byteOffset; i < arrLength; i++) {\n            if (\n                read(arr, i) ===\n                read(val, foundIndex === -1 ? 0 : i - foundIndex)\n            ) {\n                if (foundIndex === -1) foundIndex = i\n                if (i - foundIndex + 1 === valLength)\n                    return foundIndex * indexSize\n            } else {\n                if (foundIndex !== -1) i -= i - foundIndex\n                foundIndex = -1\n            }\n        }\n    } else {\n        if (byteOffset + valLength > arrLength)\n            byteOffset = arrLength - valLength\n        for (i = byteOffset; i >= 0; i--) {\n            var found = true\n            for (var j = 0; j < valLength; j++) {\n                if (read(arr, i + j) !== read(val, j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return i\n        }\n    }\n\n    return -1\n}\n\nBuffer.prototype.includes = function includes(val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite(buf, string, offset, length) {\n    offset = Number(offset) || 0\n    var remaining = buf.length - offset\n    if (!length) {\n        length = remaining\n    } else {\n        length = Number(length)\n        if (length > remaining) {\n            length = remaining\n        }\n    }\n\n    // must be an even number of digits\n    var strLen = string.length\n    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n    if (length > strLen / 2) {\n        length = strLen / 2\n    }\n    for (var i = 0; i < length; ++i) {\n        var parsed = parseInt(string.substr(i * 2, 2), 16)\n        if (isNaN(parsed)) return i\n        buf[offset + i] = parsed\n    }\n    return i\n}\n\nfunction utf8Write(buf, string, offset, length) {\n    return blitBuffer(\n        utf8ToBytes(string, buf.length - offset),\n        buf,\n        offset,\n        length,\n    )\n}\n\nfunction asciiWrite(buf, string, offset, length) {\n    return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write(buf, string, offset, length) {\n    return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write(buf, string, offset, length) {\n    return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write(buf, string, offset, length) {\n    return blitBuffer(\n        utf16leToBytes(string, buf.length - offset),\n        buf,\n        offset,\n        length,\n    )\n}\n\nBuffer.prototype.write = function write(string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n        encoding = 'utf8'\n        length = this.length\n        offset = 0\n        // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === 'string') {\n        encoding = offset\n        length = this.length\n        offset = 0\n        // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n        offset = offset | 0\n        if (isFinite(length)) {\n            length = length | 0\n            if (encoding === undefined) encoding = 'utf8'\n        } else {\n            encoding = length\n            length = undefined\n        }\n        // legacy write(string, encoding, offset, length) - remove in v0.13\n    } else {\n        throw new Error(\n            'Buffer.write(string, encoding, offset[, length]) is no longer supported',\n        )\n    }\n\n    var remaining = this.length - offset\n    if (length === undefined || length > remaining) length = remaining\n\n    if (\n        (string.length > 0 && (length < 0 || offset < 0)) ||\n        offset > this.length\n    ) {\n        throw new RangeError('Attempt to write outside buffer bounds')\n    }\n\n    if (!encoding) encoding = 'utf8'\n\n    var loweredCase = false\n    for (;;) {\n        switch (encoding) {\n            case 'hex':\n                return hexWrite(this, string, offset, length)\n\n            case 'utf8':\n            case 'utf-8':\n                return utf8Write(this, string, offset, length)\n\n            case 'ascii':\n                return asciiWrite(this, string, offset, length)\n\n            case 'latin1':\n            case 'binary':\n                return latin1Write(this, string, offset, length)\n\n            case 'base64':\n                // Warning: maxLength not taken into account in base64Write\n                return base64Write(this, string, offset, length)\n\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n                return ucs2Write(this, string, offset, length)\n\n            default:\n                if (loweredCase)\n                    throw new TypeError('Unknown encoding: ' + encoding)\n                encoding = ('' + encoding).toLowerCase()\n                loweredCase = true\n        }\n    }\n}\n\nBuffer.prototype.toJSON = function toJSON() {\n    return {\n        type: 'Buffer',\n        data: Array.prototype.slice.call(this._arr || this, 0),\n    }\n}\n\nfunction base64Slice(buf, start, end) {\n    if (start === 0 && end === buf.length) {\n        return base64fromByteArray(buf)\n    } else {\n        return base64fromByteArray(buf.slice(start, end))\n    }\n}\n\nfunction utf8Slice(buf, start, end) {\n    end = Math.min(buf.length, end)\n    var res = []\n\n    var i = start\n    while (i < end) {\n        var firstByte = buf[i]\n        var codePoint = null\n        var bytesPerSequence =\n            firstByte > 0xef\n                ? 4\n                : firstByte > 0xdf\n                ? 3\n                : firstByte > 0xbf\n                ? 2\n                : 1\n\n        if (i + bytesPerSequence <= end) {\n            var secondByte, thirdByte, fourthByte, tempCodePoint\n\n            switch (bytesPerSequence) {\n                case 1:\n                    if (firstByte < 0x80) {\n                        codePoint = firstByte\n                    }\n                    break\n                case 2:\n                    secondByte = buf[i + 1]\n                    if ((secondByte & 0xc0) === 0x80) {\n                        tempCodePoint =\n                            ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f)\n                        if (tempCodePoint > 0x7f) {\n                            codePoint = tempCodePoint\n                        }\n                    }\n                    break\n                case 3:\n                    secondByte = buf[i + 1]\n                    thirdByte = buf[i + 2]\n                    if (\n                        (secondByte & 0xc0) === 0x80 &&\n                        (thirdByte & 0xc0) === 0x80\n                    ) {\n                        tempCodePoint =\n                            ((firstByte & 0xf) << 0xc) |\n                            ((secondByte & 0x3f) << 0x6) |\n                            (thirdByte & 0x3f)\n                        if (\n                            tempCodePoint > 0x7ff &&\n                            (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)\n                        ) {\n                            codePoint = tempCodePoint\n                        }\n                    }\n                    break\n                case 4:\n                    secondByte = buf[i + 1]\n                    thirdByte = buf[i + 2]\n                    fourthByte = buf[i + 3]\n                    if (\n                        (secondByte & 0xc0) === 0x80 &&\n                        (thirdByte & 0xc0) === 0x80 &&\n                        (fourthByte & 0xc0) === 0x80\n                    ) {\n                        tempCodePoint =\n                            ((firstByte & 0xf) << 0x12) |\n                            ((secondByte & 0x3f) << 0xc) |\n                            ((thirdByte & 0x3f) << 0x6) |\n                            (fourthByte & 0x3f)\n                        if (\n                            tempCodePoint > 0xffff &&\n                            tempCodePoint < 0x110000\n                        ) {\n                            codePoint = tempCodePoint\n                        }\n                    }\n            }\n        }\n\n        if (codePoint === null) {\n            // we did not generate a valid codePoint so insert a\n            // replacement char (U+FFFD) and advance only 1 byte\n            codePoint = 0xfffd\n            bytesPerSequence = 1\n        } else if (codePoint > 0xffff) {\n            // encode to utf16 (surrogate pair dance)\n            codePoint -= 0x10000\n            res.push(((codePoint >>> 10) & 0x3ff) | 0xd800)\n            codePoint = 0xdc00 | (codePoint & 0x3ff)\n        }\n\n        res.push(codePoint)\n        i += bytesPerSequence\n    }\n\n    return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray(codePoints) {\n    var len = codePoints.length\n    if (len <= MAX_ARGUMENTS_LENGTH) {\n        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n    }\n\n    // Decode in chunks to avoid \"call stack size exceeded\".\n    var res = ''\n    var i = 0\n    while (i < len) {\n        res += String.fromCharCode.apply(\n            String,\n            codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH)),\n        )\n    }\n    return res\n}\n\nfunction asciiSlice(buf, start, end) {\n    var ret = ''\n    end = Math.min(buf.length, end)\n\n    for (var i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i] & 0x7f)\n    }\n    return ret\n}\n\nfunction latin1Slice(buf, start, end) {\n    var ret = ''\n    end = Math.min(buf.length, end)\n\n    for (var i = start; i < end; ++i) {\n        ret += String.fromCharCode(buf[i])\n    }\n    return ret\n}\n\nfunction hexSlice(buf, start, end) {\n    var len = buf.length\n\n    if (!start || start < 0) start = 0\n    if (!end || end < 0 || end > len) end = len\n\n    var out = ''\n    for (var i = start; i < end; ++i) {\n        out += toHex(buf[i])\n    }\n    return out\n}\n\nfunction utf16leSlice(buf, start, end) {\n    var bytes = buf.slice(start, end)\n    var res = ''\n    for (var i = 0; i < bytes.length; i += 2) {\n        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n    }\n    return res\n}\n\nBuffer.prototype.slice = function slice(start, end) {\n    var len = this.length\n    start = ~~start\n    end = end === undefined ? len : ~~end\n\n    if (start < 0) {\n        start += len\n        if (start < 0) start = 0\n    } else if (start > len) {\n        start = len\n    }\n\n    if (end < 0) {\n        end += len\n        if (end < 0) end = 0\n    } else if (end > len) {\n        end = len\n    }\n\n    if (end < start) end = start\n\n    var newBuf\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        newBuf = this.subarray(start, end)\n        newBuf.__proto__ = Buffer.prototype\n    } else {\n        var sliceLen = end - start\n        newBuf = new Buffer(sliceLen, undefined)\n        for (var i = 0; i < sliceLen; ++i) {\n            newBuf[i] = this[i + start]\n        }\n    }\n\n    return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset(offset, ext, length) {\n    if (offset % 1 !== 0 || offset < 0)\n        throw new RangeError('offset is not uint')\n    if (offset + ext > length)\n        throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE(\n    offset,\n    byteLength,\n    noAssert,\n) {\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n    var val = this[offset]\n    var mul = 1\n    var i = 0\n    while (++i < byteLength && (mul *= 0x100)) {\n        val += this[offset + i] * mul\n    }\n\n    return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE(\n    offset,\n    byteLength,\n    noAssert,\n) {\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) {\n        checkOffset(offset, byteLength, this.length)\n    }\n\n    var val = this[offset + --byteLength]\n    var mul = 1\n    while (byteLength > 0 && (mul *= 0x100)) {\n        val += this[offset + --byteLength] * mul\n    }\n\n    return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length)\n    return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length)\n    return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length)\n    return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n\n    return (\n        (this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) +\n        this[offset + 3] * 0x1000000\n    )\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n\n    return (\n        this[offset] * 0x1000000 +\n        ((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3])\n    )\n}\n\nBuffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n    var val = this[offset]\n    var mul = 1\n    var i = 0\n    while (++i < byteLength && (mul *= 0x100)) {\n        val += this[offset + i] * mul\n    }\n    mul *= 0x80\n\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n    return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n    var i = byteLength\n    var mul = 1\n    var val = this[offset + --i]\n    while (i > 0 && (mul *= 0x100)) {\n        val += this[offset + --i] * mul\n    }\n    mul *= 0x80\n\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n    return val\n}\n\nBuffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length)\n    if (!(this[offset] & 0x80)) return this[offset]\n    return (0xff - this[offset] + 1) * -1\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length)\n    var val = this[offset] | (this[offset + 1] << 8)\n    return val & 0x8000 ? val | 0xffff0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length)\n    var val = this[offset + 1] | (this[offset] << 8)\n    return val & 0x8000 ? val | 0xffff0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n\n    return (\n        this[offset] |\n        (this[offset + 1] << 8) |\n        (this[offset + 2] << 16) |\n        (this[offset + 3] << 24)\n    )\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n\n    return (\n        (this[offset] << 24) |\n        (this[offset + 1] << 16) |\n        (this[offset + 2] << 8) |\n        this[offset + 3]\n    )\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n    return ieee754read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length)\n    return ieee754read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length)\n    return ieee754read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length)\n    return ieee754read(this, offset, false, 52, 8)\n}\n\nfunction checkInt(buf, value, offset, ext, max, min) {\n    if (!internalIsBuffer(buf))\n        throw new TypeError('\"buffer\" argument must be a Buffer instance')\n    if (value > max || value < min)\n        throw new RangeError('\"value\" argument is out of bounds')\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE(\n    value,\n    offset,\n    byteLength,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength) - 1\n        checkInt(this, value, offset, byteLength, maxBytes, 0)\n    }\n\n    var mul = 1\n    var i = 0\n    this[offset] = value & 0xff\n    while (++i < byteLength && (mul *= 0x100)) {\n        this[offset + i] = (value / mul) & 0xff\n    }\n\n    return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE(\n    value,\n    offset,\n    byteLength,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    byteLength = byteLength | 0\n    if (!noAssert) {\n        var maxBytes = Math.pow(2, 8 * byteLength) - 1\n        checkInt(this, value, offset, byteLength, maxBytes, 0)\n    }\n\n    var i = byteLength - 1\n    var mul = 1\n    this[offset + i] = value & 0xff\n    while (--i >= 0 && (mul *= 0x100)) {\n        this[offset + i] = (value / mul) & 0xff\n    }\n\n    return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n    this[offset] = value & 0xff\n    return offset + 1\n}\n\nfunction objectWriteUInt16(buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffff + value + 1\n    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n        buf[offset + i] =\n            (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n            ((littleEndian ? i : 1 - i) * 8)\n    }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE(\n    value,\n    offset,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value & 0xff\n        this[offset + 1] = value >>> 8\n    } else {\n        objectWriteUInt16(this, value, offset, true)\n    }\n    return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE(\n    value,\n    offset,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value >>> 8\n        this[offset + 1] = value & 0xff\n    } else {\n        objectWriteUInt16(this, value, offset, false)\n    }\n    return offset + 2\n}\n\nfunction objectWriteUInt32(buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffffffff + value + 1\n    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n        buf[offset + i] = (value >>> ((littleEndian ? i : 3 - i) * 8)) & 0xff\n    }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE(\n    value,\n    offset,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset + 3] = value >>> 24\n        this[offset + 2] = value >>> 16\n        this[offset + 1] = value >>> 8\n        this[offset] = value & 0xff\n    } else {\n        objectWriteUInt32(this, value, offset, true)\n    }\n    return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE(\n    value,\n    offset,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value >>> 24\n        this[offset + 1] = value >>> 16\n        this[offset + 2] = value >>> 8\n        this[offset + 3] = value & 0xff\n    } else {\n        objectWriteUInt32(this, value, offset, false)\n    }\n    return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE(\n    value,\n    offset,\n    byteLength,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength - 1)\n\n        checkInt(this, value, offset, byteLength, limit - 1, -limit)\n    }\n\n    var i = 0\n    var mul = 1\n    var sub = 0\n    this[offset] = value & 0xff\n    while (++i < byteLength && (mul *= 0x100)) {\n        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1\n        }\n        this[offset + i] = (((value / mul) >> 0) - sub) & 0xff\n    }\n\n    return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE(\n    value,\n    offset,\n    byteLength,\n    noAssert,\n) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) {\n        var limit = Math.pow(2, 8 * byteLength - 1)\n\n        checkInt(this, value, offset, byteLength, limit - 1, -limit)\n    }\n\n    var i = byteLength - 1\n    var mul = 1\n    var sub = 0\n    this[offset + i] = value & 0xff\n    while (--i >= 0 && (mul *= 0x100)) {\n        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1\n        }\n        this[offset + i] = (((value / mul) >> 0) - sub) & 0xff\n    }\n\n    return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n    if (value < 0) value = 0xff + value + 1\n    this[offset] = value & 0xff\n    return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value & 0xff\n        this[offset + 1] = value >>> 8\n    } else {\n        objectWriteUInt16(this, value, offset, true)\n    }\n    return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value >>> 8\n        this[offset + 1] = value & 0xff\n    } else {\n        objectWriteUInt16(this, value, offset, false)\n    }\n    return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value & 0xff\n        this[offset + 1] = value >>> 8\n        this[offset + 2] = value >>> 16\n        this[offset + 3] = value >>> 24\n    } else {\n        objectWriteUInt32(this, value, offset, true)\n    }\n    return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n    value = +value\n    offset = offset | 0\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n    if (value < 0) value = 0xffffffff + value + 1\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n        this[offset] = value >>> 24\n        this[offset + 1] = value >>> 16\n        this[offset + 2] = value >>> 8\n        this[offset + 3] = value & 0xff\n    } else {\n        objectWriteUInt32(this, value, offset, false)\n    }\n    return offset + 4\n}\n\nfunction checkIEEE754(buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\n    if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat(buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n        checkIEEE754(\n            buf,\n            value,\n            offset,\n            4,\n            3.4028234663852886e38,\n            -3.4028234663852886e38,\n        )\n    }\n    ieee754write(buf, value, offset, littleEndian, 23, 4)\n    return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n    return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble(buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n        checkIEEE754(\n            buf,\n            value,\n            offset,\n            8,\n            1.7976931348623157e308,\n            -1.7976931348623157e308,\n        )\n    }\n    ieee754write(buf, value, offset, littleEndian, 52, 8)\n    return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE(\n    value,\n    offset,\n    noAssert,\n) {\n    return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE(\n    value,\n    offset,\n    noAssert,\n) {\n    return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy(target, targetStart, start, end) {\n    if (!start) start = 0\n    if (!end && end !== 0) end = this.length\n    if (targetStart >= target.length) targetStart = target.length\n    if (!targetStart) targetStart = 0\n    if (end > 0 && end < start) end = start\n\n    // Copy 0 bytes; we're done\n    if (end === start) return 0\n    if (target.length === 0 || this.length === 0) return 0\n\n    // Fatal error conditions\n    if (targetStart < 0) {\n        throw new RangeError('targetStart out of bounds')\n    }\n    if (start < 0 || start >= this.length)\n        throw new RangeError('sourceStart out of bounds')\n    if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n    // Are we oob?\n    if (end > this.length) end = this.length\n    if (target.length - targetStart < end - start) {\n        end = target.length - targetStart + start\n    }\n\n    var len = end - start\n    var i\n\n    if (this === target && start < targetStart && targetStart < end) {\n        // descending copy from end\n        for (i = len - 1; i >= 0; --i) {\n            target[i + targetStart] = this[i + start]\n        }\n    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n        // ascending copy from start\n        for (i = 0; i < len; ++i) {\n            target[i + targetStart] = this[i + start]\n        }\n    } else {\n        Uint8Array.prototype.set.call(\n            target,\n            this.subarray(start, start + len),\n            targetStart,\n        )\n    }\n\n    return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill(val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === 'string') {\n        if (typeof start === 'string') {\n            encoding = start\n            start = 0\n            end = this.length\n        } else if (typeof end === 'string') {\n            encoding = end\n            end = this.length\n        }\n        if (val.length === 1) {\n            var code = val.charCodeAt(0)\n            if (code < 256) {\n                val = code\n            }\n        }\n        if (encoding !== undefined && typeof encoding !== 'string') {\n            throw new TypeError('encoding must be a string')\n        }\n        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n            throw new TypeError('Unknown encoding: ' + encoding)\n        }\n    } else if (typeof val === 'number') {\n        val = val & 255\n    }\n\n    // Invalid ranges are not set to a default, so can range check early.\n    if (start < 0 || this.length < start || this.length < end) {\n        throw new RangeError('Out of range index')\n    }\n\n    if (end <= start) {\n        return this\n    }\n\n    start = start >>> 0\n    end = end === undefined ? this.length : end >>> 0\n\n    if (!val) val = 0\n\n    var i\n    if (typeof val === 'number') {\n        for (i = start; i < end; ++i) {\n            this[i] = val\n        }\n    } else {\n        var bytes = internalIsBuffer(val)\n            ? val\n            : utf8ToBytes(new Buffer(val, encoding).toString())\n        var len = bytes.length\n        for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes[i % len]\n        }\n    }\n\n    return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean(str) {\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n    // Node converts strings with length < 2 to ''\n    if (str.length < 2) return ''\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n    while (str.length % 4 !== 0) {\n        str = str + '='\n    }\n    return str\n}\n\nfunction stringtrim(str) {\n    if (str.trim) return str.trim()\n    return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex(n) {\n    if (n < 16) return '0' + n.toString(16)\n    return n.toString(16)\n}\n\nfunction utf8ToBytes(string, units) {\n    units = units || Infinity\n    var codePoint\n    var length = string.length\n    var leadSurrogate = null\n    var bytes = []\n\n    for (var i = 0; i < length; ++i) {\n        codePoint = string.charCodeAt(i)\n\n        // is surrogate component\n        if (codePoint > 0xd7ff && codePoint < 0xe000) {\n            // last char was a lead\n            if (!leadSurrogate) {\n                // no lead yet\n                if (codePoint > 0xdbff) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)\n                    continue\n                } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)\n                    continue\n                }\n\n                // valid lead\n                leadSurrogate = codePoint\n\n                continue\n            }\n\n            // 2 leads in a row\n            if (codePoint < 0xdc00) {\n                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)\n                leadSurrogate = codePoint\n                continue\n            }\n\n            // valid surrogate pair\n            codePoint =\n                (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) +\n                0x10000\n        } else if (leadSurrogate) {\n            // valid bmp char, but last char was a lead\n            if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd)\n        }\n\n        leadSurrogate = null\n\n        // encode utf8\n        if (codePoint < 0x80) {\n            if ((units -= 1) < 0) break\n            bytes.push(codePoint)\n        } else if (codePoint < 0x800) {\n            if ((units -= 2) < 0) break\n            bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80)\n        } else if (codePoint < 0x10000) {\n            if ((units -= 3) < 0) break\n            bytes.push(\n                (codePoint >> 0xc) | 0xe0,\n                ((codePoint >> 0x6) & 0x3f) | 0x80,\n                (codePoint & 0x3f) | 0x80,\n            )\n        } else if (codePoint < 0x110000) {\n            if ((units -= 4) < 0) break\n            bytes.push(\n                (codePoint >> 0x12) | 0xf0,\n                ((codePoint >> 0xc) & 0x3f) | 0x80,\n                ((codePoint >> 0x6) & 0x3f) | 0x80,\n                (codePoint & 0x3f) | 0x80,\n            )\n        } else {\n            throw new Error('Invalid code point')\n        }\n    }\n\n    return bytes\n}\n\nfunction asciiToBytes(str) {\n    var byteArray = []\n    for (var i = 0; i < str.length; ++i) {\n        // Node's code seems to be doing this and not & 0x7F..\n        byteArray.push(str.charCodeAt(i) & 0xff)\n    }\n    return byteArray\n}\n\nfunction utf16leToBytes(str, units) {\n    var c, hi, lo\n    var byteArray = []\n    for (var i = 0; i < str.length; ++i) {\n        if ((units -= 2) < 0) break\n\n        c = str.charCodeAt(i)\n        hi = c >> 8\n        lo = c % 256\n        byteArray.push(lo)\n        byteArray.push(hi)\n    }\n\n    return byteArray\n}\n\nfunction base64ToBytes(str) {\n    return base64toByteArray(base64clean(str))\n}\n\nfunction blitBuffer(src, dst, offset, length) {\n    for (var i = 0; i < length; ++i) {\n        if (i + offset >= dst.length || i >= src.length) break\n        dst[i + offset] = src[i]\n    }\n    return i\n}\n\nfunction isnan(val) {\n    return val !== val // eslint-disable-line no-self-compare\n}\n\n// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nfunction isBuffer(obj) {\n    return (\n        obj != null &&\n        (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n    )\n}\n\nfunction isFastBuffer(obj) {\n    return (\n        !!obj.constructor &&\n        typeof obj.constructor.isBuffer === 'function' &&\n        obj.constructor.isBuffer(obj)\n    )\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer(obj) {\n    return (\n        typeof obj.readFloatLE === 'function' &&\n        typeof obj.slice === 'function' &&\n        isFastBuffer(obj.slice(0, 0))\n    )\n}\n\nfunction ieee754read(buffer, offset, isLE, mLen, nBytes) {\n    var e, m\n    var eLen = nBytes * 8 - mLen - 1\n    var eMax = (1 << eLen) - 1\n    var eBias = eMax >> 1\n    var nBits = -7\n    var i = isLE ? nBytes - 1 : 0\n    var d = isLE ? -1 : 1\n    var s = buffer[offset + i]\n\n    i += d\n\n    e = s & ((1 << -nBits) - 1)\n    s >>= -nBits\n    nBits += eLen\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n    m = e & ((1 << -nBits) - 1)\n    e >>= -nBits\n    nBits += mLen\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n    if (e === 0) {\n        e = 1 - eBias\n    } else if (e === eMax) {\n        return m ? NaN : (s ? -1 : 1) * Infinity\n    } else {\n        m = m + Math.pow(2, mLen)\n        e = e - eBias\n    }\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nfunction ieee754write(buffer, value, offset, isLE, mLen, nBytes) {\n    var e, m, c\n    var eLen = nBytes * 8 - mLen - 1\n    var eMax = (1 << eLen) - 1\n    var eBias = eMax >> 1\n    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0\n    var i = isLE ? 0 : nBytes - 1\n    var d = isLE ? 1 : -1\n    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n    value = Math.abs(value)\n\n    if (isNaN(value) || value === Infinity) {\n        m = isNaN(value) ? 1 : 0\n        e = eMax\n    } else {\n        e = Math.floor(Math.log(value) / Math.LN2)\n        if (value * (c = Math.pow(2, -e)) < 1) {\n            e--\n            c *= 2\n        }\n        if (e + eBias >= 1) {\n            value += rt / c\n        } else {\n            value += rt * Math.pow(2, 1 - eBias)\n        }\n        if (value * c >= 2) {\n            e++\n            c /= 2\n        }\n\n        if (e + eBias >= eMax) {\n            m = 0\n            e = eMax\n        } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen)\n            e = e + eBias\n        } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n            e = 0\n        }\n    }\n\n    for (\n        ;\n        mLen >= 8;\n        buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8\n    ) {}\n\n    e = (e << mLen) | m\n    eLen += mLen\n    for (\n        ;\n        eLen > 0;\n        buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8\n    ) {}\n\n    buffer[offset + i - d] |= s * 128\n}\n", "export { Buffer } from '_node-buffer-polyfill_.js'\n", "'use strict';\n\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nexport default EventEmitter;\nexport {EventEmitter};\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var needDomainExit = false;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er)\n        er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  if (needDomainExit)\n    domain.exit();\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] :\n                                          [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n                            existing.length + ' ' + type + ' listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || (list.listener && list.listener === listener)) {\n        if (--this._eventsCount === 0)\n          this._events = new EventHandlers();\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length; i-- > 0;) {\n          if (list[i] === listener ||\n              (list[i].listener && list[i].listener === listener)) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (list.length === 1) {\n          list[0] = undefined;\n          if (--this._eventsCount === 0) {\n            this._events = new EventHandlers();\n            return this;\n          } else {\n            delete events[type];\n          }\n        } else {\n          spliceOne(list, position);\n        }\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        for (var i = 0, key; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = new EventHandlers();\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        do {\n          this.removeListener(type, listeners[listeners.length - 1]);\n        } while (listeners[0]);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n\n  if (!events)\n    ret = [];\n  else {\n    evlistener = events[type];\n    if (!evlistener)\n      ret = [];\n    else if (typeof evlistener === 'function')\n      ret = [evlistener.listener || evlistener];\n    else\n      ret = unwrapListeners(evlistener);\n  }\n\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n", "\nconst polyfill = require('events')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", "module.exports = require('events').EventEmitter;\n", "var lookup = [];\nvar revLookup = [];\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\nvar inited = false;\nfunction init () {\n  inited = true;\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62;\n  revLookup['_'.charCodeAt(0)] = 63;\n}\n\nfunction toByteArray (b64) {\n  if (!inited) {\n    init();\n  }\n  var i, j, l, tmp, placeHolders, arr;\n  var len = b64.length;\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders);\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len;\n\n  var L = 0;\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];\n    arr[L++] = (tmp >> 16) & 0xFF;\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);\n    arr[L++] = tmp & 0xFF;\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);\n    arr[L++] = (tmp >> 8) & 0xFF;\n    arr[L++] = tmp & 0xFF;\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp;\n  var output = [];\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);\n    output.push(tripletToBase64(tmp));\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  if (!inited) {\n    init();\n  }\n  var tmp;\n  var len = uint8.length;\n  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n  var output = '';\n  var parts = [];\n  var maxChunkLength = 16383; // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1];\n    output += lookup[tmp >> 2];\n    output += lookup[(tmp << 4) & 0x3F];\n    output += '==';\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);\n    output += lookup[tmp >> 10];\n    output += lookup[(tmp >> 4) & 0x3F];\n    output += lookup[(tmp << 2) & 0x3F];\n    output += '=';\n  }\n\n  parts.push(output);\n\n  return parts.join('')\n}\n\nfunction read (buffer, offset, isLE, mLen, nBytes) {\n  var e, m;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = -7;\n  var i = isLE ? (nBytes - 1) : 0;\n  var d = isLE ? -1 : 1;\n  var s = buffer[offset + i];\n\n  i += d;\n\n  e = s & ((1 << (-nBits)) - 1);\n  s >>= (-nBits);\n  nBits += eLen;\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1);\n  e >>= (-nBits);\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen);\n    e = e - eBias;\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nfunction write (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c;\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);\n  var i = isLE ? 0 : (nBytes - 1);\n  var d = isLE ? 1 : -1;\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n  value = Math.abs(value);\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0;\n    e = eMax;\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2);\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * Math.pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n      e = 0;\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128;\n}\n\nvar toString = {}.toString;\n\nvar isArray = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar INSPECT_MAX_BYTES = 50;\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : true;\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nvar _kMaxLength = kMaxLength();\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length);\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length);\n    }\n    that.length = length;\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192; // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype;\n  return arr\n};\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n};\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype;\n  Buffer.__proto__ = Uint8Array;\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size);\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n};\n\nfunction allocUnsafe (that, size) {\n  assertSize(size);\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0;\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n};\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n};\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8';\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0;\n  that = createBuffer(that, length);\n\n  var actual = that.write(string, encoding);\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual);\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0;\n  that = createBuffer(that, length);\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255;\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array);\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset);\n  } else {\n    array = new Uint8Array(array, byteOffset, length);\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array;\n    that.__proto__ = Buffer.prototype;\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array);\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (internalIsBuffer(obj)) {\n    var len = checked(obj.length) | 0;\n    that = createBuffer(that, len);\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len);\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0;\n  }\n  return Buffer.alloc(+length)\n}\nBuffer.isBuffer = isBuffer;\nfunction internalIsBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length;\n  var y = b.length;\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i];\n      y = b[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n};\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i;\n  if (length === undefined) {\n    length = 0;\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length;\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length);\n  var pos = 0;\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i];\n    if (!internalIsBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos);\n    pos += buf.length;\n  }\n  return buffer\n};\n\nfunction byteLength (string, encoding) {\n  if (internalIsBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string;\n  }\n\n  var len = string.length;\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\nBuffer.byteLength = byteLength;\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false;\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0;\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length;\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0;\n  start >>>= 0;\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase();\n        loweredCase = true;\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true;\n\nfunction swap (b, n, m) {\n  var i = b[n];\n  b[n] = b[m];\n  b[m] = i;\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length;\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1);\n  }\n  return this\n};\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length;\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3);\n    swap(this, i + 1, i + 2);\n  }\n  return this\n};\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length;\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7);\n    swap(this, i + 1, i + 6);\n    swap(this, i + 2, i + 5);\n    swap(this, i + 3, i + 4);\n  }\n  return this\n};\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0;\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n};\n\nBuffer.prototype.equals = function equals (b) {\n  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n};\n\nBuffer.prototype.inspect = function inspect () {\n  var str = '';\n  var max = INSPECT_MAX_BYTES;\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n    if (this.length > max) str += ' ... ';\n  }\n  return '<Buffer ' + str + '>'\n};\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!internalIsBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0;\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0;\n  }\n  if (thisStart === undefined) {\n    thisStart = 0;\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length;\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0;\n  end >>>= 0;\n  thisStart >>>= 0;\n  thisEnd >>>= 0;\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart;\n  var y = end - start;\n  var len = Math.min(x, y);\n\n  var thisCopy = this.slice(thisStart, thisEnd);\n  var targetCopy = target.slice(start, end);\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i];\n      y = targetCopy[i];\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n};\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset;\n    byteOffset = 0;\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff;\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000;\n  }\n  byteOffset = +byteOffset;  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1);\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1;\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0;\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding);\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (internalIsBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF; // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1;\n  var arrLength = arr.length;\n  var valLength = val.length;\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase();\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2;\n      arrLength /= 2;\n      valLength /= 2;\n      byteOffset /= 2;\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i;\n  if (dir) {\n    var foundIndex = -1;\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i;\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex;\n        foundIndex = -1;\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true;\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false;\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n};\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n};\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n};\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0;\n  var remaining = buf.length - offset;\n  if (!length) {\n    length = remaining;\n  } else {\n    length = Number(length);\n    if (length > remaining) {\n      length = remaining;\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length;\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2;\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16);\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed;\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8';\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset;\n    length = this.length;\n    offset = 0;\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0;\n    if (isFinite(length)) {\n      length = length | 0;\n      if (encoding === undefined) encoding = 'utf8';\n    } else {\n      encoding = length;\n      length = undefined;\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset;\n  if (length === undefined || length > remaining) length = remaining;\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8';\n\n  var loweredCase = false;\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase();\n        loweredCase = true;\n    }\n  }\n};\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n};\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return fromByteArray(buf)\n  } else {\n    return fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end);\n  var res = [];\n\n  var i = start;\n  while (i < end) {\n    var firstByte = buf[i];\n    var codePoint = null;\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1;\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1];\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1];\n          thirdByte = buf[i + 2];\n          fourthByte = buf[i + 3];\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD;\n      bytesPerSequence = 1;\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000;\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n      codePoint = 0xDC00 | codePoint & 0x3FF;\n    }\n\n    res.push(codePoint);\n    i += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000;\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length;\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = '';\n  var i = 0;\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    );\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F);\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = '';\n  end = Math.min(buf.length, end);\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i]);\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length;\n\n  if (!start || start < 0) start = 0;\n  if (!end || end < 0 || end > len) end = len;\n\n  var out = '';\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i]);\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end);\n  var res = '';\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length;\n  start = ~~start;\n  end = end === undefined ? len : ~~end;\n\n  if (start < 0) {\n    start += len;\n    if (start < 0) start = 0;\n  } else if (start > len) {\n    start = len;\n  }\n\n  if (end < 0) {\n    end += len;\n    if (end < 0) end = 0;\n  } else if (end > len) {\n    end = len;\n  }\n\n  if (end < start) end = start;\n\n  var newBuf;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end);\n    newBuf.__proto__ = Buffer.prototype;\n  } else {\n    var sliceLen = end - start;\n    newBuf = new Buffer(sliceLen, undefined);\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start];\n    }\n  }\n\n  return newBuf\n};\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length);\n  }\n\n  var val = this[offset + --byteLength];\n  var mul = 1;\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul;\n  }\n\n  return val\n};\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  return this[offset]\n};\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return this[offset] | (this[offset + 1] << 8)\n};\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  return (this[offset] << 8) | this[offset + 1]\n};\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n};\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n};\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var val = this[offset];\n  var mul = 1;\n  var i = 0;\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n  var i = byteLength;\n  var mul = 1;\n  var val = this[offset + --i];\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul;\n  }\n  mul *= 0x80;\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n  return val\n};\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length);\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n};\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset] | (this[offset + 1] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length);\n  var val = this[offset + 1] | (this[offset] << 8);\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n};\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n};\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n};\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, true, 23, 4)\n};\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length);\n  return read(this, offset, false, 23, 4)\n};\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, true, 52, 8)\n};\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length);\n  return read(this, offset, false, 52, 8)\n};\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var mul = 1;\n  var i = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  byteLength = byteLength | 0;\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n    checkInt(this, value, offset, byteLength, maxBytes, 0);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8;\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1;\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 1] = (value >>> 8);\n    this[offset] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = 0;\n  var mul = 1;\n  var sub = 0;\n  this[offset] = value & 0xFF;\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1);\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit);\n  }\n\n  var i = byteLength - 1;\n  var mul = 1;\n  var sub = 0;\n  this[offset + i] = value & 0xFF;\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1;\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n  }\n\n  return offset + byteLength\n};\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n  if (value < 0) value = 0xff + value + 1;\n  this[offset] = (value & 0xff);\n  return offset + 1\n};\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n  } else {\n    objectWriteUInt16(this, value, offset, true);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8);\n    this[offset + 1] = (value & 0xff);\n  } else {\n    objectWriteUInt16(this, value, offset, false);\n  }\n  return offset + 2\n};\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff);\n    this[offset + 1] = (value >>> 8);\n    this[offset + 2] = (value >>> 16);\n    this[offset + 3] = (value >>> 24);\n  } else {\n    objectWriteUInt32(this, value, offset, true);\n  }\n  return offset + 4\n};\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value;\n  offset = offset | 0;\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n  if (value < 0) value = 0xffffffff + value + 1;\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24);\n    this[offset + 1] = (value >>> 16);\n    this[offset + 2] = (value >>> 8);\n    this[offset + 3] = (value & 0xff);\n  } else {\n    objectWriteUInt32(this, value, offset, false);\n  }\n  return offset + 4\n};\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4);\n  }\n  write(buf, value, offset, littleEndian, 23, 4);\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n};\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8);\n  }\n  write(buf, value, offset, littleEndian, 52, 8);\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n};\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n};\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0;\n  if (!end && end !== 0) end = this.length;\n  if (targetStart >= target.length) targetStart = target.length;\n  if (!targetStart) targetStart = 0;\n  if (end > 0 && end < start) end = start;\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length;\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start;\n  }\n\n  var len = end - start;\n  var i;\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start];\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    );\n  }\n\n  return len\n};\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start;\n      start = 0;\n      end = this.length;\n    } else if (typeof end === 'string') {\n      encoding = end;\n      end = this.length;\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0);\n      if (code < 256) {\n        val = code;\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255;\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0;\n  end = end === undefined ? this.length : end >>> 0;\n\n  if (!val) val = 0;\n\n  var i;\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val;\n    }\n  } else {\n    var bytes = internalIsBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString());\n    var len = bytes.length;\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len];\n    }\n  }\n\n  return this\n};\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '');\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '=';\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint;\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n        leadSurrogate = codePoint;\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n    }\n\n    leadSurrogate = null;\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint);\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      );\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF);\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo;\n  var byteArray = [];\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i);\n    hi = c >> 8;\n    lo = c % 256;\n    byteArray.push(lo);\n    byteArray.push(hi);\n  }\n\n  return byteArray\n}\n\n\nfunction base64ToBytes (str) {\n  return toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i];\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n\n// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nfunction isBuffer(obj) {\n  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n}\n\nfunction isFastBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))\n}\n\nexport { Buffer, INSPECT_MAX_BYTES, SlowBuffer, isBuffer, _kMaxLength as kMaxLength };\n", "\nconst polyfill = require('buffer')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", "// shim for using process in browser\n// based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\nvar cachedSetTimeout = defaultSetTimout;\nvar cachedClearTimeout = defaultClearTimeout;\nif (typeof global.setTimeout === 'function') {\n    cachedSetTimeout = setTimeout;\n}\nif (typeof global.clearTimeout === 'function') {\n    cachedClearTimeout = clearTimeout;\n}\n\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\nfunction nextTick(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n}\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nvar title = 'browser';\nvar platform = 'browser';\nvar browser = true;\nvar env = {};\nvar argv = [];\nvar version = ''; // empty string to avoid regexp issues\nvar versions = {};\nvar release = {};\nvar config = {};\n\nfunction noop() {}\n\nvar on = noop;\nvar addListener = noop;\nvar once = noop;\nvar off = noop;\nvar removeListener = noop;\nvar removeAllListeners = noop;\nvar emit = noop;\n\nfunction binding(name) {\n    throw new Error('process.binding is not supported');\n}\n\nfunction cwd () { return '/' }\nfunction chdir (dir) {\n    throw new Error('process.chdir is not supported');\n}function umask() { return 0; }\n\n// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\nvar performance = global.performance || {};\nvar performanceNow =\n  performance.now        ||\n  performance.mozNow     ||\n  performance.msNow      ||\n  performance.oNow       ||\n  performance.webkitNow  ||\n  function(){ return (new Date()).getTime() };\n\n// generate timestamp or delta\n// see http://nodejs.org/api/process.html#process_process_hrtime\nfunction hrtime(previousTimestamp){\n  var clocktime = performanceNow.call(performance)*1e-3;\n  var seconds = Math.floor(clocktime);\n  var nanoseconds = Math.floor((clocktime%1)*1e9);\n  if (previousTimestamp) {\n    seconds = seconds - previousTimestamp[0];\n    nanoseconds = nanoseconds - previousTimestamp[1];\n    if (nanoseconds<0) {\n      seconds--;\n      nanoseconds += 1e9;\n    }\n  }\n  return [seconds,nanoseconds]\n}\n\nvar startTime = new Date();\nfunction uptime() {\n  var currentTime = new Date();\n  var dif = currentTime - startTime;\n  return dif / 1000;\n}\n\nvar browser$1 = {\n  nextTick: nextTick,\n  title: title,\n  browser: browser,\n  env: env,\n  argv: argv,\n  version: version,\n  versions: versions,\n  on: on,\n  addListener: addListener,\n  once: once,\n  off: off,\n  removeListener: removeListener,\n  removeAllListeners: removeAllListeners,\n  emit: emit,\n  binding: binding,\n  cwd: cwd,\n  chdir: chdir,\n  umask: umask,\n  hrtime: hrtime,\n  platform: platform,\n  release: release,\n  config: config,\n  uptime: uptime\n};\n\nexport default browser$1;\nexport { addListener, argv, binding, browser, chdir, config, cwd, emit, env, hrtime, nextTick, off, on, once, platform, release, removeAllListeners, removeListener, title, umask, uptime, version, versions };\n", "\nvar inherits;\nif (typeof Object.create === 'function'){\n  inherits = function inherits(ctor, superCtor) {\n    // implementation from standard node.js 'util' module\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  inherits = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\nexport default inherits;\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport process from 'process';\nvar formatRegExp = /%[sdj%]/g;\nexport function format(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexport function deprecate(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexport function debuglog(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = 0;\n      debugs[set] = function() {\n        var msg = format.apply(null, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nexport function inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexport function isArray(ar) {\n  return Array.isArray(ar);\n}\n\nexport function isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nexport function isNull(arg) {\n  return arg === null;\n}\n\nexport function isNullOrUndefined(arg) {\n  return arg == null;\n}\n\nexport function isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nexport function isString(arg) {\n  return typeof arg === 'string';\n}\n\nexport function isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\n\nexport function isUndefined(arg) {\n  return arg === void 0;\n}\n\nexport function isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nexport function isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nexport function isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nexport function isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nexport function isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nexport function isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\n\nexport function isBuffer(maybeBuf) {\n  return Buffer.isBuffer(maybeBuf);\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexport function log() {\n  console.log('%s - %s', timestamp(), format.apply(null, arguments));\n}\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nimport inherits from './inherits';\nexport {inherits}\n\nexport function _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nexport default {\n  inherits: inherits,\n  _extend: _extend,\n  log: log,\n  isBuffer: isBuffer,\n  isPrimitive: isPrimitive,\n  isFunction: isFunction,\n  isError: isError,\n  isDate: isDate,\n  isObject: isObject,\n  isRegExp: isRegExp,\n  isUndefined: isUndefined,\n  isSymbol: isSymbol,\n  isString: isString,\n  isNumber: isNumber,\n  isNullOrUndefined: isNullOrUndefined,\n  isNull: isNull,\n  isBoolean: isBoolean,\n  isArray: isArray,\n  inspect: inspect,\n  deprecate: deprecate,\n  format: format,\n  debuglog: debuglog\n}\n", "\nconst polyfill = require('util')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", "'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('util'),\n    inspect = _require2.inspect;\n\nvar custom = inspect && inspect.custom || 'inspect';\n\nfunction copyBuffer(src, target, offset) {\n  Buffer.prototype.copy.call(src, target, offset);\n}\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  _createClass(BufferList, [{\n    key: \"push\",\n    value: function push(v) {\n      var entry = {\n        data: v,\n        next: null\n      };\n      if (this.length > 0) this.tail.next = entry;else this.head = entry;\n      this.tail = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(v) {\n      var entry = {\n        data: v,\n        next: this.head\n      };\n      if (this.length === 0) this.tail = entry;\n      this.head = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) return;\n      var ret = this.head.data;\n      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n      --this.length;\n      return ret;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n  }, {\n    key: \"join\",\n    value: function join(s) {\n      if (this.length === 0) return '';\n      var p = this.head;\n      var ret = '' + p.data;\n\n      while (p = p.next) {\n        ret += s + p.data;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(n) {\n      if (this.length === 0) return Buffer.alloc(0);\n      var ret = Buffer.allocUnsafe(n >>> 0);\n      var p = this.head;\n      var i = 0;\n\n      while (p) {\n        copyBuffer(p.data, ret, i);\n        i += p.data.length;\n        p = p.next;\n      }\n\n      return ret;\n    } // Consumes a specified amount of bytes or characters from the buffered data.\n\n  }, {\n    key: \"consume\",\n    value: function consume(n, hasStrings) {\n      var ret;\n\n      if (n < this.head.data.length) {\n        // `slice` is the same for buffers and strings.\n        ret = this.head.data.slice(0, n);\n        this.head.data = this.head.data.slice(n);\n      } else if (n === this.head.data.length) {\n        // First chunk is a perfect match.\n        ret = this.shift();\n      } else {\n        // Result spans more than one buffer.\n        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head.data;\n    } // Consumes a specified amount of characters from the buffered data.\n\n  }, {\n    key: \"_getString\",\n    value: function _getString(n) {\n      var p = this.head;\n      var c = 1;\n      var ret = p.data;\n      n -= ret.length;\n\n      while (p = p.next) {\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;else ret += str.slice(0, n);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === str.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = str.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Consumes a specified amount of bytes from the buffered data.\n\n  }, {\n    key: \"_getBuffer\",\n    value: function _getBuffer(n) {\n      var ret = Buffer.allocUnsafe(n);\n      var p = this.head;\n      var c = 1;\n      p.data.copy(ret);\n      n -= p.data.length;\n\n      while (p = p.next) {\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === buf.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = buf.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Make sure the linked list only shows the minimal necessary information.\n\n  }, {\n    key: custom,\n    value: function value(_, options) {\n      return inspect(this, _objectSpread({}, options, {\n        // Only inspect one level.\n        depth: 0,\n        // It should not recurse.\n        customInspect: false\n      }));\n    }\n  }]);\n\n  return BufferList;\n}();", "'use strict'; // undocumented cb() API, needed for core, not for public API\n\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err) {\n      if (!this._writableState) {\n        process.nextTick(emitErrorNT, this, err);\n      } else if (!this._writableState.errorEmitted) {\n        this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorNT, this, err);\n      }\n    }\n\n    return this;\n  } // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  } // if this is a duplex stream mark the writable part as destroyed as well\n\n\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      if (!_this._writableState) {\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else if (!_this._writableState.errorEmitted) {\n        _this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else {\n        process.nextTick(emitCloseNT, _this);\n      }\n    } else if (cb) {\n      process.nextTick(emitCloseNT, _this);\n      cb(err);\n    } else {\n      process.nextTick(emitCloseNT, _this);\n    }\n  });\n\n  return this;\n}\n\nfunction emitErrorAndCloseNT(self, err) {\n  emitErrorNT(self, err);\n  emitCloseNT(self);\n}\n\nfunction emitCloseNT(self) {\n  if (self._writableState && !self._writableState.emitClose) return;\n  if (self._readableState && !self._readableState.emitClose) return;\n  self.emit('close');\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finalCalled = false;\n    this._writableState.prefinished = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nfunction errorOrDestroy(stream, err) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n  var rState = stream._readableState;\n  var wState = stream._writableState;\n  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy,\n  errorOrDestroy: errorOrDestroy\n};", "'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar codes = {};\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n\n  var NodeError =\n  /*#__PURE__*/\n  function (_Base) {\n    _inheritsLoose(NodeError, _Base);\n\n    function NodeError(arg1, arg2, arg3) {\n      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n    }\n\n    return NodeError;\n  }(Base);\n\n  NodeError.prototype.name = Base.name;\n  NodeError.prototype.code = code;\n  codes[code] = NodeError;\n} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\n\n\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n\n  return str.substring(this_len - search.length, this_len) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n\n\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {\n  return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  // determiner: 'must be' or 'must not be'\n  var determiner;\n\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  var msg;\n\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  }\n\n  msg += \". Received type \".concat(typeof actual);\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');\ncreateErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {\n  return 'The ' + name + ' method is not implemented';\n});\ncreateErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');\ncreateErrorType('ERR_STREAM_DESTROYED', function (name) {\n  return 'Cannot call ' + name + ' after a stream was destroyed';\n});\ncreateErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');\ncreateErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');\ncreateErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');\ncreateErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\ncreateErrorType('ERR_UNKNOWN_ENCODING', function (arg) {\n  return 'Unknown encoding: ' + arg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');\nmodule.exports.codes = codes;\n", "'use strict';\n\nvar ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;\n\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\n\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n\n  if (hwm != null) {\n    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n      var name = isDuplex ? duplexKey : 'highWaterMark';\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\n    }\n\n    return Math.floor(hwm);\n  } // Default value\n\n\n  return state.objectMode ? 16 : 16 * 1024;\n}\n\nmodule.exports = {\n  getHighWaterMark: getHighWaterMark\n};", "if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n", "\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\nrequire('inherits')(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = require('./_stream_readable');\n\nvar Writable = require('./_stream_writable');\n\nrequire('inherits')(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});", "/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}", "// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args);\n  };\n}\n\nfunction noop() {}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n\n  var writableEnded = stream._writableState && stream._writableState.finished;\n\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n\n  var onclose = function onclose() {\n    var err;\n\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\n\nmodule.exports = eos;", "'use strict';\n\nvar _Object$setPrototypeO;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar finished = require('./end-of-stream');\n\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\n\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\n\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n\n  if (resolve !== null) {\n    var data = iter[kStream].read(); // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\n\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\n\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\n\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n\n  next: function next() {\n    var _this = this;\n\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    } // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n\n\n    var lastPromise = this[kLastPromise];\n    var promise;\n\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n\n      promise = new Promise(this[kHandlePromise]);\n    }\n\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\n\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n\n      iterator[kError] = err;\n      return;\n    }\n\n    var resolve = iterator[kLastResolve];\n\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\n\nmodule.exports = createReadableStreamAsyncIterator;", "module.exports = function () {\n  throw new Error('Readable.from is not available in the browser')\n};\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/\n\n\nvar debugUtil = require('util');\n\nvar debug;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\n\nvar BufferList = require('./internal/streams/buffer_list');\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\n\n\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\n\nrequire('inherits')(Readable, Stream);\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\n\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  } // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n\n\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n\n  return er;\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\n\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\n\n  var p = this._readableState.buffer.head;\n  var content = '';\n\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n\n  this._readableState.buffer.clear();\n\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n}; // Don't raise the hwm > 1GB\n\n\nvar MAX_HWM = 0x40000000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true;\n\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  } // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n\n\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      });\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\n\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true; // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume'); // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n\n  state.paused = false;\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  this._readableState.paused = true;\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n\n    return createReadableStreamAsyncIterator(this);\n  };\n}\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n}); // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\n\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\n\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n\n    return from(Readable, iterable, opts);\n  };\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';\n\nmodule.exports = Transform;\n\nvar _require$codes = require('../errors').codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = require('./_stream_duplex');\n\nrequire('inherits')(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\nrequire('inherits')(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};", "// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar eos;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\n\nvar _require$codes = require('../../../errors').codes,\n    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = require('./end-of-stream');\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true; // request.destroy just do .end - .abort is what we want\n\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\n\nfunction call(fn) {\n  fn();\n}\n\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\n\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\n\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\n\nmodule.exports = pipeline;", "exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\nexports.finished = require('./lib/internal/streams/end-of-stream.js');\nexports.pipeline = require('./lib/internal/streams/pipeline.js');\n", "const Transform = require('readable-stream').Transform\n\nmodule.exports = class Blake extends Transform {\n  constructor (engine, options) {\n    super(options)\n\n    this._engine = engine\n    this._finalized = false\n  }\n\n  _transform (chunk, encoding, callback) {\n    let error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  _flush (callback) {\n    let error = null\n    try {\n      this.push(this.digest())\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  update (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Digest already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._engine.update(data)\n\n    return this\n  }\n\n  digest (encoding) {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    let digest = this._engine.digest()\n    if (encoding !== undefined) digest = digest.toString(encoding)\n\n    return digest\n  }\n}\n", "const Blake = require('./blake')\n\nmodule.exports = (engines) => {\n  const getEngine = (algorithm) => {\n    const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm\n    switch (hash) {\n      case 'blake224': return engines.Blake224\n      case 'blake256': return engines.Blake256\n      case 'blake384': return engines.Blake384\n      case 'blake512': return engines.Blake512\n\n      default: throw new Error('Invald algorithm: ' + algorithm)\n    }\n  }\n\n  return (algorithm, options) => {\n    const Engine = getEngine(algorithm)\n    return new Blake(new Engine(), options)\n  }\n}\n", "class Blake {\n  _lengthCarry (arr) {\n    for (let j = 0; j < arr.length; ++j) {\n      if (arr[j] < 0x0100000000) break\n      arr[j] -= 0x0100000000\n      arr[j + 1] += 1\n    }\n  }\n\n  update (data) {\n    const block = this._block\n    let offset = 0\n\n    while (this._blockOffset + data.length - offset >= block.length) {\n      for (let i = this._blockOffset; i < block.length;) block[i++] = data[offset++]\n\n      this._length[0] += block.length * 8\n      this._lengthCarry(this._length)\n\n      this._compress()\n      this._blockOffset = 0\n    }\n\n    while (offset < data.length) block[this._blockOffset++] = data[offset++]\n  }\n}\n\nBlake.sigma = [\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n  [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3],\n  [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4],\n  [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8],\n  [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13],\n  [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9],\n  [12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11],\n  [13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10],\n  [6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5],\n  [10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0],\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n  [14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3],\n  [11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4],\n  [7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8],\n  [9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13],\n  [2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9]\n]\n\nBlake.u256 = [\n  0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,\n  0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,\n  0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n  0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917\n]\n\nBlake.u512 = [\n  0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344,\n  0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,\n  0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n  0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,\n  0x9216d5d9, 0x8979fb1b, 0xd1310ba6, 0x98dfb5ac,\n  0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96,\n  0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7,\n  0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69\n]\n\nBlake.padding = Buffer.from([\n  0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n])\n\nmodule.exports = Blake\n", "const Blake = require('./blake')\n\nconst zo = Buffer.from([0x01])\nconst oo = Buffer.from([0x81])\n\nconst rot = (x, n) => ((x << (32 - n)) | (x >>> n)) >>> 0\n\nfunction g (v, m, i, a, b, c, d, e) {\n  const sigma = Blake.sigma\n  const u256 = Blake.u256\n\n  v[a] = (v[a] + ((m[sigma[i][e]] ^ u256[sigma[i][e + 1]]) >>> 0) + v[b]) >>> 0\n  v[d] = rot(v[d] ^ v[a], 16)\n  v[c] = (v[c] + v[d]) >>> 0\n  v[b] = rot(v[b] ^ v[c], 12)\n  v[a] = (v[a] + ((m[sigma[i][e + 1]] ^ u256[sigma[i][e]]) >>> 0) + v[b]) >>> 0\n  v[d] = rot(v[d] ^ v[a], 8)\n  v[c] = (v[c] + v[d]) >>> 0\n  v[b] = rot(v[b] ^ v[c], 7)\n}\n\nmodule.exports = class Blake256 extends Blake {\n  constructor () {\n    super()\n\n    this._h = [\n      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n      0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n    ]\n\n    this._s = [0, 0, 0, 0]\n\n    this._block = Buffer.alloc(64)\n    this._blockOffset = 0\n    this._length = [0, 0]\n\n    this._nullt = false\n\n    this._zo = zo\n    this._oo = oo\n  }\n\n  _compress () {\n    const u256 = Blake.u256\n    const v = new Array(16)\n    const m = new Array(16)\n    let i\n\n    for (i = 0; i < 16; ++i) m[i] = this._block.readUInt32BE(i * 4)\n    for (i = 0; i < 8; ++i) v[i] = this._h[i] >>> 0\n    for (i = 8; i < 12; ++i) v[i] = (this._s[i - 8] ^ u256[i - 8]) >>> 0\n    for (i = 12; i < 16; ++i) v[i] = u256[i - 8]\n\n    if (!this._nullt) {\n      v[12] = (v[12] ^ this._length[0]) >>> 0\n      v[13] = (v[13] ^ this._length[0]) >>> 0\n      v[14] = (v[14] ^ this._length[1]) >>> 0\n      v[15] = (v[15] ^ this._length[1]) >>> 0\n    }\n\n    for (i = 0; i < 14; ++i) {\n      /* column step */\n      g(v, m, i, 0, 4, 8, 12, 0)\n      g(v, m, i, 1, 5, 9, 13, 2)\n      g(v, m, i, 2, 6, 10, 14, 4)\n      g(v, m, i, 3, 7, 11, 15, 6)\n      /* diagonal step */\n      g(v, m, i, 0, 5, 10, 15, 8)\n      g(v, m, i, 1, 6, 11, 12, 10)\n      g(v, m, i, 2, 7, 8, 13, 12)\n      g(v, m, i, 3, 4, 9, 14, 14)\n    }\n\n    for (i = 0; i < 16; ++i) this._h[i % 8] = (this._h[i % 8] ^ v[i]) >>> 0\n    for (i = 0; i < 8; ++i) this._h[i] = (this._h[i] ^ this._s[i % 4]) >>> 0\n  }\n\n  _padding () {\n    let lo = this._length[0] + this._blockOffset * 8\n    let hi = this._length[1]\n    if (lo >= 0x0100000000) {\n      lo -= 0x0100000000\n      hi += 1\n    }\n\n    const msglen = Buffer.alloc(8)\n    msglen.writeUInt32BE(hi, 0)\n    msglen.writeUInt32BE(lo, 4)\n\n    if (this._blockOffset === 55) {\n      this._length[0] -= 8\n      this.update(this._oo)\n    } else {\n      if (this._blockOffset < 55) {\n        if (this._blockOffset === 0) this._nullt = true\n        this._length[0] -= (55 - this._blockOffset) * 8\n        this.update(Blake.padding.slice(0, 55 - this._blockOffset))\n      } else {\n        this._length[0] -= (64 - this._blockOffset) * 8\n        this.update(Blake.padding.slice(0, 64 - this._blockOffset))\n        this._length[0] -= 55 * 8\n        this.update(Blake.padding.slice(1, 1 + 55))\n        this._nullt = true\n      }\n\n      this.update(this._zo)\n      this._length[0] -= 8\n    }\n\n    this._length[0] -= 64\n    this.update(msglen)\n  }\n\n  digest () {\n    this._padding()\n\n    const buffer = Buffer.alloc(32)\n    for (let i = 0; i < 8; ++i) buffer.writeUInt32BE(this._h[i], i * 4)\n    return buffer\n  }\n}\n", "const Blake256 = require('./blake256')\n\nconst zo = Buffer.from([0x00])\nconst oo = Buffer.from([0x80])\n\nmodule.exports = class Blake224 extends Blake256 {\n  constructor () {\n    super()\n\n    this._h = [\n      0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n      0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n    ]\n\n    this._zo = zo\n    this._oo = oo\n  }\n\n  digest () {\n    this._padding()\n\n    const buffer = Buffer.alloc(28)\n    for (let i = 0; i < 7; ++i) buffer.writeUInt32BE(this._h[i], i * 4)\n    return buffer\n  }\n}\n", "const Blake = require('./blake')\n\nconst zo = Buffer.from([0x01])\nconst oo = Buffer.from([0x81])\n\nfunction rot (v, i, j, n) {\n  let hi = v[i * 2] ^ v[j * 2]\n  let lo = v[i * 2 + 1] ^ v[j * 2 + 1]\n\n  if (n >= 32) {\n    lo = lo ^ hi\n    hi = lo ^ hi\n    lo = lo ^ hi\n    n -= 32\n  }\n\n  if (n === 0) {\n    v[i * 2] = hi >>> 0\n    v[i * 2 + 1] = lo >>> 0\n  } else {\n    v[i * 2] = ((hi >>> n) | (lo << (32 - n))) >>> 0\n    v[i * 2 + 1] = ((lo >>> n) | (hi << (32 - n))) >>> 0\n  }\n}\n\nfunction g (v, m, i, a, b, c, d, e) {\n  const sigma = Blake.sigma\n  const u512 = Blake.u512\n  let lo\n\n  // v[a] += (m[sigma[i][e]] ^ u512[sigma[i][e+1]]) + v[b];\n  lo = v[a * 2 + 1] + ((m[sigma[i][e] * 2 + 1] ^ u512[sigma[i][e + 1] * 2 + 1]) >>> 0) + v[b * 2 + 1]\n  v[a * 2] = (v[a * 2] + ((m[sigma[i][e] * 2] ^ u512[sigma[i][e + 1] * 2]) >>> 0) + v[b * 2] + ~~(lo / 0x0100000000)) >>> 0\n  v[a * 2 + 1] = lo >>> 0\n\n  // v[d] = ROT( v[d] ^ v[a],32);\n  rot(v, d, a, 32)\n\n  // v[c] += v[d];\n  lo = v[c * 2 + 1] + v[d * 2 + 1]\n  v[c * 2] = (v[c * 2] + v[d * 2] + ~~(lo / 0x0100000000)) >>> 0\n  v[c * 2 + 1] = lo >>> 0\n\n  // v[b] = ROT( v[b] ^ v[c],25);\n  rot(v, b, c, 25)\n\n  // v[a] += (m[sigma[i][e+1]] ^ u512[sigma[i][e]])+v[b];\n  lo = v[a * 2 + 1] + ((m[sigma[i][e + 1] * 2 + 1] ^ u512[sigma[i][e] * 2 + 1]) >>> 0) + v[b * 2 + 1]\n  v[a * 2] = (v[a * 2] + ((m[sigma[i][e + 1] * 2] ^ u512[sigma[i][e] * 2]) >>> 0) + v[b * 2] + ~~(lo / 0x0100000000)) >>> 0\n  v[a * 2 + 1] = lo >>> 0\n\n  // v[d] = ROT( v[d] ^ v[a],16);\n  rot(v, d, a, 16)\n\n  // v[c] += v[d];\n  lo = v[c * 2 + 1] + v[d * 2 + 1]\n  v[c * 2] = (v[c * 2] + v[d * 2] + ~~(lo / 0x0100000000)) >>> 0\n  v[c * 2 + 1] = lo >>> 0\n\n  // v[b] = ROT( v[b] ^ v[c],11)\n  rot(v, b, c, 11)\n}\n\nmodule.exports = class Blake512 extends Blake {\n  constructor () {\n    super()\n\n    this._h = [\n      0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b,\n      0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n      0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f,\n      0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179\n    ]\n\n    this._s = [0, 0, 0, 0, 0, 0, 0, 0]\n\n    this._block = Buffer.alloc(128)\n    this._blockOffset = 0\n    this._length = [0, 0, 0, 0]\n\n    this._nullt = false\n\n    this._zo = zo\n    this._oo = oo\n  }\n\n  _compress () {\n    const u512 = Blake.u512\n    const v = new Array(32)\n    const m = new Array(32)\n    let i\n\n    for (i = 0; i < 32; ++i) m[i] = this._block.readUInt32BE(i * 4)\n    for (i = 0; i < 16; ++i) v[i] = this._h[i] >>> 0\n    for (i = 16; i < 24; ++i) v[i] = (this._s[i - 16] ^ u512[i - 16]) >>> 0\n    for (i = 24; i < 32; ++i) v[i] = u512[i - 16]\n\n    if (!this._nullt) {\n      v[24] = (v[24] ^ this._length[1]) >>> 0\n      v[25] = (v[25] ^ this._length[0]) >>> 0\n      v[26] = (v[26] ^ this._length[1]) >>> 0\n      v[27] = (v[27] ^ this._length[0]) >>> 0\n      v[28] = (v[28] ^ this._length[3]) >>> 0\n      v[29] = (v[29] ^ this._length[2]) >>> 0\n      v[30] = (v[30] ^ this._length[3]) >>> 0\n      v[31] = (v[31] ^ this._length[2]) >>> 0\n    }\n\n    for (i = 0; i < 16; ++i) {\n      /* column step */\n      g(v, m, i, 0, 4, 8, 12, 0)\n      g(v, m, i, 1, 5, 9, 13, 2)\n      g(v, m, i, 2, 6, 10, 14, 4)\n      g(v, m, i, 3, 7, 11, 15, 6)\n      /* diagonal step */\n      g(v, m, i, 0, 5, 10, 15, 8)\n      g(v, m, i, 1, 6, 11, 12, 10)\n      g(v, m, i, 2, 7, 8, 13, 12)\n      g(v, m, i, 3, 4, 9, 14, 14)\n    }\n\n    for (i = 0; i < 16; ++i) {\n      this._h[(i % 8) * 2] = (this._h[(i % 8) * 2] ^ v[i * 2]) >>> 0\n      this._h[(i % 8) * 2 + 1] = (this._h[(i % 8) * 2 + 1] ^ v[i * 2 + 1]) >>> 0\n    }\n\n    for (i = 0; i < 8; ++i) {\n      this._h[i * 2] = (this._h[i * 2] ^ this._s[(i % 4) * 2]) >>> 0\n      this._h[i * 2 + 1] = (this._h[i * 2 + 1] ^ this._s[(i % 4) * 2 + 1]) >>> 0\n    }\n  }\n\n  _padding () {\n    const len = this._length.slice()\n    len[0] += this._blockOffset * 8\n    this._lengthCarry(len)\n\n    const msglen = Buffer.alloc(16)\n    for (let i = 0; i < 4; ++i) msglen.writeUInt32BE(len[3 - i], i * 4)\n\n    if (this._blockOffset === 111) {\n      this._length[0] -= 8\n      this.update(this._oo)\n    } else {\n      if (this._blockOffset < 111) {\n        if (this._blockOffset === 0) this._nullt = true\n        this._length[0] -= (111 - this._blockOffset) * 8\n        this.update(Blake.padding.slice(0, 111 - this._blockOffset))\n      } else {\n        this._length[0] -= (128 - this._blockOffset) * 8\n        this.update(Blake.padding.slice(0, 128 - this._blockOffset))\n        this._length[0] -= 111 * 8\n        this.update(Blake.padding.slice(1, 1 + 111))\n        this._nullt = true\n      }\n\n      this.update(this._zo)\n      this._length[0] -= 8\n    }\n\n    this._length[0] -= 128\n    this.update(msglen)\n  }\n\n  digest () {\n    this._padding()\n\n    const buffer = Buffer.alloc(64)\n    for (let i = 0; i < 16; ++i) buffer.writeUInt32BE(this._h[i], i * 4)\n    return buffer\n  }\n}\n", "const Blake512 = require('./blake512')\n\nconst zo = Buffer.from([0x00])\nconst oo = Buffer.from([0x80])\n\nmodule.exports = class Blake384 extends Blake512 {\n  constructor () {\n    super()\n\n    this._h = [\n      0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507,\n      0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n      0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511,\n      0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4\n    ]\n\n    this._zo = zo\n    this._oo = oo\n  }\n\n  digest () {\n    this._padding()\n\n    const buffer = Buffer.alloc(48)\n    for (let i = 0; i < 12; ++i) buffer.writeUInt32BE(this._h[i], i * 4)\n    return buffer\n  }\n}\n", "module.exports = {\n  Blake224: require('./blake224'),\n  Blake256: require('./blake256'),\n  Blake384: require('./blake384'),\n  Blake512: require('./blake512')\n}\n", "module.exports = require('./lib/api')(require('./lib'))\n", "export default {};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexports.bigInt2BytesLE = function bigInt2BytesLE(_a, len) {\n    const b = Array(len);\n    let v = BigInt(_a);\n    for (let i=0; i<len; i++) {\n        b[i] = Number(v & 0xFFn);\n        v = v >> 8n;\n    }\n    return b;\n};\n\nexports.bigInt2U32LE = function bigInt2BytesLE(_a, len) {\n    const b = Array(len);\n    let v = BigInt(_a);\n    for (let i=0; i<len; i++) {\n        b[i] = Number(v & 0xFFFFFFFFn);\n        v = v >> 32n;\n    }\n    return b;\n};\n\nexports.isOcamNum = function(a) {\n    if (!Array.isArray(a)) return false;\n    if (a.length != 3) return false;\n    if (typeof a[0] !== \"number\") return false;\n    if (typeof a[1] !== \"number\") return false;\n    if (!Array.isArray(a[2])) return false;\n    return true;\n};\n\n\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = function buildInt(module, n64, _prefix) {\n\n    const prefix = _prefix || \"int\";\n    if (module.modules[prefix]) return prefix;  // already builded\n    module.modules[prefix] = {};\n\n    const n32 = n64*2;\n    const n8 = n64*8;\n\n    function buildCopy() {\n        const f = module.addFunction(prefix+\"_copy\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<n64; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pr\"),\n                    i*8,\n                    c.i64_load(\n                        c.getLocal(\"px\"),\n                        i*8\n                    )\n                )\n            );\n        }\n    }\n\n    function buildZero() {\n        const f = module.addFunction(prefix+\"_zero\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<n64; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pr\"),\n                    i*8,\n                    c.i64_const(0)\n                )\n            );\n        }\n    }\n\n    function buildOne() {\n        const f = module.addFunction(prefix+\"_one\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.i64_store(\n                c.getLocal(\"pr\"),\n                0,\n                c.i64_const(1)\n            )\n        );\n        for (let i=1; i<n64; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pr\"),\n                    i*8,\n                    c.i64_const(0)\n                )\n            );\n        }\n    }\n\n    function buildIsZero() {\n        const f = module.addFunction(prefix+\"_isZero\");\n        f.addParam(\"px\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        function getCompCode(n) {\n            if (n==0) {\n                return  c.ret(c.i64_eqz(\n                    c.i64_load(c.getLocal(\"px\"))\n                ));\n            }\n            return c.if(\n                c.i64_eqz(\n                    c.i64_load(c.getLocal(\"px\"), n*8 )\n                ),\n                getCompCode(n-1),\n                c.ret(c.i32_const(0))\n            );\n        }\n\n        f.addCode(getCompCode(n64-1));\n        f.addCode(c.ret(c.i32_const(0)));\n    }\n\n    function buildEq() {\n        const f = module.addFunction(prefix+\"_eq\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"py\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        function getCompCode(n) {\n            if (n==0) {\n                return  c.ret(c.i64_eq(\n                    c.i64_load(c.getLocal(\"px\")),\n                    c.i64_load(c.getLocal(\"py\"))\n                ));\n            }\n            return c.if(\n                c.i64_eq(\n                    c.i64_load(c.getLocal(\"px\"), n*8 ),\n                    c.i64_load(c.getLocal(\"py\"), n*8 )\n                ),\n                getCompCode(n-1),\n                c.ret(c.i32_const(0))\n            );\n        }\n\n        f.addCode(getCompCode(n64-1));\n        f.addCode(c.ret(c.i32_const(0)));\n    }\n\n\n\n    function buildGte() {\n        const f = module.addFunction(prefix+\"_gte\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"py\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        function getCompCode(n) {\n            if (n==0) {\n                return  c.ret(c.i64_ge_u(\n                    c.i64_load(c.getLocal(\"px\")),\n                    c.i64_load(c.getLocal(\"py\"))\n                ));\n            }\n            return c.if(\n                c.i64_lt_u(\n                    c.i64_load(c.getLocal(\"px\"), n*8 ),\n                    c.i64_load(c.getLocal(\"py\"), n*8 )\n                ),\n                c.ret(c.i32_const(0)),\n                c.if(\n                    c.i64_gt_u(\n                        c.i64_load(c.getLocal(\"px\"), n*8 ),\n                        c.i64_load(c.getLocal(\"py\"), n*8 )\n                    ),\n                    c.ret(c.i32_const(1)),\n                    getCompCode(n-1)\n                )\n            );\n        }\n\n        f.addCode(getCompCode(n64-1));\n        f.addCode(c.ret(c.i32_const(0)));\n    }\n\n\n\n    function buildAdd() {\n\n        const f = module.addFunction(prefix+\"_add\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"c\", \"i64\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_add(\n                c.i64_load32_u(c.getLocal(\"x\")),\n                c.i64_load32_u(c.getLocal(\"y\"))\n            )\n        ));\n\n        f.addCode(c.i64_store32(\n            c.getLocal(\"r\"),\n            c.getLocal(\"c\"),\n        ));\n\n        for (let i=1; i<n32; i++) {\n            f.addCode(c.setLocal( \"c\",\n                c.i64_add(\n                    c.i64_add(\n                        c.i64_load32_u(c.getLocal(\"x\"), 4*i),\n                        c.i64_load32_u(c.getLocal(\"y\"), 4*i)\n                    ),\n                    c.i64_shr_u (c.getLocal(\"c\"), c.i64_const(32))\n                )\n            ));\n\n            f.addCode(c.i64_store32(\n                c.getLocal(\"r\"),\n                i*4,\n                c.getLocal(\"c\")\n            ));\n        }\n\n        f.addCode(c.i32_wrap_i64(c.i64_shr_u (c.getLocal(\"c\"), c.i64_const(32))));\n    }\n\n\n    function buildSub() {\n\n        const f = module.addFunction(prefix+\"_sub\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"c\", \"i64\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_sub(\n                c.i64_load32_u(c.getLocal(\"x\")),\n                c.i64_load32_u(c.getLocal(\"y\"))\n            )\n        ));\n\n        f.addCode(c.i64_store32(\n            c.getLocal(\"r\"),\n            c.i64_and(\n                c.getLocal(\"c\"),\n                c.i64_const(\"0xFFFFFFFF\")\n            )\n        ));\n\n        for (let i=1; i<n32; i++) {\n            f.addCode(c.setLocal( \"c\",\n                c.i64_add(\n                    c.i64_sub(\n                        c.i64_load32_u(c.getLocal(\"x\"), 4*i),\n                        c.i64_load32_u(c.getLocal(\"y\"), 4*i)\n                    ),\n                    c.i64_shr_s (c.getLocal(\"c\"), c.i64_const(32))\n                )\n            ));\n\n            f.addCode(c.i64_store32(\n                c.getLocal(\"r\"),\n                i*4,\n                c.i64_and( c.getLocal(\"c\"), c.i64_const(\"0xFFFFFFFF\"))\n            ));\n        }\n\n        f.addCode(c.i32_wrap_i64 ( c.i64_shr_s (c.getLocal(\"c\"), c.i64_const(32))));\n    }\n\n\n    function buildMul() {\n\n        const f = module.addFunction(prefix+\"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"c0\", \"i64\");\n        f.addLocal(\"c1\", \"i64\");\n\n\n        for (let i=0;i<n32; i++) {\n            f.addLocal(\"x\"+i, \"i64\");\n            f.addLocal(\"y\"+i, \"i64\");\n        }\n\n        const c = f.getCodeBuilder();\n\n        const loadX = [];\n        const loadY = [];\n        function mulij(i, j) {\n            let X,Y;\n            if (!loadX[i]) {\n                X = c.teeLocal(\"x\"+i, c.i64_load32_u( c.getLocal(\"x\"), i*4));\n                loadX[i] = true;\n            } else {\n                X = c.getLocal(\"x\"+i);\n            }\n            if (!loadY[j]) {\n                Y = c.teeLocal(\"y\"+j, c.i64_load32_u( c.getLocal(\"y\"), j*4));\n                loadY[j] = true;\n            } else {\n                Y = c.getLocal(\"y\"+j);\n            }\n\n            return c.i64_mul( X, Y );\n        }\n\n        let c0 = \"c0\";\n        let c1 = \"c1\";\n\n        for (let k=0; k<n32*2-1; k++) {\n            for (let i=Math.max(0, k-n32+1); (i<=k)&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n\n            }\n\n            f.addCode(\n                c.i64_store32(\n                    c.getLocal(\"r\"),\n                    k*4,\n                    c.getLocal(c0)\n                )\n            );\n            [c0, c1] = [c1, c0];\n            f.addCode(\n                c.setLocal(c1,\n                    c.i64_shr_u(\n                        c.getLocal(c0),\n                        c.i64_const(32)\n                    )\n                )\n            );\n        }\n        f.addCode(\n            c.i64_store32(\n                c.getLocal(\"r\"),\n                n32*4*2-4,\n                c.getLocal(c0)\n            )\n        );\n\n    }\n\n\n\n    function buildSquare() {\n\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"c0\", \"i64\");\n        f.addLocal(\"c1\", \"i64\");\n        f.addLocal(\"c0_old\", \"i64\");\n        f.addLocal(\"c1_old\", \"i64\");\n\n\n        for (let i=0;i<n32; i++) {\n            f.addLocal(\"x\"+i, \"i64\");\n        }\n\n        const c = f.getCodeBuilder();\n\n        const loadX = [];\n        function mulij(i, j) {\n            let X,Y;\n            if (!loadX[i]) {\n                X = c.teeLocal(\"x\"+i, c.i64_load32_u( c.getLocal(\"x\"), i*4));\n                loadX[i] = true;\n            } else {\n                X = c.getLocal(\"x\"+i);\n            }\n            if (!loadX[j]) {\n                Y = c.teeLocal(\"x\"+j, c.i64_load32_u( c.getLocal(\"x\"), j*4));\n                loadX[j] = true;\n            } else {\n                Y = c.getLocal(\"x\"+j);\n            }\n\n            return c.i64_mul( X, Y );\n        }\n\n        let c0 = \"c0\";\n        let c1 = \"c1\";\n        let c0_old = \"c0_old\";\n        let c1_old = \"c1_old\";\n\n        for (let k=0; k<n32*2-1; k++) {\n            f.addCode(\n                c.setLocal(c0, c.i64_const(0)),\n                c.setLocal(c1, c.i64_const(0)),\n            );\n\n            for (let i=Math.max(0, k-n32+1); (i<((k+1)>>1) )&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            // Multiply by 2\n            f.addCode(\n                c.setLocal(c0,\n                    c.i64_shl(\n                        c.i64_and(\n                            c.getLocal(c0),\n                            c.i64_const(0xFFFFFFFF)\n                        ),\n                        c.i64_const(1)\n                    )\n                )\n            );\n\n            f.addCode(\n                c.setLocal(c1,\n                    c.i64_add(\n                        c.i64_shl(\n                            c.getLocal(c1),\n                            c.i64_const(1)\n                        ),\n                        c.i64_shr_u(\n                            c.getLocal(c0),\n                            c.i64_const(32)\n                        )\n                    )\n                )\n            );\n\n            if (k%2 == 0) {\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(k>>1, k>>1)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            // Add the old carry\n\n            if (k>0) {\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            c.i64_and(\n                                c.getLocal(c0_old),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.i64_add(\n                                c.getLocal(c1),\n                                c.i64_shr_u(\n                                    c.getLocal(c0),\n                                    c.i64_const(32)\n                                )\n                            ),\n                            c.getLocal(c1_old)\n                        )\n                    )\n                );\n            }\n\n            f.addCode(\n                c.i64_store32(\n                    c.getLocal(\"r\"),\n                    k*4,\n                    c.getLocal(c0)\n                )\n            );\n\n            f.addCode(\n                c.setLocal(\n                    c0_old,\n                    c.getLocal(c1)\n                ),\n                c.setLocal(\n                    c1_old,\n                    c.i64_shr_u(\n                        c.getLocal(c0_old),\n                        c.i64_const(32)\n                    )\n                )\n            );\n\n        }\n        f.addCode(\n            c.i64_store32(\n                c.getLocal(\"r\"),\n                n32*4*2-4,\n                c.getLocal(c0_old)\n            )\n        );\n\n    }\n\n\n    function buildSquareOld() {\n        const f = module.addFunction(prefix+\"_squareOld\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(prefix + \"_mul\", c.getLocal(\"x\"), c.getLocal(\"x\"), c.getLocal(\"r\")));\n    }\n\n    function _buildMul1() {\n        const f = module.addFunction(prefix+\"__mul1\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"y\", \"i64\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"c\", \"i64\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_mul(\n                c.i64_load32_u(c.getLocal(\"px\"), 0, 0),\n                c.getLocal(\"y\")\n            )\n        ));\n\n        f.addCode(c.i64_store32(\n            c.getLocal(\"pr\"),\n            0,\n            0,\n            c.getLocal(\"c\"),\n        ));\n\n        for (let i=1; i<n32; i++) {\n            f.addCode(c.setLocal( \"c\",\n                c.i64_add(\n                    c.i64_mul(\n                        c.i64_load32_u(c.getLocal(\"px\"), 4*i, 0),\n                        c.getLocal(\"y\")\n                    ),\n                    c.i64_shr_u (c.getLocal(\"c\"), c.i64_const(32))\n                )\n            ));\n\n            f.addCode(c.i64_store32(\n                c.getLocal(\"pr\"),\n                i*4,\n                0,\n                c.getLocal(\"c\")\n            ));\n        }\n    }\n\n    function _buildAdd1() {\n        const f = module.addFunction(prefix+\"__add1\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i64\");\n        f.addLocal(\"c\", \"i64\");\n        f.addLocal(\"px\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.setLocal(\"px\", c.getLocal(\"x\")));\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_add(\n                c.i64_load32_u(c.getLocal(\"px\"), 0, 0),\n                c.getLocal(\"y\")\n            )\n        ));\n\n        f.addCode(c.i64_store32(\n            c.getLocal(\"px\"),\n            0,\n            0,\n            c.getLocal(\"c\"),\n        ));\n\n        f.addCode(c.setLocal(\n            \"c\",\n            c.i64_shr_u(\n                c.getLocal(\"c\"),\n                c.i64_const(32)\n            )\n        ));\n\n        f.addCode(c.block(c.loop(\n            c.br_if(\n                1,\n                c.i64_eqz(c.getLocal(\"c\"))\n            ),\n            c.setLocal(\n                \"px\",\n                c.i32_add(\n                    c.getLocal(\"px\"),\n                    c.i32_const(4)\n                )\n            ),\n\n            c.setLocal(\n                \"c\",\n                c.i64_add(\n                    c.i64_load32_u(c.getLocal(\"px\"), 0, 0),\n                    c.getLocal(\"c\")\n                )\n            ),\n\n            c.i64_store32(\n                c.getLocal(\"px\"),\n                0,\n                0,\n                c.getLocal(\"c\"),\n            ),\n\n            c.setLocal(\n                \"c\",\n                c.i64_shr_u(\n                    c.getLocal(\"c\"),\n                    c.i64_const(32)\n                )\n            ),\n\n            c.br(0)\n        )));\n    }\n\n\n    function buildDiv() {\n        _buildMul1();\n        _buildAdd1();\n\n        const f = module.addFunction(prefix+\"_div\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"c\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"rr\", \"i32\");\n        f.addLocal(\"cc\", \"i32\");\n        f.addLocal(\"eX\", \"i32\");\n        f.addLocal(\"eY\", \"i32\");\n        f.addLocal(\"sy\", \"i64\");\n        f.addLocal(\"sx\", \"i64\");\n        f.addLocal(\"ec\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const Y = c.i32_const(module.alloc(n8));\n        const Caux = c.i32_const(module.alloc(n8));\n        const Raux = c.i32_const(module.alloc(n8));\n        const C = c.getLocal(\"cc\");\n        const R = c.getLocal(\"rr\");\n        const pr1 = module.alloc(n8*2);\n        const R1 = c.i32_const(pr1);\n        const R2 = c.i32_const(pr1+n8);\n\n        // Ic c is 0 then store it in an auxiliary buffer\n        f.addCode(c.if(\n            c.getLocal(\"c\"),\n            c.setLocal(\"cc\", c.getLocal(\"c\")),\n            c.setLocal(\"cc\", Caux)\n        ));\n\n        // Ic r is 0 then store it in an auxiliary buffer\n        f.addCode(c.if(\n            c.getLocal(\"r\"),\n            c.setLocal(\"rr\", c.getLocal(\"r\")),\n            c.setLocal(\"rr\", Raux)\n        ));\n\n        // Copy\n        f.addCode(c.call(prefix + \"_copy\", c.getLocal(\"x\"), R));\n        f.addCode(c.call(prefix + \"_copy\", c.getLocal(\"y\"), Y));\n        f.addCode(c.call(prefix + \"_zero\", C));\n        f.addCode(c.call(prefix + \"_zero\", R1));\n\n\n        f.addCode(c.setLocal(\"eX\", c.i32_const(n8-1)));\n        f.addCode(c.setLocal(\"eY\", c.i32_const(n8-1)));\n\n        // while (eY>3)&&(Y[eY]==0) ey--;\n        f.addCode(c.block(c.loop(\n            c.br_if(\n                1,\n                c.i32_or(\n                    c.i32_load8_u(\n                        c.i32_add(Y , c.getLocal(\"eY\")),\n                        0,\n                        0\n                    ),\n                    c.i32_eq(\n                        c.getLocal(\"eY\"),\n                        c.i32_const(3)\n                    )\n                )\n            ),\n            c.setLocal(\"eY\", c.i32_sub(c.getLocal(\"eY\"), c.i32_const(1))),\n            c.br(0)\n        )));\n\n        f.addCode(\n            c.setLocal(\n                \"sy\",\n                c.i64_add(\n                    c.i64_load32_u(\n                        c.i32_sub(\n                            c.i32_add( Y, c.getLocal(\"eY\")),\n                            c.i32_const(3)\n                        ),\n                        0,\n                        0\n                    ),\n                    c.i64_const(1)\n                )\n            )\n        );\n\n        // Force a divide by 0 if quotien is 0\n        f.addCode(\n            c.if(\n                c.i64_eq(\n                    c.getLocal(\"sy\"),\n                    c.i64_const(1)\n                ),\n                c.drop(c.i64_div_u(c.i64_const(0), c.i64_const(0)))\n            )\n        );\n\n        f.addCode(c.block(c.loop(\n\n            // while (eX>7)&&(Y[eX]==0) ex--;\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_or(\n                        c.i32_load8_u(\n                            c.i32_add(R , c.getLocal(\"eX\")),\n                            0,\n                            0\n                        ),\n                        c.i32_eq(\n                            c.getLocal(\"eX\"),\n                            c.i32_const(7)\n                        )\n                    )\n                ),\n                c.setLocal(\"eX\", c.i32_sub(c.getLocal(\"eX\"), c.i32_const(1))),\n                c.br(0)\n            )),\n\n            c.setLocal(\n                \"sx\",\n                c.i64_load(\n                    c.i32_sub(\n                        c.i32_add( R, c.getLocal(\"eX\")),\n                        c.i32_const(7)\n                    ),\n                    0,\n                    0\n                )\n            ),\n\n            c.setLocal(\n                \"sx\",\n                c.i64_div_u(\n                    c.getLocal(\"sx\"),\n                    c.getLocal(\"sy\")\n                )\n            ),\n            c.setLocal(\n                \"ec\",\n                c.i32_sub(\n                    c.i32_sub(\n                        c.getLocal(\"eX\"),\n                        c.getLocal(\"eY\")\n                    ),\n                    c.i32_const(4)\n                )\n            ),\n\n            // While greater than 32 bits or ec is neg, shr and inc exp\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_and(\n                        c.i64_eqz(\n                            c.i64_and(\n                                c.getLocal(\"sx\"),\n                                c.i64_const(\"0xFFFFFFFF00000000\")\n                            )\n                        ),\n                        c.i32_ge_s(\n                            c.getLocal(\"ec\"),\n                            c.i32_const(0)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"sx\",\n                    c.i64_shr_u(\n                        c.getLocal(\"sx\"),\n                        c.i64_const(8)\n                    )\n                ),\n\n                c.setLocal(\n                    \"ec\",\n                    c.i32_add(\n                        c.getLocal(\"ec\"),\n                        c.i32_const(1)\n                    )\n                ),\n                c.br(0)\n            )),\n\n            c.if(\n                c.i64_eqz(c.getLocal(\"sx\")),\n                [\n                    ...c.br_if(\n                        2,\n                        c.i32_eqz(c.call(prefix + \"_gte\", R, Y))\n                    ),\n                    ...c.setLocal(\"sx\", c.i64_const(1)),\n                    ...c.setLocal(\"ec\", c.i32_const(0))\n                ]\n            ),\n\n            c.call(prefix + \"__mul1\", Y, c.getLocal(\"sx\"), R2),\n            c.drop(c.call(\n                prefix + \"_sub\",\n                R,\n                c.i32_sub(R2, c.getLocal(\"ec\")),\n                R\n            )),\n            c.call(\n                prefix + \"__add1\",\n                c.i32_add(C, c.getLocal(\"ec\")),\n                c.getLocal(\"sx\")\n            ),\n            c.br(0)\n        )));\n    }\n\n    function buildInverseMod() {\n\n        const f = module.addFunction(prefix+\"_inverseMod\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"pm\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"t\", \"i32\");\n        f.addLocal(\"newt\", \"i32\");\n        f.addLocal(\"r\", \"i32\");\n        f.addLocal(\"qq\", \"i32\");\n        f.addLocal(\"qr\", \"i32\");\n        f.addLocal(\"newr\", \"i32\");\n        f.addLocal(\"swp\", \"i32\");\n        f.addLocal(\"x\", \"i32\");\n        f.addLocal(\"signt\", \"i32\");\n        f.addLocal(\"signnewt\", \"i32\");\n        f.addLocal(\"signx\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux1 = c.i32_const(module.alloc(n8));\n        const aux2 = c.i32_const(module.alloc(n8));\n        const aux3 = c.i32_const(module.alloc(n8));\n        const aux4 = c.i32_const(module.alloc(n8));\n        const aux5 = c.i32_const(module.alloc(n8));\n        const aux6 = c.i32_const(module.alloc(n8));\n        const mulBuff = c.i32_const(module.alloc(n8*2));\n        const aux7 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.setLocal(\"t\", aux1),\n            c.call(prefix + \"_zero\", aux1),\n            c.setLocal(\"signt\", c.i32_const(0)),\n        );\n\n        f.addCode(\n            c.setLocal(\"r\", aux2),\n            c.call(prefix + \"_copy\", c.getLocal(\"pm\"), aux2)\n        );\n\n        f.addCode(\n            c.setLocal(\"newt\", aux3),\n            c.call(prefix + \"_one\", aux3),\n            c.setLocal(\"signnewt\", c.i32_const(0)),\n        );\n\n        f.addCode(\n            c.setLocal(\"newr\", aux4),\n            c.call(prefix + \"_copy\", c.getLocal(\"px\"), aux4)\n        );\n\n\n\n\n        f.addCode(c.setLocal(\"qq\", aux5));\n        f.addCode(c.setLocal(\"qr\", aux6));\n        f.addCode(c.setLocal(\"x\", aux7));\n\n        f.addCode(c.block(c.loop(\n            c.br_if(\n                1,\n                c.call(prefix + \"_isZero\", c.getLocal(\"newr\") )\n            ),\n            c.call(prefix + \"_div\", c.getLocal(\"r\"), c.getLocal(\"newr\"), c.getLocal(\"qq\"), c.getLocal(\"qr\")),\n\n            c.call(prefix + \"_mul\", c.getLocal(\"qq\"), c.getLocal(\"newt\"), mulBuff),\n\n            c.if(\n                c.getLocal(\"signt\"),\n                c.if(\n                    c.getLocal(\"signnewt\"),\n                    c.if (\n                        c.call(prefix + \"_gte\", mulBuff, c.getLocal(\"t\")),\n                        [\n                            ...c.drop(c.call(prefix + \"_sub\", mulBuff, c.getLocal(\"t\"), c.getLocal(\"x\"))),\n                            ...c.setLocal(\"signx\", c.i32_const(0))\n                        ],\n                        [\n                            ...c.drop(c.call(prefix + \"_sub\", c.getLocal(\"t\"), mulBuff, c.getLocal(\"x\"))),\n                            ...c.setLocal(\"signx\", c.i32_const(1))\n                        ],\n                    ),\n                    [\n                        ...c.drop(c.call(prefix + \"_add\", mulBuff, c.getLocal(\"t\"), c.getLocal(\"x\"))),\n                        ...c.setLocal(\"signx\", c.i32_const(1))\n                    ]\n                ),\n                c.if(\n                    c.getLocal(\"signnewt\"),\n                    [\n                        ...c.drop(c.call(prefix + \"_add\", mulBuff, c.getLocal(\"t\"), c.getLocal(\"x\"))),\n                        ...c.setLocal(\"signx\", c.i32_const(0))\n                    ],\n                    c.if (\n                        c.call(prefix + \"_gte\", c.getLocal(\"t\"), mulBuff),\n                        [\n                            ...c.drop(c.call(prefix + \"_sub\", c.getLocal(\"t\"), mulBuff, c.getLocal(\"x\"))),\n                            ...c.setLocal(\"signx\", c.i32_const(0))\n                        ],\n                        [\n                            ...c.drop(c.call(prefix + \"_sub\", mulBuff, c.getLocal(\"t\"), c.getLocal(\"x\"))),\n                            ...c.setLocal(\"signx\", c.i32_const(1))\n                        ]\n                    )\n                )\n            ),\n\n            c.setLocal(\"swp\", c.getLocal(\"t\")),\n            c.setLocal(\"t\", c.getLocal(\"newt\")),\n            c.setLocal(\"newt\", c.getLocal(\"x\")),\n            c.setLocal(\"x\", c.getLocal(\"swp\")),\n\n            c.setLocal(\"signt\", c.getLocal(\"signnewt\")),\n            c.setLocal(\"signnewt\", c.getLocal(\"signx\")),\n\n            c.setLocal(\"swp\", c.getLocal(\"r\")),\n            c.setLocal(\"r\", c.getLocal(\"newr\")),\n            c.setLocal(\"newr\", c.getLocal(\"qr\")),\n            c.setLocal(\"qr\", c.getLocal(\"swp\")),\n\n            c.br(0)\n        )));\n\n        f.addCode(c.if(\n            c.getLocal(\"signt\"),\n            c.drop(c.call(prefix + \"_sub\", c.getLocal(\"pm\"), c.getLocal(\"t\"), c.getLocal(\"pr\"))),\n            c.call(prefix + \"_copy\", c.getLocal(\"t\"), c.getLocal(\"pr\"))\n        ));\n    }\n\n\n    buildCopy();\n    buildZero();\n    buildIsZero();\n    buildOne();\n    buildEq();\n    buildGte();\n    buildAdd();\n    buildSub();\n    buildMul();\n    buildSquare();\n    buildSquareOld();\n    buildDiv();\n    buildInverseMod();\n    module.exportFunction(prefix+\"_copy\");\n    module.exportFunction(prefix+\"_zero\");\n    module.exportFunction(prefix+\"_one\");\n    module.exportFunction(prefix+\"_isZero\");\n    module.exportFunction(prefix+\"_eq\");\n    module.exportFunction(prefix+\"_gte\");\n    module.exportFunction(prefix+\"_add\");\n    module.exportFunction(prefix+\"_sub\");\n    module.exportFunction(prefix+\"_mul\");\n    module.exportFunction(prefix+\"_square\");\n    module.exportFunction(prefix+\"_squareOld\");\n    module.exportFunction(prefix+\"_div\");\n    module.exportFunction(prefix+\"_inverseMod\");\n\n    return prefix;\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = function buildTimesScalar(module, fnName, elementLen, opAB, opAA, opCopy, opInit) {\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"base\", \"i32\");\n    f.addParam(\"scalar\", \"i32\");\n    f.addParam(\"scalarLength\", \"i32\");\n    f.addParam(\"r\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"b\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    const aux = c.i32_const(module.alloc(elementLen));\n\n    f.addCode(\n        c.if(\n            c.i32_eqz(c.getLocal(\"scalarLength\")),\n            [\n                ...c.call(opInit, c.getLocal(\"r\")),\n                ...c.ret([])\n            ]\n        )\n    );\n    f.addCode(c.call(opCopy, c.getLocal(\"base\"), aux));\n    f.addCode(c.call(opInit, c.getLocal(\"r\")));\n    f.addCode(c.setLocal(\"i\", c.getLocal(\"scalarLength\")));\n    f.addCode(c.block(c.loop(\n        c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n\n        c.setLocal(\n            \"b\",\n            c.i32_load8_u(\n                c.i32_add(\n                    c.getLocal(\"scalar\"),\n                    c.getLocal(\"i\")\n                )\n            )\n        ),\n        ...innerLoop(),\n        c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n        c.br(0)\n    )));\n\n\n    function innerLoop() {\n        const code = [];\n        for (let i=0; i<8; i++) {\n            code.push(\n                ...c.call(opAA, c.getLocal(\"r\"), c.getLocal(\"r\")),\n                ...c.if(\n                    c.i32_ge_u( c.getLocal(\"b\"), c.i32_const(0x80 >> i)),\n                    [\n                        ...c.setLocal(\n                            \"b\",\n                            c.i32_sub(\n                                c.getLocal(\"b\"),\n                                c.i32_const(0x80 >> i)\n                            )\n                        ),\n                        ...c.call(opAB, c.getLocal(\"r\"),aux, c.getLocal(\"r\"))\n                    ]\n                )\n            );\n        }\n        return code;\n    }\n\n};\n", "\nmodule.exports = buildBatchInverse;\n\nfunction buildBatchInverse(module, prefix) {\n\n\n    const n8 = module.modules[prefix].n64*8;\n\n    const f = module.addFunction(prefix+\"_batchInverse\");\n    f.addParam(\"pIn\", \"i32\");\n    f.addParam(\"inStep\", \"i32\");\n    f.addParam(\"n\", \"i32\");\n    f.addParam(\"pOut\", \"i32\");\n    f.addParam(\"outStep\", \"i32\");\n    f.addLocal(\"itAux\", \"i32\");\n    f.addLocal(\"itIn\", \"i32\");\n    f.addLocal(\"itOut\",\"i32\");\n    f.addLocal(\"i\",\"i32\");\n\n    const c = f.getCodeBuilder();\n\n    const AUX = c.i32_const(module.alloc(n8));\n\n\n    // Alloc Working space for accumulated umltiplications\n    f.addCode(\n        c.setLocal(\"itAux\", c.i32_load( c.i32_const(0) )),\n        c.i32_store(\n            c.i32_const(0),\n            c.i32_add(\n                c.getLocal(\"itAux\"),\n                c.i32_mul(\n                    c.i32_add(\n                        c.getLocal(\"n\"),\n                        c.i32_const(1)\n                    ),\n                    c.i32_const(n8)\n                )\n            )\n        )\n    );\n\n    f.addCode(\n\n        // aux[0] = a;\n        c.call(prefix+\"_one\", c.getLocal(\"itAux\")),\n        // for (i=0;i<n;i++) aux[i] = aux[i-1]*in[i]\n        c.setLocal(\"itIn\", c.getLocal(\"pIn\")),\n        c.setLocal(\"itAux\", c.i32_add(c.getLocal(\"itAux\"), c.i32_const(n8))),\n        c.setLocal(\"i\", c.i32_const(0)),\n\n        c.block(c.loop(\n            c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n            c.if(\n                c.call(prefix+\"_isZero\", c.getLocal(\"itIn\")),\n                c.call(\n                    prefix + \"_copy\",\n                    c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)),\n                    c.getLocal(\"itAux\")\n                ),\n                c.call(\n                    prefix+\"_mul\",\n                    c.getLocal(\"itIn\"),\n                    c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)),\n                    c.getLocal(\"itAux\")\n                )\n            ),\n            c.setLocal(\"itIn\", c.i32_add(c.getLocal(\"itIn\"), c.getLocal(\"inStep\"))),\n            c.setLocal(\"itAux\", c.i32_add(c.getLocal(\"itAux\"), c.i32_const(n8))),\n            c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n            c.br(0)\n        )),\n\n        // point to the last\n        c.setLocal(\"itIn\", c.i32_sub(c.getLocal(\"itIn\"), c.getLocal(\"inStep\"))),\n        c.setLocal(\"itAux\", c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8))),\n        // itOut = pOut + (n-1)*stepOut   // Point to the last\n        c.setLocal(\n            \"itOut\",\n            c.i32_add(\n                c.getLocal(\"pOut\"),\n                c.i32_mul(\n                    c.i32_sub(c.getLocal(\"n\"), c.i32_const(1)),\n                    c.getLocal(\"outStep\"),\n                )\n            )\n        ),\n\n        // aux[n-1] = 1/aux[n-1]\n        c.call(prefix+\"_inverse\", c.getLocal(\"itAux\"), c.getLocal(\"itAux\") ),\n\n        c.block(c.loop(\n            c.br_if(1, c.i32_eqz( c.getLocal(\"i\"))),\n            c.if(\n                c.call(prefix+\"_isZero\", c.getLocal(\"itIn\")),\n                [\n                    ...c.call(\n                        prefix + \"_copy\",\n                        c.getLocal(\"itAux\"),\n                        c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)),\n                    ),\n                    ...c.call(\n                        prefix + \"_zero\",\n                        c.getLocal(\"itOut\")\n                    )\n                ],[\n                    ...c.call(prefix + \"_copy\", c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)), AUX),\n                    ...c.call(\n                        prefix+\"_mul\",\n                        c.getLocal(\"itAux\"),\n                        c.getLocal(\"itIn\"),\n                        c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8)),\n                    ),\n                    ...c.call(\n                        prefix+\"_mul\",\n                        c.getLocal(\"itAux\"),\n                        AUX,\n                        c.getLocal(\"itOut\")\n                    )\n                ]\n            ),\n            c.setLocal(\"itIn\", c.i32_sub(c.getLocal(\"itIn\"), c.getLocal(\"inStep\"))),\n            c.setLocal(\"itOut\", c.i32_sub(c.getLocal(\"itOut\"), c.getLocal(\"outStep\"))),\n            c.setLocal(\"itAux\", c.i32_sub(c.getLocal(\"itAux\"), c.i32_const(n8))),\n            c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n            c.br(0)\n        ))\n\n    );\n\n\n    // Recover Old memory\n    f.addCode(\n        c.i32_store(\n            c.i32_const(0),\n            c.getLocal(\"itAux\")\n        )\n    );\n\n}\n", "\n\nmodule.exports = buildBatchConvertion;\n\nfunction buildBatchConvertion(module, fnName, internalFnName, sizeIn, sizeOut, reverse) {\n    if (typeof reverse === \"undefined\") {\n        // Set the reverse in a way that allows to use the same buffer as in/out.\n        if (sizeIn < sizeOut) {\n            reverse = true;\n        } else {\n            reverse = false;\n        }\n    }\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"pIn\", \"i32\");\n    f.addParam(\"n\", \"i32\");\n    f.addParam(\"pOut\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"itIn\", \"i32\");\n    f.addLocal(\"itOut\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    if (reverse) {\n        f.addCode(\n            c.setLocal(\"itIn\",\n                c.i32_add(\n                    c.getLocal(\"pIn\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeIn)\n                    )\n                )\n            ),\n            c.setLocal(\"itOut\",\n                c.i32_add(\n                    c.getLocal(\"pOut\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeOut)\n                    )\n                )\n            ),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.call(internalFnName, c.getLocal(\"itIn\"), c.getLocal(\"itOut\")),\n\n                c.setLocal(\"itIn\", c.i32_sub(c.getLocal(\"itIn\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itOut\", c.i32_sub(c.getLocal(\"itOut\"), c.i32_const(sizeOut))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n    } else {\n        f.addCode(\n            c.setLocal(\"itIn\", c.getLocal(\"pIn\")),\n            c.setLocal(\"itOut\", c.getLocal(\"pOut\")),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.call(internalFnName, c.getLocal(\"itIn\"), c.getLocal(\"itOut\")),\n\n                c.setLocal(\"itIn\", c.i32_add(c.getLocal(\"itIn\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itOut\", c.i32_add(c.getLocal(\"itOut\"), c.i32_const(sizeOut))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n    }\n}\n", "\n\nmodule.exports = buildBatchConvertion;\n\nfunction buildBatchConvertion(module, fnName, internalFnName, sizeIn, sizeOut, reverse) {\n    if (typeof reverse === \"undefined\") {\n        // Set the reverse in a way that allows to use the same buffer as in/out.\n        if (sizeIn < sizeOut) {\n            reverse = true;\n        } else {\n            reverse = false;\n        }\n    }\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"pIn1\", \"i32\");\n    f.addParam(\"pIn2\", \"i32\");\n    f.addParam(\"n\", \"i32\");\n    f.addParam(\"pOut\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"itIn1\", \"i32\");\n    f.addLocal(\"itIn2\", \"i32\");\n    f.addLocal(\"itOut\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    if (reverse) {\n        f.addCode(\n            c.setLocal(\"itIn1\",\n                c.i32_add(\n                    c.getLocal(\"pIn1\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeIn)\n                    )\n                )\n            ),\n            c.setLocal(\"itIn2\",\n                c.i32_add(\n                    c.getLocal(\"pIn2\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeIn)\n                    )\n                )\n            ),\n            c.setLocal(\"itOut\",\n                c.i32_add(\n                    c.getLocal(\"pOut\"),\n                    c.i32_mul(\n                        c.i32_sub(\n                            c.getLocal(\"n\"),\n                            c.i32_const(1)\n                        ),\n                        c.i32_const(sizeOut)\n                    )\n                )\n            ),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.call(internalFnName, c.getLocal(\"itIn1\"), c.getLocal(\"itIn2\"), c.getLocal(\"itOut\")),\n\n                c.setLocal(\"itIn1\", c.i32_sub(c.getLocal(\"itIn1\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itIn2\", c.i32_sub(c.getLocal(\"itIn2\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itOut\", c.i32_sub(c.getLocal(\"itOut\"), c.i32_const(sizeOut))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n    } else {\n        f.addCode(\n            c.setLocal(\"itIn1\", c.getLocal(\"pIn1\")),\n            c.setLocal(\"itIn2\", c.getLocal(\"pIn2\")),\n            c.setLocal(\"itOut\", c.getLocal(\"pOut\")),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.call(internalFnName, c.getLocal(\"itIn1\"), c.getLocal(\"itIn2\"), c.getLocal(\"itOut\")),\n\n                c.setLocal(\"itIn1\", c.i32_add(c.getLocal(\"itIn1\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itIn2\", c.i32_add(c.getLocal(\"itIn2\"), c.i32_const(sizeIn))),\n                c.setLocal(\"itOut\", c.i32_add(c.getLocal(\"itOut\"), c.i32_const(sizeOut))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n    }\n}\n", "// Many of these utilities are from the `big-integer` library,\n// but adjusted to only work with native BigInt type\n// Ref https://github.com/peterolson/BigInteger.js/blob/e5d2154d3c417069c51e7116bafc3b91d0b9fe41/BigInteger.js\n// Originally licensed The Unlicense\n\nfunction compare(a, b) {\n    return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction square(n) {\n    return n * n;\n}\n\nfunction isOdd(n) {\n    return n % 2n !== 0n;\n}\n\nfunction isEven(n) {\n    return n % 2n === 0n;\n}\n\nfunction isNegative(n) {\n    return n < 0n;\n}\n\nfunction isPositive(n) {\n    return n > 0n;\n}\n\nfunction bitLength(n) {\n    if (isNegative(n)) {\n        return n.toString(2).length - 1; // discard the - sign\n    } else {\n        return n.toString(2).length;\n    }\n}\n\nfunction abs(n) {\n    return n < 0n ? -n : n;\n}\n\nfunction isUnit(n) {\n    return abs(n) === 1n;\n}\n\nfunction modInv(a, n) {\n    var t = 0n, newT = 1n, r = n, newR = abs(a), q, lastT, lastR;\n    while (newR !== 0n) {\n        q = r / newR;\n        lastT = t;\n        lastR = r;\n        t = newT;\n        r = newR;\n        newT = lastT - (q * newT);\n        newR = lastR - (q * newR);\n    }\n    if (!isUnit(r)) throw new Error(a.toString() + \" and \" + n.toString() + \" are not co-prime\");\n    if (compare(t, 0n) === -1) {\n        t = t + n;\n    }\n    if (isNegative(a)) {\n        return -t;\n    }\n    return t;\n}\n\nfunction modPow(n, exp, mod) {\n    if (mod === 0n) throw new Error(\"Cannot take modPow with modulus 0\");\n    var r = 1n,\n        base = n % mod;\n    if (isNegative(exp)) {\n        exp = exp * -1n;\n        base = modInv(base, mod);\n    }\n    while (isPositive(exp)) {\n        if (base === 0n) return 0n;\n        if (isOdd(exp)) r = r * base % mod;\n        exp = exp / 2n;\n        base = square(base) % mod;\n    }\n    return r;\n}\n\nfunction compareAbs(a, b) {\n    a = a >= 0n ? a : -a;\n    b = b >= 0n ? b : -b;\n    return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction isDivisibleBy(a, n) {\n    if (n === 0n) return false;\n    if (isUnit(n)) return true;\n    if (compareAbs(n, 2n) === 0) return isEven(a);\n    return a % n === 0n;\n}\n\nfunction isBasicPrime(v) {\n    var n = abs(v);\n    if (isUnit(n)) return false;\n    if (n === 2n || n === 3n || n === 5n) return true;\n    if (isEven(n) || isDivisibleBy(n, 3n) || isDivisibleBy(n, 5n)) return false;\n    if (n < 49n) return true;\n    // we don't know if it's prime: let the other functions figure it out\n}\n\nfunction prev(n) {\n    return n - 1n;\n}\n\nfunction millerRabinTest(n, a) {\n    var nPrev = prev(n),\n        b = nPrev,\n        r = 0,\n        d, i, x;\n    while (isEven(b)) b = b / 2n, r++;\n    next: for (i = 0; i < a.length; i++) {\n        if (n < a[i]) continue;\n        x = modPow(BigInt(a[i]), b, n);\n        if (isUnit(x) || x === nPrev) continue;\n        for (d = r - 1; d != 0; d--) {\n            x = square(x) % n;\n            if (isUnit(x)) return false;\n            if (x === nPrev) continue next;\n        }\n        return false;\n    }\n    return true;\n}\n\nfunction isPrime(p) {\n    var isPrime = isBasicPrime(p);\n    if (isPrime !== undefined) return isPrime;\n    var n = abs(p);\n    var bits = bitLength(n);\n    if (bits <= 64)\n        return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\n    var logN = Math.log(2) * Number(bits);\n    var t = Math.ceil(logN);\n    for (var a = [], i = 0; i < t; i++) {\n        a.push(BigInt(i + 2));\n    }\n    return millerRabinTest(n, a);\n}\n\nmodule.exports.bitLength = bitLength;\nmodule.exports.isOdd = isOdd;\nmodule.exports.isNegative = isNegative;\nmodule.exports.abs = abs;\nmodule.exports.isUnit = isUnit;\nmodule.exports.compare = compare;\nmodule.exports.modInv = modInv;\nmodule.exports.modPow = modPow;\nmodule.exports.isPrime = isPrime;\nmodule.exports.square = square;\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst buildInt = require(\"./build_int.js\");\nconst utils = require(\"./utils.js\");\nconst buildExp = require(\"./build_timesscalar\");\nconst buildBatchInverse = require(\"./build_batchinverse\");\nconst buildBatchConvertion = require(\"./build_batchconvertion\");\nconst buildBatchOp = require(\"./build_batchop\");\nconst { bitLength, modInv, modPow, isPrime, isOdd, square } = require(\"./bigint.js\");\n\nmodule.exports = function buildF1m(module, _q, _prefix, _intPrefix) {\n    const q = BigInt(_q);\n    const n64 = Math.floor((bitLength(q - 1n) - 1)/64) +1;\n    const n32 = n64*2;\n    const n8 = n64*8;\n\n    const prefix = _prefix || \"f1m\";\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const intPrefix = buildInt(module, n64, _intPrefix);\n    const pq = module.alloc(n8, utils.bigInt2BytesLE(q, n8));\n\n    const pR2 = module.alloc(utils.bigInt2BytesLE(square(1n << BigInt(n64*64)) % q, n8));\n    const pOne = module.alloc(utils.bigInt2BytesLE((1n << BigInt(n64*64)) % q, n8));\n    const pZero = module.alloc(utils.bigInt2BytesLE(0n, n8));\n    const _minusOne = q - 1n;\n    const _e = _minusOne >> 1n; // e = (p-1)/2\n    const pe = module.alloc(n8, utils.bigInt2BytesLE(_e, n8));\n\n    const _ePlusOne = _e + 1n; // e = (p-1)/2\n    const pePlusOne = module.alloc(n8, utils.bigInt2BytesLE(_ePlusOne, n8));\n\n    module.modules[prefix] = {\n        pq: pq,\n        pR2: pR2,\n        n64: n64,\n        q: q,\n        pOne: pOne,\n        pZero: pZero,\n        pePlusOne: pePlusOne\n    };\n\n    function buildOne() {\n        const f = module.addFunction(prefix+\"_one\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(intPrefix + \"_copy\", c.i32_const(pOne), c.getLocal(\"pr\")));\n    }\n\n    function buildAdd() {\n        const f = module.addFunction(prefix+\"_add\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.if(\n                c.call(intPrefix+\"_add\", c.getLocal(\"x\"),  c.getLocal(\"y\"), c.getLocal(\"r\")),\n                c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                c.if(\n                    c.call(intPrefix+\"_gte\", c.getLocal(\"r\"), c.i32_const(pq)  ),\n                    c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                )\n            )\n        );\n    }\n\n    function buildSub() {\n        const f = module.addFunction(prefix+\"_sub\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.if(\n                c.call(intPrefix+\"_sub\", c.getLocal(\"x\"),  c.getLocal(\"y\"), c.getLocal(\"r\")),\n                c.drop(c.call(intPrefix+\"_add\", c.getLocal(\"r\"),  c.i32_const(pq), c.getLocal(\"r\")))\n            )\n        );\n    }\n\n    function buildNeg() {\n        const f = module.addFunction(prefix+\"_neg\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(prefix + \"_sub\", c.i32_const(pZero), c.getLocal(\"x\"), c.getLocal(\"r\"))\n        );\n    }\n\n\n    function buildIsNegative() {\n        const f = module.addFunction(prefix+\"_isNegative\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.call(prefix + \"_fromMontgomery\", c.getLocal(\"x\"), AUX),\n            c.call(intPrefix + \"_gte\", AUX, c.i32_const(pePlusOne) )\n        );\n    }\n\n    function buildSign() {\n        const f = module.addFunction(prefix+\"_sign\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if (\n                c.call(intPrefix + \"_isZero\", c.getLocal(\"x\")),\n                c.ret(c.i32_const(0))\n            ),\n            c.call(prefix + \"_fromMontgomery\", c.getLocal(\"x\"), AUX),\n            c.if(\n                c.call(intPrefix + \"_gte\", AUX, c.i32_const(pePlusOne)),\n                c.ret(c.i32_const(-1))\n            ),\n            c.ret(c.i32_const(1))\n        );\n    }\n\n\n    function buildMReduct() {\n        const carries = module.alloc(n32*n32*8);\n\n        const f = module.addFunction(prefix+\"_mReduct\");\n        f.addParam(\"t\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"np32\", \"i64\");\n        f.addLocal(\"c\", \"i64\");\n        f.addLocal(\"m\", \"i64\");\n\n        const c = f.getCodeBuilder();\n\n        const np32 = Number(0x100000000n - modInv(q, 0x100000000n));\n\n        f.addCode(c.setLocal(\"np32\", c.i64_const(np32)));\n\n        for (let i=0; i<n32; i++) {\n            f.addCode(c.setLocal(\"c\", c.i64_const(0)));\n\n            f.addCode(\n                c.setLocal(\n                    \"m\",\n                    c.i64_and(\n                        c.i64_mul(\n                            c.i64_load32_u(c.getLocal(\"t\"), i*4),\n                            c.getLocal(\"np32\")\n                        ),\n                        c.i64_const(\"0xFFFFFFFF\")\n                    )\n                )\n            );\n\n            for (let j=0; j<n32; j++) {\n\n                f.addCode(\n                    c.setLocal(\"c\",\n                        c.i64_add(\n                            c.i64_add(\n                                c.i64_load32_u(c.getLocal(\"t\"), (i+j)*4),\n                                c.i64_shr_u(c.getLocal(\"c\"), c.i64_const(32))\n                            ),\n                            c.i64_mul(\n                                c.i64_load32_u(c.i32_const(pq), j*4),\n                                c.getLocal(\"m\")\n                            )\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.i64_store32(\n                        c.getLocal(\"t\"),\n                        (i+j)*4,\n                        c.getLocal(\"c\")\n                    )\n                );\n            }\n\n            f.addCode(\n                c.i64_store32(\n                    c.i32_const(carries),\n                    i*4,\n                    c.i64_shr_u(c.getLocal(\"c\"), c.i64_const(32))\n                )\n            );\n        }\n\n        f.addCode(\n            c.call(\n                prefix+\"_add\",\n                c.i32_const(carries),\n                c.i32_add(\n                    c.getLocal(\"t\"),\n                    c.i32_const(n32*4)\n                ),\n                c.getLocal(\"r\")\n            )\n        );\n    }\n\n\n\n    function buildMul() {\n\n        const f = module.addFunction(prefix+\"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"c0\", \"i64\");\n        f.addLocal(\"c1\", \"i64\");\n        f.addLocal(\"np32\", \"i64\");\n\n\n        for (let i=0;i<n32; i++) {\n            f.addLocal(\"x\"+i, \"i64\");\n            f.addLocal(\"y\"+i, \"i64\");\n            f.addLocal(\"m\"+i, \"i64\");\n            f.addLocal(\"q\"+i, \"i64\");\n        }\n\n        const c = f.getCodeBuilder();\n\n        const np32 = Number(0x100000000n - modInv(q, 0x100000000n));\n\n        f.addCode(c.setLocal(\"np32\", c.i64_const(np32)));\n\n\n        const loadX = [];\n        const loadY = [];\n        const loadQ = [];\n        function mulij(i, j) {\n            let X,Y;\n            if (!loadX[i]) {\n                X = c.teeLocal(\"x\"+i, c.i64_load32_u( c.getLocal(\"x\"), i*4));\n                loadX[i] = true;\n            } else {\n                X = c.getLocal(\"x\"+i);\n            }\n            if (!loadY[j]) {\n                Y = c.teeLocal(\"y\"+j, c.i64_load32_u( c.getLocal(\"y\"), j*4));\n                loadY[j] = true;\n            } else {\n                Y = c.getLocal(\"y\"+j);\n            }\n\n            return c.i64_mul( X, Y );\n        }\n\n        function mulqm(i, j) {\n            let Q,M;\n            if (!loadQ[i]) {\n                Q = c.teeLocal(\"q\"+i, c.i64_load32_u(c.i32_const(0), pq+i*4 ));\n                loadQ[i] = true;\n            } else {\n                Q = c.getLocal(\"q\"+i);\n            }\n            M = c.getLocal(\"m\"+j);\n\n            return c.i64_mul( Q, M );\n        }\n\n\n        let c0 = \"c0\";\n        let c1 = \"c1\";\n\n        for (let k=0; k<n32*2-1; k++) {\n            for (let i=Math.max(0, k-n32+1); (i<=k)&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n\n            for (let i=Math.max(1, k-n32+1); (i<=k)&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulqm(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n            if (k<n32) {\n                f.addCode(\n                    c.setLocal(\n                        \"m\"+k,\n                        c.i64_and(\n                            c.i64_mul(\n                                c.i64_and(\n                                    c.getLocal(c0),\n                                    c.i64_const(0xFFFFFFFF)\n                                ),\n                                c.getLocal(\"np32\")\n                            ),\n                            c.i64_const(\"0xFFFFFFFF\")\n                        )\n                    )\n                );\n\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulqm(0,k)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n\n            if (k>=n32) {\n                f.addCode(\n                    c.i64_store32(\n                        c.getLocal(\"r\"),\n                        (k-n32)*4,\n                        c.getLocal(c0)\n                    )\n                );\n            }\n            [c0, c1] = [c1, c0];\n            f.addCode(\n                c.setLocal(c1,\n                    c.i64_shr_u(\n                        c.getLocal(c0),\n                        c.i64_const(32)\n                    )\n                )\n            );\n        }\n        f.addCode(\n            c.i64_store32(\n                c.getLocal(\"r\"),\n                n32*4-4,\n                c.getLocal(c0)\n            )\n        );\n\n        f.addCode(\n            c.if(\n                c.i32_wrap_i64(c.getLocal(c1)),\n                c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                c.if(\n                    c.call(intPrefix+\"_gte\", c.getLocal(\"r\"), c.i32_const(pq)  ),\n                    c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                )\n            )\n        );\n    }\n\n\n    function buildSquare() {\n\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"c0\", \"i64\");\n        f.addLocal(\"c1\", \"i64\");\n        f.addLocal(\"c0_old\", \"i64\");\n        f.addLocal(\"c1_old\", \"i64\");\n        f.addLocal(\"np32\", \"i64\");\n\n\n        for (let i=0;i<n32; i++) {\n            f.addLocal(\"x\"+i, \"i64\");\n            f.addLocal(\"m\"+i, \"i64\");\n            f.addLocal(\"q\"+i, \"i64\");\n        }\n\n        const c = f.getCodeBuilder();\n\n        const np32 = Number(0x100000000n - modInv(q, 0x100000000n));\n\n        f.addCode(c.setLocal(\"np32\", c.i64_const(np32)));\n\n\n        const loadX = [];\n        const loadQ = [];\n        function mulij(i, j) {\n            let X,Y;\n            if (!loadX[i]) {\n                X = c.teeLocal(\"x\"+i, c.i64_load32_u( c.getLocal(\"x\"), i*4));\n                loadX[i] = true;\n            } else {\n                X = c.getLocal(\"x\"+i);\n            }\n            if (!loadX[j]) {\n                Y = c.teeLocal(\"x\"+j, c.i64_load32_u( c.getLocal(\"x\"), j*4));\n                loadX[j] = true;\n            } else {\n                Y = c.getLocal(\"x\"+j);\n            }\n\n            return c.i64_mul( X, Y );\n        }\n\n        function mulqm(i, j) {\n            let Q,M;\n            if (!loadQ[i]) {\n                Q = c.teeLocal(\"q\"+i, c.i64_load32_u(c.i32_const(0), pq+i*4 ));\n                loadQ[i] = true;\n            } else {\n                Q = c.getLocal(\"q\"+i);\n            }\n            M = c.getLocal(\"m\"+j);\n\n            return c.i64_mul( Q, M );\n        }\n\n\n        let c0 = \"c0\";\n        let c1 = \"c1\";\n        let c0_old = \"c0_old\";\n        let c1_old = \"c1_old\";\n\n        for (let k=0; k<n32*2-1; k++) {\n            f.addCode(\n                c.setLocal(c0, c.i64_const(0)),\n                c.setLocal(c1, c.i64_const(0)),\n            );\n            for (let i=Math.max(0, k-n32+1); (i<((k+1)>>1) )&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            // Multiply by 2\n            f.addCode(\n                c.setLocal(c0,\n                    c.i64_shl(\n                        c.i64_and(\n                            c.getLocal(c0),\n                            c.i64_const(0xFFFFFFFF)\n                        ),\n                        c.i64_const(1)\n                    )\n                )\n            );\n\n            f.addCode(\n                c.setLocal(c1,\n                    c.i64_add(\n                        c.i64_shl(\n                            c.getLocal(c1),\n                            c.i64_const(1)\n                        ),\n                        c.i64_shr_u(\n                            c.getLocal(c0),\n                            c.i64_const(32)\n                        )\n                    )\n                )\n            );\n\n            if (k%2 == 0) {\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulij(k>>1, k>>1)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            // Add the old carry\n\n            if (k>0) {\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            c.i64_and(\n                                c.getLocal(c0_old),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.i64_add(\n                                c.getLocal(c1),\n                                c.i64_shr_u(\n                                    c.getLocal(c0),\n                                    c.i64_const(32)\n                                )\n                            ),\n                            c.getLocal(c1_old)\n                        )\n                    )\n                );\n            }\n\n\n            for (let i=Math.max(1, k-n32+1); (i<=k)&&(i<n32); i++) {\n                const j= k-i;\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulqm(i,j)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n            if (k<n32) {\n                f.addCode(\n                    c.setLocal(\n                        \"m\"+k,\n                        c.i64_and(\n                            c.i64_mul(\n                                c.i64_and(\n                                    c.getLocal(c0),\n                                    c.i64_const(0xFFFFFFFF)\n                                ),\n                                c.getLocal(\"np32\")\n                            ),\n                            c.i64_const(\"0xFFFFFFFF\")\n                        )\n                    )\n                );\n\n\n                f.addCode(\n                    c.setLocal(c0,\n                        c.i64_add(\n                            c.i64_and(\n                                c.getLocal(c0),\n                                c.i64_const(0xFFFFFFFF)\n                            ),\n                            mulqm(0,k)\n                        )\n                    )\n                );\n\n                f.addCode(\n                    c.setLocal(c1,\n                        c.i64_add(\n                            c.getLocal(c1),\n                            c.i64_shr_u(\n                                c.getLocal(c0),\n                                c.i64_const(32)\n                            )\n                        )\n                    )\n                );\n            }\n\n            if (k>=n32) {\n                f.addCode(\n                    c.i64_store32(\n                        c.getLocal(\"r\"),\n                        (k-n32)*4,\n                        c.getLocal(c0)\n                    )\n                );\n            }\n            f.addCode(\n                c.setLocal(\n                    c0_old,\n                    c.getLocal(c1)\n                ),\n                c.setLocal(\n                    c1_old,\n                    c.i64_shr_u(\n                        c.getLocal(c0_old),\n                        c.i64_const(32)\n                    )\n                )\n            );\n        }\n        f.addCode(\n            c.i64_store32(\n                c.getLocal(\"r\"),\n                n32*4-4,\n                c.getLocal(c0_old)\n            )\n        );\n\n        f.addCode(\n            c.if(\n                c.i32_wrap_i64(c.getLocal(c1_old)),\n                c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                c.if(\n                    c.call(intPrefix+\"_gte\", c.getLocal(\"r\"), c.i32_const(pq)  ),\n                    c.drop(c.call(intPrefix+\"_sub\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\"))),\n                )\n            )\n        );\n    }\n\n\n    function buildSquareOld() {\n        const f = module.addFunction(prefix+\"_squareOld\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(prefix + \"_mul\", c.getLocal(\"x\"), c.getLocal(\"x\"), c.getLocal(\"r\")));\n    }\n\n    function buildToMontgomery() {\n        const f = module.addFunction(prefix+\"_toMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(prefix+\"_mul\", c.getLocal(\"x\"), c.i32_const(pR2), c.getLocal(\"r\")));\n    }\n\n    function buildFromMontgomery() {\n\n        const pAux2 = module.alloc(n8*2);\n\n        const f = module.addFunction(prefix+\"_fromMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(intPrefix + \"_copy\", c.getLocal(\"x\"), c.i32_const(pAux2) ));\n        f.addCode(c.call(intPrefix + \"_zero\", c.i32_const(pAux2 + n8) ));\n        f.addCode(c.call(prefix+\"_mReduct\", c.i32_const(pAux2), c.getLocal(\"r\")));\n    }\n\n    function buildInverse() {\n\n        const f = module.addFunction(prefix+ \"_inverse\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(prefix + \"_fromMontgomery\", c.getLocal(\"x\"), c.getLocal(\"r\")));\n        f.addCode(c.call(intPrefix + \"_inverseMod\", c.getLocal(\"r\"), c.i32_const(pq), c.getLocal(\"r\")));\n        f.addCode(c.call(prefix + \"_toMontgomery\", c.getLocal(\"r\"), c.getLocal(\"r\")));\n    }\n\n    // Calculate various valuse needed for sqrt\n\n\n    let _nqr = 2n;\n    if (isPrime(q)) {\n        while (modPow(_nqr, _e, q) !== _minusOne) _nqr = _nqr + 1n;\n    }\n\n    let s2 = 0;\n    let _t = _minusOne;\n\n    while ((!isOdd(_t))&&(_t !== 0n)) {\n        s2++;\n        _t = _t >> 1n;\n    }\n    const pt = module.alloc(n8, utils.bigInt2BytesLE(_t, n8));\n\n    const _nqrToT = modPow(_nqr, _t, q);\n    const pNqrToT = module.alloc(utils.bigInt2BytesLE((_nqrToT << BigInt(n64*64)) % q, n8));\n\n    const _tPlusOneOver2 = (_t + 1n) >> 1n;\n    const ptPlusOneOver2 = module.alloc(n8, utils.bigInt2BytesLE(_tPlusOneOver2, n8));\n\n    function buildSqrt() {\n\n        const f = module.addFunction(prefix+ \"_sqrt\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"m\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const ONE = c.i32_const(pOne);\n        const C = c.i32_const(module.alloc(n8));\n        const T = c.i32_const(module.alloc(n8));\n        const R = c.i32_const(module.alloc(n8));\n        const SQ = c.i32_const(module.alloc(n8));\n        const B = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n\n            // If (n==0) return 0\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"n\")),\n                c.ret(\n                    c.call(prefix + \"_zero\", c.getLocal(\"r\"))\n                )\n            ),\n\n            c.setLocal(\"m\", c.i32_const(s2)),\n            c.call(prefix + \"_copy\", c.i32_const(pNqrToT), C),\n            c.call(prefix + \"_exp\", c.getLocal(\"n\"), c.i32_const(pt), c.i32_const(n8), T),\n            c.call(prefix + \"_exp\", c.getLocal(\"n\"), c.i32_const(ptPlusOneOver2), c.i32_const(n8), R),\n\n            c.block(c.loop(\n                c.br_if(1, c.call(prefix + \"_eq\", T, ONE)),\n\n                c.call(prefix + \"_square\", T, SQ),\n                c.setLocal(\"i\", c.i32_const(1)),\n                c.block(c.loop(\n                    c.br_if(1, c.call(prefix + \"_eq\", SQ, ONE)),\n                    c.call(prefix + \"_square\", SQ, SQ),\n                    c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                    c.br(0)\n                )),\n\n                c.call(prefix + \"_copy\", C, B),\n                c.setLocal(\"j\", c.i32_sub(c.i32_sub( c.getLocal(\"m\"), c.getLocal(\"i\")), c.i32_const(1)) ),\n                c.block(c.loop(\n                    c.br_if(1, c.i32_eqz(c.getLocal(\"j\"))),\n                    c.call(prefix + \"_square\", B, B),\n                    c.setLocal(\"j\", c.i32_sub(c.getLocal(\"j\"), c.i32_const(1))),\n                    c.br(0)\n                )),\n\n                c.setLocal(\"m\", c.getLocal(\"i\")),\n                c.call(prefix + \"_square\", B, C),\n                c.call(prefix + \"_mul\", T, C, T),\n                c.call(prefix + \"_mul\", R, B, R),\n\n                c.br(0)\n            )),\n\n            c.if(\n                c.call(prefix + \"_isNegative\", R),\n                c.call(prefix + \"_neg\", R, c.getLocal(\"r\")),\n                c.call(prefix + \"_copy\", R, c.getLocal(\"r\")),\n            )\n        );\n    }\n\n    function buildIsSquare() {\n        const f = module.addFunction(prefix+\"_isSquare\");\n        f.addParam(\"n\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const ONE = c.i32_const(pOne);\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"n\")),\n                c.ret(c.i32_const(1))\n            ),\n            c.call(prefix + \"_exp\", c.getLocal(\"n\"), c.i32_const(pe), c.i32_const(n8), AUX),\n            c.call(prefix + \"_eq\", AUX, ONE)\n        );\n    }\n\n\n    function buildLoad() {\n        const f = module.addFunction(prefix+\"_load\");\n        f.addParam(\"scalar\", \"i32\");\n        f.addParam(\"scalarLen\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"p\", \"i32\");\n        f.addLocal(\"l\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        const c = f.getCodeBuilder();\n\n        const R = c.i32_const(module.alloc(n8));\n        const pAux = module.alloc(n8);\n        const AUX = c.i32_const(pAux);\n\n        f.addCode(\n            c.call(intPrefix + \"_zero\", c.getLocal(\"r\")),\n            c.setLocal(\"i\", c.i32_const(n8)),\n            c.setLocal(\"p\", c.getLocal(\"scalar\")),\n            c.block(c.loop(\n                c.br_if(1, c.i32_gt_u(c.getLocal(\"i\"), c.getLocal(\"scalarLen\"))),\n\n                c.if(\n                    c.i32_eq(c.getLocal(\"i\"), c.i32_const(n8)),\n                    c.call(prefix + \"_one\", R),\n                    c.call(prefix + \"_mul\", R, c.i32_const(pR2), R)\n                ),\n                c.call(prefix + \"_mul\", c.getLocal(\"p\"), R, AUX),\n                c.call(prefix + \"_add\", c.getLocal(\"r\"), AUX, c.getLocal(\"r\")),\n\n                c.setLocal(\"p\", c.i32_add(c.getLocal(\"p\"), c.i32_const(n8))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(n8))),\n                c.br(0)\n            )),\n\n            c.setLocal(\"l\", c.i32_rem_u( c.getLocal(\"scalarLen\"), c.i32_const(n8))),\n            c.if(c.i32_eqz(c.getLocal(\"l\")), c.ret([])),\n            c.call(intPrefix + \"_zero\", AUX),\n            c.setLocal(\"j\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq(c.getLocal(\"j\"), c.getLocal(\"l\"))),\n\n                c.i32_store8(\n                    c.getLocal(\"j\"),\n                    pAux,\n                    c.i32_load8_u(c.getLocal(\"p\")),\n                ),\n                c.setLocal(\"p\", c.i32_add(c.getLocal(\"p\"), c.i32_const(1))),\n                c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                c.br(0)\n            )),\n\n            c.if(\n                c.i32_eq(c.getLocal(\"i\"), c.i32_const(n8)),\n                c.call(prefix + \"_one\", R),\n                c.call(prefix + \"_mul\", R, c.i32_const(pR2), R)\n            ),\n            c.call(prefix + \"_mul\", AUX, R, AUX),\n            c.call(prefix + \"_add\", c.getLocal(\"r\"), AUX, c.getLocal(\"r\")),\n        );\n    }\n\n    function buildTimesScalar() {\n        const f = module.addFunction(prefix+\"_timesScalar\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"scalar\", \"i32\");\n        f.addParam(\"scalarLen\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.call(prefix + \"_load\", c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), AUX),\n            c.call(prefix + \"_toMontgomery\", AUX, AUX),\n            c.call(prefix + \"_mul\", c.getLocal(\"x\"), AUX, c.getLocal(\"r\")),\n        );\n    }\n\n    function buildIsOne() {\n        const f = module.addFunction(prefix+\"_isOne\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(\n            c.ret(c.call(intPrefix + \"_eq\", c.getLocal(\"x\"), c.i32_const(pOne)))\n        );\n    }\n\n\n    module.exportFunction(intPrefix + \"_copy\", prefix+\"_copy\");\n    module.exportFunction(intPrefix + \"_zero\", prefix+\"_zero\");\n    module.exportFunction(intPrefix + \"_isZero\", prefix+\"_isZero\");\n    module.exportFunction(intPrefix + \"_eq\", prefix+\"_eq\");\n\n    buildIsOne();\n    buildAdd();\n    buildSub();\n    buildNeg();\n    buildMReduct();\n    buildMul();\n    buildSquare();\n    buildSquareOld();\n    buildToMontgomery();\n    buildFromMontgomery();\n    buildIsNegative();\n    buildSign();\n    buildInverse();\n    buildOne();\n    buildLoad();\n    buildTimesScalar();\n    buildBatchInverse(module, prefix);\n    buildBatchConvertion(module, prefix + \"_batchToMontgomery\", prefix + \"_toMontgomery\", n8, n8);\n    buildBatchConvertion(module, prefix + \"_batchFromMontgomery\", prefix + \"_fromMontgomery\", n8, n8);\n    buildBatchConvertion(module, prefix + \"_batchNeg\", prefix + \"_neg\", n8, n8);\n    buildBatchOp(module, prefix + \"_batchAdd\", prefix + \"_add\", n8, n8);\n    buildBatchOp(module, prefix + \"_batchSub\", prefix + \"_sub\", n8, n8);\n    buildBatchOp(module, prefix + \"_batchMul\", prefix + \"_mul\", n8, n8);\n\n    module.exportFunction(prefix + \"_add\");\n    module.exportFunction(prefix + \"_sub\");\n    module.exportFunction(prefix + \"_neg\");\n    module.exportFunction(prefix + \"_isNegative\");\n    module.exportFunction(prefix + \"_isOne\");\n    module.exportFunction(prefix + \"_sign\");\n    module.exportFunction(prefix + \"_mReduct\");\n    module.exportFunction(prefix + \"_mul\");\n    module.exportFunction(prefix + \"_square\");\n    module.exportFunction(prefix + \"_squareOld\");\n    module.exportFunction(prefix + \"_fromMontgomery\");\n    module.exportFunction(prefix + \"_toMontgomery\");\n    module.exportFunction(prefix + \"_inverse\");\n    module.exportFunction(prefix + \"_one\");\n    module.exportFunction(prefix + \"_load\");\n    module.exportFunction(prefix + \"_timesScalar\");\n    buildExp(\n        module,\n        prefix + \"_exp\",\n        n8,\n        prefix + \"_mul\",\n        prefix + \"_square\",\n        intPrefix + \"_copy\",\n        prefix + \"_one\",\n    );\n    module.exportFunction(prefix + \"_exp\");\n    module.exportFunction(prefix + \"_batchInverse\");\n    if (isPrime(q)) {\n        buildSqrt();\n        buildIsSquare();\n        module.exportFunction(prefix + \"_sqrt\");\n        module.exportFunction(prefix + \"_isSquare\");\n    }\n    module.exportFunction(prefix + \"_batchToMontgomery\");\n    module.exportFunction(prefix + \"_batchFromMontgomery\");\n    // console.log(module.functionIdxByName);\n\n    return prefix;\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst buildF1m =require(\"./build_f1m.js\");\nconst { bitLength } = require(\"./bigint.js\");\n\nmodule.exports = function buildF1(module, _q, _prefix, _f1mPrefix, _intPrefix) {\n\n    const q = BigInt(_q);\n    const n64 = Math.floor((bitLength(q - 1n) - 1)/64) +1;\n    const n8 = n64*8;\n\n    const prefix = _prefix || \"f1\";\n    if (module.modules[prefix]) return prefix;  // already builded\n    module.modules[prefix] = {\n        n64: n64\n    };\n\n    const intPrefix = _intPrefix || \"int\";\n    const f1mPrefix = buildF1m(module, q, _f1mPrefix, intPrefix);\n\n\n    const pR2 =     module.modules[f1mPrefix].pR2;\n    const pq =     module.modules[f1mPrefix].pq;\n    const pePlusOne = module.modules[f1mPrefix].pePlusOne;\n\n    function buildMul() {\n        const pAux1 = module.alloc(n8);\n\n        const f = module.addFunction(prefix+ \"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(f1mPrefix + \"_mul\", c.getLocal(\"x\"), c.getLocal(\"y\"), c.i32_const(pAux1)));\n        f.addCode(c.call(f1mPrefix + \"_mul\", c.i32_const(pAux1), c.i32_const(pR2), c.getLocal(\"r\")));\n    }\n\n    function buildSquare() {\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(prefix + \"_mul\", c.getLocal(\"x\"), c.getLocal(\"x\"), c.getLocal(\"r\")));\n    }\n\n\n    function buildInverse() {\n\n        const f = module.addFunction(prefix+ \"_inverse\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(intPrefix + \"_inverseMod\", c.getLocal(\"x\"), c.i32_const(pq), c.getLocal(\"r\")));\n    }\n\n    function buildIsNegative() {\n        const f = module.addFunction(prefix+\"_isNegative\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(intPrefix + \"_gte\", c.getLocal(\"x\"), c.i32_const(pePlusOne) )\n        );\n    }\n\n\n    buildMul();\n    buildSquare();\n    buildInverse();\n    buildIsNegative();\n    module.exportFunction(f1mPrefix + \"_add\", prefix + \"_add\");\n    module.exportFunction(f1mPrefix + \"_sub\", prefix + \"_sub\");\n    module.exportFunction(f1mPrefix + \"_neg\", prefix + \"_neg\");\n    module.exportFunction(prefix + \"_mul\");\n    module.exportFunction(prefix + \"_square\");\n    module.exportFunction(prefix + \"_inverse\");\n    module.exportFunction(prefix + \"_isNegative\");\n    module.exportFunction(f1mPrefix + \"_copy\", prefix+\"_copy\");\n    module.exportFunction(f1mPrefix + \"_zero\", prefix+\"_zero\");\n    module.exportFunction(f1mPrefix + \"_one\", prefix+\"_one\");\n    module.exportFunction(f1mPrefix + \"_isZero\", prefix+\"_isZero\");\n    module.exportFunction(f1mPrefix + \"_eq\", prefix+\"_eq\");\n\n    return prefix;\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst buildExp = require(\"./build_timesscalar\");\nconst buildBatchInverse = require(\"./build_batchinverse\");\nconst utils = require(\"./utils.js\");\n\nmodule.exports = function buildF2m(module, mulNonResidueFn, prefix, f1mPrefix) {\n\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const f1n8 = module.modules[f1mPrefix].n64*8;\n    const q = module.modules[f1mPrefix].q;\n\n    module.modules[prefix] = {\n        n64: module.modules[f1mPrefix].n64*2\n    };\n\n    function buildAdd() {\n        const f = module.addFunction(prefix+\"_add\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_add\", x0, y0, r0),\n            c.call(f1mPrefix+\"_add\", x1, y1, r1),\n        );\n    }\n\n    function buildTimesScalar() {\n        const f = module.addFunction(prefix+\"_timesScalar\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"scalar\", \"i32\");\n        f.addParam(\"scalarLen\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_timesScalar\", x0, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r0),\n            c.call(f1mPrefix+\"_timesScalar\", x1, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r1),\n        );\n    }\n\n    function buildSub() {\n        const f = module.addFunction(prefix+\"_sub\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_sub\", x0, y0, r0),\n            c.call(f1mPrefix+\"_sub\", x1, y1, r1),\n        );\n    }\n\n    function buildNeg() {\n        const f = module.addFunction(prefix+\"_neg\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_neg\", x0, r0),\n            c.call(f1mPrefix+\"_neg\", x1, r1),\n        );\n    }\n\n    function buildConjugate() {\n        const f = module.addFunction(prefix+\"_conjugate\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_copy\", x0, r0),\n            c.call(f1mPrefix+\"_neg\", x1, r1),\n        );\n    }\n\n\n    function buildIsNegative() {\n        const f = module.addFunction(prefix+\"_isNegative\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.if(\n                c.call(f1mPrefix+\"_isZero\", x1),\n                c.ret(c.call(f1mPrefix+\"_isNegative\", x0))\n            ),\n            c.ret(c.call(f1mPrefix+\"_isNegative\", x1))\n        );\n    }\n\n    function buildMul() {\n        const f = module.addFunction(prefix+\"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        const A = c.i32_const(module.alloc(f1n8));\n        const B = c.i32_const(module.alloc(f1n8));\n        const C = c.i32_const(module.alloc(f1n8));\n        const D = c.i32_const(module.alloc(f1n8));\n\n\n        f.addCode(\n            c.call(f1mPrefix + \"_mul\", x0, y0, A),             // A = x0*y0\n            c.call(f1mPrefix + \"_mul\", x1, y1, B),             // B = x1*y1\n\n            c.call(f1mPrefix + \"_add\", x0, x1, C),             // C = x0 + x1\n            c.call(f1mPrefix + \"_add\", y0, y1, D),             // D = y0 + y1\n            c.call(f1mPrefix + \"_mul\", C, D, C),               // C = (x0 + x1)*(y0 + y1) = x0*y0+x0*y1+x1*y0+x1*y1\n\n            //  c.call(f1mPrefix + \"_mul\", B, c.i32_const(pNonResidue), r0),  // r0 = nr*(x1*y1)\n            c.call(mulNonResidueFn, B, r0),  // r0 = nr*(x1*y1)\n            c.call(f1mPrefix + \"_add\", A, r0, r0),             // r0 = x0*y0 + nr*(x1*y1)\n            c.call(f1mPrefix + \"_add\", A, B, r1),             // r1 = x0*y0+x1*y1\n            c.call(f1mPrefix + \"_sub\", C, r1, r1)              // r1 = x0*y0+x0*y1+x1*y0+x1*y1 - x0*y0+x1*y1 = x0*y1+x1*y0\n        );\n\n    }\n\n    function buildMul1() {\n        const f = module.addFunction(prefix+\"_mul1\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y = c.getLocal(\"y\");\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n\n        f.addCode(\n            c.call(f1mPrefix + \"_mul\", x0, y, r0),             // A = x0*y\n            c.call(f1mPrefix + \"_mul\", x1, y, r1),             // B = x1*y\n        );\n    }\n\n    function buildSquare() {\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        const AB = c.i32_const(module.alloc(f1n8));\n        const APB = c.i32_const(module.alloc(f1n8));\n        const APNB = c.i32_const(module.alloc(f1n8));\n        const ABPNAB = c.i32_const(module.alloc(f1n8));\n\n\n        f.addCode(\n            // AB = x0*y1\n            c.call(f1mPrefix + \"_mul\", x0, x1, AB),\n\n            // APB = x0+y1\n            c.call(f1mPrefix + \"_add\", x0, x1, APB),\n\n            // APBN0 = x0 + nr*x1\n            c.call(mulNonResidueFn, x1, APNB),\n            c.call(f1mPrefix + \"_add\", x0, APNB, APNB),\n\n            // ABPNAB = ab + nr*ab\n            c.call(mulNonResidueFn, AB, ABPNAB),\n            c.call(f1mPrefix + \"_add\", ABPNAB, AB, ABPNAB),\n\n            // r0 = APB * APNB - ABPNAB\n            c.call(f1mPrefix + \"_mul\", APB, APNB, r0),\n            c.call(f1mPrefix + \"_sub\", r0, ABPNAB, r0),\n\n            // r1 = AB + AB\n            c.call(f1mPrefix + \"_add\", AB, AB, r1),\n        );\n\n    }\n\n\n    function buildToMontgomery() {\n        const f = module.addFunction(prefix+\"_toMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_toMontgomery\", x0, r0),\n            c.call(f1mPrefix+\"_toMontgomery\", x1, r1)\n        );\n    }\n\n    function buildFromMontgomery() {\n        const f = module.addFunction(prefix+\"_fromMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_fromMontgomery\", x0, r0),\n            c.call(f1mPrefix+\"_fromMontgomery\", x1, r1)\n        );\n    }\n\n    function buildCopy() {\n        const f = module.addFunction(prefix+\"_copy\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_copy\", x0, r0),\n            c.call(f1mPrefix+\"_copy\", x1, r1)\n        );\n    }\n\n    function buildZero() {\n        const f = module.addFunction(prefix+\"_zero\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_zero\", x0),\n            c.call(f1mPrefix+\"_zero\", x1)\n        );\n    }\n\n    function buildOne() {\n        const f = module.addFunction(prefix+\"_one\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_one\", x0),\n            c.call(f1mPrefix+\"_zero\", x1)\n        );\n    }\n\n    function buildEq() {\n        const f = module.addFunction(prefix+\"_eq\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.i32_and(\n                c.call(f1mPrefix+\"_eq\", x0, y0),\n                c.call(f1mPrefix+\"_eq\", x1, y1)\n            )\n        );\n    }\n\n    function buildIsZero() {\n        const f = module.addFunction(prefix+\"_isZero\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.i32_and(\n                c.call(f1mPrefix+\"_isZero\", x0),\n                c.call(f1mPrefix+\"_isZero\", x1)\n            )\n        );\n    }\n\n    function buildInverse() {\n        const f = module.addFunction(prefix+\"_inverse\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n\n        const t0 = c.i32_const(module.alloc(f1n8));\n        const t1 = c.i32_const(module.alloc(f1n8));\n        const t2 = c.i32_const(module.alloc(f1n8));\n        const t3 = c.i32_const(module.alloc(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_square\", x0, t0),\n            c.call(f1mPrefix+\"_square\", x1, t1),\n            // c.call(f1mPrefix+\"_mul\", t1, c.i32_const(pNonResidue), t2),\n            c.call(mulNonResidueFn, t1, t2),\n\n            c.call(f1mPrefix+\"_sub\", t0, t2, t2),\n            c.call(f1mPrefix+\"_inverse\", t2, t3),\n\n            c.call(f1mPrefix+\"_mul\", x0, t3, r0),\n            c.call(f1mPrefix+\"_mul\", x1, t3, r1),\n            c.call(f1mPrefix+\"_neg\", r1, r1),\n        );\n    }\n\n\n    function buildSign() {\n        const f = module.addFunction(prefix+\"_sign\");\n        f.addParam(\"x\", \"i32\");\n        f.addLocal(\"s\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.setLocal(\"s\" , c.call( f1mPrefix + \"_sign\", x1)),\n            c.if(\n                c.getLocal(\"s\"),\n                c.ret(c.getLocal(\"s\"))\n            ),\n            c.ret(c.call( f1mPrefix + \"_sign\", x0))\n        );\n    }\n\n    function buildIsOne() {\n        const f = module.addFunction(prefix+\"_isOne\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n\n        f.addCode(\n            c.ret(c.i32_and(\n                c.call(f1mPrefix + \"_isOne\", x0),\n                c.call(f1mPrefix + \"_isZero\", x1),\n            ))\n        );\n    }\n\n\n    // Check here: https://eprint.iacr.org/2012/685.pdf\n    // Alg 9adj\n    function buildSqrt() {\n\n        const f = module.addFunction(prefix+\"_sqrt\");\n        f.addParam(\"a\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        // BigInt can't take `undefined` so we use `|| 0`\n        const e34 = c.i32_const(module.alloc(utils.bigInt2BytesLE((BigInt(q || 0) - 3n) / 4n, f1n8 )));\n        // BigInt can't take `undefined` so we use `|| 0`\n        const e12 = c.i32_const(module.alloc(utils.bigInt2BytesLE((BigInt(q || 0) - 1n) / 2n, f1n8 )));\n\n        const a = c.getLocal(\"a\");\n        const a1 = c.i32_const(module.alloc(f1n8*2));\n        const alpha = c.i32_const(module.alloc(f1n8*2));\n        const a0 = c.i32_const(module.alloc(f1n8*2));\n        const pn1 = module.alloc(f1n8*2);\n        const n1 = c.i32_const(pn1);\n        const n1a = c.i32_const(pn1);\n        const n1b = c.i32_const(pn1+f1n8);\n        const x0 = c.i32_const(module.alloc(f1n8*2));\n        const b = c.i32_const(module.alloc(f1n8*2));\n\n        f.addCode(\n\n            c.call(prefix + \"_one\", n1),\n            c.call(prefix + \"_neg\", n1, n1),\n\n            // const a1 = F.pow(a, F.sqrt_e34);\n            c.call(prefix + \"_exp\", a, e34, c.i32_const(f1n8), a1),\n\n            // const a1 = F.pow(a, F.sqrt_e34);\n            c.call(prefix + \"_square\", a1, alpha),\n            c.call(prefix + \"_mul\", a, alpha, alpha),\n\n            // const a0 = F.mul(F.frobenius(1, alfa), alfa);\n            c.call(prefix + \"_conjugate\", alpha, a0),\n            c.call(prefix + \"_mul\", a0, alpha, a0),\n\n            // if (F.eq(a0, F.negone)) return null;\n            c.if(c.call(prefix + \"_eq\",a0,n1), c.unreachable() ),\n\n            // const x0 = F.mul(a1, a);\n            c.call(prefix + \"_mul\", a1, a, x0),\n\n            // if (F.eq(alfa, F.negone)) {\n            c.if(\n                c.call(prefix + \"_eq\", alpha, n1),\n                [\n                    // x = F.mul(x0, [F.F.zero, F.F.one]);\n                    ...c.call(f1mPrefix + \"_zero\", n1a),\n                    ...c.call(f1mPrefix + \"_one\", n1b),\n                    ...c.call(prefix + \"_mul\", n1, x0, c.getLocal(\"pr\")),\n                ],\n                [\n                    // const b = F.pow(F.add(F.one, alfa), F.sqrt_e12);\n                    ...c.call(prefix + \"_one\", b),\n                    ...c.call(prefix + \"_add\", b, alpha, b),\n                    ...c.call(prefix + \"_exp\", b, e12, c.i32_const(f1n8), b),\n\n                    // x = F.mul(b, x0);\n                    ...c.call(prefix + \"_mul\", b, x0, c.getLocal(\"pr\")),\n                ]\n            )\n        );\n\n    }\n\n\n    function buildIsSquare() {\n\n        const f = module.addFunction(prefix+\"_isSquare\");\n        f.addParam(\"a\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        // BigInt can't take `undefined` so we use `|| 0`\n        const e34 = c.i32_const(module.alloc(utils.bigInt2BytesLE((BigInt(q || 0) - 3n) / 4n, f1n8 )));\n\n        const a = c.getLocal(\"a\");\n        const a1 = c.i32_const(module.alloc(f1n8*2));\n        const alpha = c.i32_const(module.alloc(f1n8*2));\n        const a0 = c.i32_const(module.alloc(f1n8*2));\n        const pn1 = module.alloc(f1n8*2);\n        const n1 = c.i32_const(pn1);\n\n        f.addCode(\n\n            c.call(prefix + \"_one\", n1),\n            c.call(prefix + \"_neg\", n1, n1),\n\n            // const a1 = F.pow(a, F.sqrt_e34);\n            c.call(prefix + \"_exp\", a, e34, c.i32_const(f1n8), a1),\n\n            // const a1 = F.pow(a, F.sqrt_e34);\n            c.call(prefix + \"_square\", a1, alpha),\n            c.call(prefix + \"_mul\", a, alpha, alpha),\n\n            // const a0 = F.mul(F.frobenius(1, alfa), alfa);\n            c.call(prefix + \"_conjugate\", alpha, a0),\n            c.call(prefix + \"_mul\", a0, alpha, a0),\n\n            // if (F.eq(a0, F.negone)) return null;\n            c.if(\n                c.call(\n                    prefix + \"_eq\",\n                    a0,\n                    n1\n                ),\n                c.ret(c.i32_const(0))\n            ),\n            c.ret(c.i32_const(1))\n        );\n\n    }\n\n\n    buildIsZero();\n    buildIsOne();\n    buildZero();\n    buildOne();\n    buildCopy();\n    buildMul();\n    buildMul1();\n    buildSquare();\n    buildAdd();\n    buildSub();\n    buildNeg();\n    buildConjugate();\n    buildToMontgomery();\n    buildFromMontgomery();\n    buildEq();\n    buildInverse();\n    buildTimesScalar();\n    buildSign();\n    buildIsNegative();\n\n    module.exportFunction(prefix + \"_isZero\");\n    module.exportFunction(prefix + \"_isOne\");\n    module.exportFunction(prefix + \"_zero\");\n    module.exportFunction(prefix + \"_one\");\n    module.exportFunction(prefix + \"_copy\");\n    module.exportFunction(prefix + \"_mul\");\n    module.exportFunction(prefix + \"_mul1\");\n    module.exportFunction(prefix + \"_square\");\n    module.exportFunction(prefix + \"_add\");\n    module.exportFunction(prefix + \"_sub\");\n    module.exportFunction(prefix + \"_neg\");\n    module.exportFunction(prefix + \"_sign\");\n    module.exportFunction(prefix + \"_conjugate\");\n    module.exportFunction(prefix + \"_fromMontgomery\");\n    module.exportFunction(prefix + \"_toMontgomery\");\n    module.exportFunction(prefix + \"_eq\");\n    module.exportFunction(prefix + \"_inverse\");\n    buildBatchInverse(module, prefix);\n    buildExp(\n        module,\n        prefix + \"_exp\",\n        f1n8*2,\n        prefix + \"_mul\",\n        prefix + \"_square\",\n        prefix + \"_copy\",\n        prefix + \"_one\",\n    );\n    buildSqrt();\n    buildIsSquare();\n\n    module.exportFunction(prefix + \"_exp\");\n    module.exportFunction(prefix + \"_timesScalar\");\n    module.exportFunction(prefix + \"_batchInverse\");\n    module.exportFunction(prefix + \"_sqrt\");\n    module.exportFunction(prefix + \"_isSquare\");\n    module.exportFunction(prefix + \"_isNegative\");\n\n\n    return prefix;\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\nconst buildExp = require(\"./build_timesscalar\");\nconst buildBatchInverse = require(\"./build_batchinverse\");\n\nmodule.exports = function buildF3m(module, mulNonResidueFn, prefix, f1mPrefix) {\n\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const f1n8 = module.modules[f1mPrefix].n64*8;\n    module.modules[prefix] = {\n        n64: module.modules[f1mPrefix].n64*3\n    };\n\n    function buildAdd() {\n        const f = module.addFunction(prefix+\"_add\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const y2 = c.i32_add(c.getLocal(\"y\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_add\", x0, y0, r0),\n            c.call(f1mPrefix+\"_add\", x1, y1, r1),\n            c.call(f1mPrefix+\"_add\", x2, y2, r2),\n        );\n    }\n\n    function buildTimesScalar() {\n        const f = module.addFunction(prefix+\"_timesScalar\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"scalar\", \"i32\");\n        f.addParam(\"scalarLen\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_timesScalar\", x0, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r0),\n            c.call(f1mPrefix+\"_timesScalar\", x1, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r1),\n            c.call(f1mPrefix+\"_timesScalar\", x2, c.getLocal(\"scalar\"), c.getLocal(\"scalarLen\"), r2),\n        );\n    }\n\n\n    function buildSub() {\n        const f = module.addFunction(prefix+\"_sub\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const y2 = c.i32_add(c.getLocal(\"y\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_sub\", x0, y0, r0),\n            c.call(f1mPrefix+\"_sub\", x1, y1, r1),\n            c.call(f1mPrefix+\"_sub\", x2, y2, r2),\n        );\n    }\n\n    function buildNeg() {\n        const f = module.addFunction(prefix+\"_neg\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_neg\", x0, r0),\n            c.call(f1mPrefix+\"_neg\", x1, r1),\n            c.call(f1mPrefix+\"_neg\", x2, r2),\n        );\n    }\n\n    function buildIsNegative() {\n        const f = module.addFunction(prefix+\"_isNegative\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.if(\n                c.call(f1mPrefix+\"_isZero\", x2),\n                c.if(\n                    c.call(f1mPrefix+\"_isZero\", x1),\n                    c.ret(c.call(f1mPrefix+\"_isNegative\", x0)),\n                    c.ret(c.call(f1mPrefix+\"_isNegative\", x1))\n                )\n            ),\n            c.ret(c.call(f1mPrefix+\"_isNegative\", x2))\n        );\n    }\n\n\n    function buildMul() {\n        const f = module.addFunction(prefix+\"_mul\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const cd = f.getCodeBuilder();\n\n        const a = cd.getLocal(\"x\");\n        const b = cd.i32_add(cd.getLocal(\"x\"), cd.i32_const(f1n8));\n        const c = cd.i32_add(cd.getLocal(\"x\"), cd.i32_const(2*f1n8));\n        const A = cd.getLocal(\"y\");\n        const B = cd.i32_add(cd.getLocal(\"y\"), cd.i32_const(f1n8));\n        const C = cd.i32_add(cd.getLocal(\"y\"), cd.i32_const(2*f1n8));\n        const r0 = cd.getLocal(\"r\");\n        const r1 = cd.i32_add(cd.getLocal(\"r\"), cd.i32_const(f1n8));\n        const r2 = cd.i32_add(cd.getLocal(\"r\"), cd.i32_const(2*f1n8));\n\n        const aA = cd.i32_const(module.alloc(f1n8));\n        const bB = cd.i32_const(module.alloc(f1n8));\n        const cC = cd.i32_const(module.alloc(f1n8));\n        const a_b = cd.i32_const(module.alloc(f1n8));\n        const A_B = cd.i32_const(module.alloc(f1n8));\n        const a_c = cd.i32_const(module.alloc(f1n8));\n        const A_C = cd.i32_const(module.alloc(f1n8));\n        const b_c = cd.i32_const(module.alloc(f1n8));\n        const B_C = cd.i32_const(module.alloc(f1n8));\n        const aA_bB = cd.i32_const(module.alloc(f1n8));\n        const aA_cC = cd.i32_const(module.alloc(f1n8));\n        const bB_cC = cd.i32_const(module.alloc(f1n8));\n        const AUX = cd.i32_const(module.alloc(f1n8));\n\n\n        f.addCode(\n            cd.call(f1mPrefix + \"_mul\", a, A, aA),\n            cd.call(f1mPrefix + \"_mul\", b, B, bB),\n            cd.call(f1mPrefix + \"_mul\", c, C, cC),\n\n            cd.call(f1mPrefix + \"_add\", a, b, a_b),\n            cd.call(f1mPrefix + \"_add\", A, B, A_B),\n            cd.call(f1mPrefix + \"_add\", a, c, a_c),\n            cd.call(f1mPrefix + \"_add\", A, C, A_C),\n            cd.call(f1mPrefix + \"_add\", b, c, b_c),\n            cd.call(f1mPrefix + \"_add\", B, C, B_C),\n\n            cd.call(f1mPrefix + \"_add\", aA, bB, aA_bB),\n            cd.call(f1mPrefix + \"_add\", aA, cC, aA_cC),\n            cd.call(f1mPrefix + \"_add\", bB, cC, bB_cC),\n\n            cd.call(f1mPrefix + \"_mul\", b_c, B_C, r0),\n            cd.call(f1mPrefix + \"_sub\", r0, bB_cC, r0),\n            cd.call(mulNonResidueFn, r0, r0),\n            cd.call(f1mPrefix + \"_add\", aA, r0, r0),\n\n            cd.call(f1mPrefix + \"_mul\", a_b, A_B, r1),\n            cd.call(f1mPrefix + \"_sub\", r1, aA_bB, r1),\n            cd.call(mulNonResidueFn, cC, AUX),\n            cd.call(f1mPrefix + \"_add\", r1, AUX, r1),\n\n            cd.call(f1mPrefix + \"_mul\", a_c, A_C, r2),\n            cd.call(f1mPrefix + \"_sub\", r2, aA_cC, r2),\n            cd.call(f1mPrefix + \"_add\", r2, bB, r2),\n        );\n\n    }\n\n    function buildSquare() {\n        const f = module.addFunction(prefix+\"_square\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const A = c.getLocal(\"x\");\n        const B = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const C = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        const s0 = c.i32_const(module.alloc(f1n8));\n        const ab = c.i32_const(module.alloc(f1n8));\n        const s1 = c.i32_const(module.alloc(f1n8));\n        const s2 = c.i32_const(module.alloc(f1n8));\n        const bc = c.i32_const(module.alloc(f1n8));\n        const s3 = c.i32_const(module.alloc(f1n8));\n        const s4 = c.i32_const(module.alloc(f1n8));\n\n\n        f.addCode(\n\n            c.call(f1mPrefix + \"_square\", A, s0),\n            c.call(f1mPrefix + \"_mul\", A, B, ab),\n            c.call(f1mPrefix + \"_add\", ab, ab, s1),\n\n            c.call(f1mPrefix + \"_sub\", A, B, s2),\n            c.call(f1mPrefix + \"_add\", s2, C, s2),\n            c.call(f1mPrefix + \"_square\", s2, s2),\n\n            c.call(f1mPrefix + \"_mul\", B, C, bc),\n            c.call(f1mPrefix + \"_add\", bc, bc, s3),\n\n            c.call(f1mPrefix + \"_square\", C, s4),\n\n            c.call(mulNonResidueFn, s3, r0),\n            c.call(f1mPrefix + \"_add\", s0, r0, r0),\n\n            c.call(mulNonResidueFn, s4, r1),\n            c.call(f1mPrefix + \"_add\", s1, r1, r1),\n\n            c.call(f1mPrefix + \"_add\", s0, s4, r2),\n            c.call(f1mPrefix + \"_sub\", s3, r2, r2),\n            c.call(f1mPrefix + \"_add\", s2, r2, r2),\n            c.call(f1mPrefix + \"_add\", s1, r2, r2),\n        );\n\n    }\n\n\n    function buildToMontgomery() {\n        const f = module.addFunction(prefix+\"_toMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_toMontgomery\", x0, r0),\n            c.call(f1mPrefix+\"_toMontgomery\", x1, r1),\n            c.call(f1mPrefix+\"_toMontgomery\", x2, r2)\n        );\n    }\n\n    function buildFromMontgomery() {\n        const f = module.addFunction(prefix+\"_fromMontgomery\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_fromMontgomery\", x0, r0),\n            c.call(f1mPrefix+\"_fromMontgomery\", x1, r1),\n            c.call(f1mPrefix+\"_fromMontgomery\", x2, r2)\n        );\n    }\n\n    function buildCopy() {\n        const f = module.addFunction(prefix+\"_copy\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_copy\", x0, r0),\n            c.call(f1mPrefix+\"_copy\", x1, r1),\n            c.call(f1mPrefix+\"_copy\", x2, r2),\n        );\n    }\n\n    function buildZero() {\n        const f = module.addFunction(prefix+\"_zero\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_zero\", x0),\n            c.call(f1mPrefix+\"_zero\", x1),\n            c.call(f1mPrefix+\"_zero\", x2),\n        );\n    }\n\n    function buildOne() {\n        const f = module.addFunction(prefix+\"_one\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_one\", x0),\n            c.call(f1mPrefix+\"_zero\", x1),\n            c.call(f1mPrefix+\"_zero\", x2),\n        );\n    }\n\n    function buildEq() {\n        const f = module.addFunction(prefix+\"_eq\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"y\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const y0 = c.getLocal(\"y\");\n        const y1 = c.i32_add(c.getLocal(\"y\"), c.i32_const(f1n8));\n        const y2 = c.i32_add(c.getLocal(\"y\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.i32_and(\n                c.i32_and(\n                    c.call(f1mPrefix+\"_eq\", x0, y0),\n                    c.call(f1mPrefix+\"_eq\", x1, y1),\n                ),\n                c.call(f1mPrefix+\"_eq\", x2, y2)\n            )\n        );\n    }\n\n    function buildIsZero() {\n        const f = module.addFunction(prefix+\"_isZero\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.i32_and(\n                c.i32_and(\n                    c.call(f1mPrefix+\"_isZero\", x0),\n                    c.call(f1mPrefix+\"_isZero\", x1)\n                ),\n                c.call(f1mPrefix+\"_isZero\", x2)\n            )\n        );\n    }\n\n    function buildInverse() {\n        const f = module.addFunction(prefix+\"_inverse\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n        const r0 = c.getLocal(\"r\");\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f1n8));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f1n8));\n\n        const t0 = c.i32_const(module.alloc(f1n8));\n        const t1 = c.i32_const(module.alloc(f1n8));\n        const t2 = c.i32_const(module.alloc(f1n8));\n        const t3 = c.i32_const(module.alloc(f1n8));\n        const t4 = c.i32_const(module.alloc(f1n8));\n        const t5 = c.i32_const(module.alloc(f1n8));\n        const c0 = c.i32_const(module.alloc(f1n8));\n        const c1 = c.i32_const(module.alloc(f1n8));\n        const c2 = c.i32_const(module.alloc(f1n8));\n        const t6 = c.i32_const(module.alloc(f1n8));\n        const AUX = c.i32_const(module.alloc(f1n8));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_square\", x0, t0),\n            c.call(f1mPrefix+\"_square\", x1, t1),\n            c.call(f1mPrefix+\"_square\", x2, t2),\n            c.call(f1mPrefix+\"_mul\", x0, x1, t3),\n            c.call(f1mPrefix+\"_mul\", x0, x2, t4),\n            c.call(f1mPrefix+\"_mul\", x1, x2, t5),\n\n            c.call(mulNonResidueFn, t5, c0),\n            c.call(f1mPrefix+\"_sub\", t0, c0, c0),\n\n            c.call(mulNonResidueFn, t2, c1),\n            c.call(f1mPrefix+\"_sub\", c1, t3, c1),\n\n            c.call(f1mPrefix+\"_sub\", t1, t4, c2),\n\n            c.call(f1mPrefix+\"_mul\", x2, c1, t6),\n            c.call(f1mPrefix+\"_mul\", x1, c2, AUX),\n            c.call(f1mPrefix+\"_add\", t6, AUX, t6),\n            c.call(mulNonResidueFn, t6, t6),\n            c.call(f1mPrefix+\"_mul\", x0, c0, AUX),\n            c.call(f1mPrefix+\"_add\", AUX, t6, t6),\n\n            c.call(f1mPrefix+\"_inverse\", t6, t6),\n\n            c.call(f1mPrefix+\"_mul\", t6, c0, r0),\n            c.call(f1mPrefix+\"_mul\", t6, c1, r1),\n            c.call(f1mPrefix+\"_mul\", t6, c2, r2)\n        );\n    }\n\n\n    function buildSign() {\n        const f = module.addFunction(prefix+\"_sign\");\n        f.addParam(\"x\", \"i32\");\n        f.addLocal(\"s\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f1n8));\n\n        f.addCode(\n            c.setLocal(\"s\" , c.call( f1mPrefix + \"_sign\", x2)),\n            c.if(\n                c.getLocal(\"s\"),\n                c.ret(c.getLocal(\"s\"))\n            ),\n            c.setLocal(\"s\" , c.call( f1mPrefix + \"_sign\", x1)),\n            c.if(\n                c.getLocal(\"s\"),\n                c.ret(c.getLocal(\"s\"))\n            ),\n            c.ret(c.call( f1mPrefix + \"_sign\", x0))\n        );\n    }\n\n    function buildIsOne() {\n        const f = module.addFunction(prefix+\"_isOne\");\n        f.addParam(\"x\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1n8*2));\n\n        f.addCode(\n            c.ret(\n                c.i32_and(\n                    c.i32_and(\n                        c.call(f1mPrefix + \"_isOne\", x0),\n                        c.call(f1mPrefix + \"_isZero\", x1)\n                    ),\n                    c.call(f1mPrefix + \"_isZero\", x2)\n                )\n            )\n        );\n    }\n\n    buildIsZero();\n    buildIsOne();\n    buildZero();\n    buildOne();\n    buildCopy();\n    buildMul();\n    buildSquare();\n    buildAdd();\n    buildSub();\n    buildNeg();\n    buildSign();\n    buildToMontgomery();\n    buildFromMontgomery();\n    buildEq();\n    buildInverse();\n    buildTimesScalar();\n    buildIsNegative();\n\n    module.exportFunction(prefix + \"_isZero\");\n    module.exportFunction(prefix + \"_isOne\");\n    module.exportFunction(prefix + \"_zero\");\n    module.exportFunction(prefix + \"_one\");\n    module.exportFunction(prefix + \"_copy\");\n    module.exportFunction(prefix + \"_mul\");\n    module.exportFunction(prefix + \"_square\");\n    module.exportFunction(prefix + \"_add\");\n    module.exportFunction(prefix + \"_sub\");\n    module.exportFunction(prefix + \"_neg\");\n    module.exportFunction(prefix + \"_sign\");\n    module.exportFunction(prefix + \"_fromMontgomery\");\n    module.exportFunction(prefix + \"_toMontgomery\");\n    module.exportFunction(prefix + \"_eq\");\n    module.exportFunction(prefix + \"_inverse\");\n    buildBatchInverse(module, prefix);\n    buildExp(\n        module,\n        prefix + \"_exp\",\n        f1n8*3,\n        prefix + \"_mul\",\n        prefix + \"_square\",\n        prefix + \"_copy\",\n        prefix + \"_one\"\n    );\n    module.exportFunction(prefix + \"_exp\");\n    module.exportFunction(prefix + \"_timesScalar\");\n    module.exportFunction(prefix + \"_batchInverse\");\n    module.exportFunction(prefix + \"_isNegative\");\n\n    return prefix;\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = function buildTimesScalarNAF(module, fnName, elementLen, opAB, opAA, opAmB, opCopy, opInit) {\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"base\", \"i32\");\n    f.addParam(\"scalar\", \"i32\");\n    f.addParam(\"scalarLength\", \"i32\");\n    f.addParam(\"r\", \"i32\");\n    f.addLocal(\"old0\", \"i32\");\n    f.addLocal(\"nbits\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"last\", \"i32\");\n    f.addLocal(\"cur\", \"i32\");\n    f.addLocal(\"carry\", \"i32\");\n    f.addLocal(\"p\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    const aux = c.i32_const(module.alloc(elementLen));\n\n    function getBit(IDX) {\n        return c.i32_and(\n            c.i32_shr_u(\n                c.i32_load(\n                    c.i32_add(\n                        c.getLocal(\"scalar\"),\n                        c.i32_and(\n                            c.i32_shr_u(\n                                IDX,\n                                c.i32_const(3)\n                            ),\n                            c.i32_const(0xFFFFFFFC)\n                        )\n                    )\n                ),\n                c.i32_and(\n                    IDX,\n                    c.i32_const(0x1F)\n                )\n            ),\n            c.i32_const(1)\n        );\n    }\n\n    function pushBit(b) {\n        return [\n            ...c.i32_store8(\n                c.getLocal(\"p\"),\n                c.i32_const(b)\n            ),\n            ...c.setLocal(\n                \"p\",\n                c.i32_add(\n                    c.getLocal(\"p\"),\n                    c.i32_const(1)\n                )\n            )\n        ];\n    }\n\n    f.addCode(\n        c.if(\n            c.i32_eqz(c.getLocal(\"scalarLength\")),\n            [\n                ...c.call(opInit, c.getLocal(\"r\")),\n                ...c.ret([])\n            ]\n        ),\n        c.setLocal(\"nbits\", c.i32_shl(c.getLocal(\"scalarLength\"), c.i32_const(3))),\n        c.setLocal(\"old0\", c.i32_load(c.i32_const(0))),\n        c.setLocal(\"p\", c.getLocal(\"old0\")),\n        c.i32_store(\n            c.i32_const(0),\n            c.i32_and(\n                c.i32_add(\n                    c.i32_add(\n                        c.getLocal(\"old0\"),\n                        c.i32_const(32)\n                    ),\n                    c.getLocal(\"nbits\")\n                ),\n                c.i32_const(0xFFFFFFF8)\n            )\n        ),\n        c.setLocal(\"i\", c.i32_const(1)),\n\n        c.setLocal(\"last\",getBit(c.i32_const(0))),\n        c.setLocal(\"carry\",c.i32_const(0)),\n\n        c.block(c.loop(\n            c.br_if(1, c.i32_eq( c.getLocal(\"i\"), c.getLocal(\"nbits\"))),\n\n            c.setLocal(\"cur\", getBit(c.getLocal(\"i\"))),\n            c.if( c.getLocal(\"last\"),\n                c.if( c.getLocal(\"cur\"),\n                    c.if(c.getLocal(\"carry\"),\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(1)),\n                            ...pushBit(1)\n                        ]\n                        ,\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(1)),\n                            ...pushBit(255)\n                        ],\n                    ),\n                    c.if(c.getLocal(\"carry\"),\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(1)),\n                            ...pushBit(255)\n                        ]\n                        ,\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(0)),\n                            ...pushBit(1)\n                        ],\n                    ),\n                ),\n                c.if( c.getLocal(\"cur\"),\n                    c.if(c.getLocal(\"carry\"),\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(1)),\n                            ...pushBit(0)\n                        ]\n                        ,\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(1)),\n                            ...c.setLocal(\"carry\", c.i32_const(0)),\n                            ...pushBit(0)\n                        ],\n                    ),\n                    c.if(c.getLocal(\"carry\"),\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(1)),\n                            ...c.setLocal(\"carry\", c.i32_const(0)),\n                            ...pushBit(0)\n                        ]\n                        ,\n                        [\n                            ...c.setLocal(\"last\", c.i32_const(0)),\n                            ...c.setLocal(\"carry\", c.i32_const(0)),\n                            ...pushBit(0)\n                        ],\n                    ),\n                )\n            ),\n            c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n            c.br(0)\n        )),\n\n        c.if( c.getLocal(\"last\"),\n            c.if(c.getLocal(\"carry\"),\n                [\n                    ...pushBit(255),\n                    ...pushBit(0),\n                    ...pushBit(1)\n                ]\n                ,\n                [\n                    ...pushBit(1)\n                ],\n            ),\n            c.if(c.getLocal(\"carry\"),\n                [\n                    ...pushBit(0),\n                    ...pushBit(1)\n                ]\n            ),\n        ),\n\n        c.setLocal(\"p\", c.i32_sub(c.getLocal(\"p\"), c.i32_const(1))),\n\n        // p already points to the last bit\n\n        c.call(opCopy, c.getLocal(\"base\"), aux),\n\n        c.call(opInit, c.getLocal(\"r\")),\n\n        c.block(c.loop(\n\n\n            c.call(opAA, c.getLocal(\"r\"), c.getLocal(\"r\")),\n\n\n            c.setLocal(\"cur\",\n                c.i32_load8_u(\n                    c.getLocal(\"p\")\n                )\n            ),\n\n            c.if(\n                c.getLocal(\"cur\"),\n                c.if(\n                    c.i32_eq(c.getLocal(\"cur\"), c.i32_const(1)),\n                    c.call(opAB,  c.getLocal(\"r\"), aux, c.getLocal(\"r\")),\n                    c.call(opAmB, c.getLocal(\"r\"), aux, c.getLocal(\"r\")),\n                )\n            ),\n\n            c.br_if(1, c.i32_eq( c.getLocal(\"old0\"), c.getLocal(\"p\"))),\n            c.setLocal(\"p\", c.i32_sub(c.getLocal(\"p\"), c.i32_const(1))),\n            c.br(0)\n\n        )),\n\n        c.i32_store( c.i32_const(0), c.getLocal(\"old0\"))\n\n    );\n\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = function buildMultiexp(module, prefix, fnName, opAdd, n8b) {\n\n    const n64g = module.modules[prefix].n64;\n    const n8g = n64g*8;\n\n    function buildGetChunk() {\n        const f = module.addFunction(fnName + \"_getChunk\");\n        f.addParam(\"pScalar\", \"i32\");\n        f.addParam(\"scalarSize\", \"i32\");  // Number of bytes of the scalar\n        f.addParam(\"startBit\", \"i32\");  // Bit to start extract\n        f.addParam(\"chunkSize\", \"i32\");  // Chunk size in bits\n        f.addLocal(\"bitsToEnd\", \"i32\");\n        f.addLocal(\"mask\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\"bitsToEnd\",\n                c.i32_sub(\n                    c.i32_mul(\n                        c.getLocal(\"scalarSize\"),\n                        c.i32_const(8)\n                    ),\n                    c.getLocal(\"startBit\")\n                )\n            ),\n            c.if(\n                c.i32_gt_s(\n                    c.getLocal(\"chunkSize\"),\n                    c.getLocal(\"bitsToEnd\")\n                ),\n                c.setLocal(\n                    \"mask\",\n                    c.i32_sub(\n                        c.i32_shl(\n                            c.i32_const(1),\n                            c.getLocal(\"bitsToEnd\")\n                        ),\n                        c.i32_const(1)\n                    )\n                ),\n                c.setLocal(\n                    \"mask\",\n                    c.i32_sub(\n                        c.i32_shl(\n                            c.i32_const(1),\n                            c.getLocal(\"chunkSize\")\n                        ),\n                        c.i32_const(1)\n                    )\n                )\n            ),\n            c.i32_and(\n                c.i32_shr_u(\n                    c.i32_load(\n                        c.i32_add(\n                            c.getLocal(\"pScalar\"),\n                            c.i32_shr_u(\n                                c.getLocal(\"startBit\"),\n                                c.i32_const(3)\n                            )\n                        ),\n                        0,  // offset\n                        0   // align to byte.\n                    ),\n                    c.i32_and(\n                        c.getLocal(\"startBit\"),\n                        c.i32_const(0x7)\n                    )\n                ),\n                c.getLocal(\"mask\")\n            )\n        );\n    }\n\n    function buildMutiexpChunk() {\n        const f = module.addFunction(fnName + \"_chunk\");\n        f.addParam(\"pBases\", \"i32\");\n        f.addParam(\"pScalars\", \"i32\");\n        f.addParam(\"scalarSize\", \"i32\");  // Number of points\n        f.addParam(\"n\", \"i32\");  // Number of points\n        f.addParam(\"startBit\", \"i32\");  // bit where it starts the chunk\n        f.addParam(\"chunkSize\", \"i32\");  // bit where it starts the chunk\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"nChunks\", \"i32\");\n        f.addLocal(\"itScalar\", \"i32\");\n        f.addLocal(\"endScalar\", \"i32\");\n        f.addLocal(\"itBase\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"nTable\", \"i32\");\n        f.addLocal(\"pTable\", \"i32\");\n        f.addLocal(\"idx\", \"i32\");\n        f.addLocal(\"pIdxTable\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.if(\n                c.i32_eqz(c.getLocal(\"n\")),\n                [\n                    ...c.call(prefix + \"_zero\", c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n\n            // Allocate memory\n\n            c.setLocal(\n                \"nTable\",\n                c.i32_shl(\n                    c.i32_const(1),\n                    c.getLocal(\"chunkSize\")\n                )\n            ),\n            c.setLocal(\"pTable\", c.i32_load( c.i32_const(0) )),\n            c.i32_store(\n                c.i32_const(0),\n                c.i32_add(\n                    c.getLocal(\"pTable\"),\n                    c.i32_mul(\n                        c.getLocal(\"nTable\"),\n                        c.i32_const(n8g)\n                    )\n                )\n            ),\n\n            // Reset Table\n            c.setLocal(\"j\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"j\"),\n                        c.getLocal(\"nTable\")\n                    )\n                ),\n\n                c.call(\n                    prefix + \"_zero\",\n                    c.i32_add(\n                        c.getLocal(\"pTable\"),\n                        c.i32_mul(\n                            c.getLocal(\"j\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                c.br(0)\n            )),\n\n            // Distribute elements\n            c.setLocal(\"itBase\", c.getLocal(\"pBases\")),\n            c.setLocal(\"itScalar\", c.getLocal(\"pScalars\")),\n            c.setLocal(\"endScalar\",\n                c.i32_add(\n                    c.getLocal(\"pScalars\"),\n                    c.i32_mul(\n                        c.getLocal(\"n\"),\n                        c.getLocal(\"scalarSize\")\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"itScalar\"),\n                        c.getLocal(\"endScalar\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx\",\n                    c.call(fnName + \"_getChunk\",\n                        c.getLocal(\"itScalar\"),\n                        c.getLocal(\"scalarSize\"),\n                        c.getLocal(\"startBit\"),\n                        c.getLocal(\"chunkSize\")\n                    )\n                ),\n\n                c.if(\n                    c.getLocal(\"idx\"),\n                    [\n                        ...c.setLocal(\n                            \"pIdxTable\",\n                            c.i32_add(\n                                c.getLocal(\"pTable\"),\n                                c.i32_mul(\n                                    c.i32_sub(\n                                        c.getLocal(\"idx\"),\n                                        c.i32_const(1)\n                                    ),\n                                    c.i32_const(n8g)\n                                )\n                            )\n                        ),\n                        ...c.call(\n                            opAdd,\n                            c.getLocal(\"pIdxTable\"),\n                            c.getLocal(\"itBase\"),\n                            c.getLocal(\"pIdxTable\"),\n                        )\n                    ]\n                ),\n\n                c.setLocal(\"itScalar\", c.i32_add(c.getLocal(\"itScalar\"), c.getLocal(\"scalarSize\"))),\n                c.setLocal(\"itBase\", c.i32_add(c.getLocal(\"itBase\"), c.i32_const(n8b))),\n                c.br(0)\n            )),\n\n            c.call(fnName + \"_reduceTable\", c.getLocal(\"pTable\"), c.getLocal(\"chunkSize\")),\n            c.call(\n                prefix + \"_copy\",\n                c.getLocal(\"pTable\"),\n                c.getLocal(\"pr\")\n            ),\n\n\n            c.i32_store(\n                c.i32_const(0),\n                c.getLocal(\"pTable\")\n            )\n\n        );\n    }\n\n    function buildMultiexp() {\n        const f = module.addFunction(fnName);\n        f.addParam(\"pBases\", \"i32\");\n        f.addParam(\"pScalars\", \"i32\");\n        f.addParam(\"scalarSize\", \"i32\");  // Number of points\n        f.addParam(\"n\", \"i32\");  // Number of points\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"chunkSize\", \"i32\");\n        f.addLocal(\"nChunks\", \"i32\");\n        f.addLocal(\"itScalar\", \"i32\");\n        f.addLocal(\"endScalar\", \"i32\");\n        f.addLocal(\"itBase\", \"i32\");\n        f.addLocal(\"itBit\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"nTable\", \"i32\");\n        f.addLocal(\"pTable\", \"i32\");\n        f.addLocal(\"idx\", \"i32\");\n        f.addLocal(\"pIdxTable\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8g));\n\n        const pTSizes = module.alloc([\n            17, 17, 17, 17,   17, 17, 17, 17,\n            17, 17, 16, 16,   15, 14, 13, 13,\n            12, 11, 10,  9,    8,  7,  7,  6,\n            5 ,  4,  3,  2,    1,  1,  1,  1\n        ]);\n\n        f.addCode(\n            c.call(prefix + \"_zero\", c.getLocal(\"pr\")),\n            c.if(\n                c.i32_eqz(c.getLocal(\"n\")),\n                c.ret([])\n            ),\n            c.setLocal(\"chunkSize\", c.i32_load8_u( c.i32_clz(c.getLocal(\"n\")),  pTSizes )),\n            c.setLocal(\n                \"nChunks\",\n                c.i32_add(\n                    c.i32_div_u(\n                        c.i32_sub(\n                            c.i32_shl(\n                                c.getLocal(\"scalarSize\"),\n                                c.i32_const(3)\n                            ),\n                            c.i32_const(1)\n                        ),\n                        c.getLocal(\"chunkSize\")\n                    ),\n                    c.i32_const(1)\n                )\n            ),\n\n\n            // Allocate memory\n\n            c.setLocal(\n                \"itBit\",\n                c.i32_mul(\n                    c.i32_sub(\n                        c.getLocal(\"nChunks\"),\n                        c.i32_const(1)\n                    ),\n                    c.getLocal(\"chunkSize\")\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_lt_s(\n                        c.getLocal(\"itBit\"),\n                        c.i32_const(0)\n                    )\n                ),\n\n                // Double nChunk times\n                c.if(\n                    c.i32_eqz(c.call(prefix + \"_isZero\", c.getLocal(\"pr\"))),\n                    [\n                        ...c.setLocal(\"j\", c.i32_const(0)),\n                        ...c.block(c.loop(\n                            c.br_if(\n                                1,\n                                c.i32_eq(\n                                    c.getLocal(\"j\"),\n                                    c.getLocal(\"chunkSize\")\n                                )\n                            ),\n\n                            c.call(prefix + \"_double\", c.getLocal(\"pr\"), c.getLocal(\"pr\")),\n\n                            c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                            c.br(0)\n                        ))\n                    ]\n                ),\n\n                c.call(\n                    fnName + \"_chunk\",\n                    c.getLocal(\"pBases\"),\n                    c.getLocal(\"pScalars\"),\n                    c.getLocal(\"scalarSize\"),\n                    c.getLocal(\"n\"),\n                    c.getLocal(\"itBit\"),\n                    c.getLocal(\"chunkSize\"),\n                    aux\n                ),\n\n                c.call(\n                    prefix + \"_add\",\n                    c.getLocal(\"pr\"),\n                    aux,\n                    c.getLocal(\"pr\")\n                ),\n                c.setLocal(\"itBit\", c.i32_sub(c.getLocal(\"itBit\"), c.getLocal(\"chunkSize\"))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildReduceTable() {\n        const f = module.addFunction(fnName + \"_reduceTable\");\n        f.addParam(\"pTable\", \"i32\");\n        f.addParam(\"p\", \"i32\");  // Number of bits of the table\n        f.addLocal(\"half\", \"i32\");\n        f.addLocal(\"it1\", \"i32\");\n        f.addLocal(\"it2\", \"i32\");\n        f.addLocal(\"pAcc\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.if(\n                c.i32_eq(c.getLocal(\"p\"), c.i32_const(1)),\n                c.ret([])\n            ),\n            c.setLocal(\n                \"half\",\n                c.i32_shl(\n                    c.i32_const(1),\n                    c.i32_sub(\n                        c.getLocal(\"p\"),\n                        c.i32_const(1)\n                    )\n                )\n            ),\n\n            c.setLocal(\"it1\", c.getLocal(\"pTable\")),\n            c.setLocal(\n                \"it2\",\n                c.i32_add(\n                    c.getLocal(\"pTable\"),\n                    c.i32_mul(\n                        c.getLocal(\"half\"),\n                        c.i32_const(n8g)\n                    )\n                )\n            ),\n            c.setLocal(\"pAcc\",\n                c.i32_sub(\n                    c.getLocal(\"it2\"),\n                    c.i32_const(n8g)\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"it1\"),\n                        c.getLocal(\"pAcc\")\n                    )\n                ),\n                c.call(\n                    prefix + \"_add\",\n                    c.getLocal(\"it1\"),\n                    c.getLocal(\"it2\"),\n                    c.getLocal(\"it1\")\n                ),\n                c.call(\n                    prefix + \"_add\",\n                    c.getLocal(\"pAcc\"),\n                    c.getLocal(\"it2\"),\n                    c.getLocal(\"pAcc\")\n                ),\n                c.setLocal(\"it1\", c.i32_add(c.getLocal(\"it1\"), c.i32_const(n8g))),\n                c.setLocal(\"it2\", c.i32_add(c.getLocal(\"it2\"), c.i32_const(n8g))),\n                c.br(0)\n            )),\n\n            c.call(\n                fnName + \"_reduceTable\",\n                c.getLocal(\"pTable\"),\n                c.i32_sub(\n                    c.getLocal(\"p\"),\n                    c.i32_const(1)\n                )\n            ),\n\n            c.setLocal(\"p\", c.i32_sub(c.getLocal(\"p\"), c.i32_const(1))),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eqz(c.getLocal(\"p\"))),\n                c.call(prefix + \"_double\", c.getLocal(\"pAcc\"), c.getLocal(\"pAcc\")),\n                c.setLocal(\"p\", c.i32_sub(c.getLocal(\"p\"), c.i32_const(1))),\n                c.br(0)\n            )),\n\n            c.call(prefix + \"_add\", c.getLocal(\"pTable\"), c.getLocal(\"pAcc\"), c.getLocal(\"pTable\"))\n        );\n    }\n\n    buildGetChunk();\n    buildReduceTable();\n    buildMutiexpChunk();\n    buildMultiexp();\n\n    module.exportFunction(fnName);\n    module.exportFunction(fnName +\"_chunk\");\n\n\n};\n\n\n\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst buildTimesScalarNAF = require(\"./build_timesscalarnaf\");\n//const buildTimesScalar = require(\"./build_timesscalar\");\nconst buildBatchConvertion = require(\"./build_batchconvertion\");\nconst buildMultiexp = require(\"./build_multiexp\");\n\nmodule.exports = function buildCurve(module, prefix, prefixField, pB) {\n\n\n    const n64 = module.modules[prefixField].n64;\n    const n8 = n64*8;\n\n    if (module.modules[prefix]) return prefix;  // already builded\n    module.modules[prefix] = {\n        n64: n64*3\n    };\n\n    function buildIsZero() {\n        const f = module.addFunction(prefix + \"_isZero\");\n        f.addParam(\"p1\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_isZero\",\n            c.i32_add(\n                c.getLocal(\"p1\"),\n                c.i32_const(n8*2)\n            )\n        ));\n    }\n    function buildIsZeroAffine() {\n        const f = module.addFunction(prefix + \"_isZeroAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.i32_and(\n                c.call(\n                    prefixField + \"_isZero\",\n                    c.getLocal(\"p1\")\n                ),\n                c.call(\n                    prefixField + \"_isZero\",\n                    c.i32_add(\n                        c.getLocal(\"p1\"),\n                        c.i32_const(n8)\n                    )\n                )\n            )\n        );\n    }\n\n    function buildCopy() {\n        const f = module.addFunction(prefix + \"_copy\");\n        f.addParam(\"ps\", \"i32\");\n        f.addParam(\"pd\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<n64*3; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pd\"),\n                    i*8,\n                    c.i64_load(\n                        c.getLocal(\"ps\"),\n                        i*8\n                    )\n                )\n            );\n        }\n    }\n\n\n    function buildCopyAffine() {\n        const f = module.addFunction(prefix + \"_copyAffine\");\n        f.addParam(\"ps\", \"i32\");\n        f.addParam(\"pd\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<n64*2; i++) {\n            f.addCode(\n                c.i64_store(\n                    c.getLocal(\"pd\"),\n                    i*8,\n                    c.i64_load(\n                        c.getLocal(\"ps\"),\n                        i*8\n                    )\n                )\n            );\n        }\n\n    }\n\n\n    function buildZero() {\n        const f = module.addFunction(prefix + \"_zero\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_zero\",\n            c.getLocal(\"pr\")\n        ));\n\n        f.addCode(c.call(\n            prefixField + \"_one\",\n            c.i32_add(\n                c.getLocal(\"pr\"),\n                c.i32_const(n8)\n            )\n        ));\n\n        f.addCode(c.call(\n            prefixField + \"_zero\",\n            c.i32_add(\n                c.getLocal(\"pr\"),\n                c.i32_const(n8*2)\n            )\n        ));\n    }\n\n\n    function buildZeroAffine() {\n        const f = module.addFunction(prefix + \"_zeroAffine\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_zero\",\n            c.getLocal(\"pr\")\n        ));\n\n        f.addCode(c.call(\n            prefixField + \"_zero\",\n            c.i32_add(\n                c.getLocal(\"pr\"),\n                c.i32_const(n8)\n            )\n        ));\n    }\n\n    function buildEq() {\n        const f = module.addFunction(prefix + \"_eq\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"z1\", \"i32\");\n        f.addLocal(\"z2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const z1 = c.getLocal(\"z1\");\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z2\", c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8*2))));\n        const z2 = c.getLocal(\"z2\");\n\n        const Z1Z1 = c.i32_const(module.alloc(n8));\n        const Z2Z2 = c.i32_const(module.alloc(n8));\n        const U1 = c.i32_const(module.alloc(n8));\n        const U2 = c.i32_const(module.alloc(n8));\n        const Z1_cubed = c.i32_const(module.alloc(n8));\n        const Z2_cubed = c.i32_const(module.alloc(n8));\n        const S1 = c.i32_const(module.alloc(n8));\n        const S2 = c.i32_const(module.alloc(n8));\n\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                c.ret( c.call(prefix + \"_isZero\", c.getLocal(\"p2\"))),\n            ),\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p2\")),\n                c.ret(c.i32_const(0))\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z1),\n                c.ret(c.call(prefix + \"_eqMixed\", c.getLocal(\"p2\"), c.getLocal(\"p1\")))\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z2),\n                c.ret(c.call(prefix + \"_eqMixed\", c.getLocal(\"p1\"), c.getLocal(\"p2\")))\n            ),\n\n            c.call(prefixField + \"_square\", z1, Z1Z1),\n            c.call(prefixField + \"_square\", z2, Z2Z2),\n            c.call(prefixField + \"_mul\", x1, Z2Z2, U1),\n            c.call(prefixField + \"_mul\", x2, Z1Z1, U2),\n            c.call(prefixField + \"_mul\", z1, Z1Z1, Z1_cubed),\n            c.call(prefixField + \"_mul\", z2, Z2Z2, Z2_cubed),\n            c.call(prefixField + \"_mul\", y1, Z2_cubed, S1),\n            c.call(prefixField + \"_mul\", y2, Z1_cubed, S2),\n\n            c.if(\n                c.call(prefixField + \"_eq\", U1, U2),\n                c.if(\n                    c.call(prefixField + \"_eq\", S1, S2),\n                    c.ret(c.i32_const(1))\n                )\n            ),\n            c.ret(c.i32_const(0))\n        );\n    }\n\n\n    function buildEqMixed() {\n        const f = module.addFunction(prefix + \"_eqMixed\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"z1\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const z1 = c.getLocal(\"z1\");\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n\n        const Z1Z1 = c.i32_const(module.alloc(n8));\n        const U2 = c.i32_const(module.alloc(n8));\n        const Z1_cubed = c.i32_const(module.alloc(n8));\n        const S2 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                c.ret( c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p2\"))),\n            ),\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p2\")),\n                c.ret(c.i32_const(0))\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z1),\n                c.ret(c.call(prefix + \"_eqAffine\", c.getLocal(\"p1\"), c.getLocal(\"p2\")))\n            ),\n            c.call(prefixField + \"_square\", z1, Z1Z1),\n            c.call(prefixField + \"_mul\", x2, Z1Z1, U2),\n            c.call(prefixField + \"_mul\", z1, Z1Z1, Z1_cubed),\n            c.call(prefixField + \"_mul\", y2, Z1_cubed, S2),\n\n            c.if(\n                c.call(prefixField + \"_eq\", x1, U2),\n                c.if(\n                    c.call(prefixField + \"_eq\", y1, S2),\n                    c.ret(c.i32_const(1))\n                )\n            ),\n            c.ret(c.i32_const(0))\n        );\n    }\n\n    function buildDouble() {\n        const f = module.addFunction(prefix + \"_double\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const A = c.i32_const(module.alloc(n8));\n        const B = c.i32_const(module.alloc(n8));\n        const C = c.i32_const(module.alloc(n8));\n        const D = c.i32_const(module.alloc(n8));\n        const E = c.i32_const(module.alloc(n8));\n        const F = c.i32_const(module.alloc(n8));\n        const G = c.i32_const(module.alloc(n8));\n        const eightC = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_copy\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z),\n                [\n                    ...c.ret(c.call(prefix + \"_doubleAffine\", c.getLocal(\"p1\"), c.getLocal(\"pr\"))),\n                    ...c.ret([])\n                ]\n            ),\n\n            c.call(prefixField + \"_square\", x, A),\n            c.call(prefixField + \"_square\", y, B),\n            c.call(prefixField + \"_square\", B, C),\n\n            c.call(prefixField + \"_add\", x, B, D),\n            c.call(prefixField + \"_square\", D, D),\n            c.call(prefixField + \"_sub\", D, A, D),\n            c.call(prefixField + \"_sub\", D, C, D),\n            c.call(prefixField + \"_add\", D, D, D),\n\n            c.call(prefixField + \"_add\", A, A, E),\n            c.call(prefixField + \"_add\", E, A, E),\n            c.call(prefixField + \"_square\", E, F),\n\n            c.call(prefixField + \"_mul\", y, z, G),\n\n            c.call(prefixField + \"_add\", D, D, x3),\n            c.call(prefixField + \"_sub\", F, x3, x3),\n\n            c.call(prefixField + \"_add\", C, C, eightC),\n            c.call(prefixField + \"_add\", eightC, eightC, eightC),\n            c.call(prefixField + \"_add\", eightC, eightC, eightC),\n\n            c.call(prefixField + \"_sub\", D, x3, y3),\n            c.call(prefixField + \"_mul\", y3, E, y3),\n            c.call(prefixField + \"_sub\", y3, eightC, y3),\n\n            c.call(prefixField + \"_add\", G, G, z3),\n        );\n    }\n\n\n    function buildDoubleAffine() {\n        const f = module.addFunction(prefix + \"_doubleAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const XX = c.i32_const(module.alloc(n8));\n        const YY = c.i32_const(module.alloc(n8));\n        const YYYY = c.i32_const(module.alloc(n8));\n        const S = c.i32_const(module.alloc(n8));\n        const M = c.i32_const(module.alloc(n8));\n        const eightYYYY = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_toJacobian\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n\n            // XX = X1^2\n            c.call(prefixField + \"_square\", x, XX),\n\n            // YY = Y1^2\n            c.call(prefixField + \"_square\", y, YY),\n\n            // YYYY = YY^2\n            c.call(prefixField + \"_square\", YY, YYYY),\n\n            // S = 2*((X1+YY)^2-XX-YYYY)\n            c.call(prefixField + \"_add\", x, YY, S),\n            c.call(prefixField + \"_square\", S, S),\n            c.call(prefixField + \"_sub\", S, XX, S),\n            c.call(prefixField + \"_sub\", S, YYYY, S),\n            c.call(prefixField + \"_add\", S, S, S),\n\n            // M = 3*XX+a  (Hera a=0)\n            c.call(prefixField + \"_add\", XX, XX, M),\n            c.call(prefixField + \"_add\", M, XX, M),\n\n            // Z3 = 2*Y1\n            c.call(prefixField + \"_add\", y, y, z3),\n\n            // T = M^2-2*S\n            // X3 = T\n            c.call(prefixField + \"_square\", M, x3),\n            c.call(prefixField + \"_sub\", x3, S, x3),\n            c.call(prefixField + \"_sub\", x3, S, x3),\n\n            // Y3 = M*(S-T)-8*YYYY\n            c.call(prefixField + \"_add\", YYYY, YYYY, eightYYYY),\n            c.call(prefixField + \"_add\", eightYYYY, eightYYYY, eightYYYY),\n            c.call(prefixField + \"_add\", eightYYYY, eightYYYY, eightYYYY),\n            c.call(prefixField + \"_sub\", S, x3, y3),\n            c.call(prefixField + \"_mul\", y3, M, y3),\n            c.call(prefixField + \"_sub\", y3, eightYYYY, y3),\n        );\n    }\n\n\n    function buildEqAffine() {\n        const f = module.addFunction(prefix + \"_eqAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"z1\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.ret(c.i32_and(\n                c.call(\n                    prefixField + \"_eq\",\n                    c.getLocal(\"p1\"),\n                    c.getLocal(\"p2\")\n                ),\n                c.call(\n                    prefixField + \"_eq\",\n                    c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8)),\n                    c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8))\n                )\n            ))\n        );\n    }\n\n    function buildToMontgomery() {\n        const f = module.addFunction(prefix + \"_toMontgomery\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_toMontgomery\",\n            c.getLocal(\"p1\"),\n            c.getLocal(\"pr\")\n        ));\n        for (let i=1; i<3; i++) {\n            f.addCode(c.call(\n                prefixField + \"_toMontgomery\",\n                c.i32_add(c.getLocal(\"p1\"), c.i32_const(i*n8)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(i*n8))\n            ));\n        }\n    }\n\n    function buildToMontgomeryAffine() {\n        const f = module.addFunction(prefix + \"_toMontgomeryAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_toMontgomery\",\n            c.getLocal(\"p1\"),\n            c.getLocal(\"pr\")\n        ));\n        for (let i=1; i<2; i++) {\n            f.addCode(c.call(\n                prefixField + \"_toMontgomery\",\n                c.i32_add(c.getLocal(\"p1\"), c.i32_const(i*n8)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(i*n8))\n            ));\n        }\n    }\n\n    function buildFromMontgomery() {\n        const f = module.addFunction(prefix + \"_fromMontgomery\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_fromMontgomery\",\n            c.getLocal(\"p1\"),\n            c.getLocal(\"pr\")\n        ));\n        for (let i=1; i<3; i++) {\n            f.addCode(c.call(\n                prefixField + \"_fromMontgomery\",\n                c.i32_add(c.getLocal(\"p1\"), c.i32_const(i*n8)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(i*n8))\n            ));\n        }\n    }\n\n\n    function buildFromMontgomeryAffine() {\n        const f = module.addFunction(prefix + \"_fromMontgomeryAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(c.call(\n            prefixField + \"_fromMontgomery\",\n            c.getLocal(\"p1\"),\n            c.getLocal(\"pr\")\n        ));\n        for (let i=1; i<2; i++) {\n            f.addCode(c.call(\n                prefixField + \"_fromMontgomery\",\n                c.i32_add(c.getLocal(\"p1\"), c.i32_const(i*n8)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(i*n8))\n            ));\n        }\n    }\n\n    function buildAdd() {\n\n        const f = module.addFunction(prefix + \"_add\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"z1\", \"i32\");\n        f.addLocal(\"z2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const z1 = c.getLocal(\"z1\");\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z2\", c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8*2))));\n        const z2 = c.getLocal(\"z2\");\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const Z1Z1 = c.i32_const(module.alloc(n8));\n        const Z2Z2 = c.i32_const(module.alloc(n8));\n        const U1 = c.i32_const(module.alloc(n8));\n        const U2 = c.i32_const(module.alloc(n8));\n        const Z1_cubed = c.i32_const(module.alloc(n8));\n        const Z2_cubed = c.i32_const(module.alloc(n8));\n        const S1 = c.i32_const(module.alloc(n8));\n        const S2 = c.i32_const(module.alloc(n8));\n        const H = c.i32_const(module.alloc(n8));\n        const S2_minus_S1 = c.i32_const(module.alloc(n8));\n        const I = c.i32_const(module.alloc(n8));\n        const J = c.i32_const(module.alloc(n8));\n        const r = c.i32_const(module.alloc(n8));\n        const r2 = c.i32_const(module.alloc(n8));\n        const V = c.i32_const(module.alloc(n8));\n        const V2 = c.i32_const(module.alloc(n8));\n        const S1_J2 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_copy\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p2\")),\n                [\n                    ...c.call(prefix + \"_copy\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z1),\n                [\n                    ...c.call(prefix + \"_addMixed\", x2, x1, x3),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z2),\n                [\n                    ...c.call(prefix + \"_addMixed\", x1, x2, x3),\n                    ...c.ret([])\n                ]\n            ),\n            c.call(prefixField + \"_square\", z1, Z1Z1),\n            c.call(prefixField + \"_square\", z2, Z2Z2),\n            c.call(prefixField + \"_mul\", x1, Z2Z2, U1),\n            c.call(prefixField + \"_mul\", x2, Z1Z1, U2),\n            c.call(prefixField + \"_mul\", z1, Z1Z1, Z1_cubed),\n            c.call(prefixField + \"_mul\", z2, Z2Z2, Z2_cubed),\n            c.call(prefixField + \"_mul\", y1, Z2_cubed, S1),\n            c.call(prefixField + \"_mul\", y2, Z1_cubed, S2),\n\n            c.if(\n                c.call(prefixField + \"_eq\", U1, U2),\n                c.if(\n                    c.call(prefixField + \"_eq\", S1, S2),\n                    [\n                        ...c.call(prefix + \"_double\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                        ...c.ret([])\n                    ]\n                )\n            ),\n\n            c.call(prefixField + \"_sub\", U2, U1, H),\n            c.call(prefixField + \"_sub\", S2, S1, S2_minus_S1),\n            c.call(prefixField + \"_add\", H, H, I),\n            c.call(prefixField + \"_square\", I, I),\n            c.call(prefixField + \"_mul\", H, I, J),\n            c.call(prefixField + \"_add\", S2_minus_S1, S2_minus_S1, r),\n            c.call(prefixField + \"_mul\", U1, I, V),\n            c.call(prefixField + \"_square\", r, r2),\n            c.call(prefixField + \"_add\", V, V, V2),\n\n            c.call(prefixField + \"_sub\", r2, J, x3),\n            c.call(prefixField + \"_sub\", x3, V2, x3),\n\n            c.call(prefixField + \"_mul\", S1, J, S1_J2),\n            c.call(prefixField + \"_add\", S1_J2, S1_J2, S1_J2),\n\n            c.call(prefixField + \"_sub\", V, x3, y3),\n            c.call(prefixField + \"_mul\", y3, r, y3),\n            c.call(prefixField + \"_sub\", y3, S1_J2, y3),\n\n            c.call(prefixField + \"_add\", z1, z2, z3),\n            c.call(prefixField + \"_square\", z3, z3),\n            c.call(prefixField + \"_sub\", z3, Z1Z1, z3),\n            c.call(prefixField + \"_sub\", z3, Z2Z2, z3),\n            c.call(prefixField + \"_mul\", z3, H, z3),\n        );\n\n    }\n\n\n    function buildAddMixed() {\n\n        const f = module.addFunction(prefix + \"_addMixed\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"z1\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const z1 = c.getLocal(\"z1\");\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const Z1Z1 = c.i32_const(module.alloc(n8));\n        const U2 = c.i32_const(module.alloc(n8));\n        const Z1_cubed = c.i32_const(module.alloc(n8));\n        const S2 = c.i32_const(module.alloc(n8));\n        const H = c.i32_const(module.alloc(n8));\n        const HH = c.i32_const(module.alloc(n8));\n        const S2_minus_y1 = c.i32_const(module.alloc(n8));\n        const I = c.i32_const(module.alloc(n8));\n        const J = c.i32_const(module.alloc(n8));\n        const r = c.i32_const(module.alloc(n8));\n        const r2 = c.i32_const(module.alloc(n8));\n        const V = c.i32_const(module.alloc(n8));\n        const V2 = c.i32_const(module.alloc(n8));\n        const y1_J2 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_copyAffine\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                    ...c.call(prefixField + \"_one\", c.i32_add(c.getLocal(\"pr\") , c.i32_const(n8*2))),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p2\")),\n                [\n                    ...c.call(prefix + \"_copy\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefixField + \"_isOne\", z1),\n                [\n                    ...c.call(prefix + \"_addAffine\", x1, x2, x3),\n                    ...c.ret([])\n                ]\n            ),\n            c.call(prefixField + \"_square\", z1, Z1Z1),\n            c.call(prefixField + \"_mul\", x2, Z1Z1, U2),\n            c.call(prefixField + \"_mul\", z1, Z1Z1, Z1_cubed),\n            c.call(prefixField + \"_mul\", y2, Z1_cubed, S2),\n\n            c.if(\n                c.call(prefixField + \"_eq\", x1, U2),\n                c.if(\n                    c.call(prefixField + \"_eq\", y1, S2),\n                    [\n                        ...c.call(prefix + \"_doubleAffine\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                        ...c.ret([])\n                    ]\n                )\n            ),\n\n            c.call(prefixField + \"_sub\", U2, x1, H),\n            c.call(prefixField + \"_sub\", S2, y1, S2_minus_y1),\n            c.call(prefixField + \"_square\", H, HH),\n            c.call(prefixField + \"_add\", HH , HH, I),\n            c.call(prefixField + \"_add\", I , I, I),\n            c.call(prefixField + \"_mul\", H, I, J),\n            c.call(prefixField + \"_add\", S2_minus_y1, S2_minus_y1, r),\n            c.call(prefixField + \"_mul\", x1, I, V),\n            c.call(prefixField + \"_square\", r, r2),\n            c.call(prefixField + \"_add\", V, V, V2),\n\n            c.call(prefixField + \"_sub\", r2, J, x3),\n            c.call(prefixField + \"_sub\", x3, V2, x3),\n\n            c.call(prefixField + \"_mul\", y1, J, y1_J2),\n            c.call(prefixField + \"_add\", y1_J2, y1_J2, y1_J2),\n\n            c.call(prefixField + \"_sub\", V, x3, y3),\n            c.call(prefixField + \"_mul\", y3, r, y3),\n            c.call(prefixField + \"_sub\", y3, y1_J2, y3),\n\n            c.call(prefixField + \"_add\", z1, H, z3),\n            c.call(prefixField + \"_square\", z3, z3),\n            c.call(prefixField + \"_sub\", z3, Z1Z1, z3),\n            c.call(prefixField + \"_sub\", z3, HH, z3),\n        );\n    }\n\n\n    function buildAddAffine() {\n\n        const f = module.addFunction(prefix + \"_addAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"z1\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x1 = c.getLocal(\"p1\");\n        const y1 = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        f.addCode(c.setLocal(\"z1\", c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2))));\n        const x2 = c.getLocal(\"p2\");\n        const y2 = c.i32_add(c.getLocal(\"p2\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        const H = c.i32_const(module.alloc(n8));\n        const HH = c.i32_const(module.alloc(n8));\n        const y2_minus_y1 = c.i32_const(module.alloc(n8));\n        const I = c.i32_const(module.alloc(n8));\n        const J = c.i32_const(module.alloc(n8));\n        const r = c.i32_const(module.alloc(n8));\n        const r2 = c.i32_const(module.alloc(n8));\n        const V = c.i32_const(module.alloc(n8));\n        const V2 = c.i32_const(module.alloc(n8));\n        const y1_J2 = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefix + \"_copyAffine\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                    ...c.call(prefixField + \"_one\", c.i32_add(c.getLocal(\"pr\") , c.i32_const(n8*2))),\n                    ...c.ret([])\n                ]\n            ),\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p2\")),\n                [\n                    ...c.call(prefix + \"_copyAffine\", c.getLocal(\"p1\"), c.getLocal(\"pr\")),\n                    ...c.call(prefixField + \"_one\", c.i32_add(c.getLocal(\"pr\") , c.i32_const(n8*2))),\n                    ...c.ret([])\n                ]\n            ),\n\n\n            c.if(\n                c.call(prefixField + \"_eq\", x1, x2),\n                c.if(\n                    c.call(prefixField + \"_eq\", y1, y2),\n                    [\n                        ...c.call(prefix + \"_doubleAffine\", c.getLocal(\"p2\"), c.getLocal(\"pr\")),\n                        ...c.ret([])\n                    ]\n                )\n            ),\n\n            c.call(prefixField + \"_sub\", x2, x1, H),\n            c.call(prefixField + \"_sub\", y2, y1, y2_minus_y1),\n            c.call(prefixField + \"_square\", H, HH),\n            c.call(prefixField + \"_add\", HH , HH, I),\n            c.call(prefixField + \"_add\", I , I, I),\n            c.call(prefixField + \"_mul\", H, I, J),\n            c.call(prefixField + \"_add\", y2_minus_y1, y2_minus_y1, r),\n            c.call(prefixField + \"_mul\", x1, I, V),\n            c.call(prefixField + \"_square\", r, r2),\n            c.call(prefixField + \"_add\", V, V, V2),\n\n            c.call(prefixField + \"_sub\", r2, J, x3),\n            c.call(prefixField + \"_sub\", x3, V2, x3),\n\n            c.call(prefixField + \"_mul\", y1, J, y1_J2),\n            c.call(prefixField + \"_add\", y1_J2, y1_J2, y1_J2),\n\n            c.call(prefixField + \"_sub\", V, x3, y3),\n            c.call(prefixField + \"_mul\", y3, r, y3),\n            c.call(prefixField + \"_sub\", y3, y1_J2, y3),\n\n            c.call(prefixField + \"_add\", H, H, z3),\n        );\n    }\n\n    function buildNeg() {\n        const f = module.addFunction(prefix + \"_neg\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        f.addCode(\n            c.call(prefixField + \"_copy\", x, x3),\n            c.call(prefixField + \"_neg\", y, y3),\n            c.call(prefixField + \"_copy\", z, z3)\n        );\n    }\n\n\n    function buildNegAffine() {\n        const f = module.addFunction(prefix + \"_negAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n\n        f.addCode(\n            c.call(prefixField + \"_copy\", x, x3),\n            c.call(prefixField + \"_neg\", y, y3),\n        );\n    }\n\n\n    function buildSub() {\n        const f = module.addFunction(prefix + \"_sub\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8*3));\n\n        f.addCode(\n            c.call(prefix + \"_neg\", c.getLocal(\"p2\"), AUX),\n            c.call(prefix + \"_add\", c.getLocal(\"p1\"), AUX, c.getLocal(\"pr\")),\n        );\n    }\n\n    function buildSubMixed() {\n        const f = module.addFunction(prefix + \"_subMixed\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8*3));\n\n        f.addCode(\n            c.call(prefix + \"_negAffine\", c.getLocal(\"p2\"), AUX),\n            c.call(prefix + \"_addMixed\", c.getLocal(\"p1\"), AUX, c.getLocal(\"pr\")),\n        );\n    }\n\n\n    function buildSubAffine() {\n        const f = module.addFunction(prefix + \"_subAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"p2\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8*3));\n\n        f.addCode(\n            c.call(prefix + \"_negAffine\", c.getLocal(\"p2\"), AUX),\n            c.call(prefix + \"_addAffine\", c.getLocal(\"p1\"), AUX, c.getLocal(\"pr\")),\n        );\n    }\n\n    // This sets Z to One\n    function buildNormalize() {\n        const f = module.addFunction(prefix + \"_normalize\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n\n        const Z_inv = c.i32_const(module.alloc(n8));\n        const Z2_inv = c.i32_const(module.alloc(n8));\n        const Z3_inv = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                c.call(prefix + \"_zero\", c.getLocal(\"pr\")),\n                [\n                    ...c.call(prefixField + \"_inverse\", z, Z_inv),\n                    ...c.call(prefixField + \"_square\", Z_inv, Z2_inv),\n                    ...c.call(prefixField + \"_mul\", Z_inv, Z2_inv, Z3_inv),\n                    ...c.call(prefixField + \"_mul\", x, Z2_inv, x3),\n                    ...c.call(prefixField + \"_mul\", y, Z3_inv, y3),\n                    ...c.call(prefixField + \"_one\", z3),\n                ]\n            )\n        );\n    }\n\n\n    // Does not set Z.\n    function buildToAffine() {\n        const f = module.addFunction(prefix + \"_toAffine\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n\n\n        const Z_inv = c.i32_const(module.alloc(n8));\n        const Z2_inv = c.i32_const(module.alloc(n8));\n        const Z3_inv = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"p1\")),\n                [\n                    ...c.call(prefixField + \"_zero\", x3),\n                    ...c.call(prefixField + \"_zero\", y3),\n                ],\n                [\n                    ...c.call(prefixField + \"_inverse\", z, Z_inv),\n                    ...c.call(prefixField + \"_square\", Z_inv, Z2_inv),\n                    ...c.call(prefixField + \"_mul\", Z_inv, Z2_inv, Z3_inv),\n                    ...c.call(prefixField + \"_mul\", x, Z2_inv, x3),\n                    ...c.call(prefixField + \"_mul\", y, Z3_inv, y3),\n                ]\n            )\n        );\n    }\n\n\n    function buildToJacobian() {\n        const f = module.addFunction(prefix + \"_toJacobian\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(n8));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"p1\")),\n                c.call(prefix + \"_zero\", c.getLocal(\"pr\")),\n                [\n                    ...c.call(prefixField + \"_one\", z3),\n                    ...c.call(prefixField + \"_copy\", y, y3),\n                    ...c.call(prefixField + \"_copy\", x, x3)\n                ]\n            )\n        );\n    }\n\n    function buildBatchToAffine() {\n        const f = module.addFunction(prefix + \"_batchToAffine\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n        f.addLocal(\"pAux\", \"i32\");\n        f.addLocal(\"itIn\", \"i32\");\n        f.addLocal(\"itAux\", \"i32\");\n        f.addLocal(\"itOut\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const tmp = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.setLocal(\"pAux\", c.i32_load( c.i32_const(0) )),\n            c.i32_store(\n                c.i32_const(0),\n                c.i32_add(\n                    c.getLocal(\"pAux\"),\n                    c.i32_mul(c.getLocal(\"n\"), c.i32_const(n8))\n                )\n            ),\n\n            c.call(\n                prefixField + \"_batchInverse\",\n                c.i32_add(c.getLocal(\"pIn\"), c.i32_const(n8*2)),\n                c.i32_const(n8*3),\n                c.getLocal(\"n\"),\n                c.getLocal(\"pAux\"),\n                c.i32_const(n8)\n            ),\n\n            c.setLocal(\"itIn\", c.getLocal(\"pIn\")),\n            c.setLocal(\"itAux\", c.getLocal(\"pAux\")),\n            c.setLocal(\"itOut\", c.getLocal(\"pOut\")),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n                c.if(\n                    c.call(prefixField + \"_isZero\", c.getLocal(\"itAux\")),\n                    [\n                        ...c.call(prefixField + \"_zero\", c.getLocal(\"itOut\")),\n                        ...c.call(prefixField + \"_zero\", c.i32_add(c.getLocal(\"itOut\"), c.i32_const(n8)))\n                    ],\n                    [\n                        ...c.call(\n                            prefixField+\"_mul\",\n                            c.getLocal(\"itAux\"),\n                            c.i32_add(c.getLocal(\"itIn\"), c.i32_const(n8)),\n                            tmp,\n                        ),\n                        ...c.call(\n                            prefixField+\"_square\",\n                            c.getLocal(\"itAux\"),\n                            c.getLocal(\"itAux\")\n                        ),\n                        ...c.call(\n                            prefixField+\"_mul\",\n                            c.getLocal(\"itAux\"),\n                            c.getLocal(\"itIn\"),\n                            c.getLocal(\"itOut\"),\n                        ),\n                        ...c.call(\n                            prefixField+\"_mul\",\n                            c.getLocal(\"itAux\"),\n                            tmp,\n                            c.i32_add(c.getLocal(\"itOut\"), c.i32_const(n8)),\n                        ),\n                    ]\n                ),\n\n                c.setLocal(\"itIn\", c.i32_add(c.getLocal(\"itIn\"), c.i32_const(n8*3))),\n                c.setLocal(\"itOut\", c.i32_add(c.getLocal(\"itOut\"), c.i32_const(n8*2))),\n                c.setLocal(\"itAux\", c.i32_add(c.getLocal(\"itAux\"), c.i32_const(n8))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n            c.i32_store(\n                c.i32_const(0),\n                c.getLocal(\"pAux\")\n            )\n        );\n    }\n\n\n    // This function is private and does not allow to OVERLAP buffers.\n    function buildReverseBytes() {\n        const f = module.addFunction(prefix + \"__reverseBytes\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n        f.addLocal(\"itOut\", \"i32\");\n        f.addLocal(\"itIn\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\n                \"itOut\",\n                c.i32_sub(\n                    c.i32_add(\n                        c.getLocal(\"pOut\"),\n                        c.getLocal(\"n\")\n                    ),\n                    c.i32_const(1)\n                )\n            ),\n            c.setLocal(\n                \"itIn\",\n                c.getLocal(\"pIn\")\n            ),\n            c.block(c.loop(\n                c.br_if(1, c.i32_lt_s( c.getLocal(\"itOut\"), c.getLocal(\"pOut\") )),\n                c.i32_store8(\n                    c.getLocal(\"itOut\"),\n                    c.i32_load8_u(c.getLocal(\"itIn\")),\n                ),\n                c.setLocal(\"itOut\", c.i32_sub(c.getLocal(\"itOut\"), c.i32_const(1))),\n                c.setLocal(\"itIn\", c.i32_add(c.getLocal(\"itIn\"), c.i32_const(1))),\n                c.br(0)\n            )),\n        );\n\n    }\n\n    function buildLEMtoC() {\n        const f = module.addFunction(prefix + \"_LEMtoC\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const tmp = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZero\", c.getLocal(\"pIn\")),\n                [\n                    ...c.call(prefixField + \"_zero\", c.getLocal(\"pOut\")),\n                    ...c.i32_store8(\n                        c.getLocal(\"pOut\"),\n                        c.i32_const(0x40)\n                    ),\n                    ...c.ret([])\n                ]\n            ),\n            c.call(prefixField + \"_fromMontgomery\", c.getLocal(\"pIn\"), tmp),\n            c.call(prefix + \"__reverseBytes\", tmp, c.i32_const(n8), c.getLocal(\"pOut\")),\n            c.if(\n                c.i32_eq(\n                    c.call(prefixField + \"_sign\", c.i32_add(c.getLocal(\"pIn\"), c.i32_const(n8))),\n                    c.i32_const(-1)\n                ),\n                c.i32_store8(\n                    c.getLocal(\"pOut\"),\n                    c.i32_or(\n                        c.i32_load8_u(c.getLocal(\"pOut\")),\n                        c.i32_const(0x80)\n                    )\n                )\n            ),\n        );\n    }\n\n    function buildLEMtoU() {\n        const f = module.addFunction(prefix + \"_LEMtoU\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const pTmp = module.alloc(n8*2);\n        const tmp = c.i32_const(pTmp);\n        const tmpX = c.i32_const(pTmp);\n        const tmpY = c.i32_const(pTmp + n8);\n\n        f.addCode(\n            c.if(\n                c.call(prefix + \"_isZeroAffine\", c.getLocal(\"pIn\")),\n                [\n                    ...c.call(prefix + \"_zeroAffine\", c.getLocal(\"pOut\")),\n                    ...c.i32_store8(\n                        c.getLocal(\"pOut\"),\n                        c.i32_const(0x40)\n                    ),\n                    ...c.ret([])\n                ]\n            ),\n\n            c.call(prefix + \"_fromMontgomeryAffine\", c.getLocal(\"pIn\"), tmp),\n\n            c.call(prefix + \"__reverseBytes\", tmpX, c.i32_const(n8), c.getLocal(\"pOut\")),\n            c.call(prefix + \"__reverseBytes\", tmpY, c.i32_const(n8), c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8))),\n        );\n    }\n\n    function buildUtoLEM() {\n        const f = module.addFunction(prefix + \"_UtoLEM\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const pTmp = module.alloc(n8*2);\n        const tmp = c.i32_const(pTmp);\n        const tmpX = c.i32_const(pTmp);\n        const tmpY = c.i32_const(pTmp + n8);\n\n        f.addCode(\n            c.if(\n                c.i32_and(c.i32_load8_u(c.getLocal(\"pIn\")), c.i32_const(0x40)),\n                [\n                    ...c.call(prefix + \"_zeroAffine\", c.getLocal(\"pOut\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.call(prefix + \"__reverseBytes\", c.getLocal(\"pIn\"), c.i32_const(n8), tmpX),\n            c.call(prefix + \"__reverseBytes\", c.i32_add(c.getLocal(\"pIn\"), c.i32_const(n8)), c.i32_const(n8), tmpY),\n            c.call(prefix + \"_toMontgomeryAffine\", tmp,  c.getLocal(\"pOut\"))\n        );\n    }\n\n    function buildCtoLEM() {\n        const f = module.addFunction(prefix + \"_CtoLEM\");\n        f.addParam(\"pIn\", \"i32\");\n        f.addParam(\"pOut\", \"i32\");\n        f.addLocal(\"firstByte\", \"i32\");\n        f.addLocal(\"greatest\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const pTmp = module.alloc(n8*2);\n        const tmpX = c.i32_const(pTmp);\n        const tmpY = c.i32_const(pTmp + n8);\n\n        f.addCode(\n            c.setLocal(\"firstByte\", c.i32_load8_u(c.getLocal(\"pIn\"))),\n            c.if(\n                c.i32_and(\n                    c.getLocal(\"firstByte\"),\n                    c.i32_const(0x40)\n                ),\n                [\n                    ...c.call(prefix + \"_zeroAffine\", c.getLocal(\"pOut\")),\n                    ...c.ret([])\n                ]\n            ),\n            c.setLocal(\n                \"greatest\",\n                c.i32_and(\n                    c.getLocal(\"firstByte\"),\n                    c.i32_const(0x80)\n                )\n            ),\n\n            c.call(prefixField + \"_copy\", c.getLocal(\"pIn\"), tmpY),\n            c.i32_store8(tmpY, c.i32_and(c.getLocal(\"firstByte\"), c.i32_const(0x3F))),\n            c.call(prefix + \"__reverseBytes\", tmpY, c.i32_const(n8), tmpX),\n            c.call(prefixField + \"_toMontgomery\", tmpX, c.getLocal(\"pOut\")),\n\n            c.call(prefixField + \"_square\", c.getLocal(\"pOut\"), tmpY),\n            c.call(prefixField + \"_mul\", c.getLocal(\"pOut\"), tmpY,  tmpY),\n            c.call(prefixField + \"_add\", tmpY, c.i32_const(pB),  tmpY),\n\n            c.call(prefixField + \"_sqrt\", tmpY, tmpY),\n            c.call(prefixField + \"_neg\", tmpY, tmpX),\n\n            c.if(\n                c.i32_eq(\n                    c.call(prefixField + \"_sign\", tmpY),\n                    c.i32_const(-1)\n                ),\n                c.if(\n                    c.getLocal(\"greatest\"),\n                    c.call(prefixField + \"_copy\", tmpY, c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8))),\n                    c.call(prefixField + \"_neg\", tmpY, c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8)))\n                ),\n                c.if(\n                    c.getLocal(\"greatest\"),\n                    c.call(prefixField + \"_neg\", tmpY, c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8))),\n                    c.call(prefixField + \"_copy\", tmpY, c.i32_add(c.getLocal(\"pOut\"), c.i32_const(n8)))\n                ),\n            )\n\n        );\n    }\n\n    function buildInCurveAffine() {\n        const f = module.addFunction(prefix + \"_inCurveAffine\");\n        f.addParam(\"pIn\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"pIn\");\n        const y = c.i32_add(c.getLocal(\"pIn\"), c.i32_const(n8));\n\n        const y2 = c.i32_const(module.alloc(n8));\n        const x3b = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.call(prefixField + \"_square\", y, y2),\n            c.call(prefixField + \"_square\", x, x3b),\n            c.call(prefixField + \"_mul\", x, x3b, x3b),\n            c.call(prefixField + \"_add\", x3b, c.i32_const(pB), x3b),\n\n            c.ret(\n                c.call(prefixField + \"_eq\", y2, x3b)\n            )\n        );\n    }\n\n    function buildInCurve() {\n        const f = module.addFunction(prefix + \"_inCurve\");\n        f.addParam(\"pIn\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8*2));\n\n        f.addCode(\n            c.call(prefix + \"_toAffine\", c.getLocal(\"pIn\"), aux),\n\n            c.ret(\n                c.call(prefix + \"_inCurveAffine\", aux),\n            )\n        );\n    }\n\n    buildIsZeroAffine();\n    buildIsZero();\n    buildZeroAffine();\n    buildZero();\n    buildCopyAffine();\n    buildCopy();\n    buildToJacobian();\n    buildEqAffine();\n    buildEqMixed();\n    buildEq();\n    buildDoubleAffine();\n    buildDouble();\n    buildAddAffine();\n    buildAddMixed();\n    buildAdd();\n    buildNegAffine();\n    buildNeg();\n    buildSubAffine();\n    buildSubMixed();\n    buildSub();\n    buildFromMontgomeryAffine();\n    buildFromMontgomery();\n    buildToMontgomeryAffine();\n    buildToMontgomery();\n    buildToAffine();\n    buildInCurveAffine();\n    buildInCurve();\n\n    buildBatchToAffine();\n\n    buildNormalize();\n\n\n    buildReverseBytes();\n\n    buildLEMtoU();\n    buildLEMtoC();\n    buildUtoLEM();\n    buildCtoLEM();\n\n    buildBatchConvertion(module, prefix + \"_batchLEMtoU\", prefix + \"_LEMtoU\", n8*2, n8*2);\n    buildBatchConvertion(module, prefix + \"_batchLEMtoC\", prefix + \"_LEMtoC\", n8*2, n8);\n    buildBatchConvertion(module, prefix + \"_batchUtoLEM\", prefix + \"_UtoLEM\", n8*2, n8*2);\n    buildBatchConvertion(module, prefix + \"_batchCtoLEM\", prefix + \"_CtoLEM\", n8, n8*2, true);\n\n    buildBatchConvertion(module, prefix + \"_batchToJacobian\", prefix + \"_toJacobian\", n8*2, n8*3, true);\n\n    buildMultiexp(module, prefix, prefix + \"_multiexp\", prefix + \"_add\", n8*3);\n    buildMultiexp(module, prefix, prefix + \"_multiexpAffine\", prefix + \"_addMixed\", n8*2);\n\n    /*\n    buildTimesScalar(\n        module,\n        prefix + \"_timesScalarOld\",\n        n8*3,\n        prefix + \"_add\",\n        prefix + \"_double\",\n        prefix + \"_copy\",\n        prefix + \"_zero\",\n    );\n    */\n    buildTimesScalarNAF(\n        module,\n        prefix + \"_timesScalar\",\n        n8*3,\n        prefix + \"_add\",\n        prefix + \"_double\",\n        prefix + \"_sub\",\n        prefix + \"_copy\",\n        prefix + \"_zero\"\n    );\n\n    buildTimesScalarNAF(\n        module,\n        prefix + \"_timesScalarAffine\",\n        n8*2,\n        prefix + \"_addMixed\",\n        prefix + \"_double\",\n        prefix + \"_subMixed\",\n        prefix + \"_copyAffine\",\n        prefix + \"_zero\"\n    );\n\n    module.exportFunction(prefix + \"_isZero\");\n    module.exportFunction(prefix + \"_isZeroAffine\");\n\n    module.exportFunction(prefix + \"_eq\");\n    module.exportFunction(prefix + \"_eqMixed\");\n    module.exportFunction(prefix + \"_eqAffine\");\n\n    module.exportFunction(prefix + \"_copy\");\n    module.exportFunction(prefix + \"_copyAffine\");\n\n    module.exportFunction(prefix + \"_zero\");\n    module.exportFunction(prefix + \"_zeroAffine\");\n\n    module.exportFunction(prefix + \"_double\");\n    module.exportFunction(prefix + \"_doubleAffine\");\n\n    module.exportFunction(prefix + \"_add\");\n    module.exportFunction(prefix + \"_addMixed\");\n    module.exportFunction(prefix + \"_addAffine\");\n\n    module.exportFunction(prefix + \"_neg\");\n    module.exportFunction(prefix + \"_negAffine\");\n\n    module.exportFunction(prefix + \"_sub\");\n    module.exportFunction(prefix + \"_subMixed\");\n    module.exportFunction(prefix + \"_subAffine\");\n\n    module.exportFunction(prefix + \"_fromMontgomery\");\n    module.exportFunction(prefix + \"_fromMontgomeryAffine\");\n\n    module.exportFunction(prefix + \"_toMontgomery\");\n    module.exportFunction(prefix + \"_toMontgomeryAffine\");\n\n    module.exportFunction(prefix + \"_timesScalar\");\n    module.exportFunction(prefix + \"_timesScalarAffine\");\n\n    module.exportFunction(prefix + \"_normalize\");\n\n    // Convertion functions\n    module.exportFunction(prefix + \"_LEMtoU\");\n    module.exportFunction(prefix + \"_LEMtoC\");\n    module.exportFunction(prefix + \"_UtoLEM\");\n    module.exportFunction(prefix + \"_CtoLEM\");\n\n    module.exportFunction(prefix + \"_batchLEMtoU\");\n    module.exportFunction(prefix + \"_batchLEMtoC\");\n    module.exportFunction(prefix + \"_batchUtoLEM\");\n    module.exportFunction(prefix + \"_batchCtoLEM\");\n\n    module.exportFunction(prefix + \"_toAffine\");\n    module.exportFunction(prefix + \"_toJacobian\");\n\n    module.exportFunction(prefix + \"_batchToAffine\");\n    module.exportFunction(prefix + \"_batchToJacobian\");\n\n    module.exportFunction(prefix + \"_inCurve\");\n    module.exportFunction(prefix + \"_inCurveAffine\");\n\n    /*\n    buildG1MulScalar(module, zq);\n    module.exportFunction(\"g1MulScalar\");\n    */\n\n    return prefix;\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst { isOdd, modInv, modPow } = require(\"./bigint.js\");\nconst utils = require(\"./utils.js\");\n\nmodule.exports = function buildFFT(module, prefix, gPrefix, fPrefix, opGtimesF) {\n\n    const n64f = module.modules[fPrefix].n64;\n    const n8f = n64f*8;\n\n    const n64g = module.modules[gPrefix].n64;\n    const n8g = n64g*8;\n\n    const q = module.modules[fPrefix].q;\n\n    let rem = q - 1n;\n    let maxBits = 0;\n    while (!isOdd(rem)) {\n        maxBits ++;\n        rem = rem >> 1n;\n    }\n\n    let nr = 2n;\n\n    while ( modPow(nr, q >> 1n, q) === 1n ) nr = nr + 1n;\n\n    // console.log(nr);\n\n    const w = new Array(maxBits+1);\n    w[maxBits] = modPow(nr, rem, q);\n\n    let n=maxBits-1;\n    while (n>=0) {\n        w[n] = modPow(w[n+1], 2n, q);\n        n--;\n    }\n\n    const bytes = [];\n    const R = (1n << BigInt(n8f*8)) % q;\n\n    for (let i=0; i<w.length; i++) {\n        const m = w[i] * R % q;\n        bytes.push(...utils.bigInt2BytesLE(m, n8f));\n    }\n\n    const ROOTs = module.alloc(bytes);\n\n    const i2 = new Array(maxBits+1);\n    i2[0] = 1n;\n\n    for (let i=1; i<=maxBits; i++) {\n        i2[i] = i2[i-1] * 2n;\n    }\n\n    const bytesi2 =[];\n    for (let i=0; i<=maxBits; i++) {\n        const m = modInv(i2[i], q) * R % q;\n        bytesi2.push(...utils.bigInt2BytesLE(m, n8f));\n    }\n\n    const INV2 = module.alloc(bytesi2);\n\n    const shift = modPow(nr, 2n, q);\n    const bytesShiftToSmallM =[];\n    const bytesSConst =[];\n    for (let i=0; i<=maxBits; i++) {\n        const shiftToSmallM = modPow(shift, 2n ** BigInt(i), q);\n        const sConst = modInv(q + 1n - shiftToSmallM, q);\n        bytesShiftToSmallM.push(...utils.bigInt2BytesLE(shiftToSmallM * R % q, n8f));\n        bytesSConst.push(...utils.bigInt2BytesLE(sConst * R % q, n8f));\n    }\n\n    const SHIFT_TO_M = module.alloc( bytesShiftToSmallM  );\n    const SCONST = module.alloc( bytesSConst  );\n\n    function rev(x) {\n        let r=0;\n        for (let i=0; i<8; i++) {\n            if (x & (1 << i)) {\n                r = r | (0x80 >> i);\n            }\n        }\n        return r;\n    }\n\n    const rtable = Array(256);\n    for (let i=0; i<256; i++) {\n        rtable[i] = rev(i);\n    }\n\n    const REVTABLE = module.alloc(rtable);\n\n\n    function buildLog2() {\n        const f = module.addFunction(prefix+\"__log2\");\n        f.addParam(\"n\", \"i32\");\n        f.setReturnType(\"i32\");\n        f.addLocal(\"bits\", \"i32\");\n        f.addLocal(\"aux\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\n                \"aux\",\n                c.i32_shr_u(\n                    c.getLocal(\"n\"),\n                    c.i32_const(1)\n                )\n            )\n        );\n        f.addCode(c.setLocal(\"bits\", c.i32_const(0)));\n\n        f.addCode(c.block(c.loop(\n            c.br_if(\n                1,\n                c.i32_eqz(c.getLocal(\"aux\"))\n            ),\n\n            c.setLocal(\n                \"aux\",\n                c.i32_shr_u(\n                    c.getLocal(\"aux\"),\n                    c.i32_const(1)\n                )\n            ),\n\n            c.setLocal(\n                \"bits\",\n                c.i32_add(\n                    c.getLocal(\"bits\"),\n                    c.i32_const(1)\n                )\n            ),\n\n            c.br(0)\n        )));\n\n        f.addCode(c.if(\n            c.i32_ne(\n                c.getLocal(\"n\"),\n                c.i32_shl(\n                    c.i32_const(1),\n                    c.getLocal(\"bits\")\n                )\n            ),\n            c.unreachable()\n        ));\n\n        f.addCode(c.if(\n            c.i32_gt_u(\n                c.getLocal(\"bits\"),\n                c.i32_const(maxBits)\n            ),\n            c.unreachable()\n        ));\n\n        f.addCode(c.getLocal(\"bits\"));\n    }\n\n    function buildFFT() {\n        const f = module.addFunction(prefix+\"_fft\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n\n        f.addLocal(\"bits\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const One = c.i32_const(module.alloc(n8f));\n\n        f.addCode(\n            c.setLocal(\n                \"bits\",\n                c.call(\n                    prefix + \"__log2\",\n                    c.getLocal(\"n\")\n                )\n            ),\n            c.call(fPrefix + \"_one\", One),\n            c.call(\n                prefix+\"_rawfft\",\n                c.getLocal(\"px\"),\n                c.getLocal(\"bits\"),\n                c.i32_const(0),\n                One\n            )\n        );\n\n    }\n\n    function buildIFFT() {\n        const f = module.addFunction(prefix+\"_ifft\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addLocal(\"bits\", \"i32\");\n        f.addLocal(\"pInv2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\n                \"bits\",\n                c.call(\n                    prefix + \"__log2\",\n                    c.getLocal(\"n\")\n                )\n            ),\n            c.setLocal(\n                \"pInv2\",\n                c.i32_add(\n                    c.i32_const(INV2),\n                    c.i32_mul(\n                        c.getLocal(\"bits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n\n            c.call(\n                prefix+\"_rawfft\",\n                c.getLocal(\"px\"),\n                c.getLocal(\"bits\"),\n                c.i32_const(1),\n                c.getLocal(\"pInv2\")\n            ),\n        );\n    }\n\n    function buildRawFFT() {\n        const f = module.addFunction(prefix+\"_rawfft\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"bits\", \"i32\"); // 2 power\n        f.addParam(\"reverse\", \"i32\");\n        f.addParam(\"mulFactor\", \"i32\");\n\n        f.addLocal(\"s\", \"i32\");\n        f.addLocal(\"k\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"m\", \"i32\");\n        f.addLocal(\"mdiv2\", \"i32\");\n        f.addLocal(\"n\", \"i32\");\n        f.addLocal(\"pwm\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const T = c.i32_const(module.alloc(n8g));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.call(prefix + \"__reversePermutation\", c.getLocal(\"px\"), c.getLocal(\"bits\")),\n            c.setLocal(\"n\", c.i32_shl(c.i32_const(1), c.getLocal(\"bits\"))),\n            c.setLocal(\"s\", c.i32_const(1)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_gt_u(\n                        c.getLocal(\"s\"),\n                        c.getLocal(\"bits\")\n                    )\n                ),\n                c.setLocal(\"m\", c.i32_shl(c.i32_const(1), c.getLocal(\"s\"))),\n                c.setLocal(\"pwm\",\n                    c.i32_add(\n                        c.i32_const(ROOTs),\n                        c.i32_mul(\n                            c.getLocal(\"s\"),\n                            c.i32_const(n8f)\n                        )\n                    )\n                ),\n                c.setLocal(\"k\", c.i32_const(0)),\n                c.block(c.loop(\n                    c.br_if(\n                        1,\n                        c.i32_ge_u(\n                            c.getLocal(\"k\"),\n                            c.getLocal(\"n\")\n                        )\n                    ),\n\n                    c.call(fPrefix + \"_one\", W),\n\n                    c.setLocal(\"mdiv2\", c.i32_shr_u(c.getLocal(\"m\"), c.i32_const(1)) ),\n                    c.setLocal(\"j\", c.i32_const(0)),\n                    c.block(c.loop(\n                        c.br_if(\n                            1,\n                            c.i32_ge_u(\n                                c.getLocal(\"j\"),\n                                c.getLocal(\"mdiv2\")\n                            )\n                        ),\n\n                        c.setLocal(\n                            \"idx1\",\n                            c.i32_add(\n                                c.getLocal(\"px\"),\n                                c.i32_mul(\n                                    c.i32_add(\n                                        c.getLocal(\"k\"),\n                                        c.getLocal(\"j\")\n                                    ),\n                                    c.i32_const(n8g)\n                                )\n                            )\n                        ),\n\n                        c.setLocal(\n                            \"idx2\",\n                            c.i32_add(\n                                c.getLocal(\"idx1\"),\n                                c.i32_mul(\n                                    c.getLocal(\"mdiv2\"),\n                                    c.i32_const(n8g)\n                                )\n                            )\n                        ),\n\n                        c.call(\n                            opGtimesF,\n                            c.getLocal(\"idx2\"),\n                            W,\n                            T\n                        ),\n\n                        c.call(\n                            gPrefix + \"_copy\",\n                            c.getLocal(\"idx1\"),\n                            U\n                        ),\n\n                        c.call(\n                            gPrefix + \"_add\",\n                            U,\n                            T,\n                            c.getLocal(\"idx1\"),\n                        ),\n\n                        c.call(\n                            gPrefix + \"_sub\",\n                            U,\n                            T,\n                            c.getLocal(\"idx2\"),\n                        ),\n\n                        c.call(\n                            fPrefix + \"_mul\",\n                            W,\n                            c.getLocal(\"pwm\"),\n                            W,\n                        ),\n\n                        c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                        c.br(0)\n                    )),\n\n                    c.setLocal(\"k\", c.i32_add(c.getLocal(\"k\"), c.getLocal(\"m\"))),\n                    c.br(0)\n                )),\n\n                c.setLocal(\"s\", c.i32_add(c.getLocal(\"s\"), c.i32_const(1))),\n                c.br(0)\n            )),\n            c.call(\n                prefix + \"__fftFinal\",\n                c.getLocal(\"px\"),\n                c.getLocal(\"bits\"),\n                c.getLocal(\"reverse\"),\n                c.getLocal(\"mulFactor\")\n            )\n        );\n    }\n\n\n    function buildFinalInverse() {\n        const f = module.addFunction(prefix+\"__fftFinal\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"bits\", \"i32\");\n        f.addParam(\"reverse\", \"i32\");\n        f.addParam(\"mulFactor\", \"i32\");\n        f.addLocal(\"n\", \"i32\");\n        f.addLocal(\"ndiv2\", \"i32\");\n        f.addLocal(\"pInv2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"mask\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const T = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.if(\n                c.i32_and(\n                    c.i32_eqz(c.getLocal(\"reverse\")),\n                    c.call(fPrefix + \"_isOne\", c.getLocal(\"mulFactor\"))\n                ),\n                c.ret([])\n            ),\n            c.setLocal(\"n\", c.i32_shl( c.i32_const(1), c.getLocal(\"bits\"))),\n\n            c.setLocal(\"mask\", c.i32_sub( c.getLocal(\"n\") , c.i32_const(1))),\n            c.setLocal(\"i\", c.i32_const(1)),\n            c.setLocal(\n                \"ndiv2\",\n                c.i32_shr_u(\n                    c.getLocal(\"n\"),\n                    c.i32_const(1)\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_ge_u(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"ndiv2\")\n                    )\n                ),\n\n                c.setLocal(\"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"px\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"px\"),\n                        c.i32_mul(\n                            c.i32_sub(\n                                c.getLocal(\"n\"),\n                                c.getLocal(\"i\")\n                            ),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.if(\n                    c.getLocal(\"reverse\"),\n                    c.if(\n                        c.call(fPrefix + \"_isOne\", c.getLocal(\"mulFactor\")),\n                        [\n                            ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx1\"), T),\n                            ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx2\") , c.getLocal(\"idx1\") ),\n                            ...c.call(gPrefix + \"_copy\", T , c.getLocal(\"idx2\")),\n                        ],\n                        [\n                            ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx1\"), T),\n                            ...c.call(opGtimesF , c.getLocal(\"idx2\") , c.getLocal(\"mulFactor\"), c.getLocal(\"idx1\") ),\n                            ...c.call(opGtimesF , T , c.getLocal(\"mulFactor\"), c.getLocal(\"idx2\")),\n                        ]\n                    ),\n                    c.if(\n                        c.call(fPrefix + \"_isOne\", c.getLocal(\"mulFactor\")),\n                        [\n                            // Do nothing (It should not be here)\n                        ],\n                        [\n                            ...c.call(opGtimesF , c.getLocal(\"idx1\") , c.getLocal(\"mulFactor\"), c.getLocal(\"idx1\") ),\n                            ...c.call(opGtimesF , c.getLocal(\"idx2\") , c.getLocal(\"mulFactor\"), c.getLocal(\"idx2\")),\n                        ]\n                    )\n                ),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n\n                c.br(0)\n            )),\n\n            c.if(\n                c.call(fPrefix + \"_isOne\", c.getLocal(\"mulFactor\")),\n                [\n                    // Do nothing (It should not be here)\n                ],\n                [\n                    ...c.call(opGtimesF, c.getLocal(\"px\") , c.getLocal(\"mulFactor\"), c.getLocal(\"px\")),\n                    ...c.setLocal(\"idx2\",\n                        c.i32_add(\n                            c.getLocal(\"px\"),\n                            c.i32_mul(\n                                c.getLocal(\"ndiv2\"),\n                                c.i32_const(n8g)\n                            )\n                        )\n                    ),\n                    ...c.call(opGtimesF, c.getLocal(\"idx2\"),c.getLocal(\"mulFactor\"), c.getLocal(\"idx2\"))\n                ]\n            )\n        );\n    }\n\n    function buildReversePermutation() {\n        const f = module.addFunction(prefix+\"__reversePermutation\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"bits\", \"i32\");\n        f.addLocal(\"n\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"ri\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const T = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.setLocal(\"n\", c.i32_shl( c.i32_const(1), c.getLocal(\"bits\"))),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"px\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\"ri\", c.call(prefix + \"__rev\", c.getLocal(\"i\"), c.getLocal(\"bits\"))),\n\n                c.setLocal(\"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"px\"),\n                        c.i32_mul(\n                            c.getLocal(\"ri\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.if(\n                    c.i32_lt_u(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"ri\")\n                    ),\n                    [\n                        ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx1\"), T),\n                        ...c.call(gPrefix + \"_copy\", c.getLocal(\"idx2\") , c.getLocal(\"idx1\")),\n                        ...c.call(gPrefix + \"_copy\", T , c.getLocal(\"idx2\"))\n                    ]\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildRev() {\n        const f = module.addFunction(prefix+\"__rev\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"bits\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.i32_rotl(\n                c.i32_add(\n                    c.i32_add(\n                        c.i32_shl(\n                            c.i32_load8_u(\n                                c.i32_and(\n                                    c.getLocal(\"x\"),\n                                    c.i32_const(0xFF)\n                                ),\n                                REVTABLE,\n                                0\n                            ),\n                            c.i32_const(24)\n                        ),\n                        c.i32_shl(\n                            c.i32_load8_u(\n                                c.i32_and(\n                                    c.i32_shr_u(\n                                        c.getLocal(\"x\"),\n                                        c.i32_const(8)\n                                    ),\n                                    c.i32_const(0xFF)\n                                ),\n                                REVTABLE,\n                                0\n                            ),\n                            c.i32_const(16)\n                        ),\n                    ),\n                    c.i32_add(\n                        c.i32_shl(\n                            c.i32_load8_u(\n                                c.i32_and(\n                                    c.i32_shr_u(\n                                        c.getLocal(\"x\"),\n                                        c.i32_const(16)\n                                    ),\n                                    c.i32_const(0xFF)\n                                ),\n                                REVTABLE,\n                                0\n                            ),\n                            c.i32_const(8)\n                        ),\n                        c.i32_load8_u(\n                            c.i32_and(\n                                c.i32_shr_u(\n                                    c.getLocal(\"x\"),\n                                    c.i32_const(24)\n                                ),\n                                c.i32_const(0xFF)\n                            ),\n                            REVTABLE,\n                            0\n                        ),\n                    )\n                ),\n                c.getLocal(\"bits\")\n            )\n        );\n    }\n\n\n    function buildFFTJoin() {\n        const f = module.addFunction(prefix+\"_fftJoin\");\n        f.addParam(\"pBuff1\", \"i32\");\n        f.addParam(\"pBuff2\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"first\", \"i32\");\n        f.addParam(\"inc\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const T = c.i32_const(module.alloc(n8g));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.call( fPrefix + \"_copy\", c.getLocal(\"first\"), W),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff1\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff2\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    W,\n                    T\n                ),\n\n                c.call(\n                    gPrefix + \"_copy\",\n                    c.getLocal(\"idx1\"),\n                    U\n                ),\n\n                c.call(\n                    gPrefix + \"_add\",\n                    U,\n                    T,\n                    c.getLocal(\"idx1\"),\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    U,\n                    T,\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    fPrefix + \"_mul\",\n                    W,\n                    c.getLocal(\"inc\"),\n                    W,\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n    function buildFFTJoinExt() {\n        const f = module.addFunction(prefix+\"_fftJoinExt\");\n        f.addParam(\"pBuff1\", \"i32\");\n        f.addParam(\"pBuff2\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"first\", \"i32\");\n        f.addParam(\"inc\", \"i32\");\n        f.addParam(\"totalBits\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"pShiftToM\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n\n            c.setLocal(\"pShiftToM\",\n                c.i32_add(\n                    c.i32_const(SHIFT_TO_M),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n\n\n            c.call( fPrefix + \"_copy\", c.getLocal(\"first\"), W),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff1\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff2\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.call(\n                    gPrefix + \"_add\",\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"idx2\"),\n                    U\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"pShiftToM\"),\n                    c.getLocal(\"idx2\")\n                ),\n\n                c.call(\n                    gPrefix + \"_add\",\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"idx2\")\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    W,\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    gPrefix + \"_copy\",\n                    U,\n                    c.getLocal(\"idx1\")\n                ),\n\n                c.call(\n                    fPrefix + \"_mul\",\n                    W,\n                    c.getLocal(\"inc\"),\n                    W\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildFFTJoinExtInv() {\n        const f = module.addFunction(prefix+\"_fftJoinExtInv\");\n        f.addParam(\"pBuff1\", \"i32\");\n        f.addParam(\"pBuff2\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"first\", \"i32\");\n        f.addParam(\"inc\", \"i32\");\n        f.addParam(\"totalBits\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"pShiftToM\", \"i32\");\n        f.addLocal(\"pSConst\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n\n            c.setLocal(\"pShiftToM\",\n                c.i32_add(\n                    c.i32_const(SHIFT_TO_M),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n            c.setLocal(\"pSConst\",\n                c.i32_add(\n                    c.i32_const(SCONST),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n\n\n            c.call( fPrefix + \"_copy\", c.getLocal(\"first\"), W),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff1\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff2\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    W,\n                    U\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    c.getLocal(\"idx1\"),\n                    U,\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"pSConst\"),\n                    c.getLocal(\"idx2\")\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"pShiftToM\"),\n                    c.getLocal(\"idx1\")\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    U,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"idx1\")\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"pSConst\"),\n                    c.getLocal(\"idx1\")\n                ),\n\n                c.call(\n                    fPrefix + \"_mul\",\n                    W,\n                    c.getLocal(\"inc\"),\n                    W\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n\n    function buildPrepareLagrangeEvaluation() {\n        const f = module.addFunction(prefix+\"_prepareLagrangeEvaluation\");\n        f.addParam(\"pBuff1\", \"i32\");\n        f.addParam(\"pBuff2\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"first\", \"i32\");\n        f.addParam(\"inc\", \"i32\");\n        f.addParam(\"totalBits\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"pShiftToM\", \"i32\");\n        f.addLocal(\"pSConst\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n\n            c.setLocal(\"pShiftToM\",\n                c.i32_add(\n                    c.i32_const(SHIFT_TO_M),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n            c.setLocal(\"pSConst\",\n                c.i32_add(\n                    c.i32_const(SCONST),\n                    c.i32_mul(\n                        c.getLocal(\"totalBits\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n\n\n            c.call( fPrefix + \"_copy\", c.getLocal(\"first\"), W),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"n\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff1\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff2\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"pShiftToM\"),\n                    U\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    c.getLocal(\"idx2\"),\n                    U,\n                    U\n                ),\n\n                c.call(\n                    gPrefix + \"_sub\",\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    opGtimesF,\n                    U,\n                    c.getLocal(\"pSConst\"),\n                    c.getLocal(\"idx1\"),\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    W,\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    fPrefix + \"_mul\",\n                    W,\n                    c.getLocal(\"inc\"),\n                    W\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildFFTMix() {\n        const f = module.addFunction(prefix+\"_fftMix\");\n        f.addParam(\"pBuff\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"exp\", \"i32\");\n        f.addLocal(\"nGroups\", \"i32\");\n        f.addLocal(\"nPerGroup\", \"i32\");\n        f.addLocal(\"nPerGroupDiv2\", \"i32\");\n        f.addLocal(\"pairOffset\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"pwm\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const W = c.i32_const(module.alloc(n8f));\n        const T = c.i32_const(module.alloc(n8g));\n        const U = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.setLocal(\"nPerGroup\", c.i32_shl(c.i32_const(1), c.getLocal(\"exp\"))),\n            c.setLocal(\"nPerGroupDiv2\", c.i32_shr_u(c.getLocal(\"nPerGroup\"), c.i32_const(1))),\n            c.setLocal(\"nGroups\", c.i32_shr_u(c.getLocal(\"n\"), c.getLocal(\"exp\"))),\n            c.setLocal(\"pairOffset\", c.i32_mul(c.getLocal(\"nPerGroupDiv2\"), c.i32_const(n8g))),\n            c.setLocal(\"pwm\",\n                c.i32_add(\n                    c.i32_const(ROOTs),\n                    c.i32_mul(\n                        c.getLocal(\"exp\"),\n                        c.i32_const(n8f)\n                    )\n                )\n            ),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"nGroups\")\n                    )\n                ),\n                c.call( fPrefix + \"_one\", W),\n                c.setLocal(\"j\", c.i32_const(0)),\n                c.block(c.loop(\n                    c.br_if(\n                        1,\n                        c.i32_eq(\n                            c.getLocal(\"j\"),\n                            c.getLocal(\"nPerGroupDiv2\")\n                        )\n                    ),\n\n                    c.setLocal(\n                        \"idx1\",\n                        c.i32_add(\n                            c.getLocal(\"pBuff\"),\n                            c.i32_mul(\n                                c.i32_add(\n                                    c.i32_mul(\n                                        c.getLocal(\"i\"),\n                                        c.getLocal(\"nPerGroup\")\n                                    ),\n                                    c.getLocal(\"j\")\n                                ),\n                                c.i32_const(n8g)\n                            )\n                        )\n                    ),\n\n                    c.setLocal(\n                        \"idx2\",\n                        c.i32_add(\n                            c.getLocal(\"idx1\"),\n                            c.getLocal(\"pairOffset\")\n                        )\n                    ),\n\n                    c.call(\n                        opGtimesF,\n                        c.getLocal(\"idx2\"),\n                        W,\n                        T\n                    ),\n\n                    c.call(\n                        gPrefix + \"_copy\",\n                        c.getLocal(\"idx1\"),\n                        U\n                    ),\n\n                    c.call(\n                        gPrefix + \"_add\",\n                        U,\n                        T,\n                        c.getLocal(\"idx1\"),\n                    ),\n\n                    c.call(\n                        gPrefix + \"_sub\",\n                        U,\n                        T,\n                        c.getLocal(\"idx2\"),\n                    ),\n\n                    c.call(\n                        fPrefix + \"_mul\",\n                        W,\n                        c.getLocal(\"pwm\"),\n                        W,\n                    ),\n                    c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                    c.br(0)\n                )),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n    // Reverse all and multiply by factor\n    function buildFFTFinal() {\n        const f = module.addFunction(prefix+\"_fftFinal\");\n        f.addParam(\"pBuff\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"factor\", \"i32\");\n        f.addLocal(\"idx1\", \"i32\");\n        f.addLocal(\"idx2\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"ndiv2\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const T = c.i32_const(module.alloc(n8g));\n\n        f.addCode(\n            c.setLocal(\"ndiv2\", c.i32_shr_u(c.getLocal(\"n\"), c.i32_const(1))),\n            c.if(\n                c.i32_and(\n                    c.getLocal(\"n\"),\n                    c.i32_const(1)\n                ),\n                c.call(\n                    opGtimesF,\n                    c.i32_add(\n                        c.getLocal(\"pBuff\"),\n                        c.i32_mul(\n                            c.getLocal(\"ndiv2\"),\n                            c.i32_const(n8g)\n                        )\n                    ),\n                    c.getLocal(\"factor\"),\n                    c.i32_add(\n                        c.getLocal(\"pBuff\"),\n                        c.i32_mul(\n                            c.getLocal(\"ndiv2\"),\n                            c.i32_const(n8g)\n                        )\n                    ),\n                ),\n            ),\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_ge_u(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"ndiv2\")\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx1\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff\"),\n                        c.i32_mul(\n                            c.getLocal(\"i\"),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.setLocal(\n                    \"idx2\",\n                    c.i32_add(\n                        c.getLocal(\"pBuff\"),\n                        c.i32_mul(\n                            c.i32_sub(\n                                c.i32_sub(\n                                    c.getLocal(\"n\"),\n                                    c.i32_const(1)\n                                ),\n                                c.getLocal(\"i\")\n                            ),\n                            c.i32_const(n8g)\n                        )\n                    )\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx2\"),\n                    c.getLocal(\"factor\"),\n                    T\n                ),\n\n                c.call(\n                    opGtimesF,\n                    c.getLocal(\"idx1\"),\n                    c.getLocal(\"factor\"),\n                    c.getLocal(\"idx2\"),\n                ),\n\n                c.call(\n                    gPrefix + \"_copy\",\n                    T,\n                    c.getLocal(\"idx1\"),\n                ),\n\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n    buildRev();\n    buildReversePermutation();\n    buildFinalInverse();\n    buildRawFFT();\n    buildLog2();\n    buildFFT();\n    buildIFFT();\n    buildFFTJoin();\n    buildFFTJoinExt();\n    buildFFTJoinExtInv();\n    buildFFTMix();\n    buildFFTFinal();\n    buildPrepareLagrangeEvaluation();\n\n    module.exportFunction(prefix+\"_fft\");\n    module.exportFunction(prefix+\"_ifft\");\n    module.exportFunction(prefix+\"_rawfft\");\n    module.exportFunction(prefix+\"_fftJoin\");\n    module.exportFunction(prefix+\"_fftJoinExt\");\n    module.exportFunction(prefix+\"_fftJoinExtInv\");\n    module.exportFunction(prefix+\"_fftMix\");\n    module.exportFunction(prefix+\"_fftFinal\");\n    module.exportFunction(prefix+\"_prepareLagrangeEvaluation\");\n\n};\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = function buildPol(module, prefix, prefixField) {\n\n    const n64 = module.modules[prefixField].n64;\n    const n8 = n64*8;\n\n\n    function buildZero() {\n        const f = module.addFunction(prefix+\"_zero\");\n        f.addParam(\"px\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addLocal(\"lastp\", \"i32\");\n        f.addLocal(\"p\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\"p\", c.getLocal(\"px\")),\n            c.setLocal(\n                \"lastp\",\n                c.i32_add(\n                    c.getLocal(\"px\"),\n                    c.i32_mul(\n                        c.getLocal(\"n\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"p\"),\n                        c.getLocal(\"lastp\")\n                    )\n                ),\n                c.call(prefixField + \"_zero\", c.getLocal(\"p\")),\n                c.setLocal(\"p\", c.i32_add(c.getLocal(\"p\"), c.i32_const(n8))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildConstructLC() {\n        const f = module.addFunction(prefix+\"_constructLC\");\n        f.addParam(\"ppolynomials\", \"i32\");\n        f.addParam(\"psignals\", \"i32\");\n        f.addParam(\"nSignals\", \"i32\");\n        f.addParam(\"pres\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n        f.addLocal(\"j\", \"i32\");\n        f.addLocal(\"pp\", \"i32\");\n        f.addLocal(\"ps\", \"i32\");\n        f.addLocal(\"pd\", \"i32\");\n        f.addLocal(\"ncoefs\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.setLocal(\"i\", c.i32_const(0)),\n            c.setLocal(\"pp\", c.getLocal(\"ppolynomials\")),\n            c.setLocal(\"ps\", c.getLocal(\"psignals\")),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"i\"),\n                        c.getLocal(\"nSignals\")\n                    )\n                ),\n\n                c.setLocal(\"ncoefs\", c.i32_load(c.getLocal(\"pp\"))),\n                c.setLocal(\"pp\", c.i32_add(c.getLocal(\"pp\"), c.i32_const(4))),\n\n                c.setLocal(\"j\", c.i32_const(0)),\n                c.block(c.loop(\n                    c.br_if(\n                        1,\n                        c.i32_eq(\n                            c.getLocal(\"j\"),\n                            c.getLocal(\"ncoefs\")\n                        )\n                    ),\n\n                    c.setLocal(\n                        \"pd\",\n                        c.i32_add(\n                            c.getLocal(\"pres\"),\n                            c.i32_mul(\n                                c.i32_load(c.getLocal(\"pp\")),\n                                c.i32_const(n8)\n                            )\n                        )\n                    ),\n\n                    c.setLocal(\"pp\", c.i32_add(c.getLocal(\"pp\"), c.i32_const(4))),\n\n\n                    c.call(\n                        prefixField + \"_mul\",\n                        c.getLocal(\"ps\"),\n                        c.getLocal(\"pp\"),\n                        aux\n                    ),\n\n                    c.call(\n                        prefixField + \"_add\",\n                        aux,\n                        c.getLocal(\"pd\"),\n                        c.getLocal(\"pd\")\n                    ),\n\n                    c.setLocal(\"pp\", c.i32_add(c.getLocal(\"pp\"), c.i32_const(n8))),\n                    c.setLocal(\"j\", c.i32_add(c.getLocal(\"j\"), c.i32_const(1))),\n                    c.br(0)\n                )),\n\n                c.setLocal(\"ps\", c.i32_add(c.getLocal(\"ps\"), c.i32_const(n8))),\n                c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n\n    }\n\n    buildZero();\n    buildConstructLC();\n\n\n    module.exportFunction(prefix + \"_zero\");\n    module.exportFunction(prefix + \"_constructLC\");\n\n    return prefix;\n\n\n\n\n};\n", "\nmodule.exports = function buildQAP(module, prefix, prefixField) {\n\n    const n64 = module.modules[prefixField].n64;\n    const n8 = n64*8;\n\n\n    function buildBuildABC() {\n        const f = module.addFunction(prefix+\"_buildABC\");\n        f.addParam(\"pCoefs\", \"i32\");\n        f.addParam(\"nCoefs\", \"i32\");\n        f.addParam(\"pWitness\", \"i32\");\n        f.addParam(\"pA\", \"i32\");\n        f.addParam(\"pB\", \"i32\");\n        f.addParam(\"pC\", \"i32\");\n        f.addParam(\"offsetOut\", \"i32\");\n        f.addParam(\"nOut\", \"i32\");\n        f.addParam(\"offsetWitness\", \"i32\");\n        f.addParam(\"nWitness\", \"i32\");\n        f.addLocal(\"it\", \"i32\");\n        f.addLocal(\"ita\", \"i32\");\n        f.addLocal(\"itb\", \"i32\");\n        f.addLocal(\"last\", \"i32\");\n        f.addLocal(\"m\", \"i32\");\n        f.addLocal(\"c\", \"i32\");\n        f.addLocal(\"s\", \"i32\");\n        f.addLocal(\"pOut\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n\n            // Set output a and b to 0\n            c.setLocal(\"ita\", c.getLocal(\"pA\")),\n            c.setLocal(\"itb\", c.getLocal(\"pB\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pA\"),\n                    c.i32_mul(\n                        c.getLocal(\"nOut\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"ita\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.call(prefixField + \"_zero\", c.getLocal(\"ita\")),\n                c.call(prefixField + \"_zero\", c.getLocal(\"itb\")),\n                c.setLocal(\"ita\", c.i32_add(c.getLocal(\"ita\"), c.i32_const(n8))),\n                c.setLocal(\"itb\", c.i32_add(c.getLocal(\"itb\"), c.i32_const(n8))),\n                c.br(0)\n            )),\n\n\n            c.setLocal(\"it\", c.getLocal(\"pCoefs\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pCoefs\"),\n                    c.i32_mul(\n                        c.getLocal(\"nCoefs\"),\n                        c.i32_const(n8+12)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"it\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.setLocal(\n                    \"s\",\n                    c.i32_load(c.getLocal(\"it\"), 8)\n                ),\n                c.if(\n                    c.i32_or(\n                        c.i32_lt_u(\n                            c.getLocal(\"s\"),\n                            c.getLocal(\"offsetWitness\"),\n                        ),\n                        c.i32_ge_u(\n                            c.getLocal(\"s\"),\n                            c.i32_add(\n                                c.getLocal(\"offsetWitness\"),\n                                c.getLocal(\"nWitness\"),\n                            )\n                        )\n                    ),\n                    [\n                        ...c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8+12))),\n                        ...c.br(1)\n                    ]\n                ),\n\n                c.setLocal(\n                    \"m\",\n                    c.i32_load(c.getLocal(\"it\"))\n                ),\n                c.if(\n                    c.i32_eq(c.getLocal(\"m\"), c.i32_const(0)),\n                    c.setLocal(\"pOut\", c.getLocal(\"pA\")),\n                    c.if(\n                        c.i32_eq(c.getLocal(\"m\"), c.i32_const(1)),\n                        c.setLocal(\"pOut\", c.getLocal(\"pB\")),\n                        [\n                            ...c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8+12))),\n                            ...c.br(1)\n                        ]\n                    )\n                ),\n                c.setLocal(\n                    \"c\",\n                    c.i32_load(c.getLocal(\"it\"), 4)\n                ),\n                c.if(\n                    c.i32_or(\n                        c.i32_lt_u(\n                            c.getLocal(\"c\"),\n                            c.getLocal(\"offsetOut\"),\n                        ),\n                        c.i32_ge_u(\n                            c.getLocal(\"c\"),\n                            c.i32_add(\n                                c.getLocal(\"offsetOut\"),\n                                c.getLocal(\"nOut\"),\n                            )\n                        )\n                    ),\n                    [\n                        ...c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8+12))),\n                        ...c.br(1)\n                    ]\n                ),\n                c.setLocal(\n                    \"pOut\",\n                    c.i32_add(\n                        c.getLocal(\"pOut\"),\n                        c.i32_mul(\n                            c.i32_sub(\n                                c.getLocal(\"c\"),\n                                c.getLocal(\"offsetOut\")\n                            ),\n                            c.i32_const(n8)\n                        )\n                    )\n                ),\n                c.call(\n                    prefixField + \"_mul\",\n                    c.i32_add(\n                        c.getLocal(\"pWitness\"),\n                        c.i32_mul(\n                            c.i32_sub(c.getLocal(\"s\"), c.getLocal(\"offsetWitness\")),\n                            c.i32_const(n8)\n                        )\n                    ),\n                    c.i32_add( c.getLocal(\"it\"), c.i32_const(12)),\n                    aux\n                ),\n                c.call(\n                    prefixField + \"_add\",\n                    c.getLocal(\"pOut\"),\n                    aux,\n                    c.getLocal(\"pOut\"),\n                ),\n                c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8+12))),\n                c.br(0)\n            )),\n\n            c.setLocal(\"ita\", c.getLocal(\"pA\")),\n            c.setLocal(\"itb\", c.getLocal(\"pB\")),\n            c.setLocal(\"it\", c.getLocal(\"pC\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pA\"),\n                    c.i32_mul(\n                        c.getLocal(\"nOut\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"ita\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.call(\n                    prefixField + \"_mul\",\n                    c.getLocal(\"ita\"),\n                    c.getLocal(\"itb\"),\n                    c.getLocal(\"it\")\n                ),\n                c.setLocal(\"ita\", c.i32_add(c.getLocal(\"ita\"), c.i32_const(n8))),\n                c.setLocal(\"itb\", c.i32_add(c.getLocal(\"itb\"), c.i32_const(n8))),\n                c.setLocal(\"it\", c.i32_add(c.getLocal(\"it\"), c.i32_const(n8))),\n                c.br(0)\n            )),\n\n        );\n    }\n\n    function buildJoinABC() {\n        const f = module.addFunction(prefix+\"_joinABC\");\n        f.addParam(\"pA\", \"i32\");\n        f.addParam(\"pB\", \"i32\");\n        f.addParam(\"pC\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"pP\", \"i32\");\n        f.addLocal(\"ita\", \"i32\");\n        f.addLocal(\"itb\", \"i32\");\n        f.addLocal(\"itc\", \"i32\");\n        f.addLocal(\"itp\", \"i32\");\n        f.addLocal(\"last\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const aux = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.setLocal(\"ita\", c.getLocal(\"pA\")),\n            c.setLocal(\"itb\", c.getLocal(\"pB\")),\n            c.setLocal(\"itc\", c.getLocal(\"pC\")),\n            c.setLocal(\"itp\", c.getLocal(\"pP\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pA\"),\n                    c.i32_mul(\n                        c.getLocal(\"n\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"ita\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.call(\n                    prefixField + \"_mul\",\n                    c.getLocal(\"ita\"),\n                    c.getLocal(\"itb\"),\n                    aux\n                ),\n                c.call(\n                    prefixField + \"_sub\",\n                    aux,\n                    c.getLocal(\"itc\"),\n                    c.getLocal(\"itp\"),\n                ),\n                c.setLocal(\"ita\", c.i32_add(c.getLocal(\"ita\"), c.i32_const(n8))),\n                c.setLocal(\"itb\", c.i32_add(c.getLocal(\"itb\"), c.i32_const(n8))),\n                c.setLocal(\"itc\", c.i32_add(c.getLocal(\"itc\"), c.i32_const(n8))),\n                c.setLocal(\"itp\", c.i32_add(c.getLocal(\"itp\"), c.i32_const(n8))),\n                c.br(0)\n            ))\n        );\n    }\n\n    function buildBatchAdd() {\n        const f = module.addFunction(prefix+\"_batchAdd\");\n        f.addParam(\"pa\", \"i32\");\n        f.addParam(\"pb\", \"i32\");\n        f.addParam(\"n\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n        f.addLocal(\"ita\", \"i32\");\n        f.addLocal(\"itb\", \"i32\");\n        f.addLocal(\"itr\", \"i32\");\n        f.addLocal(\"last\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.setLocal(\"ita\", c.getLocal(\"pa\")),\n            c.setLocal(\"itb\", c.getLocal(\"pb\")),\n            c.setLocal(\"itr\", c.getLocal(\"pr\")),\n            c.setLocal(\n                \"last\",\n                c.i32_add(\n                    c.getLocal(\"pa\"),\n                    c.i32_mul(\n                        c.getLocal(\"n\"),\n                        c.i32_const(n8)\n                    )\n                )\n            ),\n            c.block(c.loop(\n                c.br_if(\n                    1,\n                    c.i32_eq(\n                        c.getLocal(\"ita\"),\n                        c.getLocal(\"last\")\n                    )\n                ),\n                c.call(\n                    prefixField + \"_add\",\n                    c.getLocal(\"ita\"),\n                    c.getLocal(\"itb\"),\n                    c.getLocal(\"itr\"),\n                ),\n                c.setLocal(\"ita\", c.i32_add(c.getLocal(\"ita\"), c.i32_const(n8))),\n                c.setLocal(\"itb\", c.i32_add(c.getLocal(\"itb\"), c.i32_const(n8))),\n                c.setLocal(\"itr\", c.i32_add(c.getLocal(\"itr\"), c.i32_const(n8))),\n                c.br(0)\n            ))\n        );\n    }\n\n    buildBuildABC();\n    buildJoinABC();\n    buildBatchAdd();\n\n    module.exportFunction(prefix + \"_buildABC\");\n    module.exportFunction(prefix + \"_joinABC\");\n    module.exportFunction(prefix + \"_batchAdd\");\n\n    return prefix;\n\n};\n\n", "\n\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nmodule.exports = function buildApplyKey(module, fnName, gPrefix, frPrefix, sizeGIn, sizeGOut, sizeF, opGtimesF) {\n\n    const f = module.addFunction(fnName);\n    f.addParam(\"pIn\", \"i32\");\n    f.addParam(\"n\", \"i32\");\n    f.addParam(\"pFirst\", \"i32\");\n    f.addParam(\"pInc\", \"i32\");\n    f.addParam(\"pOut\", \"i32\");\n    f.addLocal(\"pOldFree\", \"i32\");\n    f.addLocal(\"i\", \"i32\");\n    f.addLocal(\"pFrom\", \"i32\");\n    f.addLocal(\"pTo\", \"i32\");\n\n    const c = f.getCodeBuilder();\n\n    const t = c.i32_const(module.alloc(sizeF));\n\n    f.addCode(\n        c.setLocal(\"pFrom\", c.getLocal(\"pIn\")),\n        c.setLocal(\"pTo\", c.getLocal(\"pOut\")),\n    );\n\n    // t = first\n    f.addCode(\n        c.call(\n            frPrefix + \"_copy\",\n            c.getLocal(\"pFirst\"),\n            t\n        )\n    );\n    f.addCode(\n        c.setLocal(\"i\", c.i32_const(0)),\n        c.block(c.loop(\n            c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.getLocal(\"n\") )),\n\n            c.call(\n                opGtimesF,\n                c.getLocal(\"pFrom\"),\n                t,\n                c.getLocal(\"pTo\")\n            ),\n            c.setLocal(\"pFrom\", c.i32_add(c.getLocal(\"pFrom\"), c.i32_const(sizeGIn))),\n            c.setLocal(\"pTo\", c.i32_add(c.getLocal(\"pTo\"), c.i32_const(sizeGOut))),\n\n            // t = t* inc\n            c.call(\n                frPrefix + \"_mul\",\n                t,\n                c.getLocal(\"pInc\"),\n                t\n            ),\n            c.setLocal(\"i\", c.i32_add(c.getLocal(\"i\"), c.i32_const(1))),\n            c.br(0)\n        ))\n    );\n\n    module.exportFunction(fnName);\n\n};\n", "const utils = require(\"../utils\");\n\nconst buildF1m =require(\"../build_f1m.js\");\nconst buildF1 =require(\"../build_f1.js\");\nconst buildF2m =require(\"../build_f2m.js\");\nconst buildF3m =require(\"../build_f3m.js\");\nconst buildCurve =require(\"../build_curve_jacobian_a0.js\");\nconst buildFFT = require(\"../build_fft\");\nconst buildPol = require(\"../build_pol\");\nconst buildQAP = require(\"../build_qap\");\nconst buildApplyKey = require(\"../build_applykey\");\nconst { bitLength, modInv, isOdd, isNegative } = require(\"../bigint.js\");\n\nmodule.exports = function buildBN128(module, _prefix) {\n\n    const prefix = _prefix || \"bn128\";\n\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const q = 21888242871839275222246405745257275088696311157297823662689037894645226208583n;\n    const r = 21888242871839275222246405745257275088548364400416034343698204186575808495617n;\n\n\n    const n64 = Math.floor((bitLength(q - 1n) - 1)/64) +1;\n    const n8 = n64*8;\n    const frsize = n8;\n    const f1size = n8;\n    const f2size = f1size * 2;\n    const ftsize = f1size * 12;\n\n    const pr = module.alloc(utils.bigInt2BytesLE( r, frsize ));\n\n    const f1mPrefix = buildF1m(module, q, \"f1m\");\n    buildF1(module, r, \"fr\", \"frm\");\n\n    const pG1b = module.alloc(utils.bigInt2BytesLE( toMontgomery(3n), f1size ));\n    const g1mPrefix = buildCurve(module, \"g1m\", \"f1m\", pG1b);\n\n    buildFFT(module, \"frm\", \"frm\", \"frm\", \"frm_mul\");\n\n    buildPol(module, \"pol\", \"frm\");\n    buildQAP(module, \"qap\", \"frm\");\n\n    const f2mPrefix = buildF2m(module, \"f1m_neg\", \"f2m\", \"f1m\");\n    const pG2b = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(19485874751759354771024239261021720505790618469301721065564631296452457478373n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(266929791119991161246907387137283842545076965332900288569378510910307636690n), f1size )\n    ]);\n    const g2mPrefix = buildCurve(module, \"g2m\", \"f2m\", pG2b);\n\n\n    function buildGTimesFr(fnName, opMul) {\n        const f = module.addFunction(fnName);\n        f.addParam(\"pG\", \"i32\");\n        f.addParam(\"pFr\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8));\n\n        f.addCode(\n            c.call(\"frm_fromMontgomery\", c.getLocal(\"pFr\"), AUX),\n            c.call(\n                opMul,\n                c.getLocal(\"pG\"),\n                AUX,\n                c.i32_const(n8),\n                c.getLocal(\"pr\")\n            )\n        );\n\n        module.exportFunction(fnName);\n    }\n    buildGTimesFr(\"g1m_timesFr\", \"g1m_timesScalar\");\n    buildFFT(module, \"g1m\", \"g1m\", \"frm\", \"g1m_timesFr\");\n\n    buildGTimesFr(\"g2m_timesFr\", \"g2m_timesScalar\");\n    buildFFT(module, \"g2m\", \"g2m\", \"frm\", \"g2m_timesFr\");\n\n    buildGTimesFr(\"g1m_timesFrAffine\", \"g1m_timesScalarAffine\");\n    buildGTimesFr(\"g2m_timesFrAffine\", \"g2m_timesScalarAffine\");\n\n    buildApplyKey(module, \"frm_batchApplyKey\", \"fmr\", \"frm\", n8, n8, n8, \"frm_mul\");\n    buildApplyKey(module, \"g1m_batchApplyKey\", \"g1m\", \"frm\", n8*3, n8*3, n8, \"g1m_timesFr\");\n    buildApplyKey(module, \"g1m_batchApplyKeyMixed\", \"g1m\", \"frm\", n8*2, n8*3, n8, \"g1m_timesFrAffine\");\n    buildApplyKey(module, \"g2m_batchApplyKey\", \"g2m\", \"frm\", n8*2*3, n8*3*2, n8, \"g2m_timesFr\");\n    buildApplyKey(module, \"g2m_batchApplyKeyMixed\", \"g2m\", \"frm\", n8*2*2, n8*3*2, n8, \"g2m_timesFrAffine\");\n\n    function toMontgomery(a) {\n        return BigInt(a) * ( 1n << BigInt(f1size*8)) % q;\n    }\n\n    const G1gen = [\n        1n,\n        2n,\n        1n\n    ];\n\n    const pG1gen = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G1gen[0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1gen[1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1gen[2]), f1size ),\n        ]\n    );\n\n    const G1zero = [\n        0n,\n        1n,\n        0n\n    ];\n\n    const pG1zero = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G1zero[0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1zero[1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1zero[2]), f1size )\n        ]\n    );\n\n    const G2gen = [\n        [\n            10857046999023057135944570762232829481370756359578518086990519993285655852781n,\n            11559732032986387107991004021392285783925812861821192530917403151452391805634n,\n        ],[\n            8495653923123431417604973247489272438418190587263600148770280649306958101930n,\n            4082367875863433681332203403145435568316851327593401208105741076214120093531n,\n        ],[\n            1n,\n            0n,\n        ]\n    ];\n\n    const pG2gen = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[0][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[0][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[1][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[1][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[2][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[2][1]), f1size ),\n        ]\n    );\n\n    const G2zero = [\n        [\n            0n,\n            0n,\n        ],[\n            1n,\n            0n,\n        ],[\n            0n,\n            0n,\n        ]\n    ];\n\n    const pG2zero = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[0][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[0][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[1][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[1][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[2][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[2][1]), f1size ),\n        ]\n    );\n\n    const pOneT = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(1), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0), f1size ),\n    ]);\n\n    const pNonResidueF6 = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(9), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(1), f1size ),\n    ]);\n\n    const pTwoInv = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(  modInv(2n, q)), f1size ),\n        ...utils.bigInt2BytesLE( 0n, f1size )\n    ]);\n\n    const pAltBn128Twist = pNonResidueF6;\n\n    const pTwistCoefB = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(19485874751759354771024239261021720505790618469301721065564631296452457478373n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(266929791119991161246907387137283842545076965332900288569378510910307636690n), f1size ),\n    ]);\n\n    function build_mulNR6() {\n        const f = module.addFunction(prefix + \"_mulNR6\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(\n                f2mPrefix + \"_mul\",\n                c.i32_const(pNonResidueF6),\n                c.getLocal(\"x\"),\n                c.getLocal(\"pr\")\n            )\n        );\n    }\n    build_mulNR6();\n\n    const f6mPrefix = buildF3m(module, prefix+\"_mulNR6\", \"f6m\", \"f2m\");\n\n    function build_mulNR12() {\n        const f = module.addFunction(prefix + \"_mulNR12\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(\n                f2mPrefix + \"_mul\",\n                c.i32_const(pNonResidueF6),\n                c.i32_add(c.getLocal(\"x\"), c.i32_const(n8*4)),\n                c.getLocal(\"pr\")\n            ),\n            c.call(\n                f2mPrefix + \"_copy\",\n                c.getLocal(\"x\"),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*2)),\n            ),\n            c.call(\n                f2mPrefix + \"_copy\",\n                c.i32_add(c.getLocal(\"x\"), c.i32_const(n8*2)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8*4)),\n            )\n        );\n    }\n    build_mulNR12();\n\n    const ftmPrefix = buildF2m(module, prefix+\"_mulNR12\", \"ftm\", f6mPrefix);\n\n\n    const ateLoopCount = 29793968203157093288n;\n    const ateLoopBitBytes = bits(ateLoopCount);\n    const pAteLoopBitBytes = module.alloc(ateLoopBitBytes);\n    const isLoopNegative = false;\n\n    const ateCoefSize = 3 * f2size;\n    const ateNDblCoefs = ateLoopBitBytes.length-1;\n    const ateNAddCoefs = ateLoopBitBytes.reduce((acc, b) =>  acc + ( b!=0 ? 1 : 0)   ,0);\n    const ateNCoefs = ateNAddCoefs + ateNDblCoefs + 1;\n    const prePSize = 3*2*n8;\n    const preQSize = 3*n8*2 + ateNCoefs*ateCoefSize;\n    const finalExpIsNegative = false;\n\n\n    module.modules[prefix] = {\n        n64: n64,\n        pG1gen: pG1gen,\n        pG1zero: pG1zero,\n        pG1b: pG1b,\n        pG2gen: pG2gen,\n        pG2zero: pG2zero,\n        pG2b: pG2b,\n        pq: module.modules[\"f1m\"].pq,\n        pr: pr,\n        pOneT: pOneT,\n        prePSize: prePSize,\n        preQSize: preQSize,\n        r: r.toString(),\n        q: q.toString()\n    };\n\n    // console.log(\"PrePSize: \" +prePSize);\n    // console.log(\"PreQSize: \" +preQSize);\n\n    const finalExpZ = 4965661367192848881n;\n\n    function naf(n) {\n        let E = n;\n        const res = [];\n        while (E > 0n) {\n            if (isOdd(E)) {\n                const z = 2 - Number(E % 4n);\n                res.push( z );\n                E = E - BigInt(z);\n            } else {\n                res.push( 0 );\n            }\n            E = E >> 1n;\n        }\n        return res;\n    }\n\n    function bits(n) {\n        let E = n;\n        const res = [];\n        while (E > 0n) {\n            if (isOdd(E)) {\n                res.push( 1 );\n            } else {\n                res.push( 0 );\n            }\n            E = E >> 1n;\n        }\n        return res;\n    }\n\n    function buildPrepareG1() {\n        const f = module.addFunction(prefix+ \"_prepareG1\");\n        f.addParam(\"pP\", \"i32\");\n        f.addParam(\"ppreP\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(g1mPrefix + \"_normalize\", c.getLocal(\"pP\"), c.getLocal(\"ppreP\")),  // TODO Remove if already in affine\n        );\n    }\n\n    function buildPrepAddStep() {\n        const f = module.addFunction(prefix+ \"_prepAddStep\");\n        f.addParam(\"pQ\", \"i32\");\n        f.addParam(\"pR\", \"i32\");\n        f.addParam(\"pCoef\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const X2  = c.getLocal(\"pQ\");\n        const Y2  = c.i32_add(c.getLocal(\"pQ\"), c.i32_const(f2size));\n\n        const X1  = c.getLocal(\"pR\");\n        const Y1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f2size));\n        const Z1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(2*f2size));\n\n        const ELL_0  = c.getLocal(\"pCoef\");\n        const ELL_VW = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(f2size));\n        const ELL_VV  = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(2*f2size));\n\n        const D = ELL_VW;\n        const E = c.i32_const(module.alloc(f2size));\n        const F = c.i32_const(module.alloc(f2size));\n        const G = c.i32_const(module.alloc(f2size));\n        const H = c.i32_const(module.alloc(f2size));\n        const I = c.i32_const(module.alloc(f2size));\n        const J = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n            // D = X1 - X2*Z1\n            c.call(f2mPrefix + \"_mul\", X2, Z1, D),\n            c.call(f2mPrefix + \"_sub\", X1, D, D),\n\n            // E = Y1 - Y2*Z1\n            c.call(f2mPrefix + \"_mul\", Y2, Z1, E),\n            c.call(f2mPrefix + \"_sub\", Y1, E, E),\n\n            // F = D^2\n            c.call(f2mPrefix + \"_square\", D, F),\n\n            // G = E^2\n            c.call(f2mPrefix + \"_square\", E, G),\n\n            // H = D*F\n            c.call(f2mPrefix + \"_mul\", D, F, H),\n\n            // I = X1 * F\n            c.call(f2mPrefix + \"_mul\", X1, F, I),\n\n            // J = H + Z1*G - (I+I)\n            c.call(f2mPrefix + \"_add\", I, I, AUX),\n            c.call(f2mPrefix + \"_mul\", Z1, G, J),\n            c.call(f2mPrefix + \"_add\", H, J, J),\n            c.call(f2mPrefix + \"_sub\", J, AUX, J),\n\n\n            // X3 (X1) = D*J\n            c.call(f2mPrefix + \"_mul\", D, J, X1),\n\n            // Y3 (Y1) = E*(I-J)-(H*Y1)\n            c.call(f2mPrefix + \"_mul\", H, Y1, Y1),\n            c.call(f2mPrefix + \"_sub\", I, J, AUX),\n            c.call(f2mPrefix + \"_mul\", E, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", AUX, Y1, Y1),\n\n            // Z3 (Z1) = Z1*H\n            c.call(f2mPrefix + \"_mul\", Z1, H, Z1),\n\n            // ell_0 = xi * (E * X2 - D * Y2)\n            c.call(f2mPrefix + \"_mul\", D, Y2, AUX),\n            c.call(f2mPrefix + \"_mul\", E, X2, ELL_0),\n            c.call(f2mPrefix + \"_sub\", ELL_0, AUX, ELL_0),\n            c.call(f2mPrefix + \"_mul\", ELL_0, c.i32_const(pAltBn128Twist), ELL_0),\n\n\n            // ell_VV = - E (later: * xP)\n            c.call(f2mPrefix + \"_neg\", E, ELL_VV),\n\n            // ell_VW = D (later: * yP    )\n            // Already assigned\n\n        );\n    }\n\n\n\n    function buildPrepDoubleStep() {\n        const f = module.addFunction(prefix+ \"_prepDblStep\");\n        f.addParam(\"pR\", \"i32\");\n        f.addParam(\"pCoef\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const X1  = c.getLocal(\"pR\");\n        const Y1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f2size));\n        const Z1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(2*f2size));\n\n        const ELL_0  = c.getLocal(\"pCoef\");\n        const ELL_VW = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(f2size));\n        const ELL_VV  = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(2*f2size));\n\n        const A = c.i32_const(module.alloc(f2size));\n        const B = c.i32_const(module.alloc(f2size));\n        const C = c.i32_const(module.alloc(f2size));\n        const D = c.i32_const(module.alloc(f2size));\n        const E = c.i32_const(module.alloc(f2size));\n        const F = c.i32_const(module.alloc(f2size));\n        const G = c.i32_const(module.alloc(f2size));\n        const H = c.i32_const(module.alloc(f2size));\n        const I = c.i32_const(module.alloc(f2size));\n        const J = c.i32_const(module.alloc(f2size));\n        const E2 = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n\n            // A = X1 * Y1 / 2\n            c.call(f2mPrefix + \"_mul\", Y1, c.i32_const(pTwoInv), A),\n            c.call(f2mPrefix + \"_mul\", X1, A, A),\n\n            // B = Y1^2\n            c.call(f2mPrefix + \"_square\", Y1, B),\n\n            // C = Z1^2\n            c.call(f2mPrefix + \"_square\", Z1, C),\n\n            // D = 3 * C\n            c.call(f2mPrefix + \"_add\", C, C, D),\n            c.call(f2mPrefix + \"_add\", D, C, D),\n\n            // E = twist_b * D\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pTwistCoefB), D, E),\n\n            // F = 3 * E\n            c.call(f2mPrefix + \"_add\", E, E, F),\n            c.call(f2mPrefix + \"_add\", E, F, F),\n\n            // G = (B+F)/2\n            c.call(f2mPrefix + \"_add\", B, F, G),\n            c.call(f2mPrefix + \"_mul\", G, c.i32_const(pTwoInv), G),\n\n            // H = (Y1+Z1)^2-(B+C)\n            c.call(f2mPrefix + \"_add\", B, C, AUX),\n            c.call(f2mPrefix + \"_add\", Y1, Z1, H),\n            c.call(f2mPrefix + \"_square\", H, H),\n            c.call(f2mPrefix + \"_sub\", H, AUX, H),\n\n            // I = E-B\n            c.call(f2mPrefix + \"_sub\", E, B, I),\n\n            // J = X1^2\n            c.call(f2mPrefix + \"_square\", X1, J),\n\n            // E_squared = E^2\n            c.call(f2mPrefix + \"_square\", E, E2),\n\n            // X3 (X1) = A * (B-F)\n            c.call(f2mPrefix + \"_sub\", B, F, AUX),\n            c.call(f2mPrefix + \"_mul\", A, AUX, X1),\n\n            // Y3 (Y1) = G^2 - 3*E^2\n            c.call(f2mPrefix + \"_add\", E2, E2, AUX),\n            c.call(f2mPrefix + \"_add\", E2, AUX, AUX),\n            c.call(f2mPrefix + \"_square\", G, Y1),\n            c.call(f2mPrefix + \"_sub\", Y1, AUX, Y1),\n\n            // Z3 (Z1) = B * H\n            c.call(f2mPrefix + \"_mul\", B, H, Z1),\n\n            // ell_0 = xi * I\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pAltBn128Twist), I, ELL_0),\n\n            // ell_VW = - H (later: * yP)\n            c.call(f2mPrefix + \"_neg\", H, ELL_VW),\n\n            // ell_VV = 3*J (later: * xP)\n            c.call(f2mPrefix + \"_add\", J, J, ELL_VV),\n            c.call(f2mPrefix + \"_add\", J, ELL_VV, ELL_VV),\n\n        );\n    }\n\n    function buildMulByQ() {\n        const f = module.addFunction(prefix + \"_mulByQ\");\n        f.addParam(\"p1\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"p1\");\n        const y = c.i32_add(c.getLocal(\"p1\"), c.i32_const(f2size));\n        const z = c.i32_add(c.getLocal(\"p1\"), c.i32_const(f2size*2));\n        const x3 = c.getLocal(\"pr\");\n        const y3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(f2size));\n        const z3 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(f2size*2));\n\n        const MulByQX = c.i32_const(module.alloc([\n            ...utils.bigInt2BytesLE( toMontgomery(\"21575463638280843010398324269430826099269044274347216827212613867836435027261\"), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(\"10307601595873709700152284273816112264069230130616436755625194854815875713954\"), f1size ),\n        ]));\n\n        const MulByQY = c.i32_const(module.alloc([\n            ...utils.bigInt2BytesLE( toMontgomery(\"2821565182194536844548159561693502659359617185244120367078079554186484126554\"), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(\"3505843767911556378687030309984248845540243509899259641013678093033130930403\"), f1size ),\n        ]));\n\n        f.addCode(\n            // The frobeniusMap(1) in this field, is the conjugate\n            c.call(f2mPrefix + \"_conjugate\", x, x3),\n            c.call(f2mPrefix + \"_mul\", MulByQX, x3, x3),\n            c.call(f2mPrefix + \"_conjugate\", y, y3),\n            c.call(f2mPrefix + \"_mul\", MulByQY, y3, y3),\n            c.call(f2mPrefix + \"_conjugate\", z, z3),\n        );\n    }\n\n\n    function buildPrepareG2() {\n        buildMulByQ();\n        const f = module.addFunction(prefix+ \"_prepareG2\");\n        f.addParam(\"pQ\", \"i32\");\n        f.addParam(\"ppreQ\", \"i32\");\n        f.addLocal(\"pCoef\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const QX = c.getLocal(\"pQ\");\n\n        const pR = module.alloc(f2size*3);\n        const R = c.i32_const(pR);\n        const RX = c.i32_const(pR);\n        const RY = c.i32_const(pR+f2size);\n        const RZ = c.i32_const(pR+2*f2size);\n\n        const cQX = c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(0));\n        const cQY = c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(f2size));\n\n        const pQ1 = module.alloc(f2size*3);\n        const Q1 = c.i32_const(pQ1);\n\n        const pQ2 = module.alloc(f2size*3);\n        const Q2 = c.i32_const(pQ2);\n        const Q2Y = c.i32_const(pQ2 + f2size);\n\n        f.addCode(\n            c.call(g2mPrefix + \"_normalize\", QX, cQX),  // TODO Remove if already in affine\n            c.call(f2mPrefix + \"_copy\", cQX, RX),\n            c.call(f2mPrefix + \"_copy\", cQY, RY),\n            c.call(f2mPrefix + \"_one\", RZ),\n        );\n\n        f.addCode(\n            c.setLocal(\"pCoef\", c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(f2size*3))),\n            c.setLocal(\"i\", c.i32_const(ateLoopBitBytes.length-2)),\n            c.block(c.loop(\n\n                c.call(prefix + \"_prepDblStep\", R, c.getLocal(\"pCoef\")),\n                c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                c.if(\n                    c.i32_load8_s(c.getLocal(\"i\"), pAteLoopBitBytes),\n                    [\n                        ...c.call(prefix + \"_prepAddStep\", cQX, R, c.getLocal(\"pCoef\")),\n                        ...c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n                    ]\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n\n        f.addCode(\n            c.call(prefix + \"_mulByQ\", cQX, Q1),\n            c.call(prefix + \"_mulByQ\", Q1, Q2)\n        );\n\n        if (isLoopNegative) {\n            f.addCode(\n                c.call(f2mPrefix + \"_neg\", RY, RY),\n            );\n        }\n\n        f.addCode(\n            c.call(f2mPrefix + \"_neg\", Q2Y, Q2Y),\n\n            c.call(prefix + \"_prepAddStep\", Q1, R, c.getLocal(\"pCoef\")),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n            c.call(prefix + \"_prepAddStep\", Q2, R, c.getLocal(\"pCoef\")),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n        );\n    }\n\n    function buildMulBy024Old() {\n        const f = module.addFunction(prefix+ \"__mulBy024Old\");\n        f.addParam(\"pEll0\", \"i32\");\n        f.addParam(\"pEllVW\", \"i32\");\n        f.addParam(\"pEllVV\", \"i32\");\n        f.addParam(\"pR\", \"i32\");            // Result in F12\n\n        const c = f.getCodeBuilder();\n\n        const x0  = c.getLocal(\"pEll0\");\n        const x2  = c.getLocal(\"pEllVV\");\n        const x4  = c.getLocal(\"pEllVW\");\n\n        const z0  = c.getLocal(\"pR\");\n\n        const pAUX12 = module.alloc(ftsize);\n        const AUX12 = c.i32_const(pAUX12);\n        const AUX12_0 = c.i32_const(pAUX12);\n        const AUX12_2 = c.i32_const(pAUX12+f2size);\n        const AUX12_4 = c.i32_const(pAUX12+f2size*2);\n        const AUX12_6 = c.i32_const(pAUX12+f2size*3);\n        const AUX12_8 = c.i32_const(pAUX12+f2size*4);\n        const AUX12_10 = c.i32_const(pAUX12+f2size*5);\n\n        f.addCode(\n\n            c.call(f2mPrefix + \"_copy\", x0, AUX12_0),\n            c.call(f2mPrefix + \"_zero\", AUX12_2),\n            c.call(f2mPrefix + \"_copy\", x2, AUX12_4),\n            c.call(f2mPrefix + \"_zero\", AUX12_6),\n            c.call(f2mPrefix + \"_copy\", x4, AUX12_8),\n            c.call(f2mPrefix + \"_zero\", AUX12_10),\n            c.call(ftmPrefix + \"_mul\", AUX12, z0, z0),\n        );\n    }\n\n    function buildMulBy024() {\n        const f = module.addFunction(prefix+ \"__mulBy024\");\n        f.addParam(\"pEll0\", \"i32\");\n        f.addParam(\"pEllVW\", \"i32\");\n        f.addParam(\"pEllVV\", \"i32\");\n        f.addParam(\"pR\", \"i32\");            // Result in F12\n\n        const c = f.getCodeBuilder();\n\n        const x0  = c.getLocal(\"pEll0\");\n        const x2  = c.getLocal(\"pEllVV\");\n        const x4  = c.getLocal(\"pEllVW\");\n\n        const z0  = c.getLocal(\"pR\");\n        const z1  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(2*n8));\n        const z2  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(4*n8));\n        const z3  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(6*n8));\n        const z4  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(8*n8));\n        const z5  = c.i32_add(c.getLocal(\"pR\"), c.i32_const(10*n8));\n\n        const t0 = c.i32_const(module.alloc(f2size));\n        const t1 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const s0 = c.i32_const(module.alloc(f2size));\n        const T3 = c.i32_const(module.alloc(f2size));\n        const T4 = c.i32_const(module.alloc(f2size));\n        const D0 = c.i32_const(module.alloc(f2size));\n        const D2 = c.i32_const(module.alloc(f2size));\n        const D4 = c.i32_const(module.alloc(f2size));\n        const S1 = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n\n            // D0 = z0 * x0;\n            c.call(f2mPrefix + \"_mul\", z0, x0, D0),\n            // D2 = z2 * x2;\n            c.call(f2mPrefix + \"_mul\", z2, x2, D2),\n            // D4 = z4 * x4;\n            c.call(f2mPrefix + \"_mul\", z4, x4, D4),\n            // t2 = z0 + z4;\n            c.call(f2mPrefix + \"_add\", z0, z4, t2),\n            // t1 = z0 + z2;\n            c.call(f2mPrefix + \"_add\", z0, z2, t1),\n            // s0 = z1 + z3 + z5;\n            c.call(f2mPrefix + \"_add\", z1, z3, s0),\n            c.call(f2mPrefix + \"_add\", s0, z5, s0),\n\n\n            // For z.a_.a_ = z0.\n            // S1 = z1 * x2;\n            c.call(f2mPrefix + \"_mul\", z1, x2, S1),\n            // T3 = S1 + D4;\n            c.call(f2mPrefix + \"_add\", S1, D4, T3),\n            // T4 = my_Fp6::non_residue * T3 + D0;\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), T3, T4),\n            c.call(f2mPrefix + \"_add\", T4, D0, z0),\n            // z0 = T4;\n\n            // For z.a_.b_ = z1\n            // T3 = z5 * x4;\n            c.call(f2mPrefix + \"_mul\", z5, x4, T3),\n            // S1 = S1 + T3;\n            c.call(f2mPrefix + \"_add\", S1, T3, S1),\n            // T3 = T3 + D2;\n            c.call(f2mPrefix + \"_add\", T3, D2, T3),\n            // T4 = my_Fp6::non_residue * T3;\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), T3, T4),\n            // T3 = z1 * x0;\n            c.call(f2mPrefix + \"_mul\", z1, x0, T3),\n            // S1 = S1 + T3;\n            c.call(f2mPrefix + \"_add\", S1, T3, S1),\n            // T4 = T4 + T3;\n            c.call(f2mPrefix + \"_add\", T4, T3, z1),\n            // z1 = T4;\n\n\n\n            // For z.a_.c_ = z2\n            // t0 = x0 + x2;\n            c.call(f2mPrefix + \"_add\", x0, x2, t0),\n            // T3 = t1 * t0 - D0 - D2;\n            c.call(f2mPrefix + \"_mul\", t1, t0, T3),\n            c.call(f2mPrefix + \"_add\", D0, D2, AUX),\n            c.call(f2mPrefix + \"_sub\", T3, AUX, T3),\n            // T4 = z3 * x4;\n            c.call(f2mPrefix + \"_mul\", z3, x4, T4),\n            // S1 = S1 + T4;\n            c.call(f2mPrefix + \"_add\", S1, T4, S1),\n\n\n            // For z.b_.a_ = z3 (z3 needs z2)\n            // t0 = z2 + z4;\n            c.call(f2mPrefix + \"_add\", z2, z4, t0),\n            // T3 = T3 + T4;\n            // z2 = T3;\n            c.call(f2mPrefix + \"_add\", T3, T4, z2),\n            // t1 = x2 + x4;\n            c.call(f2mPrefix + \"_add\", x2, x4, t1),\n            // T3 = t0 * t1 - D2 - D4;\n            c.call(f2mPrefix + \"_mul\", t1, t0, T3),\n            c.call(f2mPrefix + \"_add\", D2, D4, AUX),\n            c.call(f2mPrefix + \"_sub\", T3, AUX, T3),\n            // T4 = my_Fp6::non_residue * T3;\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), T3, T4),\n            // T3 = z3 * x0;\n            c.call(f2mPrefix + \"_mul\", z3, x0, T3),\n            // S1 = S1 + T3;\n            c.call(f2mPrefix + \"_add\", S1, T3, S1),\n            // T4 = T4 + T3;\n            c.call(f2mPrefix + \"_add\", T4, T3, z3),\n            // z3 = T4;\n\n            // For z.b_.b_ = z4\n            // T3 = z5 * x2;\n            c.call(f2mPrefix + \"_mul\", z5, x2, T3),\n            // S1 = S1 + T3;\n            c.call(f2mPrefix + \"_add\", S1, T3, S1),\n            // T4 = my_Fp6::non_residue * T3;\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), T3, T4),\n            // t0 = x0 + x4;\n            c.call(f2mPrefix + \"_add\", x0, x4, t0),\n            // T3 = t2 * t0 - D0 - D4;\n            c.call(f2mPrefix + \"_mul\", t2, t0, T3),\n            c.call(f2mPrefix + \"_add\", D0, D4, AUX),\n            c.call(f2mPrefix + \"_sub\", T3, AUX, T3),\n            // T4 = T4 + T3;\n            c.call(f2mPrefix + \"_add\", T4, T3, z4),\n            // z4 = T4;\n\n            // For z.b_.c_ = z5.\n            // t0 = x0 + x2 + x4;\n            c.call(f2mPrefix + \"_add\", x0, x2, t0),\n            c.call(f2mPrefix + \"_add\", t0, x4, t0),\n            // T3 = s0 * t0 - S1;\n            c.call(f2mPrefix + \"_mul\", s0, t0, T3),\n            c.call(f2mPrefix + \"_sub\", T3, S1, z5),\n            // z5 = T3;\n\n        );\n    }\n\n\n    function buildMillerLoop() {\n        const f = module.addFunction(prefix+ \"_millerLoop\");\n        f.addParam(\"ppreP\", \"i32\");\n        f.addParam(\"ppreQ\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"pCoef\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const preP_PX = c.getLocal(\"ppreP\");\n        const preP_PY = c.i32_add(c.getLocal(\"ppreP\"), c.i32_const(f1size));\n\n        const ELL_0  = c.getLocal(\"pCoef\");\n        const ELL_VW = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(f2size));\n        const ELL_VV  = c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(2*f2size));\n\n\n        const pVW = module.alloc(f2size);\n        const VW = c.i32_const(pVW);\n        const pVV = module.alloc(f2size);\n        const VV = c.i32_const(pVV);\n\n        const F = c.getLocal(\"r\");\n\n\n        f.addCode(\n            c.call(ftmPrefix + \"_one\", F),\n\n            c.setLocal(\"pCoef\", c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(f2size*3))),\n\n            c.setLocal(\"i\", c.i32_const(ateLoopBitBytes.length-2)),\n            c.block(c.loop(\n\n\n                c.call(ftmPrefix + \"_square\", F, F),\n\n                c.call(f2mPrefix + \"_mul1\", ELL_VW,preP_PY, VW),\n                c.call(f2mPrefix + \"_mul1\", ELL_VV, preP_PX, VV),\n                c.call(prefix + \"__mulBy024\", ELL_0, VW, VV, F),\n                c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                c.if(\n                    c.i32_load8_s(c.getLocal(\"i\"), pAteLoopBitBytes),\n                    [\n                        ...c.call(f2mPrefix + \"_mul1\", ELL_VW, preP_PY, VW),\n                        ...c.call(f2mPrefix + \"_mul1\", ELL_VV, preP_PX, VV),\n\n                        ...c.call(prefix + \"__mulBy024\", ELL_0, VW, VV, F),\n                        ...c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                    ]\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n\n        );\n\n        if (isLoopNegative) {\n            f.addCode(\n                c.call(ftmPrefix + \"_inverse\", F, F),\n            );\n        }\n\n        f.addCode(\n            c.call(f2mPrefix + \"_mul1\", ELL_VW, preP_PY, VW),\n            c.call(f2mPrefix + \"_mul1\", ELL_VV, preP_PX, VV),\n            c.call(prefix + \"__mulBy024\", ELL_0, VW, VV, F),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n            c.call(f2mPrefix + \"_mul1\", ELL_VW, preP_PY, VW),\n            c.call(f2mPrefix + \"_mul1\", ELL_VV, preP_PX, VV),\n            c.call(prefix + \"__mulBy024\", ELL_0, VW, VV, F),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n        );\n\n    }\n\n\n    function buildFrobeniusMap(n) {\n        const F12 = [\n            [\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n            ],\n            [\n                [1n, 0n],\n                [8376118865763821496583973867626364092589906065868298776909617916018768340080n, 16469823323077808223889137241176536799009286646108169935659301613961712198316n],\n                [21888242871839275220042445260109153167277707414472061641714758635765020556617n, 0n],\n                [11697423496358154304825782922584725312912383441159505038794027105778954184319n, 303847389135065887422783454877609941456349188919719272345083954437860409601n],\n                [21888242871839275220042445260109153167277707414472061641714758635765020556616n, 0n],\n                [3321304630594332808241809054958361220322477375291206261884409189760185844239n, 5722266937896532885780051958958348231143373700109372999374820235121374419868n],\n                [21888242871839275222246405745257275088696311157297823662689037894645226208582n, 0n],\n                [13512124006075453725662431877630910996106405091429524885779419978626457868503n, 5418419548761466998357268504080738289687024511189653727029736280683514010267n],\n                [2203960485148121921418603742825762020974279258880205651966n, 0n],\n                [10190819375481120917420622822672549775783927716138318623895010788866272024264n, 21584395482704209334823622290379665147239961968378104390343953940207365798982n],\n                [2203960485148121921418603742825762020974279258880205651967n, 0n],\n                [18566938241244942414004596690298913868373833782006617400804628704885040364344n, 16165975933942742336466353786298926857552937457188450663314217659523851788715n],\n            ]\n        ];\n\n        const F6 = [\n            [\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n            ],\n            [\n                [1n, 0n],\n                [21575463638280843010398324269430826099269044274347216827212613867836435027261n, 10307601595873709700152284273816112264069230130616436755625194854815875713954n],\n                [21888242871839275220042445260109153167277707414472061641714758635765020556616n, 0n],\n                [3772000881919853776433695186713858239009073593817195771773381919316419345261n, 2236595495967245188281701248203181795121068902605861227855261137820944008926n],\n                [2203960485148121921418603742825762020974279258880205651966n, 0n],\n                [18429021223477853657660792034369865839114504446431234726392080002137598044644n, 9344045779998320333812420223237981029506012124075525679208581902008406485703n],\n            ],\n            [\n                [1n, 0n],\n                [2581911344467009335267311115468803099551665605076196740867805258568234346338n, 19937756971775647987995932169929341994314640652964949448313374472400716661030n],\n                [2203960485148121921418603742825762020974279258880205651966n, 0n],\n                [5324479202449903542726783395506214481928257762400643279780343368557297135718n, 16208900380737693084919495127334387981393726419856888799917914180988844123039n],\n                [21888242871839275220042445260109153167277707414472061641714758635765020556616n, 0n],\n                [13981852324922362344252311234282257507216387789820983642040889267519694726527n, 7629828391165209371577384193250820201684255241773809077146787135900891633097n],\n            ]\n        ];\n\n        const f = module.addFunction(prefix+ \"__frobeniusMap\"+n);\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<6; i++) {\n            const X = (i==0) ? c.getLocal(\"x\") : c.i32_add(c.getLocal(\"x\"), c.i32_const(i*f2size));\n            const Xc0 = X;\n            const Xc1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(i*f2size + f1size));\n            const R = (i==0) ? c.getLocal(\"r\") : c.i32_add(c.getLocal(\"r\"), c.i32_const(i*f2size));\n            const Rc0 = R;\n            const Rc1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(i*f2size + f1size));\n            const coef = mul2(F12[Math.floor(i/3)][n%12] , F6[i%3][n%6]);\n            const pCoef = module.alloc([\n                ...utils.bigInt2BytesLE(toMontgomery(coef[0]), 32),\n                ...utils.bigInt2BytesLE(toMontgomery(coef[1]), 32),\n            ]);\n            if (n%2 == 1) {\n                f.addCode(\n                    c.call(f1mPrefix + \"_copy\", Xc0, Rc0),\n                    c.call(f1mPrefix + \"_neg\", Xc1, Rc1),\n                    c.call(f2mPrefix + \"_mul\", R, c.i32_const(pCoef), R),\n                );\n            } else {\n                f.addCode(c.call(f2mPrefix + \"_mul\", X, c.i32_const(pCoef), R));\n            }\n        }\n\n        function mul2(a, b) {\n            const ac0 = BigInt(a[0]);\n            const ac1 = BigInt(a[1]);\n            const bc0 = BigInt(b[0]);\n            const bc1 = BigInt(b[1]);\n            const res = [\n                (ac0 * bc0 - (  ac1 * bc1)  ) % q,\n                (ac0 * bc1 + (  ac1 * bc0)  ) % q,\n            ];\n            if (isNegative(res[0])) res[0] = res[0] + q;\n            return res;\n        }\n\n    }\n\n\n\n    function buildFinalExponentiationFirstChunk() {\n\n        const f = module.addFunction(prefix+ \"__finalExponentiationFirstChunk\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const elt = c.getLocal(\"x\");\n        const eltC0 = elt;\n        const eltC1 = c.i32_add(elt, c.i32_const(n8*6));\n        const r = c.getLocal(\"r\");\n        const pA = module.alloc(ftsize);\n        const A = c.i32_const(pA);\n        const Ac0 = A;\n        const Ac1 = c.i32_const(pA + n8*6);\n        const B = c.i32_const(module.alloc(ftsize));\n        const C = c.i32_const(module.alloc(ftsize));\n        const D = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(\n            // const alt_bn128_Fq12 A = alt_bn128_Fq12(elt.c0,-elt.c1);\n            c.call(f6mPrefix + \"_copy\", eltC0, Ac0),\n            c.call(f6mPrefix + \"_neg\", eltC1, Ac1),\n\n            // const alt_bn128_Fq12 B = elt.inverse();\n            c.call(ftmPrefix + \"_inverse\", elt, B),\n\n            // const alt_bn128_Fq12 C = A * B;\n            c.call(ftmPrefix + \"_mul\", A, B, C),\n            // const alt_bn128_Fq12 D = C.Frobenius_map(2);\n            c.call(prefix + \"__frobeniusMap2\", C, D),\n            // const alt_bn128_Fq12 result = D * C;\n            c.call(ftmPrefix + \"_mul\", C, D, r),\n        );\n    }\n\n    function buildCyclotomicSquare() {\n        const f = module.addFunction(prefix+ \"__cyclotomicSquare\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x4 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f2size));\n        const x3 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f2size));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(3*f2size));\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(4*f2size));\n        const x5 = c.i32_add(c.getLocal(\"x\"), c.i32_const(5*f2size));\n\n        const r0 = c.getLocal(\"r\");\n        const r4 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f2size));\n        const r3 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f2size));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(3*f2size));\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(4*f2size));\n        const r5 = c.i32_add(c.getLocal(\"r\"), c.i32_const(5*f2size));\n\n        const t0 = c.i32_const(module.alloc(f2size));\n        const t1 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const t3 = c.i32_const(module.alloc(f2size));\n        const t4 = c.i32_const(module.alloc(f2size));\n        const t5 = c.i32_const(module.alloc(f2size));\n        const tmp = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n\n        f.addCode(\n            //    // t0 + t1*y = (z0 + z1*y)^2 = a^2\n            //    tmp = z0 * z1;\n            //    t0 = (z0 + z1) * (z0 + my_Fp6::non_residue * z1) - tmp - my_Fp6::non_residue * tmp;\n            //    t1 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x0, x1, tmp),\n            c.call(f2mPrefix + \"_mul\", x1, c.i32_const(pNonResidueF6), t0),\n            c.call(f2mPrefix + \"_add\", x0, t0, t0),\n            c.call(f2mPrefix + \"_add\", x0, x1, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t0, t0),\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t0, AUX, t0),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t1),\n\n            //  // t2 + t3*y = (z2 + z3*y)^2 = b^2\n            //  tmp = z2 * z3;\n            //  t2 = (z2 + z3) * (z2 + my_Fp6::non_residue * z3) - tmp - my_Fp6::non_residue * tmp;\n            //  t3 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x2, x3, tmp),\n            c.call(f2mPrefix + \"_mul\", x3, c.i32_const(pNonResidueF6), t2),\n            c.call(f2mPrefix + \"_add\", x2, t2, t2),\n            c.call(f2mPrefix + \"_add\", x2, x3, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t2, t2),\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t2, AUX, t2),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t3),\n\n            //  // t4 + t5*y = (z4 + z5*y)^2 = c^2\n            //  tmp = z4 * z5;\n            //  t4 = (z4 + z5) * (z4 + my_Fp6::non_residue * z5) - tmp - my_Fp6::non_residue * tmp;\n            //  t5 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x4, x5, tmp),\n            c.call(f2mPrefix + \"_mul\", x5, c.i32_const(pNonResidueF6), t4),\n            c.call(f2mPrefix + \"_add\", x4, t4, t4),\n            c.call(f2mPrefix + \"_add\", x4, x5, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t4, t4),\n            c.call(f2mPrefix + \"_mul\", c.i32_const(pNonResidueF6), tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t4, AUX, t4),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t5),\n\n            // For A\n            // z0 = 3 * t0 - 2 * z0\n            c.call(f2mPrefix + \"_sub\", t0, x0, r0),\n            c.call(f2mPrefix + \"_add\", r0, r0, r0),\n            c.call(f2mPrefix + \"_add\", t0, r0, r0),\n            // z1 = 3 * t1 + 2 * z1\n            c.call(f2mPrefix + \"_add\", t1, x1, r1),\n            c.call(f2mPrefix + \"_add\", r1, r1, r1),\n            c.call(f2mPrefix + \"_add\", t1, r1, r1),\n\n            // For B\n            // z2 = 3 * (xi * t5) + 2 * z2\n            c.call(f2mPrefix + \"_mul\", t5, c.i32_const(pAltBn128Twist), AUX),\n            c.call(f2mPrefix + \"_add\", AUX, x2, r2),\n            c.call(f2mPrefix + \"_add\", r2, r2, r2),\n            c.call(f2mPrefix + \"_add\", AUX, r2, r2),\n            // z3 = 3 * t4 - 2 * z3\n            c.call(f2mPrefix + \"_sub\", t4, x3, r3),\n            c.call(f2mPrefix + \"_add\", r3, r3, r3),\n            c.call(f2mPrefix + \"_add\", t4, r3, r3),\n\n            // For C\n            // z4 = 3 * t2 - 2 * z4\n            c.call(f2mPrefix + \"_sub\", t2, x4, r4),\n            c.call(f2mPrefix + \"_add\", r4, r4, r4),\n            c.call(f2mPrefix + \"_add\", t2, r4, r4),\n            // z5 = 3 * t3 + 2 * z5\n            c.call(f2mPrefix + \"_add\", t3, x5, r5),\n            c.call(f2mPrefix + \"_add\", r5, r5, r5),\n            c.call(f2mPrefix + \"_add\", t3, r5, r5),\n\n        );\n    }\n\n\n    function buildCyclotomicExp(exponent, fnName) {\n        const exponentNafBytes = naf(exponent).map( (b) => (b==-1 ? 0xFF: b) );\n        const pExponentNafBytes = module.alloc(exponentNafBytes);\n\n        const f = module.addFunction(prefix+ \"__cyclotomicExp_\"+fnName);\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"bit\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"x\");\n\n        const res = c.getLocal(\"r\");\n\n        const inverse = c.i32_const(module.alloc(ftsize));\n\n\n        f.addCode(\n            c.call(ftmPrefix + \"_conjugate\", x, inverse),\n            c.call(ftmPrefix + \"_one\", res),\n\n            c.if(\n                c.teeLocal(\"bit\", c.i32_load8_s(c.i32_const(exponentNafBytes.length-1), pExponentNafBytes)),\n                c.if(\n                    c.i32_eq(\n                        c.getLocal(\"bit\"),\n                        c.i32_const(1)\n                    ),\n                    c.call(ftmPrefix + \"_mul\", res, x, res),\n                    c.call(ftmPrefix + \"_mul\", res, inverse, res),\n                )\n            ),\n\n            c.setLocal(\"i\", c.i32_const(exponentNafBytes.length-2)),\n            c.block(c.loop(\n                c.call(prefix + \"__cyclotomicSquare\", res, res),\n                c.if(\n                    c.teeLocal(\"bit\", c.i32_load8_s(c.getLocal(\"i\"), pExponentNafBytes)),\n                    c.if(\n                        c.i32_eq(\n                            c.getLocal(\"bit\"),\n                            c.i32_const(1)\n                        ),\n                        c.call(ftmPrefix + \"_mul\", res, x, res),\n                        c.call(ftmPrefix + \"_mul\", res, inverse, res),\n                    )\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n\n    function buildFinalExponentiationLastChunk() {\n        buildCyclotomicSquare();\n        buildCyclotomicExp(finalExpZ, \"w0\");\n\n        const f = module.addFunction(prefix+ \"__finalExponentiationLastChunk\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const elt = c.getLocal(\"x\");\n        const result = c.getLocal(\"r\");\n        const A = c.i32_const(module.alloc(ftsize));\n        const B = c.i32_const(module.alloc(ftsize));\n        const C = c.i32_const(module.alloc(ftsize));\n        const D = c.i32_const(module.alloc(ftsize));\n        const E = c.i32_const(module.alloc(ftsize));\n        const F = c.i32_const(module.alloc(ftsize));\n        const G = c.i32_const(module.alloc(ftsize));\n        const H = c.i32_const(module.alloc(ftsize));\n        const I = c.i32_const(module.alloc(ftsize));\n        const J = c.i32_const(module.alloc(ftsize));\n        const K = c.i32_const(module.alloc(ftsize));\n        const L = c.i32_const(module.alloc(ftsize));\n        const M = c.i32_const(module.alloc(ftsize));\n        const N = c.i32_const(module.alloc(ftsize));\n        const O = c.i32_const(module.alloc(ftsize));\n        const P = c.i32_const(module.alloc(ftsize));\n        const Q = c.i32_const(module.alloc(ftsize));\n        const R = c.i32_const(module.alloc(ftsize));\n        const S = c.i32_const(module.alloc(ftsize));\n        const T = c.i32_const(module.alloc(ftsize));\n        const U = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(\n\n\n            // A = exp_by_neg_z(elt)  // = elt^(-z)\n            c.call(prefix + \"__cyclotomicExp_w0\", elt, A),\n            finalExpIsNegative ? [] : c.call(ftmPrefix + \"_conjugate\", A, A),\n            // B = A^2                // = elt^(-2*z)\n            c.call(prefix + \"__cyclotomicSquare\", A, B),\n            // C = B^2                // = elt^(-4*z)\n            c.call(prefix + \"__cyclotomicSquare\", B, C),\n            // D = C * B              // = elt^(-6*z)\n            c.call(ftmPrefix + \"_mul\", C, B, D),\n            // E = exp_by_neg_z(D)    // = elt^(6*z^2)\n            c.call(prefix + \"__cyclotomicExp_w0\", D, E),\n            finalExpIsNegative ? [] : c.call(ftmPrefix + \"_conjugate\", E, E),\n            // F = E^2                // = elt^(12*z^2)\n            c.call(prefix + \"__cyclotomicSquare\", E, F),\n            // G = epx_by_neg_z(F)    // = elt^(-12*z^3)\n            c.call(prefix + \"__cyclotomicExp_w0\", F, G),\n            finalExpIsNegative ? [] : c.call(ftmPrefix + \"_conjugate\", G, G),\n            // H = conj(D)            // = elt^(6*z)\n            c.call(ftmPrefix + \"_conjugate\", D, H),\n            // I = conj(G)            // = elt^(12*z^3)\n            c.call(ftmPrefix + \"_conjugate\", G, I),\n            // J = I * E              // = elt^(12*z^3 + 6*z^2)\n            c.call(ftmPrefix + \"_mul\", I, E, J),\n            // K = J * H              // = elt^(12*z^3 + 6*z^2 + 6*z)\n            c.call(ftmPrefix + \"_mul\", J, H, K),\n            // L = K * B              // = elt^(12*z^3 + 6*z^2 + 4*z)\n            c.call(ftmPrefix + \"_mul\", K, B, L),\n            // M = K * E              // = elt^(12*z^3 + 12*z^2 + 6*z)\n            c.call(ftmPrefix + \"_mul\", K, E, M),\n\n            // N = M * elt            // = elt^(12*z^3 + 12*z^2 + 6*z + 1)\n            c.call(ftmPrefix + \"_mul\", M, elt, N),\n\n            // O = L.Frobenius_map(1) // = elt^(q*(12*z^3 + 6*z^2 + 4*z))\n            c.call(prefix + \"__frobeniusMap1\", L, O),\n            // P = O * N              // = elt^(q*(12*z^3 + 6*z^2 + 4*z) * (12*z^3 + 12*z^2 + 6*z + 1))\n            c.call(ftmPrefix + \"_mul\", O, N, P),\n            // Q = K.Frobenius_map(2) // = elt^(q^2 * (12*z^3 + 6*z^2 + 6*z))\n            c.call(prefix + \"__frobeniusMap2\", K, Q),\n            // R = Q * P              // = elt^(q^2 * (12*z^3 + 6*z^2 + 6*z) + q*(12*z^3 + 6*z^2 + 4*z) * (12*z^3 + 12*z^2 + 6*z + 1))\n            c.call(ftmPrefix + \"_mul\", Q, P, R),\n            // S = conj(elt)          // = elt^(-1)\n            c.call(ftmPrefix + \"_conjugate\", elt, S),\n            // T = S * L              // = elt^(12*z^3 + 6*z^2 + 4*z - 1)\n            c.call(ftmPrefix + \"_mul\", S, L, T),\n            // U = T.Frobenius_map(3) // = elt^(q^3(12*z^3 + 6*z^2 + 4*z - 1))\n            c.call(prefix + \"__frobeniusMap3\", T, U),\n            // V = U * R              // = elt^(q^3(12*z^3 + 6*z^2 + 4*z - 1) + q^2 * (12*z^3 + 6*z^2 + 6*z) + q*(12*z^3 + 6*z^2 + 4*z) * (12*z^3 + 12*z^2 + 6*z + 1))\n            c.call(ftmPrefix + \"_mul\", U, R, result),\n            // result = V\n        );\n    }\n\n\n    function buildFinalExponentiation() {\n        buildFinalExponentiationFirstChunk();\n        buildFinalExponentiationLastChunk();\n        const f = module.addFunction(prefix+ \"_finalExponentiation\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const elt = c.getLocal(\"x\");\n        const result = c.getLocal(\"r\");\n        const eltToFirstChunk = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(\n            c.call(prefix + \"__finalExponentiationFirstChunk\", elt, eltToFirstChunk ),\n            c.call(prefix + \"__finalExponentiationLastChunk\", eltToFirstChunk, result )\n        );\n    }\n\n\n    function buildFinalExponentiationOld() {\n        const f = module.addFunction(prefix+ \"_finalExponentiationOld\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const exponent = 552484233613224096312617126783173147097382103762957654188882734314196910839907541213974502761540629817009608548654680343627701153829446747810907373256841551006201639677726139946029199968412598804882391702273019083653272047566316584365559776493027495458238373902875937659943504873220554161550525926302303331747463515644711876653177129578303191095900909191624817826566688241804408081892785725967931714097716709526092261278071952560171111444072049229123565057483750161460024353346284167282452756217662335528813519139808291170539072125381230815729071544861602750936964829313608137325426383735122175229541155376346436093930287402089517426973178917569713384748081827255472576937471496195752727188261435633271238710131736096299798168852925540549342330775279877006784354801422249722573783561685179618816480037695005515426162362431072245638324744480n;\n\n        const pExponent = module.alloc(utils.bigInt2BytesLE( exponent, 352 ));\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(ftmPrefix + \"_exp\", c.getLocal(\"x\"), c.i32_const(pExponent), c.i32_const(352), c.getLocal(\"r\")),\n        );\n    }\n\n\n\n\n    const pPreP = module.alloc(prePSize);\n    const pPreQ = module.alloc(preQSize);\n\n    function buildPairingEquation(nPairings) {\n\n        const f = module.addFunction(prefix+ \"_pairingEq\"+nPairings);\n        for (let i=0; i<nPairings; i++) {\n            f.addParam(\"p_\"+i, \"i32\");\n            f.addParam(\"q_\"+i, \"i32\");\n        }\n        f.addParam(\"c\", \"i32\");\n        f.setReturnType(\"i32\");\n\n\n        const c = f.getCodeBuilder();\n\n        const resT = c.i32_const(module.alloc(ftsize));\n        const auxT = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(c.call(ftmPrefix + \"_one\", resT ));\n\n        for (let i=0; i<nPairings; i++) {\n\n            f.addCode(c.call(prefix + \"_prepareG1\", c.getLocal(\"p_\"+i), c.i32_const(pPreP) ));\n            f.addCode(c.call(prefix + \"_prepareG2\", c.getLocal(\"q_\"+i), c.i32_const(pPreQ) ));\n            f.addCode(c.call(prefix + \"_millerLoop\", c.i32_const(pPreP), c.i32_const(pPreQ), auxT ));\n\n            f.addCode(c.call(ftmPrefix + \"_mul\", resT, auxT, resT ));\n        }\n\n        f.addCode(c.call(prefix + \"_finalExponentiation\", resT, resT ));\n\n        f.addCode(c.call(ftmPrefix + \"_eq\", resT, c.getLocal(\"c\")));\n    }\n\n\n    function buildPairing() {\n\n        const f = module.addFunction(prefix+ \"_pairing\");\n        f.addParam(\"p\", \"i32\");\n        f.addParam(\"q\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const resT = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(c.call(prefix + \"_prepareG1\", c.getLocal(\"p\"), c.i32_const(pPreP) ));\n        f.addCode(c.call(prefix + \"_prepareG2\", c.getLocal(\"q\"), c.i32_const(pPreQ) ));\n        f.addCode(c.call(prefix + \"_millerLoop\", c.i32_const(pPreP), c.i32_const(pPreQ), resT ));\n        f.addCode(c.call(prefix + \"_finalExponentiation\", resT, c.getLocal(\"r\") ));\n    }\n\n\n    buildPrepAddStep();\n    buildPrepDoubleStep();\n\n    buildPrepareG1();\n    buildPrepareG2();\n\n    buildMulBy024();\n    buildMulBy024Old();\n    buildMillerLoop();\n\n\n    for (let i=0; i<10; i++) {\n        buildFrobeniusMap(i);\n        module.exportFunction(prefix + \"__frobeniusMap\"+i);\n    }\n\n    buildFinalExponentiationOld();\n    buildFinalExponentiation();\n\n    for (let i=1; i<=5; i++) {\n        buildPairingEquation(i);\n        module.exportFunction(prefix + \"_pairingEq\"+i);\n    }\n\n    buildPairing();\n\n    module.exportFunction(prefix + \"_pairing\");\n\n    module.exportFunction(prefix + \"_prepareG1\");\n    module.exportFunction(prefix + \"_prepareG2\");\n    module.exportFunction(prefix + \"_millerLoop\");\n    module.exportFunction(prefix + \"_finalExponentiation\");\n    module.exportFunction(prefix + \"_finalExponentiationOld\");\n    module.exportFunction(prefix + \"__mulBy024\");\n    module.exportFunction(prefix + \"__mulBy024Old\");\n    module.exportFunction(prefix + \"__cyclotomicSquare\");\n    module.exportFunction(prefix + \"__cyclotomicExp_w0\");\n\n    // console.log(module.functionIdxByName);\n\n};\n\n", "const utils = require(\"../utils\");\n\nconst buildF1m =require(\"../build_f1m.js\");\nconst buildF1 =require(\"../build_f1.js\");\nconst buildF2m =require(\"../build_f2m.js\");\nconst buildF3m =require(\"../build_f3m.js\");\nconst buildCurve =require(\"../build_curve_jacobian_a0.js\");\nconst buildFFT = require(\"../build_fft\");\nconst buildPol = require(\"../build_pol\");\nconst buildQAP = require(\"../build_qap\");\nconst buildApplyKey = require(\"../build_applykey\");\nconst { bitLength, isOdd, isNegative } = require(\"../bigint.js\");\n\n// Definition here: https://electriccoin.co/blog/new-snark-curve/\n\nmodule.exports = function buildBLS12381(module, _prefix) {\n\n    const prefix = _prefix || \"bls12381\";\n\n    if (module.modules[prefix]) return prefix;  // already builded\n\n    const q = 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    const r = 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001n;\n\n    const n64q = Math.floor((bitLength(q - 1n) - 1)/64) +1;\n    const n8q = n64q*8;\n    const f1size = n8q;\n    const f2size = f1size * 2;\n    const ftsize = f1size * 12;\n\n    const n64r = Math.floor((bitLength(r - 1n) - 1)/64) +1;\n    const n8r = n64r*8;\n    const frsize = n8r;\n\n\n    const pr = module.alloc(utils.bigInt2BytesLE( r, frsize ));\n\n    const f1mPrefix = buildF1m(module, q, \"f1m\", \"intq\");\n    buildF1(module, r, \"fr\", \"frm\", \"intr\");\n    const pG1b = module.alloc(utils.bigInt2BytesLE( toMontgomery(4n), f1size ));\n    const g1mPrefix = buildCurve(module, \"g1m\", \"f1m\", pG1b);\n\n    buildFFT(module, \"frm\", \"frm\", \"frm\", \"frm_mul\");\n\n    buildPol(module, \"pol\", \"frm\");\n    buildQAP(module, \"qap\", \"frm\");\n\n    const f2mPrefix = buildF2m(module, \"f1m_neg\", \"f2m\", \"f1m\");\n    const pG2b = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(4n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(4n), f1size )\n    ]);\n    const g2mPrefix = buildCurve(module, \"g2m\", \"f2m\", pG2b);\n\n\n    function buildGTimesFr(fnName, opMul) {\n        const f = module.addFunction(fnName);\n        f.addParam(\"pG\", \"i32\");\n        f.addParam(\"pFr\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const AUX = c.i32_const(module.alloc(n8r));\n\n        f.addCode(\n            c.call(\"frm_fromMontgomery\", c.getLocal(\"pFr\"), AUX),\n            c.call(\n                opMul,\n                c.getLocal(\"pG\"),\n                AUX,\n                c.i32_const(n8r),\n                c.getLocal(\"pr\")\n            )\n        );\n\n        module.exportFunction(fnName);\n    }\n    buildGTimesFr(\"g1m_timesFr\", \"g1m_timesScalar\");\n    buildFFT(module, \"g1m\", \"g1m\", \"frm\", \"g1m_timesFr\");\n\n    buildGTimesFr(\"g2m_timesFr\", \"g2m_timesScalar\");\n    buildFFT(module, \"g2m\", \"g2m\", \"frm\", \"g2m_timesFr\");\n\n    buildGTimesFr(\"g1m_timesFrAffine\", \"g1m_timesScalarAffine\");\n    buildGTimesFr(\"g2m_timesFrAffine\", \"g2m_timesScalarAffine\");\n\n    buildApplyKey(module, \"frm_batchApplyKey\", \"fmr\", \"frm\", n8r, n8r, n8r, \"frm_mul\");\n    buildApplyKey(module, \"g1m_batchApplyKey\", \"g1m\", \"frm\", n8q*3, n8q*3, n8r, \"g1m_timesFr\");\n    buildApplyKey(module, \"g1m_batchApplyKeyMixed\", \"g1m\", \"frm\", n8q*2, n8q*3, n8r, \"g1m_timesFrAffine\");\n    buildApplyKey(module, \"g2m_batchApplyKey\", \"g2m\", \"frm\", n8q*2*3, n8q*3*2, n8r, \"g2m_timesFr\");\n    buildApplyKey(module, \"g2m_batchApplyKeyMixed\", \"g2m\", \"frm\", n8q*2*2, n8q*3*2, n8r, \"g2m_timesFrAffine\");\n\n\n    function toMontgomery(a) {\n        return BigInt(a) * (1n << BigInt(f1size*8)) % q;\n    }\n\n    const G1gen = [\n        3685416753713387016781088315183077757961620795782546409894578378688607592378376318836054947676345821548104185464507n,\n        1339506544944476473020471379941921221584933875938349620426543736416511423956333506472724655353366534992391756441569n,\n        1n\n    ];\n\n    const pG1gen = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G1gen[0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1gen[1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1gen[2]), f1size ),\n        ]\n    );\n\n    const G1zero = [\n        0n,\n        1n,\n        0n\n    ];\n\n    const pG1zero = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G1zero[0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1zero[1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G1zero[2]), f1size )\n        ]\n    );\n\n    const G2gen = [\n        [\n            352701069587466618187139116011060144890029952792775240219908644239793785735715026873347600343865175952761926303160n,\n            3059144344244213709971259814753781636986470325476647558659373206291635324768958432433509563104347017837885763365758n,\n        ],[\n            1985150602287291935568054521177171638300868978215655730859378665066344726373823718423869104263333984641494340347905n,\n            927553665492332455747201965776037880757740193453592970025027978793976877002675564980949289727957565575433344219582n,\n        ],[\n            1n,\n            0n,\n        ]\n    ];\n\n    const pG2gen = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[0][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[0][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[1][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[1][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[2][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2gen[2][1]), f1size ),\n        ]\n    );\n\n    const G2zero = [\n        [\n            0n,\n            0n,\n        ],[\n            1n,\n            0n,\n        ],[\n            0n,\n            0n,\n        ]\n    ];\n\n    const pG2zero = module.alloc(\n        [\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[0][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[0][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[1][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[1][1]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[2][0]), f1size ),\n            ...utils.bigInt2BytesLE( toMontgomery(G2zero[2][1]), f1size ),\n        ]\n    );\n\n    const pOneT = module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(1n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(0n), f1size ),\n    ]);\n\n    const pBls12381Twist =  module.alloc([\n        ...utils.bigInt2BytesLE( toMontgomery(1n), f1size ),\n        ...utils.bigInt2BytesLE( toMontgomery(1n), f1size ),\n    ]);\n\n    function build_mulNR2() {\n        const f = module.addFunction(f2mPrefix + \"_mulNR\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0c = c.i32_const(module.alloc(f1size));\n        const x0 = c.getLocal(\"x\");\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f1size));\n        const r0 = c.getLocal(\"pr\");\n        const r1 = c.i32_add(c.getLocal(\"pr\"), c.i32_const(f1size));\n\n        f.addCode(\n            c.call(f1mPrefix+\"_copy\", x0, x0c),\n            c.call(f1mPrefix+\"_sub\", x0, x1, r0),\n            c.call(f1mPrefix+\"_add\", x0c, x1, r1),\n        );\n    }\n    build_mulNR2();\n\n    const f6mPrefix = buildF3m(module, f2mPrefix+\"_mulNR\", \"f6m\", \"f2m\");\n\n    function build_mulNR6() {\n        const f = module.addFunction(f6mPrefix + \"_mulNR\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"pr\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const c0copy = c.i32_const(module.alloc(f1size*2));\n\n        f.addCode(\n            c.call(\n                f2mPrefix + \"_copy\",\n                c.getLocal(\"x\"),\n                c0copy\n            ),\n            c.call(\n                f2mPrefix + \"_mulNR\",\n                c.i32_add(c.getLocal(\"x\"), c.i32_const(n8q*4)),\n                c.getLocal(\"pr\")\n            ),\n            c.call(\n                f2mPrefix + \"_copy\",\n                c.i32_add(c.getLocal(\"x\"), c.i32_const(n8q*2)),\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8q*4)),\n            ),\n            c.call(\n                f2mPrefix + \"_copy\",\n                c0copy,\n                c.i32_add(c.getLocal(\"pr\"), c.i32_const(n8q*2)),\n            ),\n        );\n    }\n    build_mulNR6();\n\n    const ftmPrefix = buildF2m(module, f6mPrefix+\"_mulNR\", \"ftm\", f6mPrefix);\n\n    const ateLoopCount = 0xd201000000010000n;\n    const ateLoopBitBytes = bits(ateLoopCount);\n    const pAteLoopBitBytes = module.alloc(ateLoopBitBytes);\n    const isLoopNegative = true;\n\n    const ateCoefSize = 3 * f2size;\n    const ateNDblCoefs = ateLoopBitBytes.length-1;\n    const ateNAddCoefs = ateLoopBitBytes.reduce((acc, b) =>  acc + ( b!=0 ? 1 : 0)   ,0);\n    const ateNCoefs = ateNAddCoefs + ateNDblCoefs + 1;\n    const prePSize = 3*2*n8q;\n    const preQSize = 3*n8q*2 + ateNCoefs*ateCoefSize;\n    const finalExpIsNegative = true;\n\n    const finalExpZ = 15132376222941642752n;\n\n\n    module.modules[prefix] = {\n        n64q: n64q,\n        n64r: n64r,\n        n8q: n8q,\n        n8r: n8r,\n        pG1gen: pG1gen,\n        pG1zero: pG1zero,\n        pG1b: pG1b,\n        pG2gen: pG2gen,\n        pG2zero: pG2zero,\n        pG2b: pG2b,\n        pq: module.modules[\"f1m\"].pq,\n        pr: pr,\n        pOneT: pOneT,\n        r: r,\n        q: q,\n        prePSize: prePSize,\n        preQSize: preQSize\n    };\n\n\n    function naf(n) {\n        let E = n;\n        const res = [];\n        while (E > 0n) {\n            if (isOdd(E)) {\n                const z = 2 - Number(E % 4n);\n                res.push( z );\n                E = E - BigInt(z);\n            } else {\n                res.push( 0 );\n            }\n            E = E >> 1n;\n        }\n        return res;\n    }\n\n    function bits(n) {\n        let E = n;\n        const res = [];\n        while (E > 0n) {\n            if (isOdd(E)) {\n                res.push( 1 );\n            } else {\n                res.push( 0 );\n            }\n            E = E >> 1n;\n        }\n        return res;\n    }\n\n    function buildPrepareG1() {\n        const f = module.addFunction(prefix+ \"_prepareG1\");\n        f.addParam(\"pP\", \"i32\");\n        f.addParam(\"ppreP\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(g1mPrefix + \"_normalize\", c.getLocal(\"pP\"), c.getLocal(\"ppreP\")),  // TODO Remove if already in affine\n        );\n    }\n\n\n\n    function buildPrepDoubleStep() {\n        const f = module.addFunction(prefix+ \"_prepDblStep\");\n        f.addParam(\"R\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const Rx  = c.getLocal(\"R\");\n        const Ry  = c.i32_add(c.getLocal(\"R\"), c.i32_const(2*n8q));\n        const Rz  = c.i32_add(c.getLocal(\"R\"), c.i32_const(4*n8q));\n\n        const t0  = c.getLocal(\"r\");\n        const t3  = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*n8q));\n        const t6  = c.i32_add(c.getLocal(\"r\"), c.i32_const(4*n8q));\n\n\n        const zsquared = c.i32_const(module.alloc(f2size));\n        const t1 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const t4 = c.i32_const(module.alloc(f2size));\n        const t5 = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n\n            // tmp0 = r.x.square();\n            c.call(f2mPrefix + \"_square\", Rx, t0),\n\n            // tmp1 = r.y.square();\n            c.call(f2mPrefix + \"_square\", Ry, t1),\n\n            // tmp2 = tmp1.square();\n            c.call(f2mPrefix + \"_square\", t1, t2),\n\n            // tmp3 = (tmp1 + r.x).square() - tmp0 - tmp2;\n            c.call(f2mPrefix + \"_add\", t1, Rx, t3),\n            c.call(f2mPrefix + \"_square\", t3, t3),\n            c.call(f2mPrefix + \"_sub\", t3, t0, t3),\n            c.call(f2mPrefix + \"_sub\", t3, t2, t3),\n\n            // tmp3 = tmp3 + tmp3;\n            c.call(f2mPrefix + \"_add\", t3, t3, t3),\n\n            // tmp4 = tmp0 + tmp0 + tmp0;\n            c.call(f2mPrefix + \"_add\", t0, t0, t4),\n            c.call(f2mPrefix + \"_add\", t4, t0, t4),\n\n            // tmp6 = r.x + tmp4;\n            c.call(f2mPrefix + \"_add\", Rx, t4, t6),\n\n            // tmp5 = tmp4.square();\n            c.call(f2mPrefix + \"_square\", t4, t5),\n\n            // zsquared = r.z.square();\n            c.call(f2mPrefix + \"_square\", Rz, zsquared),\n\n            // r.x = tmp5 - tmp3 - tmp3;\n            c.call(f2mPrefix + \"_sub\", t5, t3, Rx),\n            c.call(f2mPrefix + \"_sub\", Rx, t3, Rx),\n\n            // r.z = (r.z + r.y).square() - tmp1 - zsquared;\n            c.call(f2mPrefix + \"_add\", Rz, Ry, Rz),\n            c.call(f2mPrefix + \"_square\", Rz, Rz),\n            c.call(f2mPrefix + \"_sub\", Rz, t1, Rz),\n            c.call(f2mPrefix + \"_sub\", Rz, zsquared, Rz),\n\n            // r.y = (tmp3 - r.x) * tmp4;\n            c.call(f2mPrefix + \"_sub\", t3, Rx, Ry),\n            c.call(f2mPrefix + \"_mul\", Ry, t4, Ry),\n\n            // tmp2 = tmp2 + tmp2;\n            c.call(f2mPrefix + \"_add\", t2, t2, t2),\n\n            // tmp2 = tmp2 + tmp2;\n            c.call(f2mPrefix + \"_add\", t2, t2, t2),\n\n            // tmp2 = tmp2 + tmp2;\n            c.call(f2mPrefix + \"_add\", t2, t2, t2),\n\n            // r.y -= tmp2;\n            c.call(f2mPrefix + \"_sub\", Ry, t2, Ry),\n\n            // tmp3 = tmp4 * zsquared;\n            c.call(f2mPrefix + \"_mul\", t4, zsquared, t3),\n\n            // tmp3 = tmp3 + tmp3;\n            c.call(f2mPrefix + \"_add\", t3, t3, t3),\n\n            // tmp3 = -tmp3;\n            c.call(f2mPrefix + \"_neg\", t3, t3),\n\n            // tmp6 = tmp6.square() - tmp0 - tmp5;\n            c.call(f2mPrefix + \"_square\", t6, t6),\n            c.call(f2mPrefix + \"_sub\", t6, t0, t6),\n            c.call(f2mPrefix + \"_sub\", t6, t5, t6),\n\n            // tmp1 = tmp1 + tmp1;\n            c.call(f2mPrefix + \"_add\", t1, t1, t1),\n\n            // tmp1 = tmp1 + tmp1;\n            c.call(f2mPrefix + \"_add\", t1, t1, t1),\n\n            // tmp6 = tmp6 - tmp1;\n            c.call(f2mPrefix + \"_sub\", t6, t1, t6),\n\n            // tmp0 = r.z * zsquared;\n            c.call(f2mPrefix + \"_mul\", Rz, zsquared, t0),\n\n            // tmp0 = tmp0 + tmp0;\n            c.call(f2mPrefix + \"_add\", t0, t0, t0),\n\n        );\n    }\n\n    function buildPrepAddStep() {\n        const f = module.addFunction(prefix+ \"_prepAddStep\");\n        f.addParam(\"R\", \"i32\");\n        f.addParam(\"Q\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const Rx  = c.getLocal(\"R\");\n        const Ry  = c.i32_add(c.getLocal(\"R\"), c.i32_const(2*n8q));\n        const Rz  = c.i32_add(c.getLocal(\"R\"), c.i32_const(4*n8q));\n\n        const Qx  = c.getLocal(\"Q\");\n        const Qy  = c.i32_add(c.getLocal(\"Q\"), c.i32_const(2*n8q));\n\n        const t10  = c.getLocal(\"r\");\n        const t1  = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*n8q));\n        const t9  = c.i32_add(c.getLocal(\"r\"), c.i32_const(4*n8q));\n\n        const zsquared = c.i32_const(module.alloc(f2size));\n        const ysquared = c.i32_const(module.alloc(f2size));\n        const ztsquared = c.i32_const(module.alloc(f2size));\n        const t0 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const t3 = c.i32_const(module.alloc(f2size));\n        const t4 = c.i32_const(module.alloc(f2size));\n        const t5 = c.i32_const(module.alloc(f2size));\n        const t6 = c.i32_const(module.alloc(f2size));\n        const t7 = c.i32_const(module.alloc(f2size));\n        const t8 = c.i32_const(module.alloc(f2size));\n\n        f.addCode(\n\n            // zsquared = r.z.square();\n            c.call(f2mPrefix + \"_square\", Rz, zsquared),\n\n            // ysquared = q.y.square();\n            c.call(f2mPrefix + \"_square\", Qy, ysquared),\n\n            // t0 = zsquared * q.x;\n            c.call(f2mPrefix + \"_mul\", zsquared, Qx, t0),\n\n            // t1 = ((q.y + r.z).square() - ysquared - zsquared) * zsquared;\n            c.call(f2mPrefix + \"_add\", Qy, Rz, t1),\n            c.call(f2mPrefix + \"_square\", t1, t1),\n            c.call(f2mPrefix + \"_sub\", t1, ysquared, t1),\n            c.call(f2mPrefix + \"_sub\", t1, zsquared, t1),\n            c.call(f2mPrefix + \"_mul\", t1, zsquared, t1),\n\n            // t2 = t0 - r.x;\n            c.call(f2mPrefix + \"_sub\", t0, Rx, t2),\n\n            // t3 = t2.square();\n            c.call(f2mPrefix + \"_square\", t2, t3),\n\n            // t4 = t3 + t3;\n            c.call(f2mPrefix + \"_add\", t3, t3, t4),\n\n            // t4 = t4 + t4;\n            c.call(f2mPrefix + \"_add\", t4, t4, t4),\n\n            // t5 = t4 * t2;\n            c.call(f2mPrefix + \"_mul\", t4, t2, t5),\n\n            // t6 = t1 - r.y - r.y;\n            c.call(f2mPrefix + \"_sub\", t1, Ry, t6),\n            c.call(f2mPrefix + \"_sub\", t6, Ry, t6),\n\n            // t9 = t6 * q.x;\n            c.call(f2mPrefix + \"_mul\", t6, Qx, t9),\n\n            // t7 = t4 * r.x;\n            c.call(f2mPrefix + \"_mul\", t4, Rx, t7),\n\n            // r.x = t6.square() - t5 - t7 - t7;\n            c.call(f2mPrefix + \"_square\", t6, Rx),\n            c.call(f2mPrefix + \"_sub\", Rx, t5, Rx),\n            c.call(f2mPrefix + \"_sub\", Rx, t7, Rx),\n            c.call(f2mPrefix + \"_sub\", Rx, t7, Rx),\n\n            // r.z = (r.z + t2).square() - zsquared - t3;\n            c.call(f2mPrefix + \"_add\", Rz, t2, Rz),\n            c.call(f2mPrefix + \"_square\", Rz, Rz),\n            c.call(f2mPrefix + \"_sub\", Rz, zsquared, Rz),\n            c.call(f2mPrefix + \"_sub\", Rz, t3, Rz),\n\n            // t10 = q.y + r.z;\n            c.call(f2mPrefix + \"_add\", Qy, Rz, t10),\n\n            // t8 = (t7 - r.x) * t6;\n            c.call(f2mPrefix + \"_sub\", t7, Rx, t8),\n            c.call(f2mPrefix + \"_mul\", t8, t6, t8),\n\n            // t0 = r.y * t5;\n            c.call(f2mPrefix + \"_mul\", Ry, t5, t0),\n\n            // t0 = t0 + t0;\n            c.call(f2mPrefix + \"_add\", t0, t0, t0),\n\n            // r.y = t8 - t0;\n            c.call(f2mPrefix + \"_sub\", t8, t0, Ry),\n\n            // t10 = t10.square() - ysquared;\n            c.call(f2mPrefix + \"_square\", t10, t10),\n            c.call(f2mPrefix + \"_sub\", t10, ysquared, t10),\n\n            // ztsquared = r.z.square();\n            c.call(f2mPrefix + \"_square\", Rz, ztsquared),\n\n            // t10 = t10 - ztsquared;\n            c.call(f2mPrefix + \"_sub\", t10, ztsquared, t10),\n\n            // t9 = t9 + t9 - t10;\n            c.call(f2mPrefix + \"_add\", t9, t9, t9),\n            c.call(f2mPrefix + \"_sub\", t9, t10, t9),\n\n            // t10 = r.z + r.z;\n            c.call(f2mPrefix + \"_add\", Rz, Rz, t10),\n\n            // t6 = -t6;\n            c.call(f2mPrefix + \"_neg\", t6, t6),\n\n            // t1 = t6 + t6;\n            c.call(f2mPrefix + \"_add\", t6, t6, t1),\n        );\n    }\n\n\n    function buildPrepareG2() {\n        const f = module.addFunction(prefix+ \"_prepareG2\");\n        f.addParam(\"pQ\", \"i32\");\n        f.addParam(\"ppreQ\", \"i32\");\n        f.addLocal(\"pCoef\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n\n        const Q = c.getLocal(\"pQ\");\n\n        const pR = module.alloc(f2size*3);\n        const R = c.i32_const(pR);\n\n        const base = c.getLocal(\"ppreQ\");\n\n        f.addCode(\n            c.call(g2mPrefix + \"_normalize\", Q, base),\n            c.if(\n                c.call(g2mPrefix + \"_isZero\", base),\n                c.ret([])\n            ),\n            c.call(g2mPrefix + \"_copy\", base, R),\n            c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"ppreQ\"), c.i32_const(f2size*3))),\n        );\n\n        f.addCode(\n            c.setLocal(\"i\", c.i32_const(ateLoopBitBytes.length-2)),\n            c.block(c.loop(\n\n                c.call(prefix + \"_prepDblStep\", R, c.getLocal(\"pCoef\")),\n                c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                c.if(\n                    c.i32_load8_s(c.getLocal(\"i\"), pAteLoopBitBytes),\n                    [\n                        ...c.call(prefix + \"_prepAddStep\", R, base, c.getLocal(\"pCoef\")),\n                        ...c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n                    ]\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n    }\n\n\n    function buildF6Mul1() {\n        const f = module.addFunction(f6mPrefix+ \"_mul1\");\n        f.addParam(\"pA\", \"i32\");    // F6\n        f.addParam(\"pC1\", \"i32\");   // F2\n        f.addParam(\"pR\", \"i32\");    // F6\n\n        const c = f.getCodeBuilder();\n\n        const A_c0 = c.getLocal(\"pA\");\n        const A_c1 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*2));\n        const A_c2 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*4));\n\n        const c1  = c.getLocal(\"pC1\");\n\n        const t1 = c.getLocal(\"pR\");\n        const t2 = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*2));\n        const b_b = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*4));\n\n        const Ac0_Ac1 = c.i32_const(module.alloc(f1size*2));\n        const Ac1_Ac2 = c.i32_const(module.alloc(f1size*2));\n\n        f.addCode(\n\n            c.call(f2mPrefix + \"_add\", A_c0, A_c1, Ac0_Ac1),\n            c.call(f2mPrefix + \"_add\", A_c1, A_c2, Ac1_Ac2),\n\n            // let b_b = self.c1 * c1;\n            c.call(f2mPrefix + \"_mul\", A_c1, c1, b_b),\n\n            // let t1 = (self.c1 + self.c2) * c1 - b_b;\n            c.call(f2mPrefix + \"_mul\", Ac1_Ac2, c1, t1),\n            c.call(f2mPrefix + \"_sub\", t1, b_b, t1),\n\n            // let t1 = t1.mul_by_nonresidue();\n            c.call(f2mPrefix + \"_mulNR\", t1, t1),\n\n            // let t2 = (self.c0 + self.c1) * c1 - b_b;\n            c.call(f2mPrefix + \"_mul\", Ac0_Ac1, c1, t2),\n            c.call(f2mPrefix + \"_sub\", t2, b_b, t2),\n        );\n    }\n    buildF6Mul1();\n\n    function buildF6Mul01() {\n        const f = module.addFunction(f6mPrefix+ \"_mul01\");\n        f.addParam(\"pA\", \"i32\");    // F6\n        f.addParam(\"pC0\", \"i32\");   // F2\n        f.addParam(\"pC1\", \"i32\");   // F2\n        f.addParam(\"pR\", \"i32\");    // F6\n\n        const c = f.getCodeBuilder();\n\n        const A_c0 = c.getLocal(\"pA\");\n        const A_c1 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*2));\n        const A_c2 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*4));\n\n        const c0  = c.getLocal(\"pC0\");\n        const c1  = c.getLocal(\"pC1\");\n\n        const t1 = c.getLocal(\"pR\");\n        const t2 = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*2));\n        const t3 = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*4));\n\n        const a_a = c.i32_const(module.alloc(f1size*2));\n        const b_b = c.i32_const(module.alloc(f1size*2));\n        const Ac0_Ac1 = c.i32_const(module.alloc(f1size*2));\n        const Ac0_Ac2 = c.i32_const(module.alloc(f1size*2));\n\n        f.addCode(\n            // let a_a = self.c0 * c0;\n            c.call(f2mPrefix + \"_mul\", A_c0, c0, a_a),\n\n            // let b_b = self.c1 * c1;\n            c.call(f2mPrefix + \"_mul\", A_c1, c1, b_b),\n\n\n            c.call(f2mPrefix + \"_add\", A_c0, A_c1, Ac0_Ac1),\n            c.call(f2mPrefix + \"_add\", A_c0, A_c2, Ac0_Ac2),\n\n            // let t1 = (self.c1 + self.c2) * c1 - b_b;\n            c.call(f2mPrefix + \"_add\", A_c1, A_c2, t1),\n            c.call(f2mPrefix + \"_mul\", t1, c1, t1),\n            c.call(f2mPrefix + \"_sub\", t1, b_b, t1),\n\n            // let t1 = t1.mul_by_nonresidue() + a_a;\n            c.call(f2mPrefix + \"_mulNR\", t1, t1),\n            c.call(f2mPrefix + \"_add\", t1, a_a, t1),\n\n            // let t2 = (c0 + c1) * (self.c0 + self.c1) - a_a - b_b;\n            c.call(f2mPrefix + \"_add\", c0, c1, t2),\n            c.call(f2mPrefix + \"_mul\", t2, Ac0_Ac1, t2),\n            c.call(f2mPrefix + \"_sub\", t2, a_a, t2),\n            c.call(f2mPrefix + \"_sub\", t2, b_b, t2),\n\n            // let t3 = (self.c0 + self.c2) * c0 - a_a + b_b;\n            c.call(f2mPrefix + \"_mul\", Ac0_Ac2, c0, t3),\n            c.call(f2mPrefix + \"_sub\", t3, a_a, t3),\n            c.call(f2mPrefix + \"_add\", t3, b_b, t3),\n\n\n        );\n    }\n    buildF6Mul01();\n\n\n    function buildF12Mul014() {\n\n        const f = module.addFunction(ftmPrefix+ \"_mul014\");\n        f.addParam(\"pA\", \"i32\");    // F12\n        f.addParam(\"pC0\", \"i32\");   // F2\n        f.addParam(\"pC1\", \"i32\");   // F2\n        f.addParam(\"pC4\", \"i32\");   // F2\n        f.addParam(\"pR\", \"i32\");    // F12\n\n        const c = f.getCodeBuilder();\n\n\n        const A_c0 = c.getLocal(\"pA\");\n        const A_c1 = c.i32_add(c.getLocal(\"pA\"), c.i32_const(f1size*6));\n\n        const c0  = c.getLocal(\"pC0\");\n        const c1  = c.getLocal(\"pC1\");\n        const c4  = c.getLocal(\"pC4\");\n\n        const aa = c.i32_const(module.alloc(f1size*6));\n        const bb = c.i32_const(module.alloc(f1size*6));\n        const o = c.i32_const(module.alloc(f1size*2));\n\n        const R_c0 = c.getLocal(\"pR\");\n        const R_c1 = c.i32_add(c.getLocal(\"pR\"), c.i32_const(f1size*6));\n\n        f.addCode(\n            // let aa = self.c0.mul_by_01(c0, c1);\n            c.call(f6mPrefix + \"_mul01\", A_c0, c0, c1, aa),\n\n            // let bb = self.c1.mul_by_1(c4);\n            c.call(f6mPrefix + \"_mul1\", A_c1, c4, bb),\n\n            // let o = c1 + c4;\n            c.call(f2mPrefix + \"_add\", c1, c4, o),\n\n            // let c1 = self.c1 + self.c0;\n            c.call(f6mPrefix + \"_add\", A_c1, A_c0, R_c1),\n\n            // let c1 = c1.mul_by_01(c0, &o);\n            c.call(f6mPrefix + \"_mul01\", R_c1, c0, o, R_c1),\n\n            // let c1 = c1 - aa - bb;\n            c.call(f6mPrefix + \"_sub\", R_c1, aa, R_c1),\n            c.call(f6mPrefix + \"_sub\", R_c1, bb, R_c1),\n\n            // let c0 = bb;\n            c.call(f6mPrefix + \"_copy\", bb, R_c0),\n\n            // let c0 = c0.mul_by_nonresidue();\n            c.call(f6mPrefix + \"_mulNR\", R_c0, R_c0),\n\n            // let c0 = c0 + aa;\n            c.call(f6mPrefix + \"_add\", R_c0, aa, R_c0),\n        );\n    }\n    buildF12Mul014();\n\n\n    function buildELL() {\n        const f = module.addFunction(prefix+ \"_ell\");\n        f.addParam(\"pP\", \"i32\");\n        f.addParam(\"pCoefs\", \"i32\");\n        f.addParam(\"pF\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const Px  = c.getLocal(\"pP\");\n        const Py  = c.i32_add(c.getLocal(\"pP\"), c.i32_const(n8q));\n\n        const F  = c.getLocal(\"pF\");\n\n        const coef0_0  = c.getLocal(\"pCoefs\");\n        const coef0_1  = c.i32_add(c.getLocal(\"pCoefs\"), c.i32_const(f1size));\n        const coef1_0  = c.i32_add(c.getLocal(\"pCoefs\"), c.i32_const(f1size*2));\n        const coef1_1  = c.i32_add(c.getLocal(\"pCoefs\"), c.i32_const(f1size*3));\n        const coef2  = c.i32_add(c.getLocal(\"pCoefs\"), c.i32_const(f1size*4));\n\n        const pc0 = module.alloc(f1size*2);\n        const c0  = c.i32_const(pc0);\n        const c0_c0 = c.i32_const(pc0);\n        const c0_c1 = c.i32_const(pc0+f1size);\n\n        const pc1 = module.alloc(f1size*2);\n        const c1  = c.i32_const(pc1);\n        const c1_c0 = c.i32_const(pc1);\n        const c1_c1 = c.i32_const(pc1+f1size);\n        f.addCode(\n            //     let mut c0 = coeffs.0;\n            //     let mut c1 = coeffs.1;\n            //\n            //    c0.c0 *= p.y;\n            //    c0.c1 *= p.y;\n            //\n            //    c1.c0 *= p.x;\n            //    c1.c1 *= p.x;\n            //\n            //     f.mul_by_014(&coeffs.2, &c1, &c0)\n\n            c.call(f1mPrefix + \"_mul\", coef0_0, Py, c0_c0),\n            c.call(f1mPrefix + \"_mul\", coef0_1, Py, c0_c1),\n            c.call(f1mPrefix + \"_mul\", coef1_0, Px, c1_c0),\n            c.call(f1mPrefix + \"_mul\", coef1_1, Px, c1_c1),\n\n            c.call(ftmPrefix + \"_mul014\", F, coef2, c1, c0, F),\n\n        );\n\n    }\n    buildELL();\n\n    function buildMillerLoop() {\n        const f = module.addFunction(prefix+ \"_millerLoop\");\n        f.addParam(\"ppreP\", \"i32\");\n        f.addParam(\"ppreQ\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"pCoef\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const preP = c.getLocal(\"ppreP\");\n\n        const coefs  = c.getLocal(\"pCoef\");\n\n        const F = c.getLocal(\"r\");\n\n\n        f.addCode(\n            c.call(ftmPrefix + \"_one\", F),\n\n            c.if(\n                c.call(g1mPrefix + \"_isZero\", preP),\n                c.ret([])\n            ),\n            c.if(\n                c.call(g1mPrefix + \"_isZero\", c.getLocal(\"ppreQ\")),\n                c.ret([])\n            ),\n            c.setLocal(\"pCoef\", c.i32_add( c.getLocal(\"ppreQ\"), c.i32_const(f2size*3))),\n\n            c.setLocal(\"i\", c.i32_const(ateLoopBitBytes.length-2)),\n            c.block(c.loop(\n\n\n                c.call(prefix + \"_ell\", preP, coefs,  F),\n                c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n\n                c.if(\n                    c.i32_load8_s(c.getLocal(\"i\"), pAteLoopBitBytes),\n                    [\n                        ...c.call(prefix + \"_ell\", preP, coefs,  F),\n                        ...c.setLocal(\"pCoef\", c.i32_add(c.getLocal(\"pCoef\"), c.i32_const(ateCoefSize))),\n                    ]\n                ),\n                c.call(ftmPrefix + \"_square\", F, F),\n\n                c.br_if(1, c.i32_eq ( c.getLocal(\"i\"), c.i32_const(1) )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            )),\n            c.call(prefix + \"_ell\", preP, coefs,  F),\n\n        );\n\n\n        if (isLoopNegative) {\n            f.addCode(\n                c.call(ftmPrefix + \"_conjugate\", F, F),\n            );\n        }\n    }\n\n\n    function buildFrobeniusMap(n) {\n        const F12 = [\n            [\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n            ],\n            [\n                [1n, 0n],\n                [3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760n, 151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351n, 0n],\n                [2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530n, 1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n, 0n],\n                [3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557n, 877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230n],\n                [4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786n, 0n],\n                [151655185184498381465642749684540099398075398968325446656007613510403227271200139370504932015952886146304766135027n, 3850754370037169011952147076051364057158807420970682438676050522613628423219637725072182697113062777891589506424760n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n, 0n],\n                [1028732146235106349975324479215795277384839936929757896155643118032610843298655225875571310552543014690878354869257n, 2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437n, 0n],\n                [877076961050607968509681729531255177986764537961432449499635504522207616027455086505066378536590128544573588734230n, 3125332594171059424908108096204648978570118281977575435832422631601824034463382777937621250592425535493320683825557n],\n            ]\n        ];\n\n        const F6 = [\n            [\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n                [1n, 0n],\n            ],\n            [\n                [1n, 0n],\n                [0n, 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n, 0n],\n                [0n, 1n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n, 0n],\n                [0n, 793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n],\n            ],\n            [\n                [1n, 0n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939437n, 0n],\n                [4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n, 0n],\n                [4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559786n, 0n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n, 0n],\n                [793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620351n, 0n],\n            ]\n        ];\n\n        const f = module.addFunction(ftmPrefix + \"_frobeniusMap\"+n);\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        for (let i=0; i<6; i++) {\n            const X = (i==0) ? c.getLocal(\"x\") : c.i32_add(c.getLocal(\"x\"), c.i32_const(i*f2size));\n            const Xc0 = X;\n            const Xc1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(i*f2size + f1size));\n            const R = (i==0) ? c.getLocal(\"r\") : c.i32_add(c.getLocal(\"r\"), c.i32_const(i*f2size));\n            const Rc0 = R;\n            const Rc1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(i*f2size + f1size));\n            const coef = mul2(F12[Math.floor(i/3)][n%12] , F6[i%3][n%6]);\n            const pCoef = module.alloc([\n                ...utils.bigInt2BytesLE(toMontgomery(coef[0]), n8q),\n                ...utils.bigInt2BytesLE(toMontgomery(coef[1]), n8q),\n            ]);\n            if (n%2 == 1) {\n                f.addCode(\n                    c.call(f1mPrefix + \"_copy\", Xc0, Rc0),\n                    c.call(f1mPrefix + \"_neg\", Xc1, Rc1),\n                    c.call(f2mPrefix + \"_mul\", R, c.i32_const(pCoef), R),\n                );\n            } else {\n                f.addCode(c.call(f2mPrefix + \"_mul\", X, c.i32_const(pCoef), R));\n            }\n        }\n\n        function mul2(a, b) {\n            const ac0 = a[0];\n            const ac1 = a[1];\n            const bc0 = b[0];\n            const bc1 = b[1];\n            const res = [\n                (ac0 * bc0 - (ac1 * bc1)) % q,\n                (ac0 * bc1 + (ac1 * bc0)) % q,\n            ];\n            if (isNegative(res[0])) res[0] = res[0] + q;\n            return res;\n        }\n\n    }\n\n\n    function buildCyclotomicSquare() {\n        const f = module.addFunction(prefix+ \"__cyclotomicSquare\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x0 = c.getLocal(\"x\");\n        const x4 = c.i32_add(c.getLocal(\"x\"), c.i32_const(f2size));\n        const x3 = c.i32_add(c.getLocal(\"x\"), c.i32_const(2*f2size));\n        const x2 = c.i32_add(c.getLocal(\"x\"), c.i32_const(3*f2size));\n        const x1 = c.i32_add(c.getLocal(\"x\"), c.i32_const(4*f2size));\n        const x5 = c.i32_add(c.getLocal(\"x\"), c.i32_const(5*f2size));\n\n        const r0 = c.getLocal(\"r\");\n        const r4 = c.i32_add(c.getLocal(\"r\"), c.i32_const(f2size));\n        const r3 = c.i32_add(c.getLocal(\"r\"), c.i32_const(2*f2size));\n        const r2 = c.i32_add(c.getLocal(\"r\"), c.i32_const(3*f2size));\n        const r1 = c.i32_add(c.getLocal(\"r\"), c.i32_const(4*f2size));\n        const r5 = c.i32_add(c.getLocal(\"r\"), c.i32_const(5*f2size));\n\n        const t0 = c.i32_const(module.alloc(f2size));\n        const t1 = c.i32_const(module.alloc(f2size));\n        const t2 = c.i32_const(module.alloc(f2size));\n        const t3 = c.i32_const(module.alloc(f2size));\n        const t4 = c.i32_const(module.alloc(f2size));\n        const t5 = c.i32_const(module.alloc(f2size));\n        const tmp = c.i32_const(module.alloc(f2size));\n        const AUX = c.i32_const(module.alloc(f2size));\n\n\n        f.addCode(\n            //    // t0 + t1*y = (z0 + z1*y)^2 = a^2\n            //    tmp = z0 * z1;\n            //    t0 = (z0 + z1) * (z0 + my_Fp6::non_residue * z1) - tmp - my_Fp6::non_residue * tmp;\n            //    t1 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x0, x1, tmp),\n            c.call(f2mPrefix + \"_mulNR\", x1, t0),\n            c.call(f2mPrefix + \"_add\", x0, t0, t0),\n            c.call(f2mPrefix + \"_add\", x0, x1, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t0, t0),\n            c.call(f2mPrefix + \"_mulNR\", tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t0, AUX, t0),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t1),\n\n            //  // t2 + t3*y = (z2 + z3*y)^2 = b^2\n            //  tmp = z2 * z3;\n            //  t2 = (z2 + z3) * (z2 + my_Fp6::non_residue * z3) - tmp - my_Fp6::non_residue * tmp;\n            //  t3 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x2, x3, tmp),\n            c.call(f2mPrefix + \"_mulNR\", x3, t2),\n            c.call(f2mPrefix + \"_add\", x2, t2, t2),\n            c.call(f2mPrefix + \"_add\", x2, x3, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t2, t2),\n            c.call(f2mPrefix + \"_mulNR\", tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t2, AUX, t2),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t3),\n\n            //  // t4 + t5*y = (z4 + z5*y)^2 = c^2\n            //  tmp = z4 * z5;\n            //  t4 = (z4 + z5) * (z4 + my_Fp6::non_residue * z5) - tmp - my_Fp6::non_residue * tmp;\n            //  t5 = tmp + tmp;\n            c.call(f2mPrefix + \"_mul\", x4, x5, tmp),\n            c.call(f2mPrefix + \"_mulNR\", x5, t4),\n            c.call(f2mPrefix + \"_add\", x4, t4, t4),\n            c.call(f2mPrefix + \"_add\", x4, x5, AUX),\n            c.call(f2mPrefix + \"_mul\", AUX, t4, t4),\n            c.call(f2mPrefix + \"_mulNR\", tmp, AUX),\n            c.call(f2mPrefix + \"_add\", tmp, AUX, AUX),\n            c.call(f2mPrefix + \"_sub\", t4, AUX, t4),\n            c.call(f2mPrefix + \"_add\", tmp, tmp, t5),\n\n            // For A\n            // z0 = 3 * t0 - 2 * z0\n            c.call(f2mPrefix + \"_sub\", t0, x0, r0),\n            c.call(f2mPrefix + \"_add\", r0, r0, r0),\n            c.call(f2mPrefix + \"_add\", t0, r0, r0),\n            // z1 = 3 * t1 + 2 * z1\n            c.call(f2mPrefix + \"_add\", t1, x1, r1),\n            c.call(f2mPrefix + \"_add\", r1, r1, r1),\n            c.call(f2mPrefix + \"_add\", t1, r1, r1),\n\n            // For B\n            // z2 = 3 * (xi * t5) + 2 * z2\n            c.call(f2mPrefix + \"_mul\", t5, c.i32_const(pBls12381Twist), AUX),\n            c.call(f2mPrefix + \"_add\", AUX, x2, r2),\n            c.call(f2mPrefix + \"_add\", r2, r2, r2),\n            c.call(f2mPrefix + \"_add\", AUX, r2, r2),\n            // z3 = 3 * t4 - 2 * z3\n            c.call(f2mPrefix + \"_sub\", t4, x3, r3),\n            c.call(f2mPrefix + \"_add\", r3, r3, r3),\n            c.call(f2mPrefix + \"_add\", t4, r3, r3),\n\n            // For C\n            // z4 = 3 * t2 - 2 * z4\n            c.call(f2mPrefix + \"_sub\", t2, x4, r4),\n            c.call(f2mPrefix + \"_add\", r4, r4, r4),\n            c.call(f2mPrefix + \"_add\", t2, r4, r4),\n            // z5 = 3 * t3 + 2 * z5\n            c.call(f2mPrefix + \"_add\", t3, x5, r5),\n            c.call(f2mPrefix + \"_add\", r5, r5, r5),\n            c.call(f2mPrefix + \"_add\", t3, r5, r5),\n\n        );\n    }\n\n\n    function buildCyclotomicExp(exponent, isExpNegative, fnName) {\n        const exponentNafBytes = naf(exponent).map( (b) => (b==-1 ? 0xFF: b) );\n        const pExponentNafBytes = module.alloc(exponentNafBytes);\n        // const pExponent = module.alloc(utils.bigInt2BytesLE(exponent, n8));\n\n        const f = module.addFunction(prefix+ \"__cyclotomicExp_\"+fnName);\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n        f.addLocal(\"bit\", \"i32\");\n        f.addLocal(\"i\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const x = c.getLocal(\"x\");\n\n        const res = c.getLocal(\"r\");\n\n        const inverse = c.i32_const(module.alloc(ftsize));\n\n\n        f.addCode(\n            c.call(ftmPrefix + \"_conjugate\", x, inverse),\n            c.call(ftmPrefix + \"_one\", res),\n\n            c.if(\n                c.teeLocal(\"bit\", c.i32_load8_s(c.i32_const(exponentNafBytes.length-1), pExponentNafBytes)),\n                c.if(\n                    c.i32_eq(\n                        c.getLocal(\"bit\"),\n                        c.i32_const(1)\n                    ),\n                    c.call(ftmPrefix + \"_mul\", res, x, res),\n                    c.call(ftmPrefix + \"_mul\", res, inverse, res),\n                )\n            ),\n\n            c.setLocal(\"i\", c.i32_const(exponentNafBytes.length-2)),\n            c.block(c.loop(\n                c.call(prefix + \"__cyclotomicSquare\", res, res),\n                c.if(\n                    c.teeLocal(\"bit\", c.i32_load8_s(c.getLocal(\"i\"), pExponentNafBytes)),\n                    c.if(\n                        c.i32_eq(\n                            c.getLocal(\"bit\"),\n                            c.i32_const(1)\n                        ),\n                        c.call(ftmPrefix + \"_mul\", res, x, res),\n                        c.call(ftmPrefix + \"_mul\", res, inverse, res),\n                    )\n                ),\n                c.br_if(1, c.i32_eqz ( c.getLocal(\"i\") )),\n                c.setLocal(\"i\", c.i32_sub(c.getLocal(\"i\"), c.i32_const(1))),\n                c.br(0)\n            ))\n        );\n\n        if (isExpNegative) {\n            f.addCode(\n                c.call(ftmPrefix + \"_conjugate\", res, res),\n            );\n        }\n\n    }\n\n    function buildFinalExponentiation() {\n        buildCyclotomicSquare();\n        buildCyclotomicExp(finalExpZ, finalExpIsNegative, \"w0\");\n\n        const f = module.addFunction(prefix+ \"_finalExponentiation\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const elt = c.getLocal(\"x\");\n        const res = c.getLocal(\"r\");\n        const t0 = c.i32_const(module.alloc(ftsize));\n        const t1 = c.i32_const(module.alloc(ftsize));\n        const t2 = c.i32_const(module.alloc(ftsize));\n        const t3 = c.i32_const(module.alloc(ftsize));\n        const t4 = c.i32_const(module.alloc(ftsize));\n        const t5 = c.i32_const(module.alloc(ftsize));\n        const t6 = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(\n\n            // let mut t0 = f.frobenius_map(6)\n            c.call(ftmPrefix + \"_frobeniusMap6\", elt, t0),\n\n            // let t1 = f.invert()\n            c.call(ftmPrefix + \"_inverse\", elt, t1),\n\n            // let mut t2 = t0 * t1;\n            c.call(ftmPrefix + \"_mul\", t0, t1, t2),\n\n            // t1 = t2.clone();\n            c.call(ftmPrefix + \"_copy\", t2, t1),\n\n            // t2 = t2.frobenius_map().frobenius_map();\n            c.call(ftmPrefix + \"_frobeniusMap2\", t2, t2),\n\n            // t2 *= t1;\n            c.call(ftmPrefix + \"_mul\", t2, t1, t2),\n\n\n            // t1 = cyclotomic_square(t2).conjugate();\n            c.call(prefix + \"__cyclotomicSquare\", t2, t1),\n            c.call(ftmPrefix + \"_conjugate\", t1, t1),\n\n            // let mut t3 = cycolotomic_exp(t2);\n            c.call(prefix + \"__cyclotomicExp_w0\", t2, t3),\n\n            // let mut t4 = cyclotomic_square(t3);\n            c.call(prefix + \"__cyclotomicSquare\", t3, t4),\n\n            // let mut t5 = t1 * t3;\n            c.call(ftmPrefix + \"_mul\", t1, t3, t5),\n\n            // t1 = cycolotomic_exp(t5);\n            c.call(prefix + \"__cyclotomicExp_w0\", t5, t1),\n\n            // t0 = cycolotomic_exp(t1);\n            c.call(prefix + \"__cyclotomicExp_w0\", t1, t0),\n\n            // let mut t6 = cycolotomic_exp(t0);\n            c.call(prefix + \"__cyclotomicExp_w0\", t0, t6),\n\n            // t6 *= t4;\n            c.call(ftmPrefix + \"_mul\", t6, t4, t6),\n\n            // t4 = cycolotomic_exp(t6);\n            c.call(prefix + \"__cyclotomicExp_w0\", t6, t4),\n\n            // t5 = t5.conjugate();\n            c.call(ftmPrefix + \"_conjugate\", t5, t5),\n\n            // t4 *= t5 * t2;\n            c.call(ftmPrefix + \"_mul\", t4, t5, t4),\n            c.call(ftmPrefix + \"_mul\", t4, t2, t4),\n\n            // t5 = t2.conjugate();\n            c.call(ftmPrefix + \"_conjugate\", t2, t5),\n\n            // t1 *= t2;\n            c.call(ftmPrefix + \"_mul\", t1, t2, t1),\n\n            // t1 = t1.frobenius_map().frobenius_map().frobenius_map();\n            c.call(ftmPrefix + \"_frobeniusMap3\", t1, t1),\n\n            // t6 *= t5;\n            c.call(ftmPrefix + \"_mul\", t6, t5, t6),\n\n            // t6 = t6.frobenius_map();\n            c.call(ftmPrefix + \"_frobeniusMap1\", t6, t6),\n\n            // t3 *= t0;\n            c.call(ftmPrefix + \"_mul\", t3, t0, t3),\n\n            // t3 = t3.frobenius_map().frobenius_map();\n            c.call(ftmPrefix + \"_frobeniusMap2\", t3, t3),\n\n            // t3 *= t1;\n            c.call(ftmPrefix + \"_mul\", t3, t1, t3),\n\n            // t3 *= t6;\n            c.call(ftmPrefix + \"_mul\", t3, t6, t3),\n\n            // f = t3 * t4;\n            c.call(ftmPrefix + \"_mul\", t3, t4, res),\n\n        );\n    }\n\n\n    function buildFinalExponentiationOld() {\n        const f = module.addFunction(prefix+ \"_finalExponentiationOld\");\n        f.addParam(\"x\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const exponent = 322277361516934140462891564586510139908379969514828494218366688025288661041104682794998680497580008899973249814104447692778988208376779573819485263026159588510513834876303014016798809919343532899164848730280942609956670917565618115867287399623286813270357901731510188149934363360381614501334086825442271920079363289954510565375378443704372994881406797882676971082200626541916413184642520269678897559532260949334760604962086348898118982248842634379637598665468817769075878555493752214492790122785850202957575200176084204422751485957336465472324810982833638490904279282696134323072515220044451592646885410572234451732790590013479358343841220074174848221722017083597872017638514103174122784843925578370430843522959600095676285723737049438346544753168912974976791528535276317256904336520179281145394686565050419250614107803233314658825463117900250701199181529205942363159325765991819433914303908860460720581408201373164047773794825411011922305820065611121544561808414055302212057471395719432072209245600258134364584636810093520285711072578721435517884103526483832733289802426157301542744476740008494780363354305116978805620671467071400711358839553375340724899735460480144599782014906586543813292157922220645089192130209334926661588737007768565838519456601560804957985667880395221049249803753582637708560n;\n\n        const pExponent = module.alloc(utils.bigInt2BytesLE( exponent, 544 ));\n\n        const c = f.getCodeBuilder();\n\n        f.addCode(\n            c.call(ftmPrefix + \"_exp\", c.getLocal(\"x\"), c.i32_const(pExponent), c.i32_const(544), c.getLocal(\"r\")),\n        );\n    }\n\n\n    const pPreP = module.alloc(prePSize);\n    const pPreQ = module.alloc(preQSize);\n\n    function buildPairingEquation(nPairings) {\n\n        const f = module.addFunction(prefix+ \"_pairingEq\"+nPairings);\n        for (let i=0; i<nPairings; i++) {\n            f.addParam(\"p_\"+i, \"i32\");\n            f.addParam(\"q_\"+i, \"i32\");\n        }\n        f.addParam(\"c\", \"i32\");\n        f.setReturnType(\"i32\");\n\n\n        const c = f.getCodeBuilder();\n\n        const resT = c.i32_const(module.alloc(ftsize));\n        const auxT = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(c.call(ftmPrefix + \"_one\", resT ));\n\n        for (let i=0; i<nPairings; i++) {\n\n            f.addCode(c.call(prefix + \"_prepareG1\", c.getLocal(\"p_\"+i), c.i32_const(pPreP) ));\n            f.addCode(c.call(prefix + \"_prepareG2\", c.getLocal(\"q_\"+i), c.i32_const(pPreQ) ));\n\n            // Checks\n            f.addCode(\n                c.if(\n                    c.i32_eqz(c.call(g1mPrefix + \"_inGroupAffine\", c.i32_const(pPreP))),\n                    c.ret(c.i32_const(0))\n                ),\n                c.if(\n                    c.i32_eqz(c.call(g2mPrefix + \"_inGroupAffine\", c.i32_const(pPreQ))),\n                    c.ret(c.i32_const(0))\n                )\n            );\n\n            f.addCode(c.call(prefix + \"_millerLoop\", c.i32_const(pPreP), c.i32_const(pPreQ), auxT ));\n\n            f.addCode(c.call(ftmPrefix + \"_mul\", resT, auxT, resT ));\n        }\n\n        f.addCode(c.call(prefix + \"_finalExponentiation\", resT, resT ));\n\n        f.addCode(c.call(ftmPrefix + \"_eq\", resT, c.getLocal(\"c\")));\n    }\n\n\n    function buildPairing() {\n\n        const f = module.addFunction(prefix+ \"_pairing\");\n        f.addParam(\"p\", \"i32\");\n        f.addParam(\"q\", \"i32\");\n        f.addParam(\"r\", \"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const resT = c.i32_const(module.alloc(ftsize));\n\n        f.addCode(c.call(prefix + \"_prepareG1\", c.getLocal(\"p\"), c.i32_const(pPreP) ));\n        f.addCode(c.call(prefix + \"_prepareG2\", c.getLocal(\"q\"), c.i32_const(pPreQ) ));\n        f.addCode(c.call(prefix + \"_millerLoop\", c.i32_const(pPreP), c.i32_const(pPreQ), resT ));\n        f.addCode(c.call(prefix + \"_finalExponentiation\", resT, c.getLocal(\"r\") ));\n    }\n\n\n    function buildInGroupG2() {\n        const f = module.addFunction(g2mPrefix+ \"_inGroupAffine\");\n        f.addParam(\"p\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const WINV = [\n            2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279894n,\n            2001204777610833696708894912867952078278441409969503942666029068062015825245418932221343814564507832018947136279893n\n        ];\n\n        const FROB2X = 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n;\n        const FROB3Y = [\n            2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530n,\n            2973677408986561043442465346520108879172042883009249989176415018091420807192182638567116318576472649347015917690530n\n        ];\n\n        const wInv = c.i32_const(module.alloc([\n            ...utils.bigInt2BytesLE(toMontgomery(WINV[0]), n8q),\n            ...utils.bigInt2BytesLE(toMontgomery(WINV[1]), n8q),\n        ]));\n\n        const frob2X = c.i32_const(module.alloc(utils.bigInt2BytesLE(toMontgomery(FROB2X), n8q)));\n        const frob3Y = c.i32_const(module.alloc([\n            ...utils.bigInt2BytesLE(toMontgomery(FROB3Y[0]), n8q),\n            ...utils.bigInt2BytesLE(toMontgomery(FROB3Y[1]), n8q),\n        ]));\n\n        const z = c.i32_const(module.alloc(utils.bigInt2BytesLE(finalExpZ, 8)));\n\n        const px = c.getLocal(\"p\");\n        const py = c.i32_add(c.getLocal(\"p\"), c.i32_const(f2size));\n\n        const aux = c.i32_const(module.alloc(f1size));\n\n        const x_winv = c.i32_const(module.alloc(f2size));\n        const y_winv = c.i32_const(module.alloc(f2size));\n        const pf2 = module.alloc(f2size*2);\n        const f2 = c.i32_const(pf2);\n        const f2x = c.i32_const(pf2);\n        const f2x_c1 = c.i32_const(pf2);\n        const f2x_c2 = c.i32_const(pf2+f1size);\n        const f2y = c.i32_const(pf2+f2size);\n        const f2y_c1 = c.i32_const(pf2+f2size);\n        const f2y_c2 = c.i32_const(pf2+f2size+f1size);\n        const pf3 = module.alloc(f2size*3);\n        const f3 = c.i32_const(pf3);\n        const f3x = c.i32_const(pf3);\n        const f3x_c1 = c.i32_const(pf3);\n        const f3x_c2 = c.i32_const(pf3+f1size);\n        const f3y = c.i32_const(pf3+f2size);\n        const f3y_c1 = c.i32_const(pf3+f2size);\n        const f3y_c2 = c.i32_const(pf3+f2size+f1size);\n        const f3z = c.i32_const(pf3+f2size*2);\n\n\n        f.addCode(\n            c.if(\n                c.call(g2mPrefix + \"_isZeroAffine\", c.getLocal(\"p\")),\n                c.ret( c.i32_const(1)),\n            ),\n            c.if(\n                c.i32_eqz(c.call(g2mPrefix + \"_inCurveAffine\", c.getLocal(\"p\"))),\n                c.ret( c.i32_const(0)),\n            ),\n            c.call(f2mPrefix + \"_mul\", px, wInv, x_winv),\n            c.call(f2mPrefix + \"_mul\", py, wInv, y_winv),\n\n            c.call(f2mPrefix + \"_mul1\", x_winv, frob2X, f2x),\n            c.call(f2mPrefix + \"_neg\", y_winv, f2y),\n\n            c.call(f2mPrefix + \"_neg\", x_winv, f3x),\n            c.call(f2mPrefix + \"_mul\", y_winv, frob3Y, f3y),\n\n            c.call(f1mPrefix + \"_sub\", f2x_c1, f2x_c2, aux),\n            c.call(f1mPrefix + \"_add\", f2x_c1, f2x_c2, f2x_c2),\n            c.call(f1mPrefix + \"_copy\", aux, f2x_c1),\n\n            c.call(f1mPrefix + \"_sub\", f2y_c1, f2y_c2, aux),\n            c.call(f1mPrefix + \"_add\", f2y_c1, f2y_c2, f2y_c2),\n            c.call(f1mPrefix + \"_copy\", aux, f2y_c1),\n\n            c.call(f1mPrefix + \"_add\", f3x_c1, f3x_c2, aux),\n            c.call(f1mPrefix + \"_sub\", f3x_c1, f3x_c2, f3x_c2),\n            c.call(f1mPrefix + \"_copy\", aux, f3x_c1),\n\n            c.call(f1mPrefix + \"_sub\", f3y_c2, f3y_c1, aux),\n            c.call(f1mPrefix + \"_add\", f3y_c1, f3y_c2, f3y_c2),\n            c.call(f1mPrefix + \"_copy\", aux, f3y_c1),\n\n            c.call(f2mPrefix + \"_one\", f3z),\n\n            c.call(g2mPrefix + \"_timesScalar\", f3, z, c.i32_const(8), f3),\n            c.call(g2mPrefix + \"_addMixed\", f3, f2, f3),\n\n            c.ret(\n                c.call(g2mPrefix + \"_eqMixed\", f3, c.getLocal(\"p\"))\n            )\n        );\n\n        const fInGroup = module.addFunction(g2mPrefix + \"_inGroup\");\n        fInGroup.addParam(\"pIn\", \"i32\");\n        fInGroup.setReturnType(\"i32\");\n\n        const c2 = fInGroup.getCodeBuilder();\n\n        const aux2 = c2.i32_const(module.alloc(f2size*2));\n\n        fInGroup.addCode(\n            c2.call(g2mPrefix + \"_toAffine\", c2.getLocal(\"pIn\"), aux2),\n\n            c2.ret(\n                c2.call(g2mPrefix + \"_inGroupAffine\", aux2),\n            )\n        );\n\n    }\n\n    function buildInGroupG1() {\n        const f = module.addFunction(g1mPrefix+ \"_inGroupAffine\");\n        f.addParam(\"p\", \"i32\");\n        f.setReturnType(\"i32\");\n\n        const c = f.getCodeBuilder();\n\n        const BETA = 4002409555221667392624310435006688643935503118305586438271171395842971157480381377015405980053539358417135540939436n;\n        const BETA2 = 793479390729215512621379701633421447060886740281060493010456487427281649075476305620758731620350n;\n        const Z2M1D3 = (finalExpZ * finalExpZ - 1n) / 3n;\n\n        const beta = c.i32_const(module.alloc(utils.bigInt2BytesLE(toMontgomery(BETA), n8q)));\n        const beta2 = c.i32_const(module.alloc(utils.bigInt2BytesLE(toMontgomery(BETA2), n8q)));\n\n        const z2m1d3 = c.i32_const(module.alloc(utils.bigInt2BytesLE(Z2M1D3, 16)));\n\n\n        const px = c.getLocal(\"p\");\n        const py = c.i32_add(c.getLocal(\"p\"), c.i32_const(f1size));\n\n        const psp = module.alloc(f1size*3);\n        const sp = c.i32_const(psp);\n        const spx = c.i32_const(psp);\n        const spy = c.i32_const(psp+f1size);\n\n        const ps2p = module.alloc(f1size*2);\n        const s2p = c.i32_const(ps2p);\n        const s2px = c.i32_const(ps2p);\n        const s2py = c.i32_const(ps2p+f1size);\n\n        f.addCode(\n            c.if(\n                c.call(g1mPrefix + \"_isZeroAffine\", c.getLocal(\"p\")),\n                c.ret( c.i32_const(1)),\n            ),\n            c.if(\n                c.i32_eqz(c.call(g1mPrefix + \"_inCurveAffine\", c.getLocal(\"p\"))),\n                c.ret( c.i32_const(0)),\n            ),\n\n            c.call(f1mPrefix + \"_mul\", px, beta, spx),\n            c.call(f1mPrefix + \"_copy\", py, spy),\n\n            c.call(f1mPrefix + \"_mul\", px, beta2, s2px),\n            c.call(f1mPrefix + \"_copy\", py, s2py),\n\n\n            c.call(g1mPrefix + \"_doubleAffine\", sp, sp),\n            c.call(g1mPrefix + \"_subMixed\", sp, c.getLocal(\"p\"), sp),\n            c.call(g1mPrefix + \"_subMixed\", sp, s2p, sp),\n\n            c.call(g1mPrefix + \"_timesScalar\", sp, z2m1d3, c.i32_const(16), sp),\n\n            c.ret(\n                c.call(g1mPrefix + \"_eqMixed\", sp, s2p)\n            )\n\n        );\n\n        const fInGroup = module.addFunction(g1mPrefix + \"_inGroup\");\n        fInGroup.addParam(\"pIn\", \"i32\");\n        fInGroup.setReturnType(\"i32\");\n\n        const c2 = fInGroup.getCodeBuilder();\n\n        const aux2 = c2.i32_const(module.alloc(f1size*2));\n\n        fInGroup.addCode(\n            c2.call(g1mPrefix + \"_toAffine\", c2.getLocal(\"pIn\"), aux2),\n\n            c2.ret(\n                c2.call(g1mPrefix + \"_inGroupAffine\", aux2),\n            )\n        );\n    }\n\n    for (let i=0; i<10; i++) {\n        buildFrobeniusMap(i);\n        module.exportFunction(ftmPrefix + \"_frobeniusMap\"+i);\n    }\n\n\n    buildInGroupG1();\n    buildInGroupG2();\n\n    buildPrepAddStep();\n    buildPrepDoubleStep();\n\n    buildPrepareG1();\n    buildPrepareG2();\n\n    buildMillerLoop();\n\n    buildFinalExponentiationOld();\n    buildFinalExponentiation();\n\n    for (let i=1; i<=5; i++) {\n        buildPairingEquation(i);\n        module.exportFunction(prefix + \"_pairingEq\"+i);\n    }\n\n    buildPairing();\n\n    module.exportFunction(prefix + \"_pairing\");\n\n\n    module.exportFunction(prefix + \"_prepareG1\");\n    module.exportFunction(prefix + \"_prepareG2\");\n    module.exportFunction(prefix + \"_millerLoop\");\n    module.exportFunction(prefix + \"_finalExponentiation\");\n    module.exportFunction(prefix + \"_finalExponentiationOld\");\n    module.exportFunction(prefix + \"__cyclotomicSquare\");\n    module.exportFunction(prefix + \"__cyclotomicExp_w0\");\n\n    module.exportFunction(f6mPrefix + \"_mul1\");\n    module.exportFunction(f6mPrefix + \"_mul01\");\n    module.exportFunction(ftmPrefix + \"_mul014\");\n\n    module.exportFunction(g1mPrefix + \"_inGroupAffine\");\n    module.exportFunction(g1mPrefix + \"_inGroup\");\n    module.exportFunction(g2mPrefix + \"_inGroupAffine\");\n    module.exportFunction(g2mPrefix + \"_inGroup\");\n\n    // console.log(module.functionIdxByName);\n};\n\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\n// module.exports.bn128_wasm = require(\"./build/bn128_wasm.js\");\n// module.exports.bls12381_wasm = require(\"./build/bls12381_wasm.js\");\n// module.exports.mnt6753_wasm = require(\"./build/mnt6753_wasm.js\");\n\nmodule.exports.buildBn128 = require(\"./src/bn128/build_bn128.js\");\nmodule.exports.buildBls12381 = require(\"./src/bls12381/build_bls12381.js\");\n// module.exports.buildMnt6753 = require(\"./src/mnt6753/build_mnt7.js\");\n\nmodule.exports.buildF1m = require(\"./src/build_f1m\");\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nmodule.exports = Worker;", "'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n", "/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n", "\nconst polyfill = require('crypto')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashSha256 = exports.sha256 = exports.sha256nodeCrypto = exports.sha256js = void 0;\nvar buffer_1 = require(\"buffer/\");\n/**\n * From https://github.com/crypto-browserify/sha.js/blob/master/sha256.js\n *\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\nvar sha256js = /** @class */ (function () {\n    function sha256js() {\n        this._blockSize = 64;\n        this._finalSize = 56;\n        this._len = 0;\n        this._w = new Array(64);\n        this._a = 0x6a09e667;\n        this._b = 0xbb67ae85;\n        this._c = 0x3c6ef372;\n        this._d = 0xa54ff53a;\n        this._e = 0x510e527f;\n        this._f = 0x9b05688c;\n        this._g = 0x1f83d9ab;\n        this._h = 0x5be0cd19;\n        this._block = buffer_1.Buffer.alloc(this._blockSize);\n    }\n    sha256js.prototype.update = function (data, encoding) {\n        if (typeof data === 'string') {\n            encoding = encoding || 'utf8';\n            data = buffer_1.Buffer.from(data, encoding);\n        }\n        var block = this._block;\n        var blockSize = this._blockSize;\n        var length = data.length;\n        var accum = this._len;\n        for (var offset = 0; offset < length;) {\n            var assigned = accum % blockSize;\n            var remainder = Math.min(length - offset, blockSize - assigned);\n            for (var i = 0; i < remainder; i++) {\n                block[assigned + i] = data[offset + i];\n            }\n            accum += remainder;\n            offset += remainder;\n            if ((accum % blockSize) === 0) {\n                this._update(block);\n            }\n        }\n        this._len += length;\n        return this;\n    };\n    sha256js.prototype.digest = function (encoding) {\n        var rem = this._len % this._blockSize;\n        this._block[rem] = 0x80;\n        // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n        // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n        this._block.fill(0, rem + 1);\n        if (rem >= this._finalSize) {\n            this._update(this._block);\n            this._block.fill(0);\n        }\n        var bits = this._len * 8;\n        // uint32\n        if (bits <= 0xffffffff) {\n            this._block.writeUInt32BE(bits, this._blockSize - 4);\n            // uint64\n        }\n        else {\n            var lowBits = (bits & 0xffffffff) >>> 0;\n            var highBits = (bits - lowBits) / 0x100000000;\n            this._block.writeUInt32BE(highBits, this._blockSize - 8);\n            this._block.writeUInt32BE(lowBits, this._blockSize - 4);\n        }\n        this._update(this._block);\n        var hash = buffer_1.Buffer.alloc(32);\n        hash.writeInt32BE(this._a, 0);\n        hash.writeInt32BE(this._b, 4);\n        hash.writeInt32BE(this._c, 8);\n        hash.writeInt32BE(this._d, 12);\n        hash.writeInt32BE(this._e, 16);\n        hash.writeInt32BE(this._f, 20);\n        hash.writeInt32BE(this._g, 24);\n        hash.writeInt32BE(this._h, 28);\n        return encoding ? hash.toString(encoding) : hash;\n    };\n    sha256js.prototype.ch = function (x, y, z) {\n        return z ^ (x & (y ^ z));\n    };\n    sha256js.prototype.maj = function (x, y, z) {\n        return (x & y) | (z & (x | y));\n    };\n    sha256js.prototype.sigma0 = function (x) {\n        return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);\n    };\n    sha256js.prototype.sigma1 = function (x) {\n        return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);\n    };\n    sha256js.prototype.gamma0 = function (x) {\n        return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3);\n    };\n    sha256js.prototype.gamma1 = function (x) {\n        return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10);\n    };\n    sha256js.prototype._update = function (M) {\n        var W = this._w;\n        var a = this._a | 0;\n        var b = this._b | 0;\n        var c = this._c | 0;\n        var d = this._d | 0;\n        var e = this._e | 0;\n        var f = this._f | 0;\n        var g = this._g | 0;\n        var h = this._h | 0;\n        var i = 0;\n        for (; i < 16; ++i)\n            W[i] = M.readInt32BE(i * 4);\n        for (; i < 64; ++i)\n            W[i] = (this.gamma1(W[i - 2]) + W[i - 7] + this.gamma0(W[i - 15]) + W[i - 16]) | 0;\n        for (var j = 0; j < 64; ++j) {\n            var T1 = (h + this.sigma1(e) + this.ch(e, f, g) + sha256js.K[j] + W[j]) | 0;\n            var T2 = (this.sigma0(a) + this.maj(a, b, c)) | 0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) | 0;\n        }\n        this._a = (a + this._a) | 0;\n        this._b = (b + this._b) | 0;\n        this._c = (c + this._c) | 0;\n        this._d = (d + this._d) | 0;\n        this._e = (e + this._e) | 0;\n        this._f = (f + this._f) | 0;\n        this._g = (g + this._g) | 0;\n        this._h = (h + this._h) | 0;\n    };\n    sha256js.K = [\n        0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n        0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n        0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n        0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n        0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n        0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n        0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n        0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n        0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n        0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n        0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n        0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n        0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n        0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n        0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n        0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n    ];\n    return sha256js;\n}());\nexports.sha256js = sha256js;\nvar sha256nodeCrypto = /** @class */ (function () {\n    function sha256nodeCrypto() {\n        if (!sha256nodeCrypto.useCryptoModuleCache || sha256nodeCrypto.nodeCryptoCreateHash === undefined) {\n            sha256nodeCrypto.nodeCryptoCreateHash = require('crypto').createHash;\n        }\n        this.hash = sha256nodeCrypto.nodeCryptoCreateHash('sha256');\n    }\n    sha256nodeCrypto.prototype.update = function (data, encoding) {\n        this.hash.update(data, encoding);\n        return this;\n    };\n    sha256nodeCrypto.prototype.digest = function (encoding) {\n        if (encoding) {\n            return this.hash.digest(encoding);\n        }\n        else {\n            return this.hash.digest();\n        }\n    };\n    sha256nodeCrypto.useCryptoModuleCache = true;\n    return sha256nodeCrypto;\n}());\nexports.sha256nodeCrypto = sha256nodeCrypto;\nvar _nodeCryptoAvailable = undefined;\nfunction isNodeCryptoAvailable() {\n    if (sha256nodeCrypto.useCryptoModuleCache && _nodeCryptoAvailable !== undefined) {\n        return _nodeCryptoAvailable;\n    }\n    var isAvailable = false;\n    try {\n        if (typeof require === 'function') {\n            var cryptoModule = require('crypto');\n            isAvailable = cryptoModule && typeof cryptoModule.createHash === 'function';\n        }\n    }\n    catch (error) {\n        // ignore\n    }\n    _nodeCryptoAvailable = isAvailable;\n    return isAvailable;\n}\nvar sha256 = /** @class */ (function () {\n    function sha256() {\n        if (isNodeCryptoAvailable()) {\n            this.instance = new sha256nodeCrypto();\n        }\n        else {\n            this.instance = new sha256js();\n        }\n    }\n    sha256.prototype.update = function (data, encoding) {\n        this.instance.update(data, encoding);\n        return this;\n    };\n    sha256.prototype.digest = function (encoding) {\n        if (encoding) {\n            return this.instance.digest(encoding);\n        }\n        else {\n            return this.instance.digest();\n        }\n    };\n    return sha256;\n}());\nexports.sha256 = sha256;\n/**\n * Use Nodejs `crypto` module if available, otherwise uses js implementation.\n * @param data Input data to hash.\n */\nfunction hashSha256(data) {\n    return new sha256().update(data).digest();\n}\nexports.hashSha256 = hashSha256;\nexports.default = hashSha256;\n//# sourceMappingURL=index.js.map", "'use strict'\n/**\n * Base58 characters must only include numbers 123456789, uppercase ABCDEFGHJKLMNPQRSTUVWXYZ and lowercase abcdefghijkmnopqrstuvwxyz.\n * @kind namespace\n * @name base58_chars\n * @type {string}\n */\nconst base58_chars =\n  '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = base58_chars\n", "'use strict'\n\nconst base58_chars = require('../private/base58_chars.js')\n\n/**\n * Converts a `base58` string to its corresponding binary representation.\n * @kind function\n * @name base58_to_binary\n * @param {base58_chars} base58String base58 encoded string\n * @returns {Uint8Array} binary representation for the base58 string.\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { base58_to_binary } from 'base58-js'\n * ```\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { base58_to_binary } = require('base58-js')\n * ```\n * @example <caption>Usage.</caption>\n * ```js\n * const bin = base58_to_binary(\"6MRy\")\n * console.log(bin)\n * ```\n * Logged output will be Uint8Array(3) [15, 239, 64].\n */\nconst base58_to_binary = base58String => {\n  if (!base58String || typeof base58String !== 'string')\n    throw new Error(`Expected base58 string but got \u201C${base58String}\u201D`)\n  if (base58String.match(/[IOl0]/gmu))\n    throw new Error(\n      `Invalid base58 character \u201C${base58String.match(/[IOl0]/gmu)}\u201D`\n    )\n  const lz = base58String.match(/^1+/gmu)\n  const psz = lz ? lz[0].length : 0\n  const size =\n    ((base58String.length - psz) * (Math.log(58) / Math.log(256)) + 1) >>> 0\n\n  return new Uint8Array([\n    ...new Uint8Array(psz),\n    ...base58String\n      .match(/.{1}/gmu)\n      .map(i => base58_chars.indexOf(i))\n      .reduce((acc, i) => {\n        acc = acc.map(j => {\n          const x = j * 58 + i\n          i = x >> 8\n          return x\n        })\n        return acc\n      }, new Uint8Array(size))\n      .reverse()\n      .filter(\n        (\n          lastValue => value =>\n            (lastValue = lastValue || value)\n        )(false)\n      )\n  ])\n}\n\nmodule.exports = base58_to_binary\n", "'use strict'\nconst base58_chars = require('./base58_chars.js')\n\n/**\n * Generates a mapping between base58 and ascii.\n * @name create_base58_map\n * @kind function\n * @returns {Array} mapping between ascii and base58.\n * @ignore\n */\nconst create_base58_map = () => {\n  const base58M = Array(256).fill(-1)\n  for (let i = 0; i < base58_chars.length; ++i)\n    base58M[base58_chars.charCodeAt(i)] = i\n\n  return base58M\n}\n\nmodule.exports = create_base58_map\n", "'use strict'\n\nconst base58_chars = require('../private/base58_chars.js')\nconst create_base58_map = require('../private/create_base58_map.js')\n\nconst base58Map = create_base58_map()\n\n/**\n * Converts a [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) into a base58 string.\n * @kind function\n * @name binary_to_base58\n * @param {Uint8Array | Array} uint8array Unsigned integer.\n * @returns {base58_chars} The base58 string representation of the binary array.\n * @example <caption>Ways to `require`.</caption>\n * ```js\n * const { binary_to_base58 } = require(\"base58-js\")\n * ```\n * @example <caption>Ways to `import`.</caption>\n * ```js\n * import { binary_to_base58 } from 'base58-js'\n * ```\n * @example <caption>Usage.</caption>\n * ```js\n * const str = binary_to_base58([15, 239, 64])\n * console.log(str)\n * ```\n * Logged output will be 6MRy.\n */\nconst binary_to_base58 = uint8array => {\n  const result = []\n\n  for (const byte of uint8array) {\n    let carry = byte\n    for (let j = 0; j < result.length; ++j) {\n      const x = (base58Map[result[j]] << 8) + carry\n      result[j] = base58_chars.charCodeAt(x % 58)\n      carry = (x / 58) | 0\n    }\n    while (carry) {\n      result.push(base58_chars.charCodeAt(carry % 58))\n      carry = (carry / 58) | 0\n    }\n  }\n\n  for (const byte of uint8array)\n    if (byte) break\n    else result.push('1'.charCodeAt(0))\n\n  result.reverse()\n\n  return String.fromCharCode(...result)\n}\n\nmodule.exports = binary_to_base58\n", "'use strict'\n\nexports.base58_to_binary = require('./base58_to_binary.js')\nexports.binary_to_base58 = require('./binary_to_base58.js')\n", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nfunction parse(string, encoding, opts) {\n  var _opts$out;\n\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // Build the character lookup table:\n  if (!encoding.codes) {\n    encoding.codes = {};\n\n    for (var i = 0; i < encoding.chars.length; ++i) {\n      encoding.codes[encoding.chars[i]] = i;\n    }\n  } // The string must have a whole number of bytes:\n\n\n  if (!opts.loose && string.length * encoding.bits & 7) {\n    throw new SyntaxError('Invalid padding');\n  } // Count the padding bytes:\n\n\n  var end = string.length;\n\n  while (string[end - 1] === '=') {\n    --end; // If we get a whole number of bytes, there is too much padding:\n\n    if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {\n      throw new SyntaxError('Invalid padding');\n    }\n  } // Allocate the output:\n\n\n  var out = new ((_opts$out = opts.out) != null ? _opts$out : Uint8Array)(end * encoding.bits / 8 | 0); // Parse the data:\n\n  var bits = 0; // Number of bits currently in the buffer\n\n  var buffer = 0; // Bits waiting to be written out, MSB first\n\n  var written = 0; // Next byte to write\n\n  for (var _i = 0; _i < end; ++_i) {\n    // Read one character from the string:\n    var value = encoding.codes[string[_i]];\n\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[_i]);\n    } // Append the bits to the buffer:\n\n\n    buffer = buffer << encoding.bits | value;\n    bits += encoding.bits; // Write out some bits if the buffer has a byte's worth:\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  } // Verify that we have received just enough bits:\n\n\n  if (bits >= encoding.bits || 0xff & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n\n  return out;\n}\nfunction stringify(data, encoding, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  var _opts = opts,\n      _opts$pad = _opts.pad,\n      pad = _opts$pad === void 0 ? true : _opts$pad;\n  var mask = (1 << encoding.bits) - 1;\n  var out = '';\n  var bits = 0; // Number of bits currently in the buffer\n\n  var buffer = 0; // Bits waiting to be written out, MSB first\n\n  for (var i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = buffer << 8 | 0xff & data[i];\n    bits += 8; // Write out as much as we can:\n\n    while (bits > encoding.bits) {\n      bits -= encoding.bits;\n      out += encoding.chars[mask & buffer >> bits];\n    }\n  } // Partial character:\n\n\n  if (bits) {\n    out += encoding.chars[mask & buffer << encoding.bits - bits];\n  } // Add padding characters until we hit a byte boundary:\n\n\n  if (pad) {\n    while (out.length * encoding.bits & 7) {\n      out += '=';\n    }\n  }\n\n  return out;\n}\n\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */\nvar base16Encoding = {\n  chars: '0123456789ABCDEF',\n  bits: 4\n};\nvar base32Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bits: 5\n};\nvar base32HexEncoding = {\n  chars: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bits: 5\n};\nvar base64Encoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bits: 6\n};\nvar base64UrlEncoding = {\n  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bits: 6\n};\nvar base16 = {\n  parse: function parse$1(string, opts) {\n    return parse(string.toUpperCase(), base16Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base16Encoding, opts);\n  }\n};\nvar base32 = {\n  parse: function parse$1(string, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    return parse(opts.loose ? string.toUpperCase().replace(/0/g, 'O').replace(/1/g, 'L').replace(/8/g, 'B') : string, base32Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base32Encoding, opts);\n  }\n};\nvar base32hex = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base32HexEncoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base32HexEncoding, opts);\n  }\n};\nvar base64 = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base64Encoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base64Encoding, opts);\n  }\n};\nvar base64url = {\n  parse: function parse$1(string, opts) {\n    return parse(string, base64UrlEncoding, opts);\n  },\n  stringify: function stringify$1(data, opts) {\n    return stringify(data, base64UrlEncoding, opts);\n  }\n};\nvar codec = {\n  parse: parse,\n  stringify: stringify\n};\n\nexports.base16 = base16;\nexports.base32 = base32;\nexports.base32hex = base32hex;\nexports.base64 = base64;\nexports.base64url = base64url;\nexports.codec = codec;\n", "export default {};\n", "module.exports = assert\n\nclass AssertionError extends Error {}\nAssertionError.prototype.name = 'AssertionError'\n\n/**\n * Minimal assert function\n * @param  {any} t Value to check if falsy\n * @param  {string=} m Optional assertion error message\n * @throws {AssertionError}\n */\nfunction assert (t, m) {\n  if (!t) {\n    var err = new AssertionError(m)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, assert)\n    throw err\n  }\n}\n", "function byteLength (string) {\n  return string.length\n}\n\nfunction toString (buffer) {\n  const len = buffer.byteLength\n\n  let result = ''\n\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buffer[i])\n  }\n\n  return result\n}\n\nfunction write (buffer, string, offset = 0, length = byteLength(string)) {\n  const len = Math.min(length, buffer.byteLength - offset)\n\n  for (let i = 0; i < len; i++) {\n    buffer[offset + i] = string.charCodeAt(i)\n  }\n\n  return len\n}\n\nmodule.exports = {\n  byteLength,\n  toString,\n  write\n}\n", "const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\nconst codes = new Uint8Array(256)\n\nfor (let i = 0; i < alphabet.length; i++) {\n  codes[alphabet.charCodeAt(i)] = i\n}\n\ncodes[/* - */ 0x2d] = 62\ncodes[/* _ */ 0x5f] = 63\n\nfunction byteLength (string) {\n  let len = string.length\n\n  if (string.charCodeAt(len - 1) === 0x3d) len--\n  if (len > 1 && string.charCodeAt(len - 1) === 0x3d) len--\n\n  return (len * 3) >>> 2\n}\n\nfunction toString (buffer) {\n  const len = buffer.byteLength\n\n  let result = ''\n\n  for (let i = 0; i < len; i += 3) {\n    result += (\n      alphabet[buffer[i] >> 2] +\n      alphabet[((buffer[i] & 3) << 4) | (buffer[i + 1] >> 4)] +\n      alphabet[((buffer[i + 1] & 15) << 2) | (buffer[i + 2] >> 6)] +\n      alphabet[buffer[i + 2] & 63]\n    )\n  }\n\n  if (len % 3 === 2) {\n    result = result.substring(0, result.length - 1) + '='\n  } else if (len % 3 === 1) {\n    result = result.substring(0, result.length - 2) + '=='\n  }\n\n  return result\n};\n\nfunction write (buffer, string, offset = 0, length = byteLength(string)) {\n  const len = Math.min(length, buffer.byteLength - offset)\n\n  for (let i = 0, j = 0; i < len; i += 4) {\n    const a = codes[string.charCodeAt(i)]\n    const b = codes[string.charCodeAt(i + 1)]\n    const c = codes[string.charCodeAt(i + 2)]\n    const d = codes[string.charCodeAt(i + 3)]\n\n    buffer[j++] = (a << 2) | (b >> 4)\n    buffer[j++] = ((b & 15) << 4) | (c >> 2)\n    buffer[j++] = ((c & 3) << 6) | (d & 63)\n  }\n\n  return len\n};\n\nmodule.exports = {\n  byteLength,\n  toString,\n  write\n}\n", "function byteLength (string) {\n  return string.length >>> 1\n}\n\nfunction toString (buffer) {\n  const len = buffer.byteLength\n\n  buffer = new DataView(buffer.buffer, buffer.byteOffset, len)\n\n  let result = ''\n  let i = 0\n\n  for (let n = len - (len % 4); i < n; i += 4) {\n    result += buffer.getUint32(i).toString(16).padStart(8, '0')\n  }\n\n  for (; i < len; i++) {\n    result += buffer.getUint8(i).toString(16).padStart(2, '0')\n  }\n\n  return result\n}\n\nfunction write (buffer, string, offset = 0, length = byteLength(string)) {\n  const len = Math.min(length, buffer.byteLength - offset)\n\n  for (let i = 0; i < len; i++) {\n    const a = hexValue(string.charCodeAt(i * 2))\n    const b = hexValue(string.charCodeAt(i * 2 + 1))\n\n    if (a === undefined || b === undefined) {\n      return buffer.subarray(0, i)\n    }\n\n    buffer[offset + i] = (a << 4) | b\n  }\n\n  return len\n}\n\nmodule.exports = {\n  byteLength,\n  toString,\n  write\n}\n\nfunction hexValue (char) {\n  if (char >= 0x30 && char <= 0x39) return char - 0x30\n  if (char >= 0x41 && char <= 0x46) return char - 0x41 + 10\n  if (char >= 0x61 && char <= 0x66) return char - 0x61 + 10\n}\n", "function byteLength (string) {\n  let length = 0\n\n  for (let i = 0, n = string.length; i < n; i++) {\n    const code = string.charCodeAt(i)\n\n    if (code >= 0xd800 && code <= 0xdbff && i + 1 < n) {\n      const code = string.charCodeAt(i + 1)\n\n      if (code >= 0xdc00 && code <= 0xdfff) {\n        length += 4\n        i++\n        continue\n      }\n    }\n\n    if (code <= 0x7f) length += 1\n    else if (code <= 0x7ff) length += 2\n    else length += 3\n  }\n\n  return length\n}\n\nlet toString\n\nif (typeof TextDecoder !== 'undefined') {\n  const decoder = new TextDecoder()\n\n  toString = function toString (buffer) {\n    return decoder.decode(buffer)\n  }\n} else {\n  toString = function toString (buffer) {\n    const len = buffer.byteLength\n\n    let output = ''\n    let i = 0\n\n    while (i < len) {\n      let byte = buffer[i]\n\n      if (byte <= 0x7f) {\n        output += String.fromCharCode(byte)\n        i++\n        continue\n      }\n\n      let bytesNeeded = 0\n      let codePoint = 0\n\n      if (byte <= 0xdf) {\n        bytesNeeded = 1\n        codePoint = byte & 0x1f\n      } else if (byte <= 0xef) {\n        bytesNeeded = 2\n        codePoint = byte & 0x0f\n      } else if (byte <= 0xf4) {\n        bytesNeeded = 3\n        codePoint = byte & 0x07\n      }\n\n      if (len - i - bytesNeeded > 0) {\n        let k = 0\n\n        while (k < bytesNeeded) {\n          byte = buffer[i + k + 1]\n          codePoint = (codePoint << 6) | (byte & 0x3f)\n          k += 1\n        }\n      } else {\n        codePoint = 0xfffd\n        bytesNeeded = len - i\n      }\n\n      output += String.fromCodePoint(codePoint)\n      i += bytesNeeded + 1\n    }\n\n    return output\n  }\n}\n\nlet write\n\nif (typeof TextEncoder !== 'undefined') {\n  const encoder = new TextEncoder()\n\n  write = function write (buffer, string, offset = 0, length = byteLength(string)) {\n    const len = Math.min(length, buffer.byteLength - offset)\n    encoder.encodeInto(string, buffer.subarray(offset, offset + len))\n    return len\n  }\n} else {\n  write = function write (buffer, string, offset = 0, length = byteLength(string)) {\n    const len = Math.min(length, buffer.byteLength - offset)\n\n    buffer = buffer.subarray(offset, offset + len)\n\n    let i = 0\n    let j = 0\n\n    while (i < string.length) {\n      const code = string.codePointAt(i)\n\n      if (code <= 0x7f) {\n        buffer[j++] = code\n        i++\n        continue\n      }\n\n      let count = 0\n      let bits = 0\n\n      if (code <= 0x7ff) {\n        count = 6\n        bits = 0xc0\n      } else if (code <= 0xffff) {\n        count = 12\n        bits = 0xe0\n      } else if (code <= 0x1fffff) {\n        count = 18\n        bits = 0xf0\n      }\n\n      buffer[j++] = bits | (code >> count)\n      count -= 6\n\n      while (count >= 0) {\n        buffer[j++] = 0x80 | ((code >> count) & 0x3f)\n        count -= 6\n      }\n\n      i += code >= 0x10000 ? 2 : 1\n    }\n\n    return len\n  }\n}\n\nmodule.exports = {\n  byteLength,\n  toString,\n  write\n}\n", "function byteLength (string) {\n  return string.length * 2\n}\n\nfunction toString (buffer) {\n  const len = buffer.byteLength\n\n  let result = ''\n\n  for (let i = 0; i < len - 1; i += 2) {\n    result += String.fromCharCode(buffer[i] + (buffer[i + 1] * 256))\n  }\n\n  return result\n}\n\nfunction write (buffer, string, offset = 0, length = byteLength(string)) {\n  const len = Math.min(length, buffer.byteLength - offset)\n\n  let units = len\n\n  for (let i = 0; i < string.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    const c = string.charCodeAt(i)\n    const hi = c >> 8\n    const lo = c % 256\n\n    buffer[offset + i * 2] = lo\n    buffer[offset + i * 2 + 1] = hi\n  }\n\n  return len\n}\n\nmodule.exports = {\n  byteLength,\n  toString,\n  write\n}\n", "const ascii = require('./lib/ascii')\nconst base64 = require('./lib/base64')\nconst hex = require('./lib/hex')\nconst utf8 = require('./lib/utf8')\nconst utf16le = require('./lib/utf16le')\n\nconst LE = new Uint8Array(Uint16Array.of(0xff).buffer)[0] === 0xff\n\nfunction codecFor (encoding) {\n  switch (encoding) {\n    case 'ascii':\n      return ascii\n    case 'base64':\n      return base64\n    case 'hex':\n      return hex\n    case 'utf8':\n    case 'utf-8':\n    case undefined:\n      return utf8\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return utf16le\n    default:\n      throw new Error(`Unknown encoding: ${encoding}`)\n  }\n}\n\nfunction isBuffer (value) {\n  return value instanceof Uint8Array\n}\n\nfunction isEncoding (encoding) {\n  try {\n    codecFor(encoding)\n    return true\n  } catch {\n    return false\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  const buffer = new Uint8Array(size)\n  if (fill !== undefined) exports.fill(buffer, fill, 0, buffer.byteLength, encoding)\n  return buffer\n}\n\nfunction allocUnsafe (size) {\n  return new Uint8Array(size)\n}\n\nfunction allocUnsafeSlow (size) {\n  return new Uint8Array(size)\n}\n\nfunction byteLength (string, encoding) {\n  return codecFor(encoding).byteLength(string)\n}\n\nfunction compare (a, b) {\n  if (a === b) return 0\n\n  const len = Math.min(a.byteLength, b.byteLength)\n\n  a = new DataView(a.buffer, a.byteOffset, a.byteLength)\n  b = new DataView(b.buffer, b.byteOffset, b.byteLength)\n\n  let i = 0\n\n  for (let n = len - (len % 4); i < n; i += 4) {\n    const x = a.getUint32(i, LE)\n    const y = b.getUint32(i, LE)\n    if (x !== y) break\n  }\n\n  for (; i < len; i++) {\n    const x = a.getUint8(i)\n    const y = b.getUint8(i)\n    if (x < y) return -1\n    if (x > y) return 1\n  }\n\n  return a.byteLength > b.byteLength ? 1 : a.byteLength < b.byteLength ? -1 : 0\n}\n\nfunction concat (buffers, totalLength) {\n  if (totalLength === undefined) {\n    totalLength = buffers.reduce((len, buffer) => len + buffer.byteLength, 0)\n  }\n\n  const result = new Uint8Array(totalLength)\n\n  buffers.reduce(\n    (offset, buffer) => {\n      result.set(buffer, offset)\n      return offset + buffer.byteLength\n    },\n    0\n  )\n\n  return result\n}\n\nfunction copy (source, target, targetStart = 0, start = 0, end = source.byteLength) {\n  if (end > 0 && end < start) return 0\n  if (end === start) return 0\n  if (source.byteLength === 0 || target.byteLength === 0) return 0\n\n  if (targetStart < 0) throw new RangeError('targetStart is out of range')\n  if (start < 0 || start >= source.byteLength) throw new RangeError('sourceStart is out of range')\n  if (end < 0) throw new RangeError('sourceEnd is out of range')\n\n  if (targetStart >= target.byteLength) targetStart = target.byteLength\n  if (end > source.byteLength) end = source.byteLength\n  if (target.byteLength - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (source === target) {\n    target.copyWithin(targetStart, start, end)\n  } else {\n    target.set(source.subarray(start, end), targetStart)\n  }\n\n  return len\n}\n\nfunction equals (a, b) {\n  if (a === b) return true\n  if (a.byteLength !== b.byteLength) return false\n\n  const len = a.byteLength\n\n  a = new DataView(a.buffer, a.byteOffset, a.byteLength)\n  b = new DataView(b.buffer, b.byteOffset, b.byteLength)\n\n  let i = 0\n\n  for (let n = len - (len % 4); i < n; i += 4) {\n    if (a.getUint32(i, LE) !== b.getUint32(i, LE)) return false\n  }\n\n  for (; i < len; i++) {\n    if (a.getUint8(i) !== b.getUint8(i)) return false\n  }\n\n  return true\n}\n\nfunction fill (buffer, value, offset, end, encoding) {\n  if (typeof value === 'string') {\n    // fill(buffer, string, encoding)\n    if (typeof offset === 'string') {\n      encoding = offset\n      offset = 0\n      end = buffer.byteLength\n\n    // fill(buffer, string, offset, encoding)\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = buffer.byteLength\n    }\n  } else if (typeof val === 'number') {\n    value = value & 0xff\n  } else if (typeof val === 'boolean') {\n    value = +value\n  }\n\n  if (offset < 0 || buffer.byteLength < offset || buffer.byteLength < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (offset === undefined) offset = 0\n  if (end === undefined) end = buffer.byteLength\n\n  if (end <= offset) return buffer\n\n  if (!value) value = 0\n\n  if (typeof value === 'number') {\n    for (let i = offset; i < end; ++i) {\n      buffer[i] = value\n    }\n  } else {\n    value = isBuffer(value) ? value : from(value, encoding)\n\n    const len = value.byteLength\n\n    for (let i = 0; i < end - offset; ++i) {\n      buffer[i + offset] = value[i % len]\n    }\n  }\n\n  return buffer\n}\n\nfunction from (value, encodingOrOffset, length) {\n  // from(string, encoding)\n  if (typeof value === 'string') return fromString(value, encodingOrOffset)\n\n  // from(array)\n  if (Array.isArray(value)) return fromArray(value)\n\n  // from(buffer)\n  if (ArrayBuffer.isView(value)) return fromBuffer(value)\n\n  // from(arrayBuffer[, byteOffset[, length]])\n  return fromArrayBuffer(value, encodingOrOffset, length)\n}\n\nfunction fromString (string, encoding) {\n  const codec = codecFor(encoding)\n  const buffer = new Uint8Array(codec.byteLength(string))\n  codec.write(buffer, string, 0, buffer.byteLength)\n  return buffer\n}\n\nfunction fromArray (array) {\n  const buffer = new Uint8Array(array.length)\n  buffer.set(array)\n  return buffer\n}\n\nfunction fromBuffer (buffer) {\n  const copy = new Uint8Array(buffer.byteLength)\n  copy.set(buffer)\n  return copy\n}\n\nfunction fromArrayBuffer (arrayBuffer, byteOffset, length) {\n  return new Uint8Array(arrayBuffer, byteOffset, length)\n}\n\nfunction includes (buffer, value, byteOffset, encoding) {\n  return indexOf(buffer, value, byteOffset, encoding) !== -1\n}\n\nfunction bidirectionalIndexOf (buffer, value, byteOffset, encoding, first) {\n  if (buffer.byteLength === 0) return -1\n\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset === undefined) {\n    byteOffset = first ? 0 : (buffer.length - 1)\n  } else if (byteOffset < 0) {\n    byteOffset += buffer.byteLength\n  }\n\n  if (byteOffset >= buffer.byteLength) {\n    if (first) return -1\n    else byteOffset = buffer.byteLength - 1\n  } else if (byteOffset < 0) {\n    if (first) byteOffset = 0\n    else return -1\n  }\n\n  if (typeof value === 'string') {\n    value = from(value, encoding)\n  } else if (typeof value === 'number') {\n    value = value & 0xff\n\n    if (first) {\n      return buffer.indexOf(value, byteOffset)\n    } else {\n      return buffer.lastIndexOf(value, byteOffset)\n    }\n  }\n\n  if (value.byteLength === 0) return -1\n\n  if (first) {\n    let foundIndex = -1\n\n    for (let i = byteOffset; i < buffer.byteLength; i++) {\n      if (buffer[i] === value[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === value.byteLength) return foundIndex\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + value.byteLength > buffer.byteLength) {\n      byteOffset = buffer.byteLength - value.byteLength\n    }\n\n    for (let i = byteOffset; i >= 0; i--) {\n      let found = true\n\n      for (let j = 0; j < value.byteLength; j++) {\n        if (buffer[i + j] !== value[j]) {\n          found = false\n          break\n        }\n      }\n\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nfunction indexOf (buffer, value, byteOffset, encoding) {\n  return bidirectionalIndexOf(buffer, value, byteOffset, encoding, true /* first */)\n}\n\nfunction lastIndexOf (buffer, value, byteOffset, encoding) {\n  return bidirectionalIndexOf(buffer, value, byteOffset, encoding, false /* last */)\n}\n\nfunction swap (buffer, n, m) {\n  const i = buffer[n]\n  buffer[n] = buffer[m]\n  buffer[m] = i\n}\n\nfunction swap16 (buffer) {\n  const len = buffer.byteLength\n\n  if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits')\n\n  for (let i = 0; i < len; i += 2) swap(buffer, i, i + 1)\n\n  return buffer\n}\n\nfunction swap32 (buffer) {\n  const len = buffer.byteLength\n\n  if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits')\n\n  for (let i = 0; i < len; i += 4) {\n    swap(buffer, i, i + 3)\n    swap(buffer, i + 1, i + 2)\n  }\n\n  return buffer\n}\n\nfunction swap64 (buffer) {\n  const len = buffer.byteLength\n\n  if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits')\n\n  for (let i = 0; i < len; i += 8) {\n    swap(buffer, i, i + 7)\n    swap(buffer, i + 1, i + 6)\n    swap(buffer, i + 2, i + 5)\n    swap(buffer, i + 3, i + 4)\n  }\n\n  return buffer\n}\n\nfunction toBuffer (buffer) {\n  return buffer\n}\n\nfunction toString (buffer, encoding, start = 0, end = buffer.byteLength) {\n  const len = buffer.byteLength\n\n  if (start >= len) return ''\n  if (end <= start) return ''\n  if (start < 0) start = 0\n  if (end > len) end = len\n\n  if (start !== 0 || end < len) buffer = buffer.subarray(start, end)\n\n  return codecFor(encoding).toString(buffer)\n}\n\nfunction write (buffer, string, offset, length, encoding) {\n  // write(buffer, string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n\n  // write(buffer, string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    offset = undefined\n\n  // write(buffer, string, offset, encoding)\n  } else if (encoding === undefined && typeof length === 'string') {\n    encoding = length\n    length = undefined\n  }\n\n  return codecFor(encoding).write(buffer, string, offset, length)\n}\n\nfunction writeDoubleLE (buffer, value, offset) {\n  if (offset === undefined) offset = 0\n\n  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n  view.setFloat64(offset, value, true)\n\n  return offset + 8\n}\n\nfunction writeFloatLE (buffer, value, offset) {\n  if (offset === undefined) offset = 0\n\n  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n  view.setFloat32(offset, value, true)\n\n  return offset + 4\n}\n\nfunction writeUInt32LE (buffer, value, offset) {\n  if (offset === undefined) offset = 0\n\n  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n  view.setUint32(offset, value, true)\n\n  return offset + 4\n}\n\nfunction writeInt32LE (buffer, value, offset) {\n  if (offset === undefined) offset = 0\n\n  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n  view.setInt32(offset, value, true)\n\n  return offset + 4\n}\n\nfunction readDoubleLE (buffer, offset) {\n  if (offset === undefined) offset = 0\n\n  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n\n  return view.getFloat64(offset, true)\n}\n\nfunction readFloatLE (buffer, offset) {\n  if (offset === undefined) offset = 0\n\n  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n\n  return view.getFloat32(offset, true)\n}\n\nfunction readUInt32LE (buffer, offset) {\n  if (offset === undefined) offset = 0\n\n  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n\n  return view.getUint32(offset, true)\n}\n\nfunction readInt32LE (buffer, offset) {\n  if (offset === undefined) offset = 0\n\n  const view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n\n  return view.getInt32(offset, true)\n}\n\nmodule.exports = exports = {\n  isBuffer,\n  isEncoding,\n  alloc,\n  allocUnsafe,\n  allocUnsafeSlow,\n  byteLength,\n  compare,\n  concat,\n  copy,\n  equals,\n  fill,\n  from,\n  includes,\n  indexOf,\n  lastIndexOf,\n  swap16,\n  swap32,\n  swap64,\n  toBuffer,\n  toString,\n  write,\n  writeDoubleLE,\n  writeFloatLE,\n  writeUInt32LE,\n  writeInt32LE,\n  readDoubleLE,\n  readFloatLE,\n  readUInt32LE,\n  readInt32LE\n}\n", "var __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __toBinary = /* @__PURE__ */ (() => {\n  var table = new Uint8Array(128);\n  for (var i = 0; i < 64; i++)\n    table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;\n  return (base64) => {\n    var n = base64.length, bytes2 = new Uint8Array((n - (base64[n - 1] == \"=\") - (base64[n - 2] == \"=\")) * 3 / 4 | 0);\n    for (var i2 = 0, j = 0; i2 < n; ) {\n      var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];\n      var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];\n      bytes2[j++] = c0 << 2 | c1 >> 4;\n      bytes2[j++] = c1 << 4 | c2 >> 2;\n      bytes2[j++] = c2 << 6 | c3;\n    }\n    return bytes2;\n  };\n})();\n\n// wasm-binary:./blake2b.wat\nvar require_blake2b = __commonJS({\n  \"wasm-binary:./blake2b.wat\"(exports2, module2) {\n    module2.exports = __toBinary(\"\");\n  }\n});\n\n// wasm-module:./blake2b.wat\nvar bytes = require_blake2b();\nvar compiled = WebAssembly.compile(bytes);\nmodule.exports = async (imports) => {\n  const instance = await WebAssembly.instantiate(await compiled, imports);\n  return instance.exports;\n};\n", "var assert = require('nanoassert')\nvar b4a = require('b4a')\n\nvar wasm = null\nvar wasmPromise = typeof WebAssembly !== \"undefined\" && require('./blake2b')().then(mod => {\n  wasm = mod\n})\n\nvar head = 64\nvar freeList = []\n\nmodule.exports = Blake2b\nvar BYTES_MIN = module.exports.BYTES_MIN = 16\nvar BYTES_MAX = module.exports.BYTES_MAX = 64\nvar BYTES = module.exports.BYTES = 32\nvar KEYBYTES_MIN = module.exports.KEYBYTES_MIN = 16\nvar KEYBYTES_MAX = module.exports.KEYBYTES_MAX = 64\nvar KEYBYTES = module.exports.KEYBYTES = 32\nvar SALTBYTES = module.exports.SALTBYTES = 16\nvar PERSONALBYTES = module.exports.PERSONALBYTES = 16\n\nfunction Blake2b (digestLength, key, salt, personal, noAssert) {\n  if (!(this instanceof Blake2b)) return new Blake2b(digestLength, key, salt, personal, noAssert)\n  if (!wasm) throw new Error('WASM not loaded. Wait for Blake2b.ready(cb)')\n  if (!digestLength) digestLength = 32\n\n  if (noAssert !== true) {\n    assert(digestLength >= BYTES_MIN, 'digestLength must be at least ' + BYTES_MIN + ', was given ' + digestLength)\n    assert(digestLength <= BYTES_MAX, 'digestLength must be at most ' + BYTES_MAX + ', was given ' + digestLength)\n    if (key != null) {\n      assert(key instanceof Uint8Array, 'key must be Uint8Array or Buffer')\n      assert(key.length >= KEYBYTES_MIN, 'key must be at least ' + KEYBYTES_MIN + ', was given ' + key.length)\n      assert(key.length <= KEYBYTES_MAX, 'key must be at least ' + KEYBYTES_MAX + ', was given ' + key.length)\n    }\n    if (salt != null) {\n      assert(salt instanceof Uint8Array, 'salt must be Uint8Array or Buffer')\n      assert(salt.length === SALTBYTES, 'salt must be exactly ' + SALTBYTES + ', was given ' + salt.length)\n    }\n    if (personal != null) {\n      assert(personal instanceof Uint8Array, 'personal must be Uint8Array or Buffer')\n      assert(personal.length === PERSONALBYTES, 'personal must be exactly ' + PERSONALBYTES + ', was given ' + personal.length)\n    }\n  }\n\n  if (!freeList.length) {\n    freeList.push(head)\n    head += 216\n  }\n\n  this.digestLength = digestLength\n  this.finalized = false\n  this.pointer = freeList.pop()\n  this._memory = new Uint8Array(wasm.memory.buffer)\n\n  this._memory.fill(0, 0, 64)\n  this._memory[0] = this.digestLength\n  this._memory[1] = key ? key.length : 0\n  this._memory[2] = 1 // fanout\n  this._memory[3] = 1 // depth\n\n  if (salt) this._memory.set(salt, 32)\n  if (personal) this._memory.set(personal, 48)\n\n  if (this.pointer + 216 > this._memory.length) this._realloc(this.pointer + 216) // we need 216 bytes for the state\n  wasm.blake2b_init(this.pointer, this.digestLength)\n\n  if (key) {\n    this.update(key)\n    this._memory.fill(0, head, head + key.length) // whiteout key\n    this._memory[this.pointer + 200] = 128\n  }\n}\n\nBlake2b.prototype._realloc = function (size) {\n  wasm.memory.grow(Math.max(0, Math.ceil(Math.abs(size - this._memory.length) / 65536)))\n  this._memory = new Uint8Array(wasm.memory.buffer)\n}\n\nBlake2b.prototype.update = function (input) {\n  assert(this.finalized === false, 'Hash instance finalized')\n  assert(input instanceof Uint8Array, 'input must be Uint8Array or Buffer')\n\n  if (head + input.length > this._memory.length) this._realloc(head + input.length)\n  this._memory.set(input, head)\n  wasm.blake2b_update(this.pointer, head, head + input.length)\n  return this\n}\n\nBlake2b.prototype.digest = function (enc) {\n  assert(this.finalized === false, 'Hash instance finalized')\n  this.finalized = true\n\n  freeList.push(this.pointer)\n  wasm.blake2b_final(this.pointer)\n\n  if (!enc || enc === 'binary') {\n    return this._memory.slice(this.pointer + 128, this.pointer + 128 + this.digestLength)\n  }\n\n  if (typeof enc === 'string') {\n    return b4a.toString(this._memory, enc, this.pointer + 128, this.pointer + 128 + this.digestLength)\n  }\n\n  assert(enc instanceof Uint8Array && enc.length >= this.digestLength, 'input must be Uint8Array or Buffer')\n  for (var i = 0; i < this.digestLength; i++) {\n    enc[i] = this._memory[this.pointer + 128 + i]\n  }\n\n  return enc\n}\n\n// libsodium compat\nBlake2b.prototype.final = Blake2b.prototype.digest\n\nBlake2b.WASM = wasm\nBlake2b.SUPPORTED = typeof WebAssembly !== 'undefined'\n\nBlake2b.ready = function (cb) {\n  if (!cb) cb = noop\n  if (!wasmPromise) return cb(new Error('WebAssembly not supported'))\n  return wasmPromise.then(() => cb(), cb)\n}\n\nBlake2b.prototype.ready = Blake2b.ready\n\nBlake2b.prototype.getPartialHash = function () {\n  return this._memory.slice(this.pointer, this.pointer + 216);\n}\n\nBlake2b.prototype.setPartialHash = function (ph) {\n  this._memory.set(ph, this.pointer);\n}\n\nfunction noop () {}\n", "\nconst polyfill = require('fs')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexport function resolve() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : '/';\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexport function normalize(path) {\n  var isPathAbsolute = isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n\n  if (!path && !isPathAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexport function isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\nexport function join() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n}\n\n\n// path.relative(from, to)\n// posix version\nexport function relative(from, to) {\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\nexport var sep = '/';\nexport var delimiter = ':';\n\nexport function dirname(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\nexport function basename(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n\n\nexport function extname(path) {\n  return splitPath(path)[3];\n}\nexport default {\n  extname: extname,\n  basename: basename,\n  dirname: dirname,\n  sep: sep,\n  delimiter: delimiter,\n  relative: relative,\n  join: join,\n  isAbsolute: isAbsolute,\n  normalize: normalize,\n  resolve: resolve\n};\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b' ?\n    function (str, start, len) { return str.substr(start, len) } :\n    function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n", "\nconst polyfill = require('path')\n\nif (polyfill && polyfill.default) {\n    module.exports = polyfill.default\n    for (let k in polyfill) {\n        module.exports[k] = polyfill[k]\n    }\n} else if (polyfill)  {\n    module.exports = polyfill\n}\n\n\n", "/*\n * EJS Embedded JavaScript templates\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\n/**\n * Private utility functions\n * @module utils\n * @private\n */\n\n'use strict';\n\nvar regExpChars = /[|\\\\{}()[\\]^$+*?.]/g;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar hasOwn = function (obj, key) { return hasOwnProperty.apply(obj, [key]); };\n\n/**\n * Escape characters reserved in regular expressions.\n *\n * If `string` is `undefined` or `null`, the empty string is returned.\n *\n * @param {String} string Input string\n * @return {String} Escaped string\n * @static\n * @private\n */\nexports.escapeRegExpChars = function (string) {\n  // istanbul ignore if\n  if (!string) {\n    return '';\n  }\n  return String(string).replace(regExpChars, '\\\\$&');\n};\n\nvar _ENCODE_HTML_RULES = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&#34;',\n  \"'\": '&#39;'\n};\nvar _MATCH_HTML = /[&<>'\"]/g;\n\nfunction encode_char(c) {\n  return _ENCODE_HTML_RULES[c] || c;\n}\n\n/**\n * Stringified version of constants used by {@link module:utils.escapeXML}.\n *\n * It is used in the process of generating {@link ClientFunction}s.\n *\n * @readonly\n * @type {String}\n */\n\nvar escapeFuncStr =\n  'var _ENCODE_HTML_RULES = {\\n'\n+ '      \"&\": \"&amp;\"\\n'\n+ '    , \"<\": \"&lt;\"\\n'\n+ '    , \">\": \"&gt;\"\\n'\n+ '    , \\'\"\\': \"&#34;\"\\n'\n+ '    , \"\\'\": \"&#39;\"\\n'\n+ '    }\\n'\n+ '  , _MATCH_HTML = /[&<>\\'\"]/g;\\n'\n+ 'function encode_char(c) {\\n'\n+ '  return _ENCODE_HTML_RULES[c] || c;\\n'\n+ '};\\n';\n\n/**\n * Escape characters reserved in XML.\n *\n * If `markup` is `undefined` or `null`, the empty string is returned.\n *\n * @implements {EscapeCallback}\n * @param {String} markup Input string\n * @return {String} Escaped string\n * @static\n * @private\n */\n\nexports.escapeXML = function (markup) {\n  return markup == undefined\n    ? ''\n    : String(markup)\n      .replace(_MATCH_HTML, encode_char);\n};\nexports.escapeXML.toString = function () {\n  return Function.prototype.toString.call(this) + ';\\n' + escapeFuncStr;\n};\n\n/**\n * Naive copy of properties from one object to another.\n * Does not recurse into non-scalar properties\n * Does not check to see if the property has a value before copying\n *\n * @param  {Object} to   Destination object\n * @param  {Object} from Source object\n * @return {Object}      Destination object\n * @static\n * @private\n */\nexports.shallowCopy = function (to, from) {\n  from = from || {};\n  if ((to !== null) && (to !== undefined)) {\n    for (var p in from) {\n      if (!hasOwn(from, p)) {\n        continue;\n      }\n      if (p === '__proto__' || p === 'constructor') {\n        continue;\n      }\n      to[p] = from[p];\n    }\n  }\n  return to;\n};\n\n/**\n * Naive copy of a list of key names, from one object to another.\n * Only copies property if it is actually defined\n * Does not recurse into non-scalar properties\n *\n * @param  {Object} to   Destination object\n * @param  {Object} from Source object\n * @param  {Array} list List of properties to copy\n * @return {Object}      Destination object\n * @static\n * @private\n */\nexports.shallowCopyFromList = function (to, from, list) {\n  list = list || [];\n  from = from || {};\n  if ((to !== null) && (to !== undefined)) {\n    for (var i = 0; i < list.length; i++) {\n      var p = list[i];\n      if (typeof from[p] != 'undefined') {\n        if (!hasOwn(from, p)) {\n          continue;\n        }\n        if (p === '__proto__' || p === 'constructor') {\n          continue;\n        }\n        to[p] = from[p];\n      }\n    }\n  }\n  return to;\n};\n\n/**\n * Simple in-process cache implementation. Does not implement limits of any\n * sort.\n *\n * @implements {Cache}\n * @static\n * @private\n */\nexports.cache = {\n  _data: {},\n  set: function (key, val) {\n    this._data[key] = val;\n  },\n  get: function (key) {\n    return this._data[key];\n  },\n  remove: function (key) {\n    delete this._data[key];\n  },\n  reset: function () {\n    this._data = {};\n  }\n};\n\n/**\n * Transforms hyphen case variable into camel case.\n *\n * @param {String} string Hyphen case string\n * @return {String} Camel case string\n * @static\n * @private\n */\nexports.hyphenToCamel = function (str) {\n  return str.replace(/-[a-z]/g, function (match) { return match[1].toUpperCase(); });\n};\n\n/**\n * Returns a null-prototype object in runtimes that support it\n *\n * @return {Object} Object, prototype will be set to null where possible\n * @static\n * @private\n */\nexports.createNullProtoObjWherePossible = (function () {\n  if (typeof Object.create == 'function') {\n    return function () {\n      return Object.create(null);\n    };\n  }\n  if (!({__proto__: null} instanceof Object)) {\n    return function () {\n      return {__proto__: null};\n    };\n  }\n  // Not possible, just pass through\n  return function () {\n    return {};\n  };\n})();\n\n\n", "/*\n * EJS Embedded JavaScript templates\n * Copyright 2112 Matthew Eernisse (mde@fleegix.org)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n*/\n\n'use strict';\n\n/**\n * @file Embedded JavaScript templating engine. {@link http://ejs.co}\n * @author Matthew Eernisse <mde@fleegix.org>\n * @author Tiancheng \"Timothy\" Gu <timothygu99@gmail.com>\n * @project EJS\n * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}\n */\n\n/**\n * EJS internal functions.\n *\n * Technically this \"module\" lies in the same file as {@link module:ejs}, for\n * the sake of organization all the private functions re grouped into this\n * module.\n *\n * @module ejs-internal\n * @private\n */\n\n/**\n * Embedded JavaScript templating engine.\n *\n * @module ejs\n * @public\n */\n\n\nvar fs = require('fs');\nvar path = require('path');\nvar utils = require('./utils');\n\nvar scopeOptionWarned = false;\n/** @type {string} */\nvar _VERSION_STRING = require('../package.json').version;\nvar _DEFAULT_OPEN_DELIMITER = '<';\nvar _DEFAULT_CLOSE_DELIMITER = '>';\nvar _DEFAULT_DELIMITER = '%';\nvar _DEFAULT_LOCALS_NAME = 'locals';\nvar _NAME = 'ejs';\nvar _REGEX_STRING = '(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)';\nvar _OPTS_PASSABLE_WITH_DATA = ['delimiter', 'scope', 'context', 'debug', 'compileDebug',\n  'client', '_with', 'rmWhitespace', 'strict', 'filename', 'async'];\n// We don't allow 'cache' option to be passed in the data obj for\n// the normal `render` call, but this is where Express 2 & 3 put it\n// so we make an exception for `renderFile`\nvar _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat('cache');\nvar _BOM = /^\\uFEFF/;\nvar _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\n\n/**\n * EJS template function cache. This can be a LRU object from lru-cache NPM\n * module. By default, it is {@link module:utils.cache}, a simple in-process\n * cache that grows continuously.\n *\n * @type {Cache}\n */\n\nexports.cache = utils.cache;\n\n/**\n * Custom file loader. Useful for template preprocessing or restricting access\n * to a certain part of the filesystem.\n *\n * @type {fileLoader}\n */\n\nexports.fileLoader = fs.readFileSync;\n\n/**\n * Name of the object containing the locals.\n *\n * This variable is overridden by {@link Options}`.localsName` if it is not\n * `undefined`.\n *\n * @type {String}\n * @public\n */\n\nexports.localsName = _DEFAULT_LOCALS_NAME;\n\n/**\n * Promise implementation -- defaults to the native implementation if available\n * This is mostly just for testability\n *\n * @type {PromiseConstructorLike}\n * @public\n */\n\nexports.promiseImpl = (new Function('return this;'))().Promise;\n\n/**\n * Get the path to the included file from the parent file path and the\n * specified path.\n *\n * @param {String}  name     specified path\n * @param {String}  filename parent file path\n * @param {Boolean} [isDir=false] whether the parent file path is a directory\n * @return {String}\n */\nexports.resolveInclude = function(name, filename, isDir) {\n  var dirname = path.dirname;\n  var extname = path.extname;\n  var resolve = path.resolve;\n  var includePath = resolve(isDir ? filename : dirname(filename), name);\n  var ext = extname(name);\n  if (!ext) {\n    includePath += '.ejs';\n  }\n  return includePath;\n};\n\n/**\n * Try to resolve file path on multiple directories\n *\n * @param  {String}        name  specified path\n * @param  {Array<String>} paths list of possible parent directory paths\n * @return {String}\n */\nfunction resolvePaths(name, paths) {\n  var filePath;\n  if (paths.some(function (v) {\n    filePath = exports.resolveInclude(name, v, true);\n    return fs.existsSync(filePath);\n  })) {\n    return filePath;\n  }\n}\n\n/**\n * Get the path to the included file by Options\n *\n * @param  {String}  path    specified path\n * @param  {Options} options compilation options\n * @return {String}\n */\nfunction getIncludePath(path, options) {\n  var includePath;\n  var filePath;\n  var views = options.views;\n  var match = /^[A-Za-z]+:\\\\|^\\//.exec(path);\n\n  // Abs path\n  if (match && match.length) {\n    path = path.replace(/^\\/*/, '');\n    if (Array.isArray(options.root)) {\n      includePath = resolvePaths(path, options.root);\n    } else {\n      includePath = exports.resolveInclude(path, options.root || '/', true);\n    }\n  }\n  // Relative paths\n  else {\n    // Look relative to a passed filename first\n    if (options.filename) {\n      filePath = exports.resolveInclude(path, options.filename);\n      if (fs.existsSync(filePath)) {\n        includePath = filePath;\n      }\n    }\n    // Then look in any views directories\n    if (!includePath && Array.isArray(views)) {\n      includePath = resolvePaths(path, views);\n    }\n    if (!includePath && typeof options.includer !== 'function') {\n      throw new Error('Could not find the include file \"' +\n          options.escapeFunction(path) + '\"');\n    }\n  }\n  return includePath;\n}\n\n/**\n * Get the template from a string or a file, either compiled on-the-fly or\n * read from cache (if enabled), and cache the template if needed.\n *\n * If `template` is not set, the file specified in `options.filename` will be\n * read.\n *\n * If `options.cache` is true, this function reads the file from\n * `options.filename` so it must be set prior to calling this function.\n *\n * @memberof module:ejs-internal\n * @param {Options} options   compilation options\n * @param {String} [template] template source\n * @return {(TemplateFunction|ClientFunction)}\n * Depending on the value of `options.client`, either type might be returned.\n * @static\n */\n\nfunction handleCache(options, template) {\n  var func;\n  var filename = options.filename;\n  var hasTemplate = arguments.length > 1;\n\n  if (options.cache) {\n    if (!filename) {\n      throw new Error('cache option requires a filename');\n    }\n    func = exports.cache.get(filename);\n    if (func) {\n      return func;\n    }\n    if (!hasTemplate) {\n      template = fileLoader(filename).toString().replace(_BOM, '');\n    }\n  }\n  else if (!hasTemplate) {\n    // istanbul ignore if: should not happen at all\n    if (!filename) {\n      throw new Error('Internal EJS error: no file name or template '\n                    + 'provided');\n    }\n    template = fileLoader(filename).toString().replace(_BOM, '');\n  }\n  func = exports.compile(template, options);\n  if (options.cache) {\n    exports.cache.set(filename, func);\n  }\n  return func;\n}\n\n/**\n * Try calling handleCache with the given options and data and call the\n * callback with the result. If an error occurs, call the callback with\n * the error. Used by renderFile().\n *\n * @memberof module:ejs-internal\n * @param {Options} options    compilation options\n * @param {Object} data        template data\n * @param {RenderFileCallback} cb callback\n * @static\n */\n\nfunction tryHandleCache(options, data, cb) {\n  var result;\n  if (!cb) {\n    if (typeof exports.promiseImpl == 'function') {\n      return new exports.promiseImpl(function (resolve, reject) {\n        try {\n          result = handleCache(options)(data);\n          resolve(result);\n        }\n        catch (err) {\n          reject(err);\n        }\n      });\n    }\n    else {\n      throw new Error('Please provide a callback function');\n    }\n  }\n  else {\n    try {\n      result = handleCache(options)(data);\n    }\n    catch (err) {\n      return cb(err);\n    }\n\n    cb(null, result);\n  }\n}\n\n/**\n * fileLoader is independent\n *\n * @param {String} filePath ejs file path.\n * @return {String} The contents of the specified file.\n * @static\n */\n\nfunction fileLoader(filePath){\n  return exports.fileLoader(filePath);\n}\n\n/**\n * Get the template function.\n *\n * If `options.cache` is `true`, then the template is cached.\n *\n * @memberof module:ejs-internal\n * @param {String}  path    path for the specified file\n * @param {Options} options compilation options\n * @return {(TemplateFunction|ClientFunction)}\n * Depending on the value of `options.client`, either type might be returned\n * @static\n */\n\nfunction includeFile(path, options) {\n  var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);\n  opts.filename = getIncludePath(path, opts);\n  if (typeof options.includer === 'function') {\n    var includerResult = options.includer(path, opts.filename);\n    if (includerResult) {\n      if (includerResult.filename) {\n        opts.filename = includerResult.filename;\n      }\n      if (includerResult.template) {\n        return handleCache(opts, includerResult.template);\n      }\n    }\n  }\n  return handleCache(opts);\n}\n\n/**\n * Re-throw the given `err` in context to the `str` of ejs, `filename`, and\n * `lineno`.\n *\n * @implements {RethrowCallback}\n * @memberof module:ejs-internal\n * @param {Error}  err      Error object\n * @param {String} str      EJS source\n * @param {String} flnm     file name of the EJS file\n * @param {Number} lineno   line number of the error\n * @param {EscapeCallback} esc\n * @static\n */\n\nfunction rethrow(err, str, flnm, lineno, esc) {\n  var lines = str.split('\\n');\n  var start = Math.max(lineno - 3, 0);\n  var end = Math.min(lines.length, lineno + 3);\n  var filename = esc(flnm);\n  // Error context\n  var context = lines.slice(start, end).map(function (line, i){\n    var curr = i + start + 1;\n    return (curr == lineno ? ' >> ' : '    ')\n      + curr\n      + '| '\n      + line;\n  }).join('\\n');\n\n  // Alter exception message\n  err.path = filename;\n  err.message = (filename || 'ejs') + ':'\n    + lineno + '\\n'\n    + context + '\\n\\n'\n    + err.message;\n\n  throw err;\n}\n\nfunction stripSemi(str){\n  return str.replace(/;(\\s*$)/, '$1');\n}\n\n/**\n * Compile the given `str` of ejs into a template function.\n *\n * @param {String}  template EJS template\n *\n * @param {Options} [opts] compilation options\n *\n * @return {(TemplateFunction|ClientFunction)}\n * Depending on the value of `opts.client`, either type might be returned.\n * Note that the return type of the function also depends on the value of `opts.async`.\n * @public\n */\n\nexports.compile = function compile(template, opts) {\n  var templ;\n\n  // v1 compat\n  // 'scope' is 'context'\n  // FIXME: Remove this in a future version\n  if (opts && opts.scope) {\n    if (!scopeOptionWarned){\n      console.warn('`scope` option is deprecated and will be removed in EJS 3');\n      scopeOptionWarned = true;\n    }\n    if (!opts.context) {\n      opts.context = opts.scope;\n    }\n    delete opts.scope;\n  }\n  templ = new Template(template, opts);\n  return templ.compile();\n};\n\n/**\n * Render the given `template` of ejs.\n *\n * If you would like to include options but not data, you need to explicitly\n * call this function with `data` being an empty object or `null`.\n *\n * @param {String}   template EJS template\n * @param {Object}  [data={}] template data\n * @param {Options} [opts={}] compilation and rendering options\n * @return {(String|Promise<String>)}\n * Return value type depends on `opts.async`.\n * @public\n */\n\nexports.render = function (template, d, o) {\n  var data = d || utils.createNullProtoObjWherePossible();\n  var opts = o || utils.createNullProtoObjWherePossible();\n\n  // No options object -- if there are optiony names\n  // in the data, copy them to options\n  if (arguments.length == 2) {\n    utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);\n  }\n\n  return handleCache(opts, template)(data);\n};\n\n/**\n * Render an EJS file at the given `path` and callback `cb(err, str)`.\n *\n * If you would like to include options but not data, you need to explicitly\n * call this function with `data` being an empty object or `null`.\n *\n * @param {String}             path     path to the EJS file\n * @param {Object}            [data={}] template data\n * @param {Options}           [opts={}] compilation and rendering options\n * @param {RenderFileCallback} cb callback\n * @public\n */\n\nexports.renderFile = function () {\n  var args = Array.prototype.slice.call(arguments);\n  var filename = args.shift();\n  var cb;\n  var opts = {filename: filename};\n  var data;\n  var viewOpts;\n\n  // Do we have a callback?\n  if (typeof arguments[arguments.length - 1] == 'function') {\n    cb = args.pop();\n  }\n  // Do we have data/opts?\n  if (args.length) {\n    // Should always have data obj\n    data = args.shift();\n    // Normal passed opts (data obj + opts obj)\n    if (args.length) {\n      // Use shallowCopy so we don't pollute passed in opts obj with new vals\n      utils.shallowCopy(opts, args.pop());\n    }\n    // Special casing for Express (settings + opts-in-data)\n    else {\n      // Express 3 and 4\n      if (data.settings) {\n        // Pull a few things from known locations\n        if (data.settings.views) {\n          opts.views = data.settings.views;\n        }\n        if (data.settings['view cache']) {\n          opts.cache = true;\n        }\n        // Undocumented after Express 2, but still usable, esp. for\n        // items that are unsafe to be passed along with data, like `root`\n        viewOpts = data.settings['view options'];\n        if (viewOpts) {\n          utils.shallowCopy(opts, viewOpts);\n        }\n      }\n      // Express 2 and lower, values set in app.locals, or people who just\n      // want to pass options in their data. NOTE: These values will override\n      // anything previously set in settings  or settings['view options']\n      utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);\n    }\n    opts.filename = filename;\n  }\n  else {\n    data = utils.createNullProtoObjWherePossible();\n  }\n\n  return tryHandleCache(opts, data, cb);\n};\n\n/**\n * Clear intermediate JavaScript cache. Calls {@link Cache#reset}.\n * @public\n */\n\n/**\n * EJS template class\n * @public\n */\nexports.Template = Template;\n\nexports.clearCache = function () {\n  exports.cache.reset();\n};\n\nfunction Template(text, opts) {\n  opts = opts || utils.createNullProtoObjWherePossible();\n  var options = utils.createNullProtoObjWherePossible();\n  this.templateText = text;\n  /** @type {string | null} */\n  this.mode = null;\n  this.truncate = false;\n  this.currentLine = 1;\n  this.source = '';\n  options.client = opts.client || false;\n  options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;\n  options.compileDebug = opts.compileDebug !== false;\n  options.debug = !!opts.debug;\n  options.filename = opts.filename;\n  options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;\n  options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;\n  options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;\n  options.strict = opts.strict || false;\n  options.context = opts.context;\n  options.cache = opts.cache || false;\n  options.rmWhitespace = opts.rmWhitespace;\n  options.root = opts.root;\n  options.includer = opts.includer;\n  options.outputFunctionName = opts.outputFunctionName;\n  options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;\n  options.views = opts.views;\n  options.async = opts.async;\n  options.destructuredLocals = opts.destructuredLocals;\n  options.legacyInclude = typeof opts.legacyInclude != 'undefined' ? !!opts.legacyInclude : true;\n\n  if (options.strict) {\n    options._with = false;\n  }\n  else {\n    options._with = typeof opts._with != 'undefined' ? opts._with : true;\n  }\n\n  this.opts = options;\n\n  this.regex = this.createRegex();\n}\n\nTemplate.modes = {\n  EVAL: 'eval',\n  ESCAPED: 'escaped',\n  RAW: 'raw',\n  COMMENT: 'comment',\n  LITERAL: 'literal'\n};\n\nTemplate.prototype = {\n  createRegex: function () {\n    var str = _REGEX_STRING;\n    var delim = utils.escapeRegExpChars(this.opts.delimiter);\n    var open = utils.escapeRegExpChars(this.opts.openDelimiter);\n    var close = utils.escapeRegExpChars(this.opts.closeDelimiter);\n    str = str.replace(/%/g, delim)\n      .replace(/</g, open)\n      .replace(/>/g, close);\n    return new RegExp(str);\n  },\n\n  compile: function () {\n    /** @type {string} */\n    var src;\n    /** @type {ClientFunction} */\n    var fn;\n    var opts = this.opts;\n    var prepended = '';\n    var appended = '';\n    /** @type {EscapeCallback} */\n    var escapeFn = opts.escapeFunction;\n    /** @type {FunctionConstructor} */\n    var ctor;\n    /** @type {string} */\n    var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : 'undefined';\n\n    if (!this.source) {\n      this.generateSource();\n      prepended +=\n        '  var __output = \"\";\\n' +\n        '  function __append(s) { if (s !== undefined && s !== null) __output += s }\\n';\n      if (opts.outputFunctionName) {\n        if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {\n          throw new Error('outputFunctionName is not a valid JS identifier.');\n        }\n        prepended += '  var ' + opts.outputFunctionName + ' = __append;' + '\\n';\n      }\n      if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {\n        throw new Error('localsName is not a valid JS identifier.');\n      }\n      if (opts.destructuredLocals && opts.destructuredLocals.length) {\n        var destructuring = '  var __locals = (' + opts.localsName + ' || {}),\\n';\n        for (var i = 0; i < opts.destructuredLocals.length; i++) {\n          var name = opts.destructuredLocals[i];\n          if (!_JS_IDENTIFIER.test(name)) {\n            throw new Error('destructuredLocals[' + i + '] is not a valid JS identifier.');\n          }\n          if (i > 0) {\n            destructuring += ',\\n  ';\n          }\n          destructuring += name + ' = __locals.' + name;\n        }\n        prepended += destructuring + ';\\n';\n      }\n      if (opts._with !== false) {\n        prepended +=  '  with (' + opts.localsName + ' || {}) {' + '\\n';\n        appended += '  }' + '\\n';\n      }\n      appended += '  return __output;' + '\\n';\n      this.source = prepended + this.source + appended;\n    }\n\n    if (opts.compileDebug) {\n      src = 'var __line = 1' + '\\n'\n        + '  , __lines = ' + JSON.stringify(this.templateText) + '\\n'\n        + '  , __filename = ' + sanitizedFilename + ';' + '\\n'\n        + 'try {' + '\\n'\n        + this.source\n        + '} catch (e) {' + '\\n'\n        + '  rethrow(e, __lines, __filename, __line, escapeFn);' + '\\n'\n        + '}' + '\\n';\n    }\n    else {\n      src = this.source;\n    }\n\n    if (opts.client) {\n      src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\\n' + src;\n      if (opts.compileDebug) {\n        src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\\n' + src;\n      }\n    }\n\n    if (opts.strict) {\n      src = '\"use strict\";\\n' + src;\n    }\n    if (opts.debug) {\n      console.log(src);\n    }\n    if (opts.compileDebug && opts.filename) {\n      src = src + '\\n'\n        + '//# sourceURL=' + sanitizedFilename + '\\n';\n    }\n\n    try {\n      if (opts.async) {\n        // Have to use generated function for this, since in envs without support,\n        // it breaks in parsing\n        try {\n          ctor = (new Function('return (async function(){}).constructor;'))();\n        }\n        catch(e) {\n          if (e instanceof SyntaxError) {\n            throw new Error('This environment does not support async/await');\n          }\n          else {\n            throw e;\n          }\n        }\n      }\n      else {\n        ctor = Function;\n      }\n      fn = new ctor(opts.localsName + ', escapeFn, include, rethrow', src);\n    }\n    catch(e) {\n      // istanbul ignore else\n      if (e instanceof SyntaxError) {\n        if (opts.filename) {\n          e.message += ' in ' + opts.filename;\n        }\n        e.message += ' while compiling ejs\\n\\n';\n        e.message += 'If the above error is not helpful, you may want to try EJS-Lint:\\n';\n        e.message += 'https://github.com/RyanZim/EJS-Lint';\n        if (!opts.async) {\n          e.message += '\\n';\n          e.message += 'Or, if you meant to create an async function, pass `async: true` as an option.';\n        }\n      }\n      throw e;\n    }\n\n    // Return a callable function which will execute the function\n    // created by the source-code, with the passed data as locals\n    // Adds a local `include` function which allows full recursive include\n    var returnedFn = opts.client ? fn : function anonymous(data) {\n      var include = function (path, includeData) {\n        var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);\n        if (includeData) {\n          d = utils.shallowCopy(d, includeData);\n        }\n        return includeFile(path, opts)(d);\n      };\n      return fn.apply(opts.context,\n        [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]);\n    };\n    if (opts.filename && typeof Object.defineProperty === 'function') {\n      var filename = opts.filename;\n      var basename = path.basename(filename, path.extname(filename));\n      try {\n        Object.defineProperty(returnedFn, 'name', {\n          value: basename,\n          writable: false,\n          enumerable: false,\n          configurable: true\n        });\n      } catch (e) {/* ignore */}\n    }\n    return returnedFn;\n  },\n\n  generateSource: function () {\n    var opts = this.opts;\n\n    if (opts.rmWhitespace) {\n      // Have to use two separate replace here as `^` and `$` operators don't\n      // work well with `\\r` and empty lines don't work well with the `m` flag.\n      this.templateText =\n        this.templateText.replace(/[\\r\\n]+/g, '\\n').replace(/^\\s+|\\s+$/gm, '');\n    }\n\n    // Slurp spaces and tabs before <%_ and after _%>\n    this.templateText =\n      this.templateText.replace(/[ \\t]*<%_/gm, '<%_').replace(/_%>[ \\t]*/gm, '_%>');\n\n    var self = this;\n    var matches = this.parseTemplateText();\n    var d = this.opts.delimiter;\n    var o = this.opts.openDelimiter;\n    var c = this.opts.closeDelimiter;\n\n    if (matches && matches.length) {\n      matches.forEach(function (line, index) {\n        var closing;\n        // If this is an opening tag, check for closing tags\n        // FIXME: May end up with some false positives here\n        // Better to store modes as k/v with openDelimiter + delimiter as key\n        // Then this can simply check against the map\n        if ( line.indexOf(o + d) === 0        // If it is a tag\n          && line.indexOf(o + d + d) !== 0) { // and is not escaped\n          closing = matches[index + 2];\n          if (!(closing == d + c || closing == '-' + d + c || closing == '_' + d + c)) {\n            throw new Error('Could not find matching close tag for \"' + line + '\".');\n          }\n        }\n        self.scanLine(line);\n      });\n    }\n\n  },\n\n  parseTemplateText: function () {\n    var str = this.templateText;\n    var pat = this.regex;\n    var result = pat.exec(str);\n    var arr = [];\n    var firstPos;\n\n    while (result) {\n      firstPos = result.index;\n\n      if (firstPos !== 0) {\n        arr.push(str.substring(0, firstPos));\n        str = str.slice(firstPos);\n      }\n\n      arr.push(result[0]);\n      str = str.slice(result[0].length);\n      result = pat.exec(str);\n    }\n\n    if (str) {\n      arr.push(str);\n    }\n\n    return arr;\n  },\n\n  _addOutput: function (line) {\n    if (this.truncate) {\n      // Only replace single leading linebreak in the line after\n      // -%> tag -- this is the single, trailing linebreak\n      // after the tag that the truncation mode replaces\n      // Handle Win / Unix / old Mac linebreaks -- do the \\r\\n\n      // combo first in the regex-or\n      line = line.replace(/^(?:\\r\\n|\\r|\\n)/, '');\n      this.truncate = false;\n    }\n    if (!line) {\n      return line;\n    }\n\n    // Preserve literal slashes\n    line = line.replace(/\\\\/g, '\\\\\\\\');\n\n    // Convert linebreaks\n    line = line.replace(/\\n/g, '\\\\n');\n    line = line.replace(/\\r/g, '\\\\r');\n\n    // Escape double-quotes\n    // - this will be the delimiter during execution\n    line = line.replace(/\"/g, '\\\\\"');\n    this.source += '    ; __append(\"' + line + '\")' + '\\n';\n  },\n\n  scanLine: function (line) {\n    var self = this;\n    var d = this.opts.delimiter;\n    var o = this.opts.openDelimiter;\n    var c = this.opts.closeDelimiter;\n    var newLineCount = 0;\n\n    newLineCount = (line.split('\\n').length - 1);\n\n    switch (line) {\n    case o + d:\n    case o + d + '_':\n      this.mode = Template.modes.EVAL;\n      break;\n    case o + d + '=':\n      this.mode = Template.modes.ESCAPED;\n      break;\n    case o + d + '-':\n      this.mode = Template.modes.RAW;\n      break;\n    case o + d + '#':\n      this.mode = Template.modes.COMMENT;\n      break;\n    case o + d + d:\n      this.mode = Template.modes.LITERAL;\n      this.source += '    ; __append(\"' + line.replace(o + d + d, o + d) + '\")' + '\\n';\n      break;\n    case d + d + c:\n      this.mode = Template.modes.LITERAL;\n      this.source += '    ; __append(\"' + line.replace(d + d + c, d + c) + '\")' + '\\n';\n      break;\n    case d + c:\n    case '-' + d + c:\n    case '_' + d + c:\n      if (this.mode == Template.modes.LITERAL) {\n        this._addOutput(line);\n      }\n\n      this.mode = null;\n      this.truncate = line.indexOf('-') === 0 || line.indexOf('_') === 0;\n      break;\n    default:\n      // In script mode, depends on type of tag\n      if (this.mode) {\n        // If '//' is found without a line break, add a line break.\n        switch (this.mode) {\n        case Template.modes.EVAL:\n        case Template.modes.ESCAPED:\n        case Template.modes.RAW:\n          if (line.lastIndexOf('//') > line.lastIndexOf('\\n')) {\n            line += '\\n';\n          }\n        }\n        switch (this.mode) {\n        // Just executing code\n        case Template.modes.EVAL:\n          this.source += '    ; ' + line + '\\n';\n          break;\n          // Exec, esc, and output\n        case Template.modes.ESCAPED:\n          this.source += '    ; __append(escapeFn(' + stripSemi(line) + '))' + '\\n';\n          break;\n          // Exec and output\n        case Template.modes.RAW:\n          this.source += '    ; __append(' + stripSemi(line) + ')' + '\\n';\n          break;\n        case Template.modes.COMMENT:\n          // Do nothing\n          break;\n          // Literal <%% mode, append as raw output\n        case Template.modes.LITERAL:\n          this._addOutput(line);\n          break;\n        }\n      }\n      // In string mode, just add the output\n      else {\n        this._addOutput(line);\n      }\n    }\n\n    if (self.opts.compileDebug && newLineCount) {\n      this.currentLine += newLineCount;\n      this.source += '    ; __line = ' + this.currentLine + '\\n';\n    }\n  }\n};\n\n/**\n * Escape characters reserved in XML.\n *\n * This is simply an export of {@link module:utils.escapeXML}.\n *\n * If `markup` is `undefined` or `null`, the empty string is returned.\n *\n * @param {String} markup Input string\n * @return {String} Escaped string\n * @public\n * @func\n * */\nexports.escapeXML = utils.escapeXML;\n\n/**\n * Express.js support.\n *\n * This is an alias for {@link module:ejs.renderFile}, in order to support\n * Express.js out-of-the-box.\n *\n * @func\n */\n\nexports.__express = exports.renderFile;\n\n/**\n * Version of EJS.\n *\n * @readonly\n * @type {String}\n * @public\n */\n\nexports.VERSION = _VERSION_STRING;\n\n/**\n * Name for detection of EJS.\n *\n * @readonly\n * @type {String}\n * @public\n */\n\nexports.name = _NAME;\n\n/* istanbul ignore if */\nif (typeof window != 'undefined') {\n  window.ejs = exports;\n}\n", "/**\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\n *\n * @version 0.8.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2018\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var INPUT_ERROR = 'input is invalid type';\n  var FINALIZE_ERROR = 'finalize already called';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_SHA3_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n  var PADDING = [6, 1536, 393216, 100663296];\n  var SHIFT = [0, 8, 16, 24];\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\n    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\n    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\n    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\n    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n  var BITS = [224, 256, 384, 512];\n  var SHAKE_BITS = [128, 256];\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];\n  var CSHAKE_BYTEPAD = {\n    '128': 168,\n    '256': 136\n  };\n\n  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  var createOutputMethod = function (bits, padding, outputType) {\n    return function (message) {\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\n    };\n  };\n\n  var createShakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits) {\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n    };\n  };\n\n  var createCshakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits, n, s) {\n      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n    };\n  };\n\n  var createKmacOutputMethod = function (bits, padding, outputType) {\n    return function (key, message, outputBits, s) {\n      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n    };\n  };\n\n  var createOutputMethods = function (method, createMethod, bits, padding) {\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createMethod(bits, padding, type);\n    }\n    return method;\n  };\n\n  var createMethod = function (bits, padding) {\n    var method = createOutputMethod(bits, padding, 'hex');\n    method.create = function () {\n      return new Keccak(bits, padding, bits);\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    return createOutputMethods(method, createOutputMethod, bits, padding);\n  };\n\n  var createShakeMethod = function (bits, padding) {\n    var method = createShakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits) {\n      return new Keccak(bits, padding, outputBits);\n    };\n    method.update = function (message, outputBits) {\n      return method.create(outputBits).update(message);\n    };\n    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n  };\n\n  var createCshakeMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createCshakeOutputMethod(bits, padding, 'hex');\n    method.create = function (outputBits, n, s) {\n      if (!n && !s) {\n        return methods['shake' + bits].create(outputBits);\n      } else {\n        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n      }\n    };\n    method.update = function (message, outputBits, n, s) {\n      return method.create(outputBits, n, s).update(message);\n    };\n    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n  };\n\n  var createKmacMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createKmacOutputMethod(bits, padding, 'hex');\n    method.create = function (key, outputBits, s) {\n      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n    };\n    method.update = function (key, message, outputBits, s) {\n      return method.create(key, outputBits, s).update(message);\n    };\n    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n  };\n\n  var algorithms = [\n    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },\n    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },\n    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },\n    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }\n  ];\n\n  var methods = {}, methodNames = [];\n\n  for (var i = 0; i < algorithms.length; ++i) {\n    var algorithm = algorithms[i];\n    var bits = algorithm.bits;\n    for (var j = 0; j < bits.length; ++j) {\n      var methodName = algorithm.name + '_' + bits[j];\n      methodNames.push(methodName);\n      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n      if (algorithm.name !== 'sha3') {\n        var newMethodName = algorithm.name + bits[j];\n        methodNames.push(newMethodName);\n        methods[newMethodName] = methods[methodName];\n      }\n    }\n  }\n\n  function Keccak(bits, padding, outputBits) {\n    this.blocks = [];\n    this.s = [];\n    this.padding = padding;\n    this.outputBits = outputBits;\n    this.reset = true;\n    this.finalized = false;\n    this.block = 0;\n    this.start = 0;\n    this.blockCount = (1600 - (bits << 1)) >> 5;\n    this.byteCount = this.blockCount << 2;\n    this.outputBlocks = outputBits >> 5;\n    this.extraBytes = (outputBits & 31) >> 3;\n\n    for (var i = 0; i < 50; ++i) {\n      this.s[i] = 0;\n    }\n  }\n\n  Keccak.prototype.update = function (message) {\n    if (this.finalized) {\n      throw new Error(FINALIZE_ERROR);\n    }\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,\n      blockCount = this.blockCount, index = 0, s = this.s, i, code;\n\n    while (index < length) {\n      if (this.reset) {\n        this.reset = false;\n        blocks[0] = this.block;\n        for (i = 1; i < blockCount + 1; ++i) {\n          blocks[i] = 0;\n        }\n      }\n      if (notString) {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          code = message.charCodeAt(index);\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      if (i >= byteCount) {\n        this.start = i - byteCount;\n        this.block = blocks[blockCount];\n        for (i = 0; i < blockCount; ++i) {\n          s[i] ^= blocks[i];\n        }\n        f(s);\n        this.reset = true;\n      } else {\n        this.start = i;\n      }\n    }\n    return this;\n  };\n\n  Keccak.prototype.encode = function (x, right) {\n    var o = x & 255, n = 1;\n    var bytes = [o];\n    x = x >> 8;\n    o = x & 255;\n    while (o > 0) {\n      bytes.unshift(o);\n      x = x >> 8;\n      o = x & 255;\n      ++n;\n    }\n    if (right) {\n      bytes.push(n);\n    } else {\n      bytes.unshift(n);\n    }\n    this.update(bytes);\n    return bytes.length;\n  };\n\n  Keccak.prototype.encodeString = function (str) {\n    var notString, type = typeof str;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (str === null) {\n          throw new Error(INPUT_ERROR);\n        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {\n          str = new Uint8Array(str);\n        } else if (!Array.isArray(str)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {\n            throw new Error(INPUT_ERROR);\n          }\n        }\n      } else {\n        throw new Error(INPUT_ERROR);\n      }\n      notString = true;\n    }\n    var bytes = 0, length = str.length;\n    if (notString) {\n      bytes = length;\n    } else {\n      for (var i = 0; i < str.length; ++i) {\n        var code = str.charCodeAt(i);\n        if (code < 0x80) {\n          bytes += 1;\n        } else if (code < 0x800) {\n          bytes += 2;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes += 3;\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\n          bytes += 4;\n        }\n      }\n    }\n    bytes += this.encode(bytes * 8);\n    this.update(str);\n    return bytes;\n  };\n\n  Keccak.prototype.bytepad = function (strs, w) {\n    var bytes = this.encode(w);\n    for (var i = 0; i < strs.length; ++i) {\n      bytes += this.encodeString(strs[i]);\n    }\n    var paddingBytes = w - bytes % w;\n    var zeros = [];\n    zeros.length = paddingBytes;\n    this.update(zeros);\n    return this;\n  };\n\n  Keccak.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\n    blocks[i >> 2] |= this.padding[i & 3];\n    if (this.lastByteIndex === this.byteCount) {\n      blocks[0] = blocks[blockCount];\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n    blocks[blockCount - 1] |= 0x80000000;\n    for (i = 0; i < blockCount; ++i) {\n      s[i] ^= blocks[i];\n    }\n    f(s);\n  };\n\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var hex = '', block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        block = s[i];\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\n          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\n          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\n          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n        i = 0;\n      }\n    }\n    if (extraBytes) {\n      block = s[i];\n      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\n      if (extraBytes > 1) {\n        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\n      }\n      if (extraBytes > 2) {\n        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\n      }\n    }\n    return hex;\n  };\n\n  Keccak.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var bytes = this.outputBits >> 3;\n    var buffer;\n    if (extraBytes) {\n      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\n    } else {\n      buffer = new ArrayBuffer(bytes);\n    }\n    var array = new Uint32Array(buffer);\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        array[j] = s[i];\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      array[i] = s[i];\n      buffer = buffer.slice(0, bytes);\n    }\n    return buffer;\n  };\n\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\n    this.finalize();\n\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\n      extraBytes = this.extraBytes, i = 0, j = 0;\n    var array = [], offset, block;\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        offset = j << 2;\n        block = s[i];\n        array[offset] = block & 0xFF;\n        array[offset + 1] = (block >> 8) & 0xFF;\n        array[offset + 2] = (block >> 16) & 0xFF;\n        array[offset + 3] = (block >> 24) & 0xFF;\n      }\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n    if (extraBytes) {\n      offset = j << 2;\n      block = s[i];\n      array[offset] = block & 0xFF;\n      if (extraBytes > 1) {\n        array[offset + 1] = (block >> 8) & 0xFF;\n      }\n      if (extraBytes > 2) {\n        array[offset + 2] = (block >> 16) & 0xFF;\n      }\n    }\n    return array;\n  };\n\n  function Kmac(bits, padding, outputBits) {\n    Keccak.call(this, bits, padding, outputBits);\n  }\n\n  Kmac.prototype = new Keccak();\n\n  Kmac.prototype.finalize = function () {\n    this.encode(this.outputBits, true);\n    return Keccak.prototype.finalize.call(this);\n  };\n\n  var f = function (s) {\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\n      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\n      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\n      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n    for (n = 0; n < 48; n += 2) {\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n\n      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\n      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\n      s[0] ^= h;\n      s[1] ^= l;\n      s[10] ^= h;\n      s[11] ^= l;\n      s[20] ^= h;\n      s[21] ^= l;\n      s[30] ^= h;\n      s[31] ^= l;\n      s[40] ^= h;\n      s[41] ^= l;\n      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\n      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\n      s[2] ^= h;\n      s[3] ^= l;\n      s[12] ^= h;\n      s[13] ^= l;\n      s[22] ^= h;\n      s[23] ^= l;\n      s[32] ^= h;\n      s[33] ^= l;\n      s[42] ^= h;\n      s[43] ^= l;\n      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\n      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\n      s[4] ^= h;\n      s[5] ^= l;\n      s[14] ^= h;\n      s[15] ^= l;\n      s[24] ^= h;\n      s[25] ^= l;\n      s[34] ^= h;\n      s[35] ^= l;\n      s[44] ^= h;\n      s[45] ^= l;\n      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\n      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\n      s[6] ^= h;\n      s[7] ^= l;\n      s[16] ^= h;\n      s[17] ^= l;\n      s[26] ^= h;\n      s[27] ^= l;\n      s[36] ^= h;\n      s[37] ^= l;\n      s[46] ^= h;\n      s[47] ^= l;\n      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\n      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\n      s[8] ^= h;\n      s[9] ^= l;\n      s[18] ^= h;\n      s[19] ^= l;\n      s[28] ^= h;\n      s[29] ^= l;\n      s[38] ^= h;\n      s[39] ^= l;\n      s[48] ^= h;\n      s[49] ^= l;\n\n      b0 = s[0];\n      b1 = s[1];\n      b32 = (s[11] << 4) | (s[10] >>> 28);\n      b33 = (s[10] << 4) | (s[11] >>> 28);\n      b14 = (s[20] << 3) | (s[21] >>> 29);\n      b15 = (s[21] << 3) | (s[20] >>> 29);\n      b46 = (s[31] << 9) | (s[30] >>> 23);\n      b47 = (s[30] << 9) | (s[31] >>> 23);\n      b28 = (s[40] << 18) | (s[41] >>> 14);\n      b29 = (s[41] << 18) | (s[40] >>> 14);\n      b20 = (s[2] << 1) | (s[3] >>> 31);\n      b21 = (s[3] << 1) | (s[2] >>> 31);\n      b2 = (s[13] << 12) | (s[12] >>> 20);\n      b3 = (s[12] << 12) | (s[13] >>> 20);\n      b34 = (s[22] << 10) | (s[23] >>> 22);\n      b35 = (s[23] << 10) | (s[22] >>> 22);\n      b16 = (s[33] << 13) | (s[32] >>> 19);\n      b17 = (s[32] << 13) | (s[33] >>> 19);\n      b48 = (s[42] << 2) | (s[43] >>> 30);\n      b49 = (s[43] << 2) | (s[42] >>> 30);\n      b40 = (s[5] << 30) | (s[4] >>> 2);\n      b41 = (s[4] << 30) | (s[5] >>> 2);\n      b22 = (s[14] << 6) | (s[15] >>> 26);\n      b23 = (s[15] << 6) | (s[14] >>> 26);\n      b4 = (s[25] << 11) | (s[24] >>> 21);\n      b5 = (s[24] << 11) | (s[25] >>> 21);\n      b36 = (s[34] << 15) | (s[35] >>> 17);\n      b37 = (s[35] << 15) | (s[34] >>> 17);\n      b18 = (s[45] << 29) | (s[44] >>> 3);\n      b19 = (s[44] << 29) | (s[45] >>> 3);\n      b10 = (s[6] << 28) | (s[7] >>> 4);\n      b11 = (s[7] << 28) | (s[6] >>> 4);\n      b42 = (s[17] << 23) | (s[16] >>> 9);\n      b43 = (s[16] << 23) | (s[17] >>> 9);\n      b24 = (s[26] << 25) | (s[27] >>> 7);\n      b25 = (s[27] << 25) | (s[26] >>> 7);\n      b6 = (s[36] << 21) | (s[37] >>> 11);\n      b7 = (s[37] << 21) | (s[36] >>> 11);\n      b38 = (s[47] << 24) | (s[46] >>> 8);\n      b39 = (s[46] << 24) | (s[47] >>> 8);\n      b30 = (s[8] << 27) | (s[9] >>> 5);\n      b31 = (s[9] << 27) | (s[8] >>> 5);\n      b12 = (s[18] << 20) | (s[19] >>> 12);\n      b13 = (s[19] << 20) | (s[18] >>> 12);\n      b44 = (s[29] << 7) | (s[28] >>> 25);\n      b45 = (s[28] << 7) | (s[29] >>> 25);\n      b26 = (s[38] << 8) | (s[39] >>> 24);\n      b27 = (s[39] << 8) | (s[38] >>> 24);\n      b8 = (s[48] << 14) | (s[49] >>> 18);\n      b9 = (s[49] << 14) | (s[48] >>> 18);\n\n      s[0] = b0 ^ (~b2 & b4);\n      s[1] = b1 ^ (~b3 & b5);\n      s[10] = b10 ^ (~b12 & b14);\n      s[11] = b11 ^ (~b13 & b15);\n      s[20] = b20 ^ (~b22 & b24);\n      s[21] = b21 ^ (~b23 & b25);\n      s[30] = b30 ^ (~b32 & b34);\n      s[31] = b31 ^ (~b33 & b35);\n      s[40] = b40 ^ (~b42 & b44);\n      s[41] = b41 ^ (~b43 & b45);\n      s[2] = b2 ^ (~b4 & b6);\n      s[3] = b3 ^ (~b5 & b7);\n      s[12] = b12 ^ (~b14 & b16);\n      s[13] = b13 ^ (~b15 & b17);\n      s[22] = b22 ^ (~b24 & b26);\n      s[23] = b23 ^ (~b25 & b27);\n      s[32] = b32 ^ (~b34 & b36);\n      s[33] = b33 ^ (~b35 & b37);\n      s[42] = b42 ^ (~b44 & b46);\n      s[43] = b43 ^ (~b45 & b47);\n      s[4] = b4 ^ (~b6 & b8);\n      s[5] = b5 ^ (~b7 & b9);\n      s[14] = b14 ^ (~b16 & b18);\n      s[15] = b15 ^ (~b17 & b19);\n      s[24] = b24 ^ (~b26 & b28);\n      s[25] = b25 ^ (~b27 & b29);\n      s[34] = b34 ^ (~b36 & b38);\n      s[35] = b35 ^ (~b37 & b39);\n      s[44] = b44 ^ (~b46 & b48);\n      s[45] = b45 ^ (~b47 & b49);\n      s[6] = b6 ^ (~b8 & b0);\n      s[7] = b7 ^ (~b9 & b1);\n      s[16] = b16 ^ (~b18 & b10);\n      s[17] = b17 ^ (~b19 & b11);\n      s[26] = b26 ^ (~b28 & b20);\n      s[27] = b27 ^ (~b29 & b21);\n      s[36] = b36 ^ (~b38 & b30);\n      s[37] = b37 ^ (~b39 & b31);\n      s[46] = b46 ^ (~b48 & b40);\n      s[47] = b47 ^ (~b49 & b41);\n      s[8] = b8 ^ (~b0 & b2);\n      s[9] = b9 ^ (~b1 & b3);\n      s[18] = b18 ^ (~b10 & b12);\n      s[19] = b19 ^ (~b11 & b13);\n      s[28] = b28 ^ (~b20 & b22);\n      s[29] = b29 ^ (~b21 & b23);\n      s[38] = b38 ^ (~b30 & b32);\n      s[39] = b39 ^ (~b31 & b33);\n      s[48] = b48 ^ (~b40 & b42);\n      s[49] = b49 ^ (~b41 & b43);\n\n      s[0] ^= RC[n];\n      s[1] ^= RC[n + 1];\n    }\n  };\n\n  if (COMMON_JS) {\n    module.exports = methods;\n  } else {\n    for (i = 0; i < methodNames.length; ++i) {\n      root[methodNames[i]] = methods[methodNames[i]];\n    }\n    if (AMD) {\n      define(function () {\n        return methods;\n      });\n    }\n  }\n})();\n", "import { hash } from './hash';\nimport { Token, Header } from './jwz';\nimport { provingMethodGroth16AuthInstance } from './authGroth16';\nimport {\n  getProvingMethod,\n  ProofInputsPreparerHandlerFunc,\n  ProvingMethod,\n  ProvingMethodAlg,\n  registerProvingMethod,\n  ZKProof,\n  ProofData,\n} from './proving';\nimport { provingMethodGroth16AuthV2Instance } from './authV2Groth16';\n\nregisterProvingMethod(\n  provingMethodGroth16AuthInstance.methodAlg,\n  () => provingMethodGroth16AuthInstance,\n);\n\nregisterProvingMethod(\n  provingMethodGroth16AuthV2Instance.methodAlg,\n  () => provingMethodGroth16AuthV2Instance,\n);\n\nconst proving = {\n  registerProvingMethod,\n  getProvingMethod,\n  provingMethodGroth16AuthInstance,\n  provingMethodGroth16AuthV2Instance,\n};\n\nexport {\n  proving,\n  ProofInputsPreparerHandlerFunc,\n  ProvingMethod,\n  ProvingMethodAlg,\n  Token,\n  hash,\n  ZKProof,\n  ProofData,\n  Header,\n};\n", "import { fromBigEndian } from '@iden3/js-iden3-core';\nimport { poseidon } from '@iden3/js-crypto';\nimport { sha256 } from 'cross-sha256';\n\n// Q is the order of the integer field (Zq) that fits inside the SNARK.\nexport const qString =\n  '21888242871839275222246405745257275088548364400416034343698204186575808495617';\n\nexport function hash(message: Uint8Array): bigint {\n  // 1. sha256 hash\n  const hashBytes = Uint8Array.from(new sha256().update(message).digest());\n\n  // 2. swap hash before hashing\n  const bi = fromBigEndian(hashBytes.reverse());\n\n  let m = BigInt(0);\n  if (checkBigIntInField(bi)) {\n    m = bi;\n  } else {\n    m = bi % BigInt(qString);\n  }\n\n  return poseidon.hash([m]);\n}\n\n// checkBigIntInField checks if given *big.Int fits in a Field Q element\nexport function checkBigIntInField(a: bigint): boolean {\n  return a < BigInt(qString);\n}\n", null, null, null, null, null, null, null, null, null, "\nimport * as _Scalar  from \"./src/scalar.js\";\nexport const Scalar=_Scalar;\n\nexport {default as PolField} from \"./src/polfield.js\";\nexport {default as F1Field} from \"./src/f1field.js\";\nexport {default as F2Field} from \"./src/f2field.js\";\nexport {default as F3Field} from \"./src/f3field.js\";\n\nexport {default as ZqField} from \"./src/f1field.js\";\n\nexport {default as EC} from \"./src/ec.js\";\n\nexport {default as buildBn128} from \"./src/bn128.js\";\nexport {default as buildBls12381} from \"./src/bls12381.js\";\n\nimport * as _utils from \"./src/utils.js\";\nexport const utils = _utils;\nexport {default as ChaCha} from \"./src/chacha.js\";\n\nexport {default as BigBuffer} from \"./src/bigbuffer.js\";\n\nexport {getCurveFromR, getCurveFromQ, getCurveFromName} from \"./src/curves.js\";\n\n", "\n/* global BigInt */\nconst hexLen = [ 0, 1, 2, 2, 3, 3, 3, 3, 4 ,4 ,4 ,4 ,4 ,4 ,4 ,4];\n\nexport function fromString(s, radix) {\n    if ((!radix)||(radix==10)) {\n        return BigInt(s);\n    } else if (radix==16) {\n        if (s.slice(0,2) == \"0x\") {\n            return BigInt(s);\n        } else {\n            return BigInt(\"0x\"+s);\n        }\n    }\n}\n\nexport const e = fromString;\n\nexport function fromArray(a, radix) {\n    let acc =BigInt(0);\n    radix = BigInt(radix);\n    for (let i=0; i<a.length; i++) {\n        acc = acc*radix + BigInt(a[i]);\n    }\n    return acc;\n}\n\nexport function bitLength(a) {\n    const aS =a.toString(16);\n    return (aS.length-1)*4 +hexLen[parseInt(aS[0], 16)];\n}\n\nexport function isNegative(a) {\n    return BigInt(a) < BigInt(0);\n}\n\nexport function isZero(a) {\n    return !a;\n}\n\nexport function shiftLeft(a, n) {\n    return BigInt(a) << BigInt(n);\n}\n\nexport function shiftRight(a, n) {\n    return BigInt(a) >> BigInt(n);\n}\n\nexport const shl = shiftLeft;\nexport const shr = shiftRight;\n\nexport function isOdd(a) {\n    return (BigInt(a) & BigInt(1)) == BigInt(1);\n}\n\n\nexport function naf(n) {\n    let E = BigInt(n);\n    const res = [];\n    while (E) {\n        if (E & BigInt(1)) {\n            const z = 2 - Number(E % BigInt(4));\n            res.push( z );\n            E = E - BigInt(z);\n        } else {\n            res.push( 0 );\n        }\n        E = E >> BigInt(1);\n    }\n    return res;\n}\n\n\nexport function bits(n) {\n    let E = BigInt(n);\n    const res = [];\n    while (E) {\n        if (E & BigInt(1)) {\n            res.push(1);\n        } else {\n            res.push( 0 );\n        }\n        E = E >> BigInt(1);\n    }\n    return res;\n}\n\nexport function toNumber(s) {\n    if (s>BigInt(Number.MAX_SAFE_INTEGER )) {\n        throw new Error(\"Number too big\");\n    }\n    return Number(s);\n}\n\nexport function toArray(s, radix) {\n    const res = [];\n    let rem = BigInt(s);\n    radix = BigInt(radix);\n    while (rem) {\n        res.unshift( Number(rem % radix));\n        rem = rem / radix;\n    }\n    return res;\n}\n\n\nexport function add(a, b) {\n    return BigInt(a) + BigInt(b);\n}\n\nexport function sub(a, b) {\n    return BigInt(a) - BigInt(b);\n}\n\nexport function neg(a) {\n    return -BigInt(a);\n}\n\nexport function mul(a, b) {\n    return BigInt(a) * BigInt(b);\n}\n\nexport function square(a) {\n    return BigInt(a) * BigInt(a);\n}\n\nexport function pow(a, b) {\n    return BigInt(a) ** BigInt(b);\n}\n\nexport function exp(a, b) {\n    return BigInt(a) ** BigInt(b);\n}\n\nexport function abs(a) {\n    return BigInt(a) >= 0 ? BigInt(a) : -BigInt(a);\n}\n\nexport function div(a, b) {\n    return BigInt(a) / BigInt(b);\n}\n\nexport function mod(a, b) {\n    return BigInt(a) % BigInt(b);\n}\n\nexport function eq(a, b) {\n    return BigInt(a) == BigInt(b);\n}\n\nexport function neq(a, b) {\n    return BigInt(a) != BigInt(b);\n}\n\nexport function lt(a, b) {\n    return BigInt(a) < BigInt(b);\n}\n\nexport function gt(a, b) {\n    return BigInt(a) > BigInt(b);\n}\n\nexport function leq(a, b) {\n    return BigInt(a) <= BigInt(b);\n}\n\nexport function geq(a, b) {\n    return BigInt(a) >= BigInt(b);\n}\n\nexport function band(a, b) {\n    return BigInt(a) & BigInt(b);\n}\n\nexport function bor(a, b) {\n    return BigInt(a) | BigInt(b);\n}\n\nexport function bxor(a, b) {\n    return BigInt(a) ^ BigInt(b);\n}\n\nexport function land(a, b) {\n    return BigInt(a) && BigInt(b);\n}\n\nexport function lor(a, b) {\n    return BigInt(a) || BigInt(b);\n}\n\nexport function lnot(a) {\n    return !BigInt(a);\n}\n\n// Returns a buffer with Little Endian Representation\nexport function toRprLE(buff, o, e, n8) {\n    const s = \"0000000\" + e.toString(16);\n    const v = new Uint32Array(buff.buffer, o, n8/4);\n    const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;\n    for (let i=0; i<l; i++) v[i] = parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16);\n    for (let i=l; i<v.length; i++) v[i] = 0;\n    for (let i=v.length*4; i<n8; i++) buff[i] = toNumber(band(shiftRight(e, i*8), 0xFF));\n}\n\n// Returns a buffer with Big Endian Representation\nexport function toRprBE(buff, o, e, n8) {\n    const s = \"0000000\" + e.toString(16);\n    const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n    const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;\n    for (let i=0; i<l; i++) v.setUint32(n8-i*4 -4, parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16), false);\n    for (let i=0; i<n8/4-l; i++) v[i] = 0;\n}\n\n// Pases a buffer with Little Endian Representation\nexport function fromRprLE(buff, o, n8) {\n    n8 = n8 || buff.byteLength;\n    o = o || 0;\n    const v = new Uint32Array(buff.buffer, o, n8/4);\n    const a = new Array(n8/4);\n    v.forEach( (ch,i) => a[a.length-i-1] = ch.toString(16).padStart(8,\"0\") );\n    return fromString(a.join(\"\"), 16);\n}\n\n// Pases a buffer with Big Endian Representation\nexport function fromRprBE(buff, o, n8) {\n    n8 = n8 || buff.byteLength;\n    o = o || 0;\n    const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n    const a = new Array(n8/4);\n    for (let i=0; i<n8/4; i++) {\n        a[i] = v.getUint32(i*4, false).toString(16).padStart(8, \"0\");\n    }\n    return fromString(a.join(\"\"), 16);\n}\n\nexport function toString(a, radix) {\n    return a.toString(radix);\n}\n\nexport function toLEBuff(a) {\n    const buff = new Uint8Array(Math.floor((bitLength(a) - 1) / 8) +1);\n    toRprLE(buff, 0, a, buff.byteLength);\n    return buff;\n}\n\nexport const zero = e(0);\nexport const one = e(1);\n\n\n\n\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nexport default class PolField {\n    constructor (F) {\n        this.F = F;\n\n        let rem = F.sqrt_t;\n        let s = F.sqrt_s;\n\n        const five = this.F.add(this.F.add(this.F.two, this.F.two), this.F.one);\n\n        this.w = new Array(s+1);\n        this.wi = new Array(s+1);\n        this.w[s] = this.F.pow(five, rem);\n        this.wi[s] = this.F.inv(this.w[s]);\n\n        let n=s-1;\n        while (n>=0) {\n            this.w[n] = this.F.square(this.w[n+1]);\n            this.wi[n] = this.F.square(this.wi[n+1]);\n            n--;\n        }\n\n\n        this.roots = [];\n/*        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n    */\n        this._setRoots(15);\n    }\n\n    _setRoots(n) {\n        if (n > this.F.sqrt_s) n = this.s;\n        for (let i=n; (i>=0) && (!this.roots[i]); i--) {\n            let r = this.F.one;\n            const nroots = 1 << i;\n            const rootsi = new Array(nroots);\n            for (let j=0; j<nroots; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n            this.roots[i] = rootsi;\n        }\n    }\n\n    add(a, b) {\n        const m = Math.max(a.length, b.length);\n        const res = new Array(m);\n        for (let i=0; i<m; i++) {\n            res[i] = this.F.add(a[i] || this.F.zero, b[i] || this.F.zero);\n        }\n        return this.reduce(res);\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        const m = Math.max(a.length, b.length);\n        const res = new Array(m);\n        for (let i=0; i<m; i++) {\n            res[i] = this.F.sub(a[i] || this.F.zero, b[i] || this.F.zero);\n        }\n        return this.reduce(res);\n    }\n\n    mulScalar(p, b) {\n        if (this.F.eq(b, this.F.zero)) return [];\n        if (this.F.eq(b, this.F.one)) return p;\n        const res = new Array(p.length);\n        for (let i=0; i<p.length; i++) {\n            res[i] = this.F.mul(p[i], b);\n        }\n        return res;\n    }\n\n\n\n    mul(a, b) {\n        if (a.length == 0) return [];\n        if (b.length == 0) return [];\n        if (a.length == 1) return this.mulScalar(b, a[0]);\n        if (b.length == 1) return this.mulScalar(a, b[0]);\n\n        if (b.length > a.length) {\n            [b, a] = [a, b];\n        }\n\n        if ((b.length <= 2) || (b.length < log2(a.length))) {\n            return this.mulNormal(a,b);\n        } else {\n            return this.mulFFT(a,b);\n        }\n    }\n\n    mulNormal(a, b) {\n        let res = [];\n        for (let i=0; i<b.length; i++) {\n            res = this.add(res, this.scaleX(this.mulScalar(a, b[i]), i) );\n        }\n        return res;\n    }\n\n    mulFFT(a,b) {\n        const longestN = Math.max(a.length, b.length);\n        const bitsResult = log2(longestN-1)+2;\n        this._setRoots(bitsResult);\n\n        const m = 1 << bitsResult;\n        const ea = this.extend(a,m);\n        const eb = this.extend(b,m);\n\n        const ta = __fft(this, ea, bitsResult, 0, 1, false);\n        const tb = __fft(this, eb, bitsResult, 0, 1, false);\n\n        const tres = new Array(m);\n\n        for (let i=0; i<m; i++) {\n            tres[i] = this.F.mul(ta[i], tb[i]);\n        }\n\n        const res = __fft(this, tres, bitsResult, 0, 1, true);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return this.reduce(resn);\n    }\n\n\n\n    square(a) {\n        return this.mul(a,a);\n    }\n\n    scaleX(p, n) {\n        if (n==0) {\n            return p;\n        } else if (n>0) {\n            const z = new Array(n).fill(this.F.zero);\n            return z.concat(p);\n        } else {\n            if (-n >= p.length) return [];\n            return p.slice(-n);\n        }\n    }\n\n    eval2(p, x) {\n        let v = this.F.zero;\n        let ix = this.F.one;\n        for (let i=0; i<p.length; i++) {\n            v = this.F.add(v, this.F.mul(p[i], ix));\n            ix = this.F.mul(ix, x);\n        }\n        return v;\n    }\n\n    eval(p,x) {\n        const F = this.F;\n        if (p.length == 0) return F.zero;\n        const m = this._next2Power(p.length);\n        const ep = this.extend(p, m);\n\n        return _eval(ep, x, 0, 1, m);\n\n        function _eval(p, x, offset, step, n) {\n            if (n==1) return p[offset];\n            const newX = F.square(x);\n            const res= F.add(\n                _eval(p, newX, offset, step << 1, n >> 1),\n                F.mul(\n                    x,\n                    _eval(p, newX, offset+step , step << 1, n >> 1)));\n            return res;\n        }\n    }\n\n    lagrange(points) {\n        let roots = [this.F.one];\n        for (let i=0; i<points.length; i++) {\n            roots = this.mul(roots, [this.F.neg(points[i][0]), this.F.one]);\n        }\n\n        let sum = [];\n        for (let i=0; i<points.length; i++) {\n            let mpol = this.ruffini(roots, points[i][0]);\n            const factor =\n                this.F.mul(\n                    this.F.inv(this.eval(mpol, points[i][0])),\n                    points[i][1]);\n            mpol = this.mulScalar(mpol, factor);\n            sum = this.add(sum, mpol);\n        }\n        return sum;\n    }\n\n\n    fft(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        const res = __fft(this, ep, bits, 0, 1);\n        return res;\n    }\n\n    fft2(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        __bitReverse(ep, bits);\n        const res = __fft2(this, ep, bits);\n        return res;\n    }\n\n\n    ifft(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        const res =  __fft(this, ep, bits, 0, 1);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n\n    }\n\n\n    ifft2(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        __bitReverse(ep, bits);\n        const res =  __fft2(this, ep, bits, 0, 1);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n\n    }\n\n    _fft(pall, bits, offset, step) {\n\n        const n = 1 << bits;\n        if (n==1) {\n            return [ pall[offset] ];\n        }\n\n        const ndiv2 = n >> 1;\n        const p1 = this._fft(pall, bits-1, offset, step*2);\n        const p2 = this._fft(pall, bits-1, offset+step, step*2);\n\n        const out = new Array(n);\n\n        let m= this.F.one;\n        for (let i=0; i<ndiv2; i++) {\n            out[i] = this.F.add(p1[i], this.F.mul(m, p2[i]));\n            out[i+ndiv2] = this.F.sub(p1[i], this.F.mul(m, p2[i]));\n            m = this.F.mul(m, this.w[bits]);\n        }\n\n        return out;\n    }\n\n    extend(p, e) {\n        if (e == p.length) return p;\n        const z = new Array(e-p.length).fill(this.F.zero);\n\n        return p.concat(z);\n    }\n\n    reduce(p) {\n        if (p.length == 0) return p;\n        if (! this.F.eq(p[p.length-1], this.F.zero) ) return p;\n        let i=p.length-1;\n        while( i>0 && this.F.eq(p[i], this.F.zero) ) i--;\n        return p.slice(0, i+1);\n    }\n\n    eq(a, b) {\n        const pa = this.reduce(a);\n        const pb = this.reduce(b);\n\n        if (pa.length != pb.length) return false;\n        for (let i=0; i<pb.length; i++) {\n            if (!this.F.eq(pa[i], pb[i])) return false;\n        }\n\n        return true;\n    }\n\n    ruffini(p, r) {\n        const res = new Array(p.length-1);\n        res[res.length-1] = p[p.length-1];\n        for (let i = res.length-2; i>=0; i--) {\n            res[i] = this.F.add(this.F.mul(res[i+1], r), p[i+1]);\n        }\n        return res;\n    }\n\n    _next2Power(v) {\n        v--;\n        v |= v >> 1;\n        v |= v >> 2;\n        v |= v >> 4;\n        v |= v >> 8;\n        v |= v >> 16;\n        v++;\n        return v;\n    }\n\n    toString(p) {\n        const ap = this.normalize(p);\n        let S = \"\";\n        for (let i=ap.length-1; i>=0; i--) {\n            if (!this.F.eq(p[i], this.F.zero)) {\n                if (S!=\"\") S += \" + \";\n                S = S + p[i].toString(10);\n                if (i>0) {\n                    S = S + \"x\";\n                    if (i>1) {\n                        S = S + \"^\" +i;\n                    }\n                }\n            }\n        }\n        return S;\n    }\n\n    normalize(p) {\n        const res  = new Array(p.length);\n        for (let i=0; i<p.length; i++) {\n            res[i] = this.F.normalize(p[i]);\n        }\n        return res;\n    }\n\n\n    _reciprocal(p, bits) {\n        const k = 1 << bits;\n        if (k==1) {\n            return [ this.F.inv(p[0]) ];\n        }\n        const np = this.scaleX(p, -k/2);\n        const q = this._reciprocal(np, bits-1);\n        const a = this.scaleX(this.double(q), 3*k/2-2);\n        const b = this.mul( this.square(q), p);\n\n        return this.scaleX(this.sub(a,b),   -(k-2));\n    }\n\n    // divides x^m / v\n    _div2(m, v) {\n        const kbits = log2(v.length-1)+1;\n        const k = 1 << kbits;\n\n        const scaleV = k - v.length;\n\n        // rec = x^(k - 2) / v* x^scaleV =>\n        // rec = x^(k-2-scaleV)/ v\n        //\n        // res = x^m/v = x^(m + (2*k-2 - scaleV) - (2*k-2 - scaleV)) /v =>\n        // res = rec * x^(m - (2*k-2 - scaleV)) =>\n        // res = rec * x^(m - 2*k + 2 + scaleV)\n\n        const rec = this._reciprocal(this.scaleX(v, scaleV), kbits);\n        const res = this.scaleX(rec, m - 2*k + 2 + scaleV);\n\n        return res;\n    }\n\n    div(_u, _v) {\n        if (_u.length < _v.length) return [];\n        const kbits = log2(_v.length-1)+1;\n        const k = 1 << kbits;\n\n        const u = this.scaleX(_u, k-_v.length);\n        const v = this.scaleX(_v, k-_v.length);\n\n        const n = v.length-1;\n        let m = u.length-1;\n\n        const s = this._reciprocal(v, kbits);\n        let t;\n        if (m>2*n) {\n            t = this.sub(this.scaleX([this.F.one], 2*n), this.mul(s, v));\n        }\n\n        let q = [];\n        let rem = u;\n        let us, ut;\n        let finish = false;\n\n        while (!finish) {\n            us = this.mul(rem, s);\n            q = this.add(q, this.scaleX(us, -2*n));\n\n            if ( m > 2*n ) {\n                ut = this.mul(rem, t);\n                rem = this.scaleX(ut, -2*n);\n                m = rem.length-1;\n            } else {\n                finish = true;\n            }\n        }\n\n        return q;\n    }\n\n\n    // returns the ith nth-root of one\n    oneRoot(n, i) {\n        let nbits = log2(n-1)+1;\n        let res = this.F.one;\n        let r = i;\n\n        if(i>=n) {\n            throw new Error(\"Given 'i' should be lower than 'n'\");\n        }\n        else if (1<<nbits !== n) {\n            throw new Error(`Internal errlr: ${n} should equal ${1<<nbits}`);\n        }\n\n        while (r>0) {\n            if (r & 1 == 1) {\n                res = this.F.mul(res, this.w[nbits]);\n            }\n            r = r >> 1;\n            nbits --;\n        }\n        return res;\n    }\n\n    computeVanishingPolinomial(bits, t) {\n        const m = 1 << bits;\n        return this.F.sub(this.F.pow(t, m), this.F.one);\n    }\n\n    evaluateLagrangePolynomials(bits, t) {\n        const m= 1 << bits;\n        const tm = this.F.pow(t, m);\n        const u= new Array(m).fill(this.F.zero);\n        this._setRoots(bits);\n        const omega = this.w[bits];\n\n        if (this.F.eq(tm, this.F.one)) {\n            for (let i = 0; i < m; i++) {\n                if (this.F.eq(this.roots[bits][0],t)) { // i.e., t equals omega^i\n                    u[i] = this.F.one;\n                    return u;\n                }\n            }\n        }\n\n        const z = this.F.sub(tm, this.F.one);\n        //        let l = this.F.mul(z,  this.F.pow(this.F.twoinv, m));\n        let l = this.F.mul(z,  this.F.inv(this.F.e(m)));\n        for (let i = 0; i < m; i++) {\n            u[i] = this.F.mul(l, this.F.inv(this.F.sub(t,this.roots[bits][i])));\n            l = this.F.mul(l, omega);\n        }\n\n        return u;\n    }\n\n    log2(V) {\n        return log2(V);\n    }\n}\n\nfunction log2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction __fft(PF, pall, bits, offset, step) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[offset] ];\n    } else if (n==2) {\n        return [\n            PF.F.add(pall[offset], pall[offset + step]),\n            PF.F.sub(pall[offset], pall[offset + step])];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft(PF, pall, bits-1, offset, step*2);\n    const p2 = __fft(PF, pall, bits-1, offset+step, step*2);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.F.add(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n        out[i+ndiv2] = PF.F.sub(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n    }\n\n    return out;\n}\n\n\nfunction __fft2(PF, pall, bits) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[0] ];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft2(PF, pall.slice(0, ndiv2), bits-1);\n    const p2 = __fft2(PF, pall.slice(ndiv2), bits-1);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.F.add(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n        out[i+ndiv2] = PF.F.sub(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n    }\n\n    return out;\n}\n\nconst _revTable = [];\nfor (let i=0; i<256; i++) {\n    _revTable[i] = _revSlow(i, 8);\n}\n\nfunction _revSlow(idx, bits) {\n    let res =0;\n    let a = idx;\n    for (let i=0; i<bits; i++) {\n        res <<= 1;\n        res = res | (a &1);\n        a >>=1;\n    }\n    return res;\n}\n\nfunction rev(idx, bits) {\n    return (\n        _revTable[idx >>> 24] |\n        (_revTable[(idx >>> 16) & 0xFF] << 8) |\n        (_revTable[(idx >>> 8) & 0xFF] << 16) |\n        (_revTable[idx & 0xFF] << 24)\n    ) >>> (32-bits);\n}\n\nfunction __bitReverse(p, bits) {\n    for (let k=0; k<p.length; k++) {\n        const r = rev(k, bits);\n        if (r>k) {\n            const tmp= p[k];\n            p[k] = p[r];\n            p[r] = tmp;\n        }\n    }\n\n}\n\n\n", "/* global BigInt */\nimport * as Scalar from \"./scalar.js\";\nimport * as futils from \"./futils.js\";\nimport buildSqrt from \"./fsqrt.js\";\nimport {getRandomBytes} from \"./random.js\";\nimport FFFT from \"./fft.js\";\n\nexport default class ZqField {\n    constructor(p) {\n        this.type=\"F1\";\n        this.one = BigInt(1);\n        this.zero = BigInt(0);\n        this.p = BigInt(p);\n        this.m = 1;\n        this.negone = this.p-this.one;\n        this.two = BigInt(2);\n        this.half = this.p >> this.one;\n        this.bitLength = Scalar.bitLength(this.p);\n        this.mask = (this.one << BigInt(this.bitLength)) - this.one;\n\n        this.n64 = Math.floor((this.bitLength - 1) / 64)+1;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n        this.R = this.e(this.one << BigInt(this.n64*64));\n        this.Ri = this.inv(this.R);\n\n        const e = this.negone >> this.one;\n        this.nqr = this.two;\n        let r = this.pow(this.nqr, e);\n        while (!this.eq(r, this.negone)) {\n            this.nqr = this.nqr + this.one;\n            r = this.pow(this.nqr, e);\n        }\n\n\n        this.s = 0;\n        this.t = this.negone;\n\n        while ((this.t & this.one) == this.zero) {\n            this.s = this.s + 1;\n            this.t = this.t >> this.one;\n        }\n\n        this.nqr_to_t = this.pow(this.nqr, this.t);\n\n        buildSqrt(this);\n\n        this.FFT = new FFFT(this, this, this.mul.bind(this));\n\n        this.fft = this.FFT.fft.bind(this.FFT);\n        this.ifft = this.FFT.ifft.bind(this.FFT);\n        this.w = this.FFT.w;\n        this.wi = this.FFT.wi; \n    \n        this.shift = this.square(this.nqr);\n        this.k = this.exp(this.nqr, 2**this.s);\n    }\n\n    e(a,b) {\n        let res;\n        if (!b) {\n            res = BigInt(a);\n        } else if (b==16) {\n            res = BigInt(\"0x\"+a);\n        }\n        if (res < 0) {\n            let nres = -res;\n            if (nres >= this.p) nres = nres % this.p;\n            return this.p - nres;\n        } else {\n            return (res>= this.p) ? res%this.p : res;\n        }\n\n    }\n\n    add(a, b) {\n        const res = a + b;\n        return res >= this.p ? res-this.p : res;\n    }\n\n    sub(a, b) {\n        return (a >= b) ? a-b : this.p-b+a;\n    }\n\n    neg(a) {\n        return a ? this.p-a : a;\n    }\n\n    mul(a, b) {\n        return (a*b)%this.p;\n    }\n\n    mulScalar(base, s) {\n        return (base * this.e(s)) % this.p;\n    }\n\n    square(a) {\n        return (a*a) % this.p;\n    }\n\n    eq(a, b) {\n        return a==b;\n    }\n\n    neq(a, b) {\n        return a!=b;\n    }\n\n    lt(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa < bb;\n    }\n\n    gt(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa > bb;\n    }\n\n    leq(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa <= bb;\n    }\n\n    geq(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa >= bb;\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    idiv(a, b) {\n        if (!b) throw new Error(\"Division by zero\");\n        return a / b;\n    }\n\n    inv(a) {\n        if (!a) throw new Error(\"Division by zero\");\n\n        let t = this.zero;\n        let r = this.p;\n        let newt = this.one;\n        let newr = a % this.p;\n        while (newr) {\n            let q = r/newr;\n            [t, newt] = [newt, t-q*newt];\n            [r, newr] = [newr, r-q*newr];\n        }\n        if (t<this.zero) t += this.p;\n        return t;\n    }\n\n    mod(a, b) {\n        return a % b;\n    }\n\n    pow(b, e) {\n        return futils.exp(this, b, e);\n    }\n\n    exp(b, e) {\n        return futils.exp(this, b, e);\n    }\n\n    band(a, b) {\n        const res =  ((a & b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bor(a, b) {\n        const res =  ((a | b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bxor(a, b) {\n        const res =  ((a ^ b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bnot(a) {\n        const res = a ^ this.mask;\n        return res >= this.p ? res-this.p : res;\n    }\n\n    shl(a, b) {\n        if (Number(b) < this.bitLength) {\n            const res = (a << b) & this.mask;\n            return res >= this.p ? res-this.p : res;\n        } else {\n            const nb = this.p - b;\n            if (Number(nb) < this.bitLength) {\n                return a >> nb;\n            } else {\n                return this.zero;\n            }\n        }\n    }\n\n    shr(a, b) {\n        if (Number(b) < this.bitLength) {\n            return a >> b;\n        } else {\n            const nb = this.p - b;\n            if (Number(nb) < this.bitLength) {\n                const res = (a << nb) & this.mask;\n                return res >= this.p ? res-this.p : res;\n            } else {\n                return 0;\n            }\n        }\n    }\n\n    land(a, b) {\n        return (a && b) ? this.one : this.zero;\n    }\n\n    lor(a, b) {\n        return (a || b) ? this.one : this.zero;\n    }\n\n    lnot(a) {\n        return (a) ? this.zero : this.one;\n    }\n\n    sqrt_old(n) {\n\n        if (n == this.zero) return this.zero;\n\n        // Test that have solution\n        const res = this.pow(n, this.negone >> this.one);\n        if ( res != this.one ) return null;\n\n        let m = this.s;\n        let c = this.nqr_to_t;\n        let t = this.pow(n, this.t);\n        let r = this.pow(n, this.add(this.t, this.one) >> this.one );\n\n        while ( t != this.one ) {\n            let sq = this.square(t);\n            let i = 1;\n            while (sq != this.one ) {\n                i++;\n                sq = this.square(sq);\n            }\n\n            // b = c ^ m-i-1\n            let b = c;\n            for (let j=0; j< m-i-1; j ++) b = this.square(b);\n\n            m = i;\n            c = this.square(b);\n            t = this.mul(t, c);\n            r = this.mul(r, b);\n        }\n\n        if (r > (this.p >> this.one)) {\n            r = this.neg(r);\n        }\n\n        return r;\n    }\n\n    normalize(a, b) {\n        a = BigInt(a,b);\n        if (a < 0) {\n            let na = -a;\n            if (na >= this.p) na = na % this.p;\n            return this.p - na;\n        } else {\n            return (a>= this.p) ? a%this.p : a;\n        }\n    }\n\n    random() {\n        const nBytes = (this.bitLength*2 / 8);\n        let res =this.zero;\n        for (let i=0; i<nBytes; i++) {\n            res = (res << BigInt(8)) + BigInt(getRandomBytes(1)[0]);\n        }\n        return res % this.p;\n    }\n\n    toString(a, base) {\n        base = base || 10;\n        let vs;\n        if ((a > this.half)&&(base == 10)) {\n            const v = this.p-a;\n            vs = \"-\"+v.toString(base);\n        } else {\n            vs = a.toString(base);\n        }\n        return vs;\n    }\n\n    isZero(a) {\n        return a == this.zero;\n    }\n\n    fromRng(rng) {\n        let v;\n        do {\n            v=this.zero;\n            for (let i=0; i<this.n64; i++) {\n                v += rng.nextU64() << BigInt(64 *i);\n            }\n            v &= this.mask;\n        } while (v >= this.p);\n        v = (v * this.Ri) % this.p;   // Convert from montgomery\n        return v;\n    }\n\n    fft(a) {\n        return this.FFT.fft(a);\n    }\n\n    ifft(a) {\n        return this.FFT.ifft(a);\n    }\n\n    // Returns a buffer with Little Endian Representation\n    toRprLE(buff, o, e) {\n        Scalar.toRprLE(buff, o, e, this.n64*8);\n    }\n\n    // Returns a buffer with Big Endian Representation\n    toRprBE(buff, o, e) {\n        Scalar.toRprBE(buff, o, e, this.n64*8);\n    }\n\n    // Returns a buffer with Big Endian Montgomery Representation\n    toRprBEM(buff, o, e) {\n        return this.toRprBE(buff, o, this.mul(this.R, e));\n    }\n\n    toRprLEM(buff, o, e) {\n        return this.toRprLE(buff, o, this.mul(this.R, e));\n    }\n\n\n    // Pases a buffer with Little Endian Representation\n    fromRprLE(buff, o) {\n        return Scalar.fromRprLE(buff, o, this.n8);\n    }\n\n    // Pases a buffer with Big Endian Representation\n    fromRprBE(buff, o) {\n        return Scalar.fromRprBE(buff, o, this.n8);\n    }\n\n    fromRprLEM(buff, o) {\n        return this.mul(this.fromRprLE(buff, o), this.Ri);\n    }\n\n    fromRprBEM(buff, o) {\n        return this.mul(this.fromRprBE(buff, o), this.Ri);\n    }\n\n    toObject(a) {\n        return a;\n    }\n}", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as Scalar from \"./scalar.js\";\n\n\nexport function mulScalar(F, base, e) {\n    let res;\n\n    if (Scalar.isZero(e)) return F.zero;\n\n    const n = Scalar.naf(e);\n\n    if (n[n.length-1] == 1) {\n        res = base;\n    } else if (n[n.length-1] == -1) {\n        res = F.neg(base);\n    } else {\n        throw new Error(\"invlaud NAF\");\n    }\n\n    for (let i=n.length-2; i>=0; i--) {\n\n        res = F.double(res);\n\n        if (n[i] == 1) {\n            res = F.add(res, base);\n        } else if (n[i] == -1) {\n            res = F.sub(res, base);\n        }\n    }\n\n    return res;\n}\n\n\n/*\nexports.mulScalar = (F, base, e) =>{\n    let res = F.zero;\n    let rem = bigInt(e);\n    let exp = base;\n\n    while (! rem.eq(bigInt.zero)) {\n        if (rem.and(bigInt.one).eq(bigInt.one)) {\n            res = F.add(res, exp);\n        }\n        exp = F.double(exp);\n        rem = rem.shiftRight(1);\n    }\n\n    return res;\n};\n*/\n\n\nexport function exp(F, base, e) {\n\n    if (Scalar.isZero(e)) return F.one;\n\n    const n = Scalar.bits(e);\n\n    if (n.length==0) return F.one;\n\n    let res = base;\n\n    for (let i=n.length-2; i>=0; i--) {\n\n        res = F.square(res);\n\n        if (n[i]) {\n            res = F.mul(res, base);\n        }\n    }\n\n    return res;\n}\n\n\n", "import * as Scalar from \"./scalar.js\";\n// Check here: https://eprint.iacr.org/2012/685.pdf\n\nexport default function buildSqrt (F) {\n    if ((F.m % 2) == 1) {\n        if (Scalar.eq(Scalar.mod(F.p, 4), 1 )) {\n            if (Scalar.eq(Scalar.mod(F.p, 8), 1 )) {\n                if (Scalar.eq(Scalar.mod(F.p, 16), 1 )) {\n                    // alg7_muller(F);\n                    alg5_tonelliShanks(F);\n                } else if (Scalar.eq(Scalar.mod(F.p, 16), 9 )) {\n                    alg4_kong(F);\n                } else {\n                    throw new Error(\"Field withot sqrt\");\n                }\n            } else if (Scalar.eq(Scalar.mod(F.p, 8), 5 )) {\n                alg3_atkin(F);\n            } else {\n                throw new Error(\"Field withot sqrt\");\n            }\n        } else if (Scalar.eq(Scalar.mod(F.p, 4), 3 )) {\n            alg2_shanks(F);\n        }\n    } else {\n        const pm2mod4 = Scalar.mod(Scalar.pow(F.p, F.m/2), 4);\n        if (pm2mod4 == 1) {\n            alg10_adj(F);\n        } else if (pm2mod4 == 3) {\n            alg9_adj(F);\n        } else {\n            alg8_complex(F);\n        }\n\n    }\n}\n\n\nfunction alg5_tonelliShanks(F) {\n    F.sqrt_q = Scalar.pow(F.p, F.m);\n\n    F.sqrt_s = 0;\n    F.sqrt_t = Scalar.sub(F.sqrt_q, 1);\n\n    while (!Scalar.isOdd(F.sqrt_t)) {\n        F.sqrt_s = F.sqrt_s + 1;\n        F.sqrt_t = Scalar.div(F.sqrt_t, 2);\n    }\n\n    let c0 = F.one;\n\n    while (F.eq(c0, F.one)) {\n        const c = F.random();\n        F.sqrt_z = F.pow(c, F.sqrt_t);\n        c0 = F.pow(F.sqrt_z, 2 ** (F.sqrt_s-1) );\n    }\n\n    F.sqrt_tm1d2 = Scalar.div(Scalar.sub(F.sqrt_t, 1),2);\n\n    F.sqrt = function(a) {\n        const F=this;\n        if (F.isZero(a)) return F.zero;\n        let w = F.pow(a, F.sqrt_tm1d2);\n        const a0 = F.pow( F.mul(F.square(w), a), 2 ** (F.sqrt_s-1) );\n        if (F.eq(a0, F.negone)) return null;\n\n        let v = F.sqrt_s;\n        let x = F.mul(a, w);\n        let b = F.mul(x, w);\n        let z = F.sqrt_z;\n        while (!F.eq(b, F.one)) {\n            let b2k = F.square(b);\n            let k=1;\n            while (!F.eq(b2k, F.one)) {\n                b2k = F.square(b2k);\n                k++;\n            }\n\n            w = z;\n            for (let i=0; i<v-k-1; i++) {\n                w = F.square(w);\n            }\n            z = F.square(w);\n            b = F.mul(b, z);\n            x = F.mul(x, w);\n            v = k;\n        }\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\nfunction alg4_kong(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 4 not implemented\");\n    };\n}\n\nfunction alg3_atkin(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 3 not implemented\");\n    };\n}\n\nfunction alg2_shanks(F) {\n\n    F.sqrt_q = Scalar.pow(F.p, F.m);\n    F.sqrt_e1 = Scalar.div( Scalar.sub(F.sqrt_q, 3) , 4);\n\n    F.sqrt = function(a) {\n        if (this.isZero(a)) return this.zero;\n\n        // Test that have solution\n        const a1 = this.pow(a, this.sqrt_e1);\n\n        const a0 = this.mul(this.square(a1), a);\n\n        if ( this.eq(a0, this.negone) ) return null;\n\n        const x = this.mul(a1, a);\n\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\nfunction alg10_adj(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 10 not implemented\");\n    };\n}\n\nfunction alg9_adj(F) {\n    F.sqrt_q = Scalar.pow(F.p, F.m/2);\n    F.sqrt_e34 = Scalar.div( Scalar.sub(F.sqrt_q, 3) , 4);\n    F.sqrt_e12 = Scalar.div( Scalar.sub(F.sqrt_q, 1) , 2);\n\n    F.frobenius = function(n, x) {\n        if ((n%2) == 1) {\n            return F.conjugate(x);\n        } else {\n            return x;\n        }\n    };\n\n    F.sqrt = function(a) {\n        const F = this;\n        const a1 = F.pow(a, F.sqrt_e34);\n        const alfa = F.mul(F.square(a1), a);\n        const a0 = F.mul(F.frobenius(1, alfa), alfa);\n        if (F.eq(a0, F.negone)) return null;\n        const x0 = F.mul(a1, a);\n        let x;\n        if (F.eq(alfa, F.negone)) {\n            x = F.mul(x0, [F.F.zero, F.F.one]);\n        } else {\n            const b = F.pow(F.add(F.one, alfa), F.sqrt_e12);\n            x = F.mul(b, x0);\n        }\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\n\nfunction alg8_complex(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 8 not implemented\");\n    };\n}\n", "import ChaCha from \"./chacha.js\";\nimport crypto from \"crypto\";\n\nexport function getRandomBytes(n) {\n    let array = new Uint8Array(n);\n    if (process.browser) { // Browser\n        if (typeof globalThis.crypto !== \"undefined\") { // Supported\n            globalThis.crypto.getRandomValues(array);\n        } else { // fallback\n            for (let i=0; i<n; i++) {\n                array[i] = (Math.random()*4294967296)>>>0;\n            }\n        }\n    }\n    else { // NodeJS\n        crypto.randomFillSync(array);\n    }\n    return array;\n}\n\nexport function getRandomSeed() {\n    const arr = getRandomBytes(32);\n    const arrV = new Uint32Array(arr.buffer);\n    const seed = [];\n    for (let i=0; i<8; i++) {\n        seed.push(arrV[i]);\n    }\n    return seed;\n}\n\nlet threadRng = null;\n\nexport function getThreadRng() {\n    if (threadRng) return threadRng;\n    threadRng = new ChaCha(getRandomSeed());\n    return threadRng;\n}\n", "\n\nimport * as Scalar from \"./scalar.js\";\n\n\nfunction quarterRound(st, a, b, c, d) {\n\n    st[a] = (st[a] + st[b]) >>> 0;\n    st[d] = (st[d] ^ st[a]) >>> 0;\n    st[d] = ((st[d] << 16) | ((st[d]>>>16) & 0xFFFF)) >>> 0;\n\n    st[c] = (st[c] + st[d]) >>> 0;\n    st[b] = (st[b] ^ st[c]) >>> 0;\n    st[b] = ((st[b] << 12) | ((st[b]>>>20) & 0xFFF)) >>> 0;\n\n    st[a] = (st[a] + st[b]) >>> 0;\n    st[d] = (st[d] ^ st[a]) >>> 0;\n    st[d] = ((st[d] << 8) | ((st[d]>>>24) & 0xFF)) >>> 0;\n\n    st[c] = (st[c] + st[d]) >>> 0;\n    st[b] = (st[b] ^ st[c]) >>> 0;\n    st[b] = ((st[b] << 7) | ((st[b]>>>25) & 0x7F)) >>> 0;\n}\n\nfunction doubleRound(st) {\n    quarterRound(st, 0, 4, 8,12);\n    quarterRound(st, 1, 5, 9,13);\n    quarterRound(st, 2, 6,10,14);\n    quarterRound(st, 3, 7,11,15);\n\n    quarterRound(st, 0, 5,10,15);\n    quarterRound(st, 1, 6,11,12);\n    quarterRound(st, 2, 7, 8,13);\n    quarterRound(st, 3, 4, 9,14);\n}\n\nexport default class ChaCha {\n\n    constructor(seed) {\n        seed = seed || [0,0,0,0,0,0,0,0];\n        this.state = [\n            0x61707865,\n            0x3320646E,\n            0x79622D32,\n            0x6B206574,\n            seed[0],\n            seed[1],\n            seed[2],\n            seed[3],\n            seed[4],\n            seed[5],\n            seed[6],\n            seed[7],\n            0,\n            0,\n            0,\n            0\n        ];\n        this.idx = 16;\n        this.buff = new Array(16);\n    }\n\n    nextU32() {\n        if (this.idx == 16) this.update();\n        return this.buff[this.idx++];\n    }\n\n    nextU64() {\n        return Scalar.add(Scalar.mul(this.nextU32(), 0x100000000), this.nextU32());\n    }\n\n    nextBool() {\n        return (this.nextU32() & 1) == 1;\n    }\n\n    update() {\n        // Copy the state\n        for (let i=0; i<16; i++) this.buff[i] = this.state[i];\n\n        // Apply the rounds\n        for (let i=0; i<10; i++) doubleRound(this.buff);\n\n        // Add to the initial\n        for (let i=0; i<16; i++) this.buff[i] = (this.buff[i] + this.state[i]) >>> 0;\n\n        this.idx = 0;\n\n        this.state[12] = (this.state[12] + 1) >>> 0;\n        if (this.state[12] != 0) return;\n        this.state[13] = (this.state[13] + 1) >>> 0;\n        if (this.state[13] != 0) return;\n        this.state[14] = (this.state[14] + 1) >>> 0;\n        if (this.state[14] != 0) return;\n        this.state[15] = (this.state[15] + 1) >>> 0;\n    }\n}\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nexport default class FFT {\n    constructor (G, F, opMulGF) {\n        this.F = F;\n        this.G = G;\n        this.opMulGF = opMulGF;\n\n        let rem = F.sqrt_t || F.t;\n        let s = F.sqrt_s || F.s;\n\n        let nqr = F.one;\n        while (F.eq(F.pow(nqr, F.half), F.one)) nqr = F.add(nqr, F.one);\n\n        this.w = new Array(s+1);\n        this.wi = new Array(s+1);\n        this.w[s] = this.F.pow(nqr, rem);\n        this.wi[s] = this.F.inv(this.w[s]);\n\n        let n=s-1;\n        while (n>=0) {\n            this.w[n] = this.F.square(this.w[n+1]);\n            this.wi[n] = this.F.square(this.wi[n+1]);\n            n--;\n        }\n\n\n        this.roots = [];\n        /*\n        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n        */\n        this._setRoots(Math.min(s, 15));\n    }\n\n    _setRoots(n) {\n        for (let i=n; (i>=0) && (!this.roots[i]); i--) {\n            let r = this.F.one;\n            const nroots = 1 << i;\n            const rootsi = new Array(nroots);\n            for (let j=0; j<nroots; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots[i] = rootsi;\n        }\n    }\n\n    fft(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        if (p.length != m) {\n            throw new Error(\"Size must be multiple of 2\");\n        }\n        const res = __fft(this, p, bits, 0, 1);\n        return res;\n    }\n\n    ifft(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        if (p.length != m) {\n            throw new Error(\"Size must be multiple of 2\");\n        }\n        const res =  __fft(this, p, bits, 0, 1);\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.opMulGF(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n    }\n\n\n}\n\nfunction log2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction __fft(PF, pall, bits, offset, step) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[offset] ];\n    } else if (n==2) {\n        return [\n            PF.G.add(pall[offset], pall[offset + step]),\n            PF.G.sub(pall[offset], pall[offset + step])];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft(PF, pall, bits-1, offset, step*2);\n    const p2 = __fft(PF, pall, bits-1, offset+step, step*2);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.G.add(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n        out[i+ndiv2] = PF.G.sub(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n    }\n\n    return out;\n}\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fUtils from \"./futils.js\";\nimport buildSqrt from \"./fsqrt.js\";\n\nexport default class F2Field {\n    constructor(F, nonResidue) {\n        this.type=\"F2\";\n        this.F = F;\n        this.zero = [this.F.zero, this.F.zero];\n        this.one = [this.F.one, this.F.zero];\n        this.negone = this.neg(this.one);\n        this.nonResidue = nonResidue;\n        this.m = F.m*2;\n        this.p = F.p;\n        this.n64 = F.n64*2;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n\n        buildSqrt(this);\n    }\n\n    _mulByNonResidue(a) {\n        return this.F.mul(this.nonResidue, a);\n    }\n\n    copy(a) {\n        return [this.F.copy(a[0]), this.F.copy(a[1])];\n    }\n\n    add(a, b) {\n        return [\n            this.F.add(a[0], b[0]),\n            this.F.add(a[1], b[1])\n        ];\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        return [\n            this.F.sub(a[0], b[0]),\n            this.F.sub(a[1], b[1])\n        ];\n    }\n\n    neg(a) {\n        return this.sub(this.zero, a);\n    }\n\n    conjugate(a) {\n        return [\n            a[0],\n            this.F.neg(a[1])\n        ];\n    }\n\n    mul(a, b) {\n        const aA = this.F.mul(a[0] , b[0]);\n        const bB = this.F.mul(a[1] , b[1]);\n\n        return [\n            this.F.add( aA , this._mulByNonResidue(bB)),\n            this.F.sub(\n                this.F.mul(\n                    this.F.add(a[0], a[1]),\n                    this.F.add(b[0], b[1])),\n                this.F.add(aA, bB))];\n    }\n\n    inv(a) {\n        const t0 = this.F.square(a[0]);\n        const t1 = this.F.square(a[1]);\n        const t2 = this.F.sub(t0, this._mulByNonResidue(t1));\n        const t3 = this.F.inv(t2);\n        return [\n            this.F.mul(a[0], t3),\n            this.F.neg(this.F.mul( a[1], t3)) ];\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    square(a) {\n        const ab = this.F.mul(a[0] , a[1]);\n\n        /*\n        [\n            (a + b) * (a + non_residue * b) - ab - non_residue * ab,\n            ab + ab\n        ];\n        */\n\n        return [\n            this.F.sub(\n                this.F.mul(\n                    this.F.add(a[0], a[1]) ,\n                    this.F.add(\n                        a[0] ,\n                        this._mulByNonResidue(a[1]))),\n                this.F.add(\n                    ab,\n                    this._mulByNonResidue(ab))),\n            this.F.add(ab, ab)\n        ];\n    }\n\n    isZero(a) {\n        return this.F.isZero(a[0]) && this.F.isZero(a[1]);\n    }\n\n    eq(a, b) {\n        return this.F.eq(a[0], b[0]) && this.F.eq(a[1], b[1]);\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    pow(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    exp(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    toString(a) {\n        return `[ ${this.F.toString(a[0])} , ${this.F.toString(a[1])} ]`;\n    }\n\n    fromRng(rng) {\n        const c0 = this.F.fromRng(rng);\n        const c1 = this.F.fromRng(rng);\n        return [c0, c1];\n    }\n\n    gt(a, b) {\n        if (this.F.gt(a[0], b[0])) return true;\n        if (this.F.gt(b[0], a[0])) return false;\n        if (this.F.gt(a[1], b[1])) return true;\n        return false;\n    }\n\n    geq(a, b) {\n        return this.gt(a, b) || this.eq(a, b);\n    }\n\n    lt(a, b) {\n        return !this.geq(a,b);\n    }\n\n    leq(a, b) {\n        return !this.gt(a,b);\n    }\n\n    neq(a, b) {\n        return !this.eq(a,b);\n    }\n\n    random() {\n        return [this.F.random(), this.F.random()];\n    }\n\n\n    toRprLE(buff, o, e) {\n        this.F.toRprLE(buff, o, e[0]);\n        this.F.toRprLE(buff, o+this.F.n8, e[1]);\n    }\n\n    toRprBE(buff, o, e) {\n        this.F.toRprBE(buff, o, e[1]);\n        this.F.toRprBE(buff, o+this.F.n8, e[0]);\n    }\n\n    toRprLEM(buff, o, e) {\n        this.F.toRprLEM(buff, o, e[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, e[1]);\n    }\n\n\n    toRprBEM(buff, o, e) {\n        this.F.toRprBEM(buff, o, e[1]);\n        this.F.toRprBEM(buff, o+this.F.n8, e[0]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLE(buff, o);\n        const c1 = this.F.fromRprLE(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const c1 = this.F.fromRprBE(buff, o);\n        const c0 = this.F.fromRprBE(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLEM(buff, o);\n        const c1 = this.F.fromRprLEM(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const c1 = this.F.fromRprBEM(buff, o);\n        const c0 = this.F.fromRprBEM(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    toObject(a) {\n        return a;\n    }\n\n}\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fUtils from \"./futils.js\";\n\nexport default class F3Field {\n    constructor(F, nonResidue) {\n        this.type=\"F3\";\n        this.F = F;\n        this.zero = [this.F.zero, this.F.zero, this.F.zero];\n        this.one = [this.F.one, this.F.zero, this.F.zero];\n        this.negone = this.neg(this.one);\n        this.nonResidue = nonResidue;\n        this.m = F.m*3;\n        this.p = F.p;\n        this.n64 = F.n64*3;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n    }\n\n    _mulByNonResidue(a) {\n        return this.F.mul(this.nonResidue, a);\n    }\n\n    copy(a) {\n        return [this.F.copy(a[0]), this.F.copy(a[1]), this.F.copy(a[2])];\n    }\n\n    add(a, b) {\n        return [\n            this.F.add(a[0], b[0]),\n            this.F.add(a[1], b[1]),\n            this.F.add(a[2], b[2])\n        ];\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        return [\n            this.F.sub(a[0], b[0]),\n            this.F.sub(a[1], b[1]),\n            this.F.sub(a[2], b[2])\n        ];\n    }\n\n    neg(a) {\n        return this.sub(this.zero, a);\n    }\n\n    mul(a, b) {\n\n        const aA = this.F.mul(a[0] , b[0]);\n        const bB = this.F.mul(a[1] , b[1]);\n        const cC = this.F.mul(a[2] , b[2]);\n\n        return [\n            this.F.add(\n                aA,\n                this._mulByNonResidue(\n                    this.F.sub(\n                        this.F.mul(\n                            this.F.add(a[1], a[2]),\n                            this.F.add(b[1], b[2])),\n                        this.F.add(bB, cC)))),    // aA + non_residue*((b+c)*(B+C)-bB-cC),\n\n            this.F.add(\n                this.F.sub(\n                    this.F.mul(\n                        this.F.add(a[0], a[1]),\n                        this.F.add(b[0], b[1])),\n                    this.F.add(aA, bB)),\n                this._mulByNonResidue( cC)),   // (a+b)*(A+B)-aA-bB+non_residue*cC\n\n            this.F.add(\n                this.F.sub(\n                    this.F.mul(\n                        this.F.add(a[0], a[2]),\n                        this.F.add(b[0], b[2])),\n                    this.F.add(aA, cC)),\n                bB)];                           // (a+c)*(A+C)-aA+bB-cC)\n    }\n\n    inv(a) {\n        const t0 = this.F.square(a[0]);             // t0 = a^2 ;\n        const t1 = this.F.square(a[1]);             // t1 = b^2 ;\n        const t2 = this.F.square(a[2]);             // t2 = c^2;\n        const t3 = this.F.mul(a[0],a[1]);           // t3 = ab\n        const t4 = this.F.mul(a[0],a[2]);           // t4 = ac\n        const t5 = this.F.mul(a[1],a[2]);           // t5 = bc;\n        // c0 = t0 - non_residue * t5;\n        const c0 = this.F.sub(t0, this._mulByNonResidue(t5));\n        // c1 = non_residue * t2 - t3;\n        const c1 = this.F.sub(this._mulByNonResidue(t2), t3);\n        const c2 = this.F.sub(t1, t4);              // c2 = t1-t4\n\n        // t6 = (a * c0 + non_residue * (c * c1 + b * c2)).inv();\n        const t6 =\n            this.F.inv(\n                this.F.add(\n                    this.F.mul(a[0], c0),\n                    this._mulByNonResidue(\n                        this.F.add(\n                            this.F.mul(a[2], c1),\n                            this.F.mul(a[1], c2)))));\n\n        return [\n            this.F.mul(t6, c0),         // t6*c0\n            this.F.mul(t6, c1),         // t6*c1\n            this.F.mul(t6, c2)];        // t6*c2\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    square(a) {\n        const s0 = this.F.square(a[0]);                   // s0 = a^2\n        const ab = this.F.mul(a[0], a[1]);                // ab = a*b\n        const s1 = this.F.add(ab, ab);                    // s1 = 2ab;\n        const s2 = this.F.square(\n            this.F.add(this.F.sub(a[0],a[1]), a[2]));     // s2 = (a - b + c)^2;\n        const bc = this.F.mul(a[1],a[2]);                 // bc = b*c\n        const s3 = this.F.add(bc, bc);                    // s3 = 2*bc\n        const s4 = this.F.square(a[2]);                   // s4 = c^2\n\n\n        return [\n            this.F.add(\n                s0,\n                this._mulByNonResidue(s3)),           // s0 + non_residue * s3,\n            this.F.add(\n                s1,\n                this._mulByNonResidue(s4)),           // s1 + non_residue * s4,\n            this.F.sub(\n                this.F.add( this.F.add(s1, s2) , s3 ),\n                this.F.add(s0, s4))];                      // s1 + s2 + s3 - s0 - s4\n    }\n\n    isZero(a) {\n        return this.F.isZero(a[0]) && this.F.isZero(a[1]) && this.F.isZero(a[2]);\n    }\n\n    eq(a, b) {\n        return this.F.eq(a[0], b[0]) && this.F.eq(a[1], b[1]) && this.F.eq(a[2], b[2]);\n    }\n\n    affine(a) {\n        return [this.F.affine(a[0]), this.F.affine(a[1]), this.F.affine(a[2])];\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    pow(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    exp(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    toString(a) {\n        return `[ ${this.F.toString(a[0])} , ${this.F.toString(a[1])}, ${this.F.toString(a[2])} ]`;\n    }\n\n    fromRng(rng) {\n        const c0 = this.F.fromRng(rng);\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        return [c0, c1, c2];\n    }\n\n    gt(a, b) {\n        if (this.F.gt(a[0], b[0])) return true;\n        if (this.F.gt(b[0], a[0])) return false;\n        if (this.F.gt(a[1], b[1])) return true;\n        if (this.F.gt(b[1], a[1])) return false;\n        if (this.F.gt(a[2], b[2])) return true;\n        return false;\n    }\n\n\n    geq(a, b) {\n        return this.gt(a, b) || this.eq(a, b);\n    }\n\n    lt(a, b) {\n        return !this.geq(a,b);\n    }\n\n    leq(a, b) {\n        return !this.gt(a,b);\n    }\n\n    neq(a, b) {\n        return !this.eq(a,b);\n    }\n\n    random() {\n        return [this.F.random(), this.F.random(), this.F.random()];\n    }\n\n\n    toRprLE(buff, o, e) {\n        this.F.toRprLE(buff, o, e[0]);\n        this.F.toRprLE(buff, o+this.F.n8, e[1]);\n        this.F.toRprLE(buff, o+this.F.n8*2, e[2]);\n    }\n\n    toRprBE(buff, o, e) {\n        this.F.toRprBE(buff, o, e[2]);\n        this.F.toRprBE(buff, o+this.F.n8, e[1]);\n        this.F.toRprBE(buff, o+this.F.n8*2, e[0]);\n    }\n\n    toRprLEM(buff, o, e) {\n        this.F.toRprLEM(buff, o, e[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, e[1]);\n        this.F.toRprLEM(buff, o+this.F.n8*2, e[2]);\n    }\n\n\n    toRprBEM(buff, o, e) {\n        this.F.toRprBEM(buff, o, e[2]);\n        this.F.toRprBEM(buff, o+this.F.n8, e[1]);\n        this.F.toRprBEM(buff, o+this.F.n8*2, e[0]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLE(buff, o);\n        const c1 = this.F.fromRprLE(buff, o+this.n8);\n        const c2 = this.F.fromRprLE(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const c2 = this.F.fromRprBE(buff, o);\n        const c1 = this.F.fromRprBE(buff, o+this.n8);\n        const c0 = this.F.fromRprBE(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLEM(buff, o);\n        const c1 = this.F.fromRprLEM(buff, o+this.n8);\n        const c2 = this.F.fromRprLEM(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const c2 = this.F.fromRprBEM(buff, o);\n        const c1 = this.F.fromRprBEM(buff, o+this.n8);\n        const c0 = this.F.fromRprBEM(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    toObject(a) {\n        return a;\n    }\n}\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\n\nimport * as fUtils from \"./futils.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nfunction isGreatest(F, a) {\n    if (Array.isArray(a)) {\n        for (let i=a.length-1; i>=0; i--) {\n            if (!F.F.isZero(a[i])) {\n                return isGreatest(F.F, a[i]);\n            }\n        }\n        return 0;\n    } else {\n        const na = F.neg(a);\n        return Scalar.gt(a, na);\n    }\n}\n\n\nexport default class EC {\n\n    constructor(F, g) {\n        this.F = F;\n        this.g = g;\n        if (this.g.length == 2) this.g[2] = this.F.one;\n        this.zero = [this.F.zero, this.F.one, this.F.zero];\n    }\n\n    add(p1, p2) {\n\n        const F = this.F;\n\n        if (this.eq(p1, this.zero)) return p2;\n        if (this.eq(p2, this.zero)) return p1;\n\n        const res = new Array(3);\n\n        const Z1Z1 = F.square( p1[2] );\n        const Z2Z2 = F.square( p2[2] );\n\n        const U1 = F.mul( p1[0] , Z2Z2 );     // U1 = X1  * Z2Z2\n        const U2 = F.mul( p2[0] , Z1Z1 );     // U2 = X2  * Z1Z1\n\n        const Z1_cubed = F.mul( p1[2] , Z1Z1);\n        const Z2_cubed = F.mul( p2[2] , Z2Z2);\n\n        const S1 = F.mul( p1[1] , Z2_cubed);  // S1 = Y1 * Z2 * Z2Z2\n        const S2 = F.mul( p2[1] , Z1_cubed);  // S2 = Y2 * Z1 * Z1Z1\n\n        if (F.eq(U1,U2) && F.eq(S1,S2)) {\n            return this.double(p1);\n        }\n\n        const H = F.sub( U2 , U1 );                    // H = U2-U1\n\n        const S2_minus_S1 = F.sub( S2 , S1 );\n\n        const I = F.square( F.add(H,H) );         // I = (2 * H)^2\n        const J = F.mul( H , I );                      // J = H * I\n\n        const r = F.add( S2_minus_S1 , S2_minus_S1 );  // r = 2 * (S2-S1)\n        const V = F.mul( U1 , I );                     // V = U1 * I\n\n        res[0] =\n            F.sub(\n                F.sub( F.square(r) , J ),\n                F.add( V , V ));                       // X3 = r^2 - J - 2 * V\n\n        const S1_J = F.mul( S1 , J );\n\n        res[1] =\n            F.sub(\n                F.mul( r , F.sub(V,res[0])),\n                F.add( S1_J,S1_J ));                   // Y3 = r * (V-X3)-2 S1 J\n\n        res[2] =\n            F.mul(\n                H,\n                F.sub(\n                    F.square( F.add(p1[2],p2[2]) ),\n                    F.add( Z1Z1 , Z2Z2 )));            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2) * H\n\n        return res;\n    }\n\n    neg(p) {\n        return [p[0], this.F.neg(p[1]), p[2]];\n    }\n\n    sub(a, b) {\n        return this.add(a, this.neg(b));\n    }\n\n    double(p) {\n        const F = this.F;\n\n        const res = new Array(3);\n\n        if (this.eq(p, this.zero)) return p;\n\n        const A = F.square( p[0] );                    // A = X1^2\n        const B = F.square( p[1] );                    // B = Y1^2\n        const C = F.square( B );                       // C = B^2\n\n        let D =\n            F.sub(\n                F.square( F.add(p[0] , B )),\n                F.add( A , C));\n        D = F.add(D,D);                    // D = 2 * ((X1 + B)^2 - A - C)\n\n        const E = F.add( F.add(A,A), A);          // E = 3 * A\n        const FF =F.square( E );                       // F = E^2\n\n        res[0] = F.sub( FF , F.add(D,D) );         // X3 = F - 2 D\n\n        let eightC = F.add( C , C );\n        eightC = F.add( eightC , eightC );\n        eightC = F.add( eightC , eightC );\n\n        res[1] =\n            F.sub(\n                F.mul(\n                    E,\n                    F.sub( D, res[0] )),\n                eightC);                                    // Y3 = E * (D - X3) - 8 * C\n\n        const Y1Z1 = F.mul( p[1] , p[2] );\n        res[2] = F.add( Y1Z1 , Y1Z1 );                 // Z3 = 2 * Y1 * Z1\n\n        return res;\n    }\n\n    timesScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    affine(p) {\n        const F = this.F;\n        if (this.isZero(p)) {\n            return this.zero;\n        } else if (F.eq(p[2], F.one)) {\n            return p;\n        } else {\n            const Z_inv = F.inv(p[2]);\n            const Z2_inv = F.square(Z_inv);\n            const Z3_inv = F.mul(Z2_inv, Z_inv);\n\n            const res = new Array(3);\n            res[0] = F.mul(p[0],Z2_inv);\n            res[1] = F.mul(p[1],Z3_inv);\n            res[2] = F.one;\n\n            return res;\n        }\n    }\n\n    multiAffine(arr) {\n        const keys = Object.keys(arr);\n        const F = this.F;\n        const accMul = new Array(keys.length+1);\n        accMul[0] = F.one;\n        for (let i = 0; i< keys.length; i++) {\n            if (F.eq(arr[keys[i]][2], F.zero)) {\n                accMul[i+1] = accMul[i];\n            } else {\n                accMul[i+1] = F.mul(accMul[i], arr[keys[i]][2]);\n            }\n        }\n\n        accMul[keys.length] = F.inv(accMul[keys.length]);\n\n        for (let i = keys.length-1; i>=0; i--) {\n            if (F.eq(arr[keys[i]][2], F.zero)) {\n                accMul[i] = accMul[i+1];\n                arr[keys[i]] = this.zero;\n            } else {\n                const Z_inv = F.mul(accMul[i], accMul[i+1]);\n                accMul[i] = F.mul(arr[keys[i]][2], accMul[i+1]);\n\n                const Z2_inv = F.square(Z_inv);\n                const Z3_inv = F.mul(Z2_inv, Z_inv);\n\n                arr[keys[i]][0] = F.mul(arr[keys[i]][0],Z2_inv);\n                arr[keys[i]][1] = F.mul(arr[keys[i]][1],Z3_inv);\n                arr[keys[i]][2] = F.one;\n            }\n        }\n\n    }\n\n    eq(p1, p2) {\n        const F = this.F;\n\n        if (this.F.eq(p1[2], this.F.zero)) return this.F.eq(p2[2], this.F.zero);\n        if (this.F.eq(p2[2], this.F.zero)) return false;\n\n        const Z1Z1 = F.square( p1[2] );\n        const Z2Z2 = F.square( p2[2] );\n\n        const U1 = F.mul( p1[0] , Z2Z2 );\n        const U2 = F.mul( p2[0] , Z1Z1 );\n\n        const Z1_cubed = F.mul( p1[2] , Z1Z1);\n        const Z2_cubed = F.mul( p2[2] , Z2Z2);\n\n        const S1 = F.mul( p1[1] , Z2_cubed);\n        const S2 = F.mul( p2[1] , Z1_cubed);\n\n        return (F.eq(U1,U2) && F.eq(S1,S2));\n    }\n\n    isZero(p) {\n        return this.F.isZero(p[2]);\n    }\n\n    toString(p) {\n        const cp = this.affine(p);\n        return `[ ${this.F.toString(cp[0])} , ${this.F.toString(cp[1])} ]`;\n    }\n\n    fromRng(rng) {\n        const F = this.F;\n        let P = [];\n        let greatest;\n        do {\n            P[0] = F.fromRng(rng);\n            greatest = rng.nextBool();\n            const x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n            P[1] = F.sqrt(x3b);\n        } while ((P[1] == null)||(F.isZero[P]));\n\n        const s = isGreatest(F, P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n        P[2] = F.one;\n\n        if (this.cofactor) {\n            P = this.mulScalar(P, this.cofactor);\n        }\n\n        P = this.affine(P);\n\n        return P;\n\n    }\n\n    toRprLE(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLE(buff, o, p[0]);\n        this.F.toRprLE(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprBE(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprBE(buff, o, p[0]);\n        this.F.toRprBE(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprLEM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLEM(buff, o, p[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprLEJM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLEM(buff, o, p[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, p[1]);\n        this.F.toRprLEM(buff, o+2*this.F.n8, p[2]);\n    }\n\n\n    toRprBEM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprBEM(buff, o, p[0]);\n        this.F.toRprBEM(buff, o+this.F.n8, p[1]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLE(buff, o);\n        const y = this.F.fromRprLE(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprBE(buff, o);\n        const y = this.F.fromRprBE(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLEM(buff, o);\n        const y = this.F.fromRprLEM(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprLEJM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLEM(buff, o);\n        const y = this.F.fromRprLEM(buff, o+this.F.n8);\n        const z = this.F.fromRprLEM(buff, o+this.F.n8*2);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, z];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprBEM(buff, o);\n        const y = this.F.fromRprBEM(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprCompressed(buff, o) {\n        const F = this.F;\n        const v = new Uint8Array(buff.buffer, o, F.n8);\n        if (v[0] & 0x40) return this.zero;\n        const P = new Array(3);\n\n        const greatest = ((v[0] & 0x80) != 0);\n        v[0] = v[0] & 0x7F;\n        P[0] = F.fromRprBE(buff, o);\n        if (greatest) v[0] = v[0] | 0x80;  // set back again the old value\n\n        const x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n        P[1] = F.sqrt(x3b);\n\n        if (P[1] === null) {\n            throw new Error(\"Invalid Point!\");\n        }\n\n        const s = isGreatest(F, P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n        P[2] = F.one;\n\n        return P;\n    }\n\n    toRprCompressed(buff, o, p) {\n        p = this.affine(p);\n        const v = new Uint8Array(buff.buffer, o, this.F.n8);\n        if (this.isZero(p)) {\n            v.fill(0);\n            v[0] = 0x40;\n            return;\n        }\n        this.F.toRprBE(buff, o, p[0]);\n\n        if (isGreatest(this.F, p[1])) {\n            v[0] = v[0] | 0x80;\n        }\n    }\n\n\n    fromRprUncompressed(buff, o) {\n        if (buff[0] & 0x40) return this.zero;\n\n        return this.fromRprBE(buff, o);\n    }\n\n    toRprUncompressed(buff, o, p) {\n        this.toRprBE(buff, o, p);\n\n        if (this.isZero(p)) {\n            buff[o] = buff[o] | 0x40;\n        }\n    }\n\n\n}\n\n\n", "import { buildBn128 as buildBn128wasm } from \"wasmcurves\";\nimport buildEngine from \"./engine.js\";\nimport * as Scalar from \"./scalar.js\";\nimport { ModuleBuilder } from \"wasmbuilder\";\n\nglobalThis.curve_bn128 = null;\n\nexport default async function buildBn128(singleThread, plugins) {\n\n    const moduleBuilder = new ModuleBuilder();\n    moduleBuilder.setMemory(25);\n    buildBn128wasm(moduleBuilder);\n\n    if (plugins) plugins(moduleBuilder);\n\n    const bn128wasm = {};\n\n    bn128wasm.code = moduleBuilder.build();\n    bn128wasm.pq = moduleBuilder.modules.f1m.pq;\n    bn128wasm.pr = moduleBuilder.modules.frm.pq;\n    bn128wasm.pG1gen = moduleBuilder.modules.bn128.pG1gen;\n    bn128wasm.pG1zero = moduleBuilder.modules.bn128.pG1zero;\n    bn128wasm.pG1b = moduleBuilder.modules.bn128.pG1b;\n    bn128wasm.pG2gen = moduleBuilder.modules.bn128.pG2gen;\n    bn128wasm.pG2zero = moduleBuilder.modules.bn128.pG2zero;\n    bn128wasm.pG2b = moduleBuilder.modules.bn128.pG2b;\n    bn128wasm.pOneT = moduleBuilder.modules.bn128.pOneT;\n    bn128wasm.prePSize = moduleBuilder.modules.bn128.prePSize;\n    bn128wasm.preQSize = moduleBuilder.modules.bn128.preQSize;\n    bn128wasm.n8q = 32;\n    bn128wasm.n8r = 32;\n    bn128wasm.q = moduleBuilder.modules.bn128.q;\n    bn128wasm.r = moduleBuilder.modules.bn128.r;\n\n    if ((!singleThread) && (globalThis.curve_bn128)) return globalThis.curve_bn128;\n    const params = {\n        name: \"bn128\",\n        wasm: bn128wasm,\n        q: Scalar.e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\"),\n        r: Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\"),\n        n8q: 32,\n        n8r: 32,\n        cofactorG2: Scalar.e(\"30644e72e131a029b85045b68181585e06ceecda572a2489345f2299c0f9fa8d\", 16),\n        singleThread: singleThread ? true : false\n    };\n\n    const curve = await buildEngine(params);\n    curve.terminate = async function () {\n        if (!params.singleThread) {\n            globalThis.curve_bn128 = null;\n            await this.tm.terminate();\n        }\n    };\n\n    if (!singleThread) {\n        globalThis.curve_bn128 = curve;\n    }\n\n    return curve;\n}\n\n", "import WasmField1 from \"./wasm_field1.js\";\nimport WasmField2 from \"./wasm_field2.js\";\nimport WasmField3 from \"./wasm_field3.js\";\nimport WasmCurve from \"./wasm_curve.js\";\nimport buildThreadManager from \"./threadman.js\";\nimport * as Scalar from \"./scalar.js\";\nimport buildBatchApplyKey from \"./engine_applykey.js\";\nimport buildPairing from \"./engine_pairing.js\";\nimport buildMultiExp from \"./engine_multiexp.js\";\nimport buildFFT from \"./engine_fft.js\";\n\nexport default async function buildEngine(params) {\n\n    const tm = await buildThreadManager(params.wasm, params.singleThread);\n\n\n    const curve = {};\n\n    curve.q = Scalar.e(params.wasm.q.toString());\n    curve.r = Scalar.e(params.wasm.r.toString());\n    curve.name = params.name;\n    curve.tm = tm;\n    curve.prePSize = params.wasm.prePSize;\n    curve.preQSize = params.wasm.preQSize;\n    curve.Fr = new WasmField1(tm, \"frm\", params.n8r, params.r);\n    curve.F1 = new WasmField1(tm, \"f1m\", params.n8q, params.q);\n    curve.F2 = new WasmField2(tm, \"f2m\", curve.F1);\n    curve.G1 = new WasmCurve(tm, \"g1m\", curve.F1, params.wasm.pG1gen, params.wasm.pG1b, params.cofactorG1);\n    curve.G2 = new WasmCurve(tm, \"g2m\", curve.F2, params.wasm.pG2gen, params.wasm.pG2b, params.cofactorG2);\n    curve.F6 = new WasmField3(tm, \"f6m\", curve.F2);\n    curve.F12 = new WasmField2(tm, \"ftm\", curve.F6);\n\n    curve.Gt = curve.F12;\n\n    buildBatchApplyKey(curve, \"G1\");\n    buildBatchApplyKey(curve, \"G2\");\n    buildBatchApplyKey(curve, \"Fr\");\n\n    buildMultiExp(curve, \"G1\");\n    buildMultiExp(curve, \"G2\");\n\n    buildFFT(curve, \"G1\");\n    buildFFT(curve, \"G2\");\n    buildFFT(curve, \"Fr\");\n\n    buildPairing(curve);\n\n    curve.array2buffer = function(arr, sG) {\n        const buff = new Uint8Array(sG*arr.length);\n\n        for (let i=0; i<arr.length; i++) {\n            buff.set(arr[i], i*sG);\n        }\n\n        return buff;\n    };\n\n    curve.buffer2array = function(buff , sG) {\n        const n= buff.byteLength / sG;\n        const arr = new Array(n);\n        for (let i=0; i<n; i++) {\n            arr[i] = buff.slice(i*sG, i*sG+sG);\n        }\n        return arr;\n    };\n\n    return curve;\n}\n\n\n", "import * as Scalar from \"./scalar.js\";\nimport * as utils from \"./utils.js\";\nimport { getThreadRng } from \"./random.js\";\nimport buildBatchConvert from \"./engine_batchconvert.js\";\nimport BigBuffer from \"./bigbuffer.js\";\n\n\nexport default class WasmField1 {\n\n    constructor(tm, prefix, n8, p) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.p = p;\n        this.n8 = n8;\n        this.type = \"F1\";\n        this.m = 1;\n\n        this.half = Scalar.shiftRight(p, Scalar.one);\n        this.bitLength = Scalar.bitLength(p);\n        this.mask = Scalar.sub(Scalar.shiftLeft(Scalar.one, this.bitLength), Scalar.one);\n\n        this.pOp1 = tm.alloc(n8);\n        this.pOp2 = tm.alloc(n8);\n        this.pOp3 = tm.alloc(n8);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = this.tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = this.tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n        this.n64 = Math.floor(n8/8);\n        this.n32 = Math.floor(n8/4);\n\n        if(this.n64*8 != this.n8) {\n            throw new Error(\"n8 must be a multiple of 8\");\n        }\n\n        this.half = Scalar.shiftRight(this.p, Scalar.one);\n        this.nqr = this.two;\n        let r = this.exp(this.nqr, this.half);\n        while (!this.eq(r, this.negone)) {\n            this.nqr = this.add(this.nqr, this.one);\n            r = this.exp(this.nqr, this.half);\n        }\n\n        this.shift = this.mul(this.nqr, this.nqr);\n        this.shiftInv = this.inv(this.shift);\n\n        this.s = 0;\n        let t = Scalar.sub(this.p, Scalar.one);\n\n        while ( !Scalar.isOdd(t) ) {\n            this.s = this.s + 1;\n            t = Scalar.shiftRight(t, Scalar.one);\n        }\n\n        this.w = [];\n        this.w[this.s] = this.exp(this.nqr, t);\n\n        for (let i= this.s-1; i>=0; i--) {\n            this.w[i] = this.square(this.w[i+1]);\n        }\n\n        if (!this.eq(this.w[0], this.one)) {\n            throw new Error(\"Error calculating roots of unity\");\n        }\n\n        this.batchToMontgomery = buildBatchConvert(tm, prefix + \"_batchToMontgomery\", this.n8, this.n8);\n        this.batchFromMontgomery = buildBatchConvert(tm, prefix + \"_batchFromMontgomery\", this.n8, this.n8);\n    }\n\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        let ra = Scalar.e(a, b);\n        if (Scalar.isNegative(ra)) {\n            ra = Scalar.neg(ra);\n            if (Scalar.gt(ra, this.p)) {\n                ra = Scalar.mod(ra, this.p);\n            }\n            ra = Scalar.sub(this.p, ra);\n        } else {\n            if (Scalar.gt(ra, this.p)) {\n                ra = Scalar.mod(ra, this.p);\n            }\n        }\n        const buff = utils.leInt2Buff(ra, this.n8);\n        return this.toMontgomery(buff);\n    }\n\n    toString(a, radix) {\n        const an = this.fromMontgomery(a);\n        const s = Scalar.fromRprLE(an, 0);\n        return Scalar.toString(s, radix);\n    }\n\n    fromRng(rng) {\n        let v;\n        const buff = new Uint8Array(this.n8);\n        do {\n            v = Scalar.zero;\n            for (let i=0; i<this.n64; i++) {\n                v = Scalar.add(v,  Scalar.shiftLeft(rng.nextU64(), 64*i));\n            }\n            v = Scalar.band(v, this.mask);\n        } while (Scalar.geq(v, this.p));\n        Scalar.toRprLE(buff, 0, v, this.n8);\n        return buff;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const an = this.fromMontgomery(a);\n        return Scalar.fromRprLE(an, 0);\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.n8);\n        Scalar.toRprLE(buff, 0, a, this.n8);\n        return this.toMontgomery(buff);\n    }\n\n    toRprLE(buff, offset, a) {\n        buff.set(this.fromMontgomery(a), offset);\n    }\n\n    toRprBE(buff, offset, a) {\n        const buff2 = this.fromMontgomery(a);\n        for (let i=0; i<this.n8/2; i++) {\n            const aux = buff2[i];\n            buff2[i] = buff2[this.n8-1-i];\n            buff2[this.n8-1-i] = aux;\n        }\n        buff.set(buff2, offset);\n    }\n\n    fromRprLE(buff, offset) {\n        offset = offset || 0;\n        const res = buff.slice(offset, offset + this.n8);\n        return this.toMontgomery(res);\n    }\n\n    async batchInverse(buffIn) {\n        let returnArray = false;\n        const sIn = this.n8;\n        const sOut = this.n8;\n\n        if (Array.isArray(buffIn)) {\n            buffIn = utils.array2buffer(buffIn, sIn );\n            returnArray = true;\n        } else {\n            buffIn = buffIn.slice(0, buffIn.byteLength);\n        }\n\n        const nPoints = Math.floor(buffIn.byteLength / sIn);\n        if ( nPoints * sIn !== buffIn.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const pointsPerChunk = Math.floor(nPoints/this.tm.concurrency);\n        const opPromises = [];\n        for (let i=0; i<this.tm.concurrency; i++) {\n            let n;\n            if (i< this.tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff:buffChunk},\n                {cmd: \"ALLOC\", var: 1, len:sOut * n},\n                {cmd: \"CALL\", fnName: this.prefix + \"_batchInverse\", params: [\n                    {var: 0},\n                    {val: sIn},\n                    {val: n},\n                    {var: 1},\n                    {val: sOut},\n                ]},\n                {cmd: \"GET\", out: 0, var: 1, len:sOut * n},\n            ];\n            opPromises.push(\n                this.tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buffIn instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        if (returnArray) {\n            return utils.buffer2array(fullBuffOut, sOut);\n        } else {\n            return fullBuffOut;\n        }\n\n    }\n\n}\n\n\n", "/* global BigInt */\nimport * as Scalar from \"./scalar.js\";\n\nexport function stringifyBigInts(o) {\n    if (typeof o == \"bigint\" || o.eq !== undefined) {\n        return o.toString(10);\n    } else if (o instanceof Uint8Array) {\n        return Scalar.fromRprLE(o, 0);\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyBigInts);\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = stringifyBigInts(o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function unstringifyBigInts(o) {\n    if (typeof o == \"string\" && /^[0-9]+$/.test(o)) {\n        return BigInt(o);\n    } else if (typeof o == \"string\" && /^0x[0-9a-fA-F]+$/.test(o)) {\n        return BigInt(o);\n    } else if (Array.isArray(o)) {\n        return o.map(unstringifyBigInts);\n    } else if (typeof o == \"object\") {\n        if (o === null) return null;\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = unstringifyBigInts(o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function beBuff2int(buff) {\n    let res = BigInt(0);\n    let i = buff.length;\n    let offset = 0;\n    const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n    while (i > 0) {\n        if (i >= 4) {\n            i -= 4;\n            res += BigInt(buffV.getUint32(i)) << BigInt(offset * 8);\n            offset += 4;\n        } else if (i >= 2) {\n            i -= 2;\n            res += BigInt(buffV.getUint16(i)) << BigInt(offset * 8);\n            offset += 2;\n        } else {\n            i -= 1;\n            res += BigInt(buffV.getUint8(i)) << BigInt(offset * 8);\n            offset += 1;\n        }\n    }\n    return res;\n}\n\nexport function beInt2Buff(n, len) {\n    let r = n;\n    const buff = new Uint8Array(len);\n    const buffV = new DataView(buff.buffer);\n    let o = len;\n    while (o > 0) {\n        if (o - 4 >= 0) {\n            o -= 4;\n            buffV.setUint32(o, Number(r & BigInt(0xffffffff)));\n            r = r >> BigInt(32);\n        } else if (o - 2 >= 0) {\n            o -= 2;\n            buffV.setUint16(o, Number(r & BigInt(0xffff)));\n            r = r >> BigInt(16);\n        } else {\n            o -= 1;\n            buffV.setUint8(o, Number(r & BigInt(0xff)));\n            r = r >> BigInt(8);\n        }\n    }\n    if (r) {\n        throw new Error(\"Number does not fit in this length\");\n    }\n    return buff;\n}\n\nexport function leBuff2int(buff) {\n    let res = BigInt(0);\n    let i = 0;\n    const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n    while (i < buff.length) {\n        if (i + 4 <= buff.length) {\n            res += BigInt(buffV.getUint32(i, true)) << BigInt(i * 8);\n            i += 4;\n        } else if (i + 2 <= buff.length) {\n            res += BigInt(buffV.getUint16(i, true)) << BigInt(i * 8);\n            i += 2;\n        } else {\n            res += BigInt(buffV.getUint8(i, true)) << BigInt(i * 8);\n            i += 1;\n        }\n    }\n    return res;\n}\n\nexport function leInt2Buff(n, len) {\n    let r = n;\n    if (typeof len === \"undefined\") {\n        len = Math.floor((Scalar.bitLength(n) - 1) / 8) + 1;\n        if (len == 0) len = 1;\n    }\n    const buff = new Uint8Array(len);\n    const buffV = new DataView(buff.buffer);\n    let o = 0;\n    while (o < len) {\n        if (o + 4 <= len) {\n            buffV.setUint32(o, Number(r & BigInt(0xffffffff)), true);\n            o += 4;\n            r = r >> BigInt(32);\n        } else if (o + 2 <= len) {\n            buffV.setUint16(o, Number(r & BigInt(0xffff)), true);\n            o += 2;\n            r = r >> BigInt(16);\n        } else {\n            buffV.setUint8(o, Number(r & BigInt(0xff)), true);\n            o += 1;\n            r = r >> BigInt(8);\n        }\n    }\n    if (r) {\n        throw new Error(\"Number does not fit in this length\");\n    }\n    return buff;\n}\n\nexport function stringifyFElements(F, o) {\n    if (typeof o == \"bigint\" || o.eq !== undefined) {\n        return o.toString(10);\n    } else if (o instanceof Uint8Array) {\n        return F.toString(F.e(o));\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyFElements.bind(this, F));\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = stringifyFElements(F, o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function unstringifyFElements(F, o) {\n    if (typeof o == \"string\" && /^[0-9]+$/.test(o)) {\n        return F.e(o);\n    } else if (typeof o == \"string\" && /^0x[0-9a-fA-F]+$/.test(o)) {\n        return F.e(o);\n    } else if (Array.isArray(o)) {\n        return o.map(unstringifyFElements.bind(this, F));\n    } else if (typeof o == \"object\") {\n        if (o === null) return null;\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = unstringifyFElements(F, o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nconst _revTable = [];\nfor (let i = 0; i < 256; i++) {\n    _revTable[i] = _revSlow(i, 8);\n}\n\nfunction _revSlow(idx, bits) {\n    let res = 0;\n    let a = idx;\n    for (let i = 0; i < bits; i++) {\n        res <<= 1;\n        res = res | (a & 1);\n        a >>= 1;\n    }\n    return res;\n}\n\nexport function bitReverse(idx, bits) {\n    return (\n        (_revTable[idx >>> 24] |\n        (_revTable[(idx >>> 16) & 0xff] << 8) |\n        (_revTable[(idx >>> 8) & 0xff] << 16) |\n        (_revTable[idx & 0xff] << 24)) >>>\n        (32 - bits)\n    );\n}\n\nexport function log2(V) {\n    return (\n        ((V & 0xffff0000) !== 0 ? ((V &= 0xffff0000), 16) : 0) |\n        ((V & 0xff00ff00) !== 0 ? ((V &= 0xff00ff00), 8) : 0) |\n        ((V & 0xf0f0f0f0) !== 0 ? ((V &= 0xf0f0f0f0), 4) : 0) |\n        ((V & 0xcccccccc) !== 0 ? ((V &= 0xcccccccc), 2) : 0) |\n        ((V & 0xaaaaaaaa) !== 0)\n    );\n}\n\nexport function buffReverseBits(buff, eSize) {\n    const n = buff.byteLength / eSize;\n    const bits = log2(n);\n    if (n != 1 << bits) {\n        throw new Error(\"Invalid number of pointers\");\n    }\n    for (let i = 0; i < n; i++) {\n        const r = bitReverse(i, bits);\n        if (i > r) {\n            const tmp = buff.slice(i * eSize, (i + 1) * eSize);\n            buff.set(buff.slice(r * eSize, (r + 1) * eSize), i * eSize);\n            buff.set(tmp, r * eSize);\n        }\n    }\n}\n\nexport function array2buffer(arr, sG) {\n    const buff = new Uint8Array(sG * arr.length);\n\n    for (let i = 0; i < arr.length; i++) {\n        buff.set(arr[i], i * sG);\n    }\n\n    return buff;\n}\n\nexport function buffer2array(buff, sG) {\n    const n = buff.byteLength / sG;\n    const arr = new Array(n);\n    for (let i = 0; i < n; i++) {\n        arr[i] = buff.slice(i * sG, i * sG + sG);\n    }\n    return arr;\n}\n", "import BigBuffer from \"./bigbuffer.js\";\n\nexport default function buildBatchConvert(tm, fnName, sIn, sOut) {\n    return async function batchConvert(buffIn) {\n        const nPoints = Math.floor(buffIn.byteLength / sIn);\n        if ( nPoints * sIn !== buffIn.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const pointsPerChunk = Math.floor(nPoints/tm.concurrency);\n        const opPromises = [];\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff:buffChunk},\n                {cmd: \"ALLOC\", var: 1, len:sOut * n},\n                {cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {val: n},\n                    {var: 1}\n                ]},\n                {cmd: \"GET\", out: 0, var: 1, len:sOut * n},\n            ];\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buffIn instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n}\n", "\nconst PAGE_SIZE = 1<<30;\n\nexport default class BigBuffer {\n\n    constructor(size) {\n        this.buffers = [];\n        this.byteLength = size;\n        for (let i=0; i<size; i+= PAGE_SIZE) {\n            const n = Math.min(size-i, PAGE_SIZE);\n            this.buffers.push(new Uint8Array(n));\n        }\n\n    }\n\n    slice(fr, to) {\n        if ( to === undefined ) to = this.byteLength;\n        if ( fr === undefined ) fr = 0;\n        const len = to-fr;\n\n        const firstPage = Math.floor(fr / PAGE_SIZE);\n        const lastPage = Math.floor((fr+len-1) / PAGE_SIZE);\n\n        if ((firstPage == lastPage)||(len==0))\n            return this.buffers[firstPage].slice(fr%PAGE_SIZE, fr%PAGE_SIZE + len);\n\n        let buff;\n\n        let p = firstPage;\n        let o = fr % PAGE_SIZE;\n        // Remaining bytes to read\n        let r = len;\n        while (r>0) {\n            // bytes to copy from this page\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset+o, l);\n            if (l == len) return srcView.slice();\n            if (!buff) {\n                if (len <= PAGE_SIZE) {\n                    buff = new Uint8Array(len);\n                } else {\n                    buff = new BigBuffer(len);\n                }\n            }\n            buff.set(srcView, len-r);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n        return buff;\n    }\n\n    set(buff, offset) {\n        if (offset === undefined) offset = 0;\n\n        const len = buff.byteLength;\n\n        if (len==0) return;\n\n        const firstPage = Math.floor(offset / PAGE_SIZE);\n        const lastPage = Math.floor((offset+len-1) / PAGE_SIZE);\n\n        if (firstPage == lastPage) {\n            if ((buff instanceof BigBuffer)&&(buff.buffers.length==1)) {\n                return this.buffers[firstPage].set(buff.buffers[0], offset % PAGE_SIZE);\n            } else {\n                return this.buffers[firstPage].set(buff, offset % PAGE_SIZE);\n            }\n\n        }\n\n\n        let p = firstPage;\n        let o = offset % PAGE_SIZE;\n        let r = len;\n        while (r>0) {\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = buff.slice( len -r, len -r+l);\n            const dstView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset + o, l);\n            dstView.set(srcView);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n    }\n}\n", "import { getThreadRng } from \"./random.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nexport default class WasmField2 {\n\n    constructor(tm, prefix, F) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.F = F;\n        this.type = \"F2\";\n        this.m = F.m * 2;\n        this.n8 = this.F.n8*2;\n        this.n32 = this.F.n32*2;\n        this.n64 = this.F.n64*2;\n\n        this.pOp1 = tm.alloc(F.n8*2);\n        this.pOp2 = tm.alloc(F.n8*2);\n        this.pOp3 = tm.alloc(F.n8*2);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    mul1(a,b) {\n        return this.op2(\"_mul1\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        if ((Array.isArray(a)) && (a.length == 2)) {\n            const c1 = this.F.e(a[0], b);\n            const c2 = this.F.e(a[1], b);\n            const res = new Uint8Array(this.F.n8*2);\n            res.set(c1);\n            res.set(c2, this.F.n8*2);\n            return res;\n        } else {\n            throw new Error(\"invalid F2\");\n        }\n    }\n\n    toString(a, radix) {\n        const s1 = this.F.toString(a.slice(0, this.F.n8), radix);\n        const s2 = this.F.toString(a.slice(this.F.n8), radix);\n        return `[${s1}, ${s2}]`;\n    }\n\n    fromRng(rng) {\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        const res = new Uint8Array(this.F.n8*2);\n        res.set(c1);\n        res.set(c2, this.F.n8);\n        return res;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const c1 = this.F.toObject(a.slice(0, this.F.n8));\n        const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        return [c1, c2];\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.F.n8*2);\n        const b1 = this.F.fromObject(a[0]);\n        const b2 = this.F.fromObject(a[1]);\n        buff.set(b1);\n        buff.set(b2, this.F.n8);\n        return buff;\n    }\n\n    c1(a) {\n        return a.slice(0, this.F.n8);\n    }\n\n    c2(a) {\n        return a.slice(this.F.n8);\n    }\n\n}\n\n", "\n\nimport { getThreadRng } from \"./random.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nexport default class WasmField3 {\n\n    constructor(tm, prefix, F) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.F = F;\n        this.type = \"F3\";\n        this.m = F.m * 3;\n        this.n8 = this.F.n8*3;\n        this.n32 = this.F.n32*3;\n        this.n64 = this.F.n64*3;\n\n        this.pOp1 = tm.alloc(F.n8*3);\n        this.pOp2 = tm.alloc(F.n8*3);\n        this.pOp3 = tm.alloc(F.n8*3);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.getBuff(this.pOp3, this.n8);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        if ((Array.isArray(a)) && (a.length == 3)) {\n            const c1 = this.F.e(a[0], b);\n            const c2 = this.F.e(a[1], b);\n            const c3 = this.F.e(a[2], b);\n            const res = new Uint8Array(this.F.n8*3);\n            res.set(c1);\n            res.set(c2, this.F.n8);\n            res.set(c3, this.F.n8*2);\n            return res;\n        } else {\n            throw new Error(\"invalid F3\");\n        }\n    }\n\n    toString(a, radix) {\n        const s1 = this.F.toString(a.slice(0, this.F.n8), radix);\n        const s2 = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);\n        const s3 = this.F.toString(a.slice(this.F.n8*2), radix);\n        return `[${s1}, ${s2}, ${s3}]`;\n    }\n\n    fromRng(rng) {\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        const c3 = this.F.fromRng(rng);\n        const res = new Uint8Array(this.F.n8*3);\n        res.set(c1);\n        res.set(c2, this.F.n8);\n        res.set(c3, this.F.n8*2);\n        return res;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const c1 = this.F.toObject(a.slice(0, this.F.n8));\n        const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        const c3 = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));\n        return [c1, c2, c3];\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.F.n8*3);\n        const b1 = this.F.fromObject(a[0]);\n        const b2 = this.F.fromObject(a[1]);\n        const b3 = this.F.fromObject(a[2]);\n        buff.set(b1);\n        buff.set(b2, this.F.n8);\n        buff.set(b3, this.F.n8*2);\n        return buff;\n    }\n\n    c1(a) {\n        return a.slice(0, this.F.n8);\n    }\n\n    c2(a) {\n        return a.slice(this.F.n8, this.F.n8*2);\n    }\n\n    c3(a) {\n        return a.slice(this.F.n8*2);\n    }\n\n}\n\n\n", "\n\nimport * as Scalar from \"./scalar.js\";\nimport buildBatchConvert from \"./engine_batchconvert.js\";\n\nexport default class WasmCurve {\n\n    constructor(tm, prefix, F, pGen, pGb, cofactor) {\n        this.tm = tm;\n        this.prefix = prefix;\n        this.F = F;\n\n        this.pOp1 = tm.alloc(F.n8*3);\n        this.pOp2 = tm.alloc(F.n8*3);\n        this.pOp3 = tm.alloc(F.n8*3);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = this.tm.getBuff(this.pOp1, F.n8*3);\n        this.tm.instance.exports[prefix + \"_zeroAffine\"](this.pOp1);\n        this.zeroAffine = this.tm.getBuff(this.pOp1, F.n8*2);\n        this.one = this.tm.getBuff(pGen, F.n8*3);\n        this.g = this.one;\n        this.oneAffine = this.tm.getBuff(pGen, F.n8*2);\n        this.gAffine = this.oneAffine;\n        this.b = this.tm.getBuff(pGb, F.n8);\n\n        if (cofactor) {\n            this.cofactor = Scalar.toLEBuff(cofactor);\n        }\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n        this.batchLEMtoC = buildBatchConvert(tm, prefix + \"_batchLEMtoC\", F.n8*2, F.n8);\n        this.batchLEMtoU = buildBatchConvert(tm, prefix + \"_batchLEMtoU\", F.n8*2, F.n8*2);\n        this.batchCtoLEM = buildBatchConvert(tm, prefix + \"_batchCtoLEM\", F.n8, F.n8*2);\n        this.batchUtoLEM = buildBatchConvert(tm, prefix + \"_batchUtoLEM\", F.n8*2, F.n8*2);\n        this.batchToJacobian = buildBatchConvert(tm, prefix + \"_batchToJacobian\", F.n8*2, F.n8*3);\n        this.batchToAffine = buildBatchConvert(tm, prefix + \"_batchToAffine\", F.n8*3, F.n8*2);\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    op2bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    op1Affine(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*2);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_add\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_addMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_addMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_addAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    sub(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_sub\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_subMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_subMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_subAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    neg(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1(\"_neg\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1Affine(\"_negAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    double(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1(\"_double\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1(\"_doubleAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    isZero(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1Bool(\"_isZero\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1Bool(\"_isZeroAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    timesScalar(a, s) {\n        if (!(s instanceof Uint8Array)) {\n            s = Scalar.toLEBuff(Scalar.e(s));\n        }\n        let fnName;\n        if (a.byteLength == this.F.n8*3) {\n            fnName = this.prefix + \"_timesScalar\";\n        } else if (a.byteLength == this.F.n8*2) {\n            fnName = this.prefix + \"_timesScalarAffine\";\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, s);\n        this.tm.instance.exports[fnName](this.pOp1, this.pOp2, s.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    timesFr(a, s) {\n        let fnName;\n        if (a.byteLength == this.F.n8*3) {\n            fnName = this.prefix + \"_timesFr\";\n        } else if (a.byteLength == this.F.n8*2) {\n            fnName = this.prefix + \"_timesFrAffine\";\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, s);\n        this.tm.instance.exports[fnName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    eq(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2bool(\"_eq\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2bool(\"_eqMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2bool(\"_eqMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2bool(\"_eqAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toAffine(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1Affine(\"_toAffine\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return a;\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toJacobian(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return a;\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1(\"_toJacobian\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toRprUncompressed(arr, offset, a) {\n        this.tm.setBuff(this.pOp1, a);\n        if (a.byteLength == this.F.n8*3) {\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n        } else if (a.byteLength != this.F.n8*2) {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.instance.exports[this.prefix + \"_LEMtoU\"](this.pOp1, this.pOp1);\n        const res = this.tm.getBuff(this.pOp1, this.F.n8*2);\n        arr.set(res, offset);\n    }\n\n    fromRprUncompressed(arr, offset) {\n        const buff = arr.slice(offset, offset + this.F.n8*2);\n        this.tm.setBuff(this.pOp1, buff);\n        this.tm.instance.exports[this.prefix + \"_UtoLEM\"](this.pOp1, this.pOp1);\n        return this.tm.getBuff(this.pOp1, this.F.n8*2);\n    }\n\n    toRprCompressed(arr, offset, a) {\n        this.tm.setBuff(this.pOp1, a);\n        if (a.byteLength == this.F.n8*3) {\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n        } else if (a.byteLength != this.F.n8*2) {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.instance.exports[this.prefix + \"_LEMtoC\"](this.pOp1, this.pOp1);\n        const res = this.tm.getBuff(this.pOp1, this.F.n8);\n        arr.set(res, offset);\n    }\n\n    fromRprCompressed(arr, offset) {\n        const buff = arr.slice(offset, offset + this.F.n8);\n        this.tm.setBuff(this.pOp1, buff);\n        this.tm.instance.exports[this.prefix + \"_CtoLEM\"](this.pOp1, this.pOp2);\n        return this.tm.getBuff(this.pOp2, this.F.n8*2);\n    }\n\n    toUncompressed(a) {\n        const buff = new Uint8Array(this.F.n8*2);\n        this.toRprUncompressed(buff, 0, a);\n        return buff;\n    }\n\n    toRprLEM(arr, offset, a) {\n        if (a.byteLength == this.F.n8*2) {\n            arr.set(a, offset);\n            return;\n        } else if (a.byteLength == this.F.n8*3) {\n            this.tm.setBuff(this.pOp1, a);\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n            const res = this.tm.getBuff(this.pOp1, this.F.n8*2);\n            arr.set(res, offset);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    fromRprLEM(arr, offset) {\n        offset = offset || 0;\n        return arr.slice(offset, offset+this.F.n8*2);\n    }\n\n    toString(a, radix) {\n        if (a.byteLength == this.F.n8*3) {\n            const x = this.F.toString(a.slice(0, this.F.n8), radix);\n            const y = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);\n            const z = this.F.toString(a.slice(this.F.n8*2), radix);\n            return `[ ${x}, ${y}, ${z} ]`;\n        } else if (a.byteLength == this.F.n8*2) {\n            const x = this.F.toString(a.slice(0, this.F.n8), radix);\n            const y = this.F.toString(a.slice(this.F.n8), radix);\n            return `[ ${x}, ${y} ]`;\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    isValid(a) {\n        if (this.isZero(a)) return true;\n        const F = this.F;\n        const aa = this.toAffine(a);\n        const x = aa.slice(0, this.F.n8);\n        const y = aa.slice(this.F.n8, this.F.n8*2);\n        const x3b = F.add(F.mul(F.square(x),x), this.b);\n        const y2 = F.square(y);\n        return F.eq(x3b, y2);\n    }\n\n    fromRng(rng) {\n        const F = this.F;\n        let P = [];\n        let greatest;\n        let x3b;\n        do {\n            P[0] = F.fromRng(rng);\n            greatest = rng.nextBool();\n            x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n        } while (!F.isSquare(x3b));\n\n        P[1] = F.sqrt(x3b);\n\n        const s = F.isNegative(P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n\n        let Pbuff = new Uint8Array(this.F.n8*2);\n        Pbuff.set(P[0]);\n        Pbuff.set(P[1], this.F.n8);\n\n        if (this.cofactor) {\n            Pbuff = this.timesScalar(Pbuff, this.cofactor);\n        }\n\n        return Pbuff;\n    }\n\n\n\n    toObject(a) {\n        if (this.isZero(a)) {\n            return [\n                this.F.toObject(this.F.zero),\n                this.F.toObject(this.F.one),\n                this.F.toObject(this.F.zero),\n            ];\n        }\n        const x = this.F.toObject(a.slice(0, this.F.n8));\n        const y = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        let z;\n        if (a.byteLength == this.F.n8*3) {\n            z = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));\n        } else {\n            z = this.F.toObject(this.F.one);\n        }\n        return [x, y, z];\n    }\n\n    fromObject(a) {\n        const x = this.F.fromObject(a[0]);\n        const y = this.F.fromObject(a[1]);\n        let z;\n        if (a.length==3) {\n            z = this.F.fromObject(a[2]);\n        } else {\n            z = this.F.one;\n        }\n        if (this.F.isZero(z, this.F.one)) {\n            return this.zeroAffine;\n        } else if (this.F.eq(z, this.F.one)) {\n            const buff = new Uint8Array(this.F.n8*2);\n            buff.set(x);\n            buff.set(y, this.F.n8);\n            return buff;\n        } else {\n            const buff = new Uint8Array(this.F.n8*3);\n            buff.set(x);\n            buff.set(y, this.F.n8);\n            buff.set(z, this.F.n8*2);\n            return buff;\n        }\n    }\n\n    e(a) {\n        if (a instanceof Uint8Array) return a;\n        return this.fromObject(a);\n    }\n\n    x(a) {\n        const tmp = this.toAffine(a);\n        return tmp.slice(0, this.F.n8);\n    }\n\n    y(a) {\n        const tmp = this.toAffine(a);\n        return tmp.slice(this.F.n8);\n    }\n\n}\n\n\n", "/* global navigator, WebAssembly */\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// const MEM_SIZE = 1000;  // Memory size in 64K Pakes (512Mb)\nconst MEM_SIZE = 25;  // Memory size in 64K Pakes (1600Kb)\n\n\nimport thread from \"./threadman_thread.js\";\nimport os from \"os\";\nimport Worker from \"web-worker\";\n\nclass Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject)=> {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction stringToBase64(str) {\n    if (process.browser) {\n        return globalThis.btoa(str);\n    } else {\n        return Buffer.from(str).toString(\"base64\");\n    }\n}\n\nconst threadSource = stringToBase64(\"(\" + thread.toString() + \")(self)\");\nconst workerSource = \"data:application/javascript;base64,\" + threadSource;\n\n\n\nexport default async function buildThreadManager(wasm, singleThread) {\n    const tm = new ThreadManager();\n\n    tm.memory = new WebAssembly.Memory({initial:MEM_SIZE});\n    tm.u8 = new Uint8Array(tm.memory.buffer);\n    tm.u32 = new Uint32Array(tm.memory.buffer);\n\n    const wasmModule = await WebAssembly.compile(wasm.code);\n\n    tm.instance = await WebAssembly.instantiate(wasmModule, {\n        env: {\n            \"memory\": tm.memory\n        }\n    });\n\n    tm.singleThread = singleThread;\n    tm.initalPFree = tm.u32[0];   // Save the Pointer to free space.\n    tm.pq = wasm.pq;\n    tm.pr = wasm.pr;\n    tm.pG1gen = wasm.pG1gen;\n    tm.pG1zero = wasm.pG1zero;\n    tm.pG2gen = wasm.pG2gen;\n    tm.pG2zero = wasm.pG2zero;\n    tm.pOneT = wasm.pOneT;\n\n    //    tm.pTmp0 = tm.alloc(curve.G2.F.n8*3);\n    //    tm.pTmp1 = tm.alloc(curve.G2.F.n8*3);\n\n\n    if (singleThread) {\n        tm.code = wasm.code;\n        tm.taskManager = thread();\n        await tm.taskManager([{\n            cmd: \"INIT\",\n            init: MEM_SIZE,\n            code: tm.code.slice()\n        }]);\n        tm.concurrency  = 1;\n    } else {\n        tm.workers = [];\n        tm.pendingDeferreds = [];\n        tm.working = [];\n\n        let concurrency;\n\n        if ((typeof(navigator) === \"object\") && navigator.hardwareConcurrency) {\n            concurrency = navigator.hardwareConcurrency;\n        } else {\n            concurrency = os.cpus().length;\n        }\n\n        if(concurrency == 0){\n            concurrency = 2;\n        }\n\n        // Limit to 64 threads for memory reasons.\n        if (concurrency>64) concurrency=64;\n        tm.concurrency = concurrency;\n\n        for (let i = 0; i<concurrency; i++) {\n\n            tm.workers[i] = new Worker(workerSource);\n\n            tm.workers[i].addEventListener(\"message\", getOnMsg(i));\n\n            tm.working[i]=false;\n        }\n\n        const initPromises = [];\n        for (let i=0; i<tm.workers.length;i++) {\n            const copyCode = wasm.code.slice();\n            initPromises.push(tm.postAction(i, [{\n                cmd: \"INIT\",\n                init: MEM_SIZE,\n                code: copyCode\n            }], [copyCode.buffer]));\n        }\n\n        await Promise.all(initPromises);\n\n    }\n    return tm;\n\n    function getOnMsg(i) {\n        return function(e) {\n            let data;\n            if ((e)&&(e.data)) {\n                data = e.data;\n            } else {\n                data = e;\n            }\n\n            tm.working[i]=false;\n            tm.pendingDeferreds[i].resolve(data);\n            tm.processWorks();\n        };\n    }\n\n}\n\nclass ThreadManager {\n    constructor() {\n        this.actionQueue = [];\n        this.oldPFree = 0;\n    }\n\n    startSyncOp() {\n        if (this.oldPFree != 0) throw new Error(\"Sync operation in progress\");\n        this.oldPFree = this.u32[0];\n    }\n\n    endSyncOp() {\n        if (this.oldPFree == 0) throw new Error(\"No sync operation in progress\");\n        this.u32[0] = this.oldPFree;\n        this.oldPFree = 0;\n    }\n\n    postAction(workerId, e, transfers, _deferred) {\n        if (this.working[workerId]) {\n            throw new Error(\"Posting a job t a working worker\");\n        }\n        this.working[workerId] = true;\n\n        this.pendingDeferreds[workerId] = _deferred ? _deferred : new Deferred();\n        this.workers[workerId].postMessage(e, transfers);\n\n        return this.pendingDeferreds[workerId].promise;\n    }\n\n    processWorks() {\n        for (let i=0; (i<this.workers.length)&&(this.actionQueue.length > 0); i++) {\n            if (this.working[i] == false) {\n                const work = this.actionQueue.shift();\n                this.postAction(i, work.data, work.transfers, work.deferred);\n            }\n        }\n    }\n\n    queueAction(actionData, transfers) {\n        const d = new Deferred();\n\n        if (this.singleThread) {\n            const res = this.taskManager(actionData);\n            d.resolve(res);\n        } else {\n            this.actionQueue.push({\n                data: actionData,\n                transfers: transfers,\n                deferred: d\n            });\n            this.processWorks();\n        }\n        return d.promise;\n    }\n\n    resetMemory() {\n        this.u32[0] = this.initalPFree;\n    }\n\n    allocBuff(buff) {\n        const pointer = this.alloc(buff.byteLength);\n        this.setBuff(pointer, buff);\n        return pointer;\n    }\n\n    getBuff(pointer, length) {\n        return this.u8.slice(pointer, pointer+ length);\n    }\n\n    setBuff(pointer, buffer) {\n        this.u8.set(new Uint8Array(buffer), pointer);\n    }\n\n    alloc(length) {\n        while (this.u32[0] & 3) this.u32[0]++;  // Return always aligned pointers\n        const res = this.u32[0];\n        this.u32[0] += length;\n        return res;\n    }\n\n    async terminate() {\n        for (let i=0; i<this.workers.length; i++) {\n            this.workers[i].postMessage([{cmd: \"TERMINATE\"}]);\n        }\n        await sleep(200);\n    }\n\n}\n", "/* global WebAssembly */\n\nexport default function thread(self) {\n    const MAXMEM = 32767;\n    let instance;\n    let memory;\n\n    if (self) {\n        self.onmessage = function(e) {\n            let data;\n            if (e.data) {\n                data = e.data;\n            } else {\n                data = e;\n            }\n\n            if (data[0].cmd == \"INIT\") {\n                init(data[0]).then(function() {\n                    self.postMessage(data.result);\n                });\n            } else if (data[0].cmd == \"TERMINATE\") {\n                self.close();\n            } else {\n                const res = runTask(data);\n                self.postMessage(res);\n            }\n        };\n    }\n\n    async function init(data) {\n        const code = new Uint8Array(data.code);\n        const wasmModule = await WebAssembly.compile(code);\n        memory = new WebAssembly.Memory({initial:data.init, maximum: MAXMEM});\n\n        instance = await WebAssembly.instantiate(wasmModule, {\n            env: {\n                \"memory\": memory\n            }\n        });\n    }\n\n\n\n    function alloc(length) {\n        const u32 = new Uint32Array(memory.buffer, 0, 1);\n        while (u32[0] & 3) u32[0]++;  // Return always aligned pointers\n        const res = u32[0];\n        u32[0] += length;\n        if (u32[0] + length > memory.buffer.byteLength) {\n            const currentPages = memory.buffer.byteLength / 0x10000;\n            let requiredPages = Math.floor((u32[0] + length) / 0x10000)+1;\n            if (requiredPages>MAXMEM) requiredPages=MAXMEM;\n            memory.grow(requiredPages-currentPages);\n        }\n        return res;\n    }\n\n    function allocBuffer(buffer) {\n        const p = alloc(buffer.byteLength);\n        setBuffer(p, buffer);\n        return p;\n    }\n\n    function getBuffer(pointer, length) {\n        const u8 = new Uint8Array(memory.buffer);\n        return new Uint8Array(u8.buffer, u8.byteOffset + pointer, length);\n    }\n\n    function setBuffer(pointer, buffer) {\n        const u8 = new Uint8Array(memory.buffer);\n        u8.set(new Uint8Array(buffer), pointer);\n    }\n\n    function runTask(task) {\n        if (task[0].cmd == \"INIT\") {\n            return init(task[0]);\n        }\n        const ctx = {\n            vars: [],\n            out: []\n        };\n        const u32a = new Uint32Array(memory.buffer, 0, 1);\n        const oldAlloc = u32a[0];\n        for (let i=0; i<task.length; i++) {\n            switch (task[i].cmd) {\n            case \"ALLOCSET\":\n                ctx.vars[task[i].var] = allocBuffer(task[i].buff);\n                break;\n            case \"ALLOC\":\n                ctx.vars[task[i].var] = alloc(task[i].len);\n                break;\n            case \"SET\":\n                setBuffer(ctx.vars[task[i].var], task[i].buff);\n                break;\n            case \"CALL\": {\n                const params = [];\n                for (let j=0; j<task[i].params.length; j++) {\n                    const p = task[i].params[j];\n                    if (typeof p.var !== \"undefined\") {\n                        params.push(ctx.vars[p.var] + (p.offset || 0));\n                    } else if (typeof p.val != \"undefined\") {\n                        params.push(p.val);\n                    }\n                }\n                instance.exports[task[i].fnName](...params);\n                break;\n            }\n            case \"GET\":\n                ctx.out[task[i].out] = getBuffer(ctx.vars[task[i].var], task[i].len).slice();\n                break;\n            default:\n                throw new Error(\"Invalid cmd\");\n            }\n        }\n        const u32b = new Uint32Array(memory.buffer, 0, 1);\n        u32b[0] = oldAlloc;\n        return ctx.out;\n    }\n\n\n    return runTask;\n}\n", "/*\nThe MIT License (MIT)\n\nCopyright (c) 2016 CoderPuppy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\nvar _endianness;\nexport function endianness() {\n  if (typeof _endianness === 'undefined') {\n    var a = new ArrayBuffer(2);\n    var b = new Uint8Array(a);\n    var c = new Uint16Array(a);\n    b[0] = 1;\n    b[1] = 2;\n    if (c[0] === 258) {\n      _endianness = 'BE';\n    } else if (c[0] === 513){\n      _endianness = 'LE';\n    } else {\n      throw new Error('unable to figure out endianess');\n    }\n  }\n  return _endianness;\n}\n\nexport function hostname() {\n  if (typeof global.location !== 'undefined') {\n    return global.location.hostname\n  } else return '';\n}\n\nexport function loadavg() {\n  return [];\n}\n\nexport function uptime() {\n  return 0;\n}\n\nexport function freemem() {\n  return Number.MAX_VALUE;\n}\n\nexport function totalmem() {\n  return Number.MAX_VALUE;\n}\n\nexport function cpus() {\n  return [];\n}\n\nexport function type() {\n  return 'Browser';\n}\n\nexport function release () {\n  if (typeof global.navigator !== 'undefined') {\n    return global.navigator.appVersion;\n  }\n  return '';\n}\n\nexport function networkInterfaces(){}\nexport function getNetworkInterfaces(){}\n\nexport function arch() {\n  return 'javascript';\n}\n\nexport function platform() {\n  return 'browser';\n}\n\nexport function tmpDir() {\n  return '/tmp';\n}\nexport var tmpdir = tmpDir;\n\nexport var EOL = '\\n';\nexport default {\n  EOL: EOL,\n  tmpdir: tmpdir,\n  tmpDir: tmpDir,\n  networkInterfaces:networkInterfaces,\n  getNetworkInterfaces: getNetworkInterfaces,\n  release: release,\n  type: type,\n  cpus: cpus,\n  totalmem: totalmem,\n  freemem: freemem,\n  uptime: uptime,\n  loadavg: loadavg,\n  hostname: hostname,\n  endianness: endianness,\n}\n", "import BigBuffer from \"./bigbuffer.js\";\n\nexport default function buildBatchApplyKey(curve, groupName) {\n    const G = curve[groupName];\n    const Fr = curve.Fr;\n    const tm = curve.tm;\n\n    curve[groupName].batchApplyKey = async function(buff, first, inc, inType, outType) {\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n        let fnName, fnAffine;\n        let sGin, sGmid, sGout;\n        if (groupName == \"G1\") {\n            if (inType == \"jacobian\") {\n                sGin = G.F.n8*3;\n                fnName = \"g1m_batchApplyKey\";\n            } else {\n                sGin = G.F.n8*2;\n                fnName = \"g1m_batchApplyKeyMixed\";\n            }\n            sGmid = G.F.n8*3;\n            if (outType == \"jacobian\") {\n                sGout = G.F.n8*3;\n            } else {\n                fnAffine = \"g1m_batchToAffine\";\n                sGout = G.F.n8*2;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"jacobian\") {\n                sGin = G.F.n8*3;\n                fnName = \"g2m_batchApplyKey\";\n            } else {\n                sGin = G.F.n8*2;\n                fnName = \"g2m_batchApplyKeyMixed\";\n            }\n            sGmid = G.F.n8*3;\n            if (outType == \"jacobian\") {\n                sGout = G.F.n8*3;\n            } else {\n                fnAffine = \"g2m_batchToAffine\";\n                sGout = G.F.n8*2;\n            }\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_batchApplyKey\";\n            sGin = G.n8;\n            sGmid = G.n8;\n            sGout = G.n8;\n        } else {\n            throw new Error(\"Invalid group: \" + groupName);\n        }\n        const nPoints = Math.floor(buff.byteLength / sGin);\n        const pointsPerChunk = Math.floor(nPoints/tm.concurrency);\n        const opPromises = [];\n        inc = Fr.e(inc);\n        let t = Fr.e(first);\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const task = [];\n\n            task.push({\n                cmd: \"ALLOCSET\",\n                var: 0,\n                buff: buff.slice(i*pointsPerChunk*sGin, i*pointsPerChunk*sGin + n*sGin)\n            });\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: t});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: inc});\n            task.push({cmd: \"ALLOC\", var: 3, len: n*Math.max(sGmid, sGout)});\n            task.push({\n                cmd: \"CALL\",\n                fnName: fnName,\n                params: [\n                    {var: 0},\n                    {val: n},\n                    {var: 1},\n                    {var: 2},\n                    {var:3}\n                ]\n            });\n            if (fnAffine) {\n                task.push({\n                    cmd: \"CALL\",\n                    fnName: fnAffine,\n                    params: [\n                        {var: 3},\n                        {val: n},\n                        {var: 3},\n                    ]\n                });\n            }\n            task.push({cmd: \"GET\", out: 0, var: 3, len: n*sGout});\n\n            opPromises.push(tm.queueAction(task));\n            t = Fr.mul(t, Fr.exp(inc, n));\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let outBuff;\n        if (buff instanceof BigBuffer) {\n            outBuff = new BigBuffer(nPoints*sGout);\n        } else {\n            outBuff = new Uint8Array(nPoints*sGout);\n        }\n\n        let p=0;\n        for (let i=0; i<result.length; i++) {\n            outBuff.set(result[i][0], p);\n            p += result[i][0].byteLength;\n        }\n\n        return outBuff;\n    };\n}\n", "\nexport default function buildPairing(curve) {\n    const tm = curve.tm;\n    curve.pairing = function pairing(a, b) {\n\n        tm.startSyncOp();\n        const pA = tm.allocBuff(curve.G1.toJacobian(a));\n        const pB = tm.allocBuff(curve.G2.toJacobian(b));\n        const pRes = tm.alloc(curve.Gt.n8);\n        tm.instance.exports[curve.name + \"_pairing\"](pA, pB, pRes);\n\n        const res = tm.getBuff(pRes, curve.Gt.n8);\n\n        tm.endSyncOp();\n        return res;\n    };\n\n    curve.pairingEq = async function pairingEq() {\n        let  buffCt;\n        let nEqs;\n        if ((arguments.length % 2) == 1) {\n            buffCt = arguments[arguments.length-1];\n            nEqs = (arguments.length -1) /2;\n        } else {\n            buffCt = curve.Gt.one;\n            nEqs = arguments.length /2;\n        }\n\n        const opPromises = [];\n        for (let i=0; i<nEqs; i++) {\n\n            const task = [];\n\n            const g1Buff = curve.G1.toJacobian(arguments[i*2]);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: g1Buff});\n            task.push({cmd: \"ALLOC\", var: 1, len: curve.prePSize});\n\n            const g2Buff = curve.G2.toJacobian(arguments[i*2 +1]);\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: g2Buff});\n            task.push({cmd: \"ALLOC\", var: 3, len: curve.preQSize});\n\n            task.push({cmd: \"ALLOC\", var: 4, len: curve.Gt.n8});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_prepareG1\", params: [\n                {var: 0},\n                {var: 1}\n            ]});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_prepareG2\", params: [\n                {var: 2},\n                {var: 3}\n            ]});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_millerLoop\", params: [\n                {var: 1},\n                {var: 3},\n                {var: 4}\n            ]});\n\n            task.push({cmd: \"GET\", out: 0, var: 4, len: curve.Gt.n8});\n\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        tm.startSyncOp();\n        const pRes = tm.alloc(curve.Gt.n8);\n        tm.instance.exports.ftm_one(pRes);\n\n        for (let i=0; i<result.length; i++) {\n            const pMR = tm.allocBuff(result[i][0]);\n            tm.instance.exports.ftm_mul(pRes, pMR, pRes);\n        }\n        tm.instance.exports[curve.name + \"_finalExponentiation\"](pRes, pRes);\n\n        const pCt = tm.allocBuff(buffCt);\n\n        const r = !!tm.instance.exports.ftm_eq(pRes, pCt);\n\n        tm.endSyncOp();\n\n        return r;\n    };\n\n    curve.prepareG1 = function(p) {\n        this.tm.startSyncOp();\n        const pP = this.tm.allocBuff(p);\n        const pPrepP = this.tm.alloc(this.prePSize);\n        this.tm.instance.exports[this.name + \"_prepareG1\"](pP, pPrepP);\n        const res = this.tm.getBuff(pPrepP, this.prePSize);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.prepareG2 = function(q) {\n        this.tm.startSyncOp();\n        const pQ = this.tm.allocBuff(q);\n        const pPrepQ = this.tm.alloc(this.preQSize);\n        this.tm.instance.exports[this.name + \"_prepareG2\"](pQ, pPrepQ);\n        const res = this.tm.getBuff(pPrepQ, this.preQSize);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.millerLoop = function(preP, preQ) {\n        this.tm.startSyncOp();\n        const pPreP = this.tm.allocBuff(preP);\n        const pPreQ = this.tm.allocBuff(preQ);\n        const pRes = this.tm.alloc(this.Gt.n8);\n        this.tm.instance.exports[this.name + \"_millerLoop\"](pPreP, pPreQ, pRes);\n        const res = this.tm.getBuff(pRes, this.Gt.n8);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.finalExponentiation = function(a) {\n        this.tm.startSyncOp();\n        const pA = this.tm.allocBuff(a);\n        const pRes = this.tm.alloc(this.Gt.n8);\n        this.tm.instance.exports[this.name + \"_finalExponentiation\"](pA, pRes);\n        const res = this.tm.getBuff(pRes, this.Gt.n8);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n}\n", "import { log2 } from \"./utils.js\";\n\nconst pTSizes = [\n    1 ,  1,  1,  1,    2,  3,  4,  5,\n    6 ,  7,  7,  8,    9, 10, 11, 12,\n    13, 13, 14, 15,   16, 16, 17, 17,\n    17, 17, 17, 17,   17, 17, 17, 17\n];\n\nexport default function buildMultiexp(curve, groupName) {\n    const G = curve[groupName];\n    const tm = G.tm;\n    async function _multiExpChunk(buffBases, buffScalars, inType, logger, logText) {\n        if ( ! (buffBases instanceof Uint8Array) ) {\n            if (logger) logger.error(`${logText} _multiExpChunk buffBases is not Uint8Array`);\n            throw new Error(`${logText} _multiExpChunk buffBases is not Uint8Array`);\n        }\n        if ( ! (buffScalars instanceof Uint8Array) ) {\n            if (logger) logger.error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);\n            throw new Error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);\n        }\n        inType = inType || \"affine\";\n\n        let sGIn;\n        let fnName;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                fnName = \"g1m_multiexpAffine_chunk\";\n                sGIn = G.F.n8*2;\n            } else {\n                fnName = \"g1m_multiexp_chunk\";\n                sGIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                fnName = \"g2m_multiexpAffine_chunk\";\n                sGIn = G.F.n8*2;\n            } else {\n                fnName = \"g2m_multiexp_chunk\";\n                sGIn = G.F.n8*3;\n            }\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n        const nPoints = Math.floor(buffBases.byteLength / sGIn);\n\n        if (nPoints == 0) return G.zero;\n        const sScalar = Math.floor(buffScalars.byteLength / nPoints);\n        if( sScalar * nPoints != buffScalars.byteLength) {\n            throw new Error(\"Scalar size does not match\");\n        }\n\n        const bitChunkSize = pTSizes[log2(nPoints)];\n        const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff: buffBases},\n                {cmd: \"ALLOCSET\", var: 1, buff: buffScalars},\n                {cmd: \"ALLOC\", var: 2, len: G.F.n8*3},\n                {cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {var: 1},\n                    {val: sScalar},\n                    {val: nPoints},\n                    {val: i*bitChunkSize},\n                    {val: Math.min(sScalar*8 - i*bitChunkSize, bitChunkSize)},\n                    {var: 2}\n                ]},\n                {cmd: \"GET\", out: 0, var: 2, len: G.F.n8*3}\n            ];\n            opPromises.push(\n                G.tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let res = G.zero;\n        for (let i=result.length-1; i>=0; i--) {\n            if (!G.isZero(res)) {\n                for (let j=0; j<bitChunkSize; j++) res = G.double(res);\n            }\n            res = G.add(res, result[i][0]);\n        }\n\n        return res;\n    }\n\n    async function _multiExp(buffBases, buffScalars, inType, logger, logText) {\n        const MAX_CHUNK_SIZE = 1 << 22;\n        const MIN_CHUNK_SIZE = 1 << 10;\n        let sGIn;\n\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sGIn = G.F.n8*2;\n            } else {\n                sGIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sGIn = G.F.n8*2;\n            } else {\n                sGIn = G.F.n8*3;\n            }\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buffBases.byteLength / sGIn);\n        const sScalar = Math.floor(buffScalars.byteLength / nPoints);\n        if( sScalar * nPoints != buffScalars.byteLength) {\n            throw new Error(\"Scalar size does not match\");\n        }\n\n        const bitChunkSize = pTSizes[log2(nPoints)];\n        const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;\n\n        let chunkSize;\n        chunkSize = Math.floor(nPoints / (tm.concurrency /nChunks));\n        if (chunkSize>MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;\n        if (chunkSize<MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;\n\n        const opPromises = [];\n        for (let i=0; i<nPoints; i += chunkSize) {\n            if (logger) logger.debug(`Multiexp start: ${logText}: ${i}/${nPoints}`);\n            const n= Math.min(nPoints - i, chunkSize);\n            const buffBasesChunk = buffBases.slice(i*sGIn, (i+n)*sGIn);\n            const buffScalarsChunk = buffScalars.slice(i*sScalar, (i+n)*sScalar);\n            opPromises.push(_multiExpChunk(buffBasesChunk, buffScalarsChunk, inType, logger, logText).then( (r) => {\n                if (logger) logger.debug(`Multiexp end: ${logText}: ${i}/${nPoints}`);\n                return r;\n            }));\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let res = G.zero;\n        for (let i=result.length-1; i>=0; i--) {\n            res = G.add(res, result[i]);\n        }\n\n        return res;\n    }\n\n    G.multiExp = async function multiExpAffine(buffBases, buffScalars, logger, logText) {\n        return await _multiExp(buffBases, buffScalars, \"jacobian\", logger, logText);\n    };\n    G.multiExpAffine = async function multiExpAffine(buffBases, buffScalars, logger, logText) {\n        return await _multiExp(buffBases, buffScalars, \"affine\", logger, logText);\n    };\n}\n", "import {log2, buffReverseBits, array2buffer, buffer2array} from \"./utils.js\";\nimport BigBuffer from \"./bigbuffer.js\";\n\n\nexport default function buildFFT(curve, groupName) {\n    const G = curve[groupName];\n    const Fr = curve.Fr;\n    const tm = G.tm;\n    async function _fft(buff, inverse, inType, outType, logger, loggerTxt) {\n\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n        const MAX_BITS_THREAD = 14;\n\n        let sIn, sMid, sOut, fnIn2Mid, fnMid2Out, fnFFTMix, fnFFTJoin, fnFFTFinal;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g1m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            if (inverse) {\n                fnFFTFinal = \"g1m_fftFinal\";\n            }\n            fnFFTJoin = \"g1m_fftJoin\";\n            fnFFTMix = \"g1m_fftMix\";\n\n            if (outType == \"affine\") {\n                sOut = G.F.n8*2;\n                fnMid2Out = \"g1m_batchToAffine\";\n            } else {\n                sOut = G.F.n8*3;\n            }\n\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g2m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            if (inverse) {\n                fnFFTFinal = \"g2m_fftFinal\";\n            }\n            fnFFTJoin = \"g2m_fftJoin\";\n            fnFFTMix = \"g2m_fftMix\";\n            if (outType == \"affine\") {\n                sOut = G.F.n8*2;\n                fnMid2Out = \"g2m_batchToAffine\";\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = G.n8;\n            sMid = G.n8;\n            sOut = G.n8;\n            if (inverse) {\n                fnFFTFinal = \"frm_fftFinal\";\n            }\n            fnFFTMix = \"frm_fftMix\";\n            fnFFTJoin = \"frm_fftJoin\";\n        }\n\n\n        let returnArray = false;\n        if (Array.isArray(buff)) {\n            buff = array2buffer(buff, sIn);\n            returnArray = true;\n        } else {\n            buff = buff.slice(0, buff.byteLength);\n        }\n\n        const nPoints = buff.byteLength / sIn;\n        const bits = log2(nPoints);\n\n        if  ((1 << bits) != nPoints) {\n            throw new Error(\"fft must be multiple of 2\" );\n        }\n\n        if (bits == Fr.s +1) {\n            let buffOut;\n\n            if (inverse) {\n                buffOut =  await _fftExtInv(buff, inType, outType, logger, loggerTxt);\n            } else {\n                buffOut =  await _fftExt(buff, inType, outType, logger, loggerTxt);\n            }\n\n            if (returnArray) {\n                return buffer2array(buffOut, sOut);\n            } else {\n                return buffOut;\n            }\n        }\n\n        let inv;\n        if (inverse) {\n            inv = Fr.inv(Fr.e(nPoints));\n        }\n\n        let buffOut;\n\n        buffReverseBits(buff, sIn);\n\n        let chunks;\n        let pointsInChunk = Math.min(1 << MAX_BITS_THREAD, nPoints);\n        let nChunks = nPoints / pointsInChunk;\n\n        while ((nChunks < tm.concurrency)&&(pointsInChunk>=16)) {\n            nChunks *= 2;\n            pointsInChunk /= 2;\n        }\n\n        const l2Chunk = log2(pointsInChunk);\n\n        const promises = [];\n        for (let i = 0; i< nChunks; i++) {\n            if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix start: ${i}/${nChunks}`);\n            const task = [];\n            task.push({cmd: \"ALLOC\", var: 0, len: sMid*pointsInChunk});\n            const buffChunk = buff.slice( (pointsInChunk * i)*sIn, (pointsInChunk * (i+1))*sIn);\n            task.push({cmd: \"SET\", var: 0, buff: buffChunk});\n            if (fnIn2Mid) {\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n            }\n            for (let j=1; j<=l2Chunk;j++) {\n                task.push({cmd: \"CALL\", fnName:fnFFTMix, params: [{var:0}, {val: pointsInChunk}, {val: j}]});\n            }\n\n            if (l2Chunk==bits) {\n                if (fnFFTFinal) {\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: inv});\n                    task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                        {var: 0},\n                        {val: pointsInChunk},\n                        {var: 1},\n                    ]});\n                }\n                if (fnMid2Out) {\n                    task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n                }\n                task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sOut});\n            } else {\n                task.push({cmd: \"GET\", out:0, var: 0, len: sMid*pointsInChunk});\n            }\n            promises.push(tm.queueAction(task).then( (r) => {\n                if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix end: ${i}/${nChunks}`);\n                return r;\n            }));\n        }\n\n        chunks = await Promise.all(promises);\n        for (let i = 0; i< nChunks; i++) chunks[i] = chunks[i][0];\n\n        for (let i = l2Chunk+1;   i<=bits; i++) {\n            if (logger) logger.debug(`${loggerTxt}: fft  ${bits}  join: ${i}/${bits}`);\n            const nGroups = 1 << (bits - i);\n            const nChunksPerGroup = nChunks / nGroups;\n            const opPromises = [];\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const first = Fr.exp( Fr.w[i], k*pointsInChunk);\n                    const inc = Fr.w[i];\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n\n                    const task = [];\n                    task.push({cmd: \"ALLOCSET\", var: 0, buff: chunks[o1]});\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: chunks[o2]});\n                    task.push({cmd: \"ALLOCSET\", var: 2, buff: first});\n                    task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n                    task.push({cmd: \"CALL\", fnName: fnFFTJoin,  params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: pointsInChunk},\n                        {var: 2},\n                        {var: 3}\n                    ]});\n                    if (i==bits) {\n                        if (fnFFTFinal) {\n                            task.push({cmd: \"ALLOCSET\", var: 4, buff: inv});\n                            task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                                {var: 0},\n                                {val: pointsInChunk},\n                                {var: 4},\n                            ]});\n                            task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                                {var: 1},\n                                {val: pointsInChunk},\n                                {var: 4},\n                            ]});\n                        }\n                        if (fnMid2Out) {\n                            task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n                            task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:1}, {val: pointsInChunk}, {var: 1}]});\n                        }\n                        task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sOut});\n                        task.push({cmd: \"GET\", out: 1, var: 1, len: pointsInChunk*sOut});\n                    } else {\n                        task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sMid});\n                        task.push({cmd: \"GET\", out: 1, var: 1, len: pointsInChunk*sMid});\n                    }\n                    opPromises.push(tm.queueAction(task).then( (r) => {\n                        if (logger) logger.debug(`${loggerTxt}: fft ${bits} join  ${i}/${bits}  ${j+1}/${nGroups} ${k}/${nChunksPerGroup/2}`);\n                        return r;\n                    }));\n                }\n            }\n\n            const res = await Promise.all(opPromises);\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n                    const resChunk = res.shift();\n                    chunks[o1] = resChunk[0];\n                    chunks[o2] = resChunk[1];\n                }\n            }\n        }\n\n        if (buff instanceof BigBuffer) {\n            buffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            buffOut = new Uint8Array(nPoints*sOut);\n        }\n        if (inverse) {\n            buffOut.set(chunks[0].slice((pointsInChunk-1)*sOut));\n            let p= sOut;\n            for (let i=nChunks-1; i>0; i--) {\n                buffOut.set(chunks[i], p);\n                p += pointsInChunk*sOut;\n                delete chunks[i];  // Liberate mem\n            }\n            buffOut.set(chunks[0].slice(0, (pointsInChunk-1)*sOut), p);\n            delete chunks[0];\n        } else {\n            for (let i=0; i<nChunks; i++) {\n                buffOut.set(chunks[i], pointsInChunk*sOut*i);\n                delete chunks[i];\n            }\n        }\n\n        if (returnArray) {\n            return buffer2array(buffOut, sOut);\n        } else {\n            return buffOut;\n        }\n    }\n\n    async function _fftExt(buff, inType, outType, logger, loggerTxt) {\n        let b1, b2;\n        b1 = buff.slice( 0 , buff.byteLength/2);\n        b2 = buff.slice( buff.byteLength/2, buff.byteLength);\n\n        const promises = [];\n\n        [b1, b2] = await _fftJoinExt(b1, b2, \"fftJoinExt\", Fr.one, Fr.shift, inType, \"jacobian\", logger, loggerTxt);\n\n        promises.push( _fft(b1, false, \"jacobian\", outType, logger, loggerTxt));\n        promises.push( _fft(b2, false, \"jacobian\", outType, logger, loggerTxt));\n\n        const res1 = await Promise.all(promises);\n\n        let buffOut;\n        if (res1[0].byteLength > (1<<28)) {\n            buffOut = new BigBuffer(res1[0].byteLength*2);\n        } else {\n            buffOut = new Uint8Array(res1[0].byteLength*2);\n        }\n\n        buffOut.set(res1[0]);\n        buffOut.set(res1[1], res1[0].byteLength);\n\n        return buffOut;\n    }\n\n    async function _fftExtInv(buff, inType, outType, logger, loggerTxt) {\n        let b1, b2;\n        b1 = buff.slice( 0 , buff.byteLength/2);\n        b2 = buff.slice( buff.byteLength/2, buff.byteLength);\n\n        const promises = [];\n\n        promises.push( _fft(b1, true, inType, \"jacobian\", logger, loggerTxt));\n        promises.push( _fft(b2, true, inType, \"jacobian\", logger, loggerTxt));\n\n        [b1, b2] = await Promise.all(promises);\n\n        const res1 = await _fftJoinExt(b1, b2, \"fftJoinExtInv\", Fr.one, Fr.shiftInv, \"jacobian\", outType, logger, loggerTxt);\n\n        let buffOut;\n        if (res1[0].byteLength > (1<<28)) {\n            buffOut = new BigBuffer(res1[0].byteLength*2);\n        } else {\n            buffOut = new Uint8Array(res1[0].byteLength*2);\n        }\n\n        buffOut.set(res1[0]);\n        buffOut.set(res1[1], res1[0].byteLength);\n\n        return buffOut;\n    }\n\n\n    async function _fftJoinExt(buff1, buff2, fn, first, inc, inType, outType, logger, loggerTxt) {\n        const MAX_CHUNK_SIZE = 1<<16;\n        const MIN_CHUNK_SIZE = 1<<4;\n\n        let fnName;\n        let fnIn2Mid, fnMid2Out;\n        let sOut, sIn, sMid;\n\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g1m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            fnName = \"g1m_\"+fn;\n            if (outType == \"affine\") {\n                fnMid2Out = \"g1m_batchToAffine\";\n                sOut = G.F.n8*2;\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g2m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            fnName = \"g2m_\"+fn;\n            sMid = G.F.n8*3;\n            if (outType == \"affine\") {\n                fnMid2Out = \"g2m_batchToAffine\";\n                sOut = G.F.n8*2;\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = Fr.n8;\n            sOut = Fr.n8;\n            sMid = Fr.n8;\n            fnName = \"frm_\" + fn;\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        if (buff1.byteLength != buff2.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const nPoints = Math.floor(buff1.byteLength / sIn);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        let chunkSize = Math.floor(nPoints /tm.concurrency);\n        if (chunkSize < MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;\n        if (chunkSize > MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;\n\n        const opPromises = [];\n\n        for (let i=0; i<nPoints; i += chunkSize) {\n            if (logger) logger.debug(`${loggerTxt}: fftJoinExt Start: ${i}/${nPoints}`);\n            const n= Math.min(nPoints - i, chunkSize);\n\n            const firstChunk = Fr.mul(first, Fr.exp( inc, i));\n            const task = [];\n\n            const b1 = buff1.slice(i*sIn, (i+n)*sIn);\n            const b2 = buff2.slice(i*sIn, (i+n)*sIn);\n\n            task.push({cmd: \"ALLOC\", var: 0, len: sMid*n});\n            task.push({cmd: \"SET\", var: 0, buff: b1});\n            task.push({cmd: \"ALLOC\", var: 1, len: sMid*n});\n            task.push({cmd: \"SET\", var: 1, buff: b2});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: firstChunk});\n            task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n            if (fnIn2Mid) {\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:0}, {val: n}, {var: 0}]});\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:1}, {val: n}, {var: 1}]});\n            }\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {var: 1},\n                {val: n},\n                {var: 2},\n                {var: 3},\n                {val: Fr.s},\n            ]});\n            if (fnMid2Out) {\n                task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: n}, {var: 0}]});\n                task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:1}, {val: n}, {var: 1}]});\n            }\n            task.push({cmd: \"GET\", out: 0, var: 0, len: n*sOut});\n            task.push({cmd: \"GET\", out: 1, var: 1, len: n*sOut});\n            opPromises.push(\n                tm.queueAction(task).then( (r) => {\n                    if (logger) logger.debug(`${loggerTxt}: fftJoinExt End: ${i}/${nPoints}`);\n                    return r;\n                })\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut1;\n        let fullBuffOut2;\n        if (nPoints * sOut > 1<<28) {\n            fullBuffOut1 = new BigBuffer(nPoints*sOut);\n            fullBuffOut2 = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut1 = new Uint8Array(nPoints*sOut);\n            fullBuffOut2 = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut1.set(result[i][0], p);\n            fullBuffOut2.set(result[i][1], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return [fullBuffOut1, fullBuffOut2];\n    }\n\n\n    G.fft = async function(buff, inType, outType, logger, loggerTxt) {\n        return await _fft(buff, false, inType, outType, logger, loggerTxt);\n    };\n\n    G.ifft = async function(buff, inType, outType, logger, loggerTxt) {\n        return await _fft(buff, true, inType, outType, logger, loggerTxt);\n    };\n\n    G.lagrangeEvaluations = async function (buff, inType, outType, logger, loggerTxt) {\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n\n        let sIn;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n            } else {\n                sIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n            } else {\n                sIn = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = Fr.n8;\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = buff.byteLength /sIn;\n        const bits = log2(nPoints);\n\n        if ((2 ** bits)*sIn != buff.byteLength) {\n            if (logger) logger.error(\"lagrangeEvaluations iinvalid input size\");\n            throw new Error(\"lagrangeEvaluations invalid Input size\");\n        }\n\n        if (bits <= Fr.s) {\n            return await G.ifft(buff, inType, outType, logger, loggerTxt);\n        }\n\n        if (bits > Fr.s+1) {\n            if (logger) logger.error(\"lagrangeEvaluations input too big\");\n            throw new Error(\"lagrangeEvaluations input too big\");\n        }\n\n        let t0 = buff.slice(0, buff.byteLength/2);\n        let t1 = buff.slice(buff.byteLength/2, buff.byteLength);\n\n\n        const shiftToSmallM = Fr.exp(Fr.shift, nPoints/2);\n        const sConst = Fr.inv( Fr.sub(Fr.one, shiftToSmallM));\n\n        [t0, t1] = await _fftJoinExt(t0, t1, \"prepareLagrangeEvaluation\", sConst, Fr.shiftInv, inType, \"jacobian\", logger, loggerTxt + \" prep\");\n\n        const promises = [];\n\n        promises.push( _fft(t0, true, \"jacobian\", outType, logger, loggerTxt + \" t0\"));\n        promises.push( _fft(t1, true, \"jacobian\", outType, logger, loggerTxt + \" t1\"));\n\n        [t0, t1] = await Promise.all(promises);\n\n        let buffOut;\n        if (t0.byteLength > (1<<28)) {\n            buffOut = new BigBuffer(t0.byteLength*2);\n        } else {\n            buffOut = new Uint8Array(t0.byteLength*2);\n        }\n\n        buffOut.set(t0);\n        buffOut.set(t1, t0.byteLength);\n\n        return buffOut;\n    };\n\n    G.fftMix = async function fftMix(buff) {\n        const sG = G.F.n8*3;\n        let fnName, fnFFTJoin;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftMix\";\n            fnFFTJoin = \"g1m_fftJoin\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftMix\";\n            fnFFTJoin = \"g2m_fftJoin\";\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_fftMix\";\n            fnFFTJoin = \"frm_fftJoin\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buff.byteLength / sG);\n        const power = log2(nPoints);\n\n        let nChunks = 1 << log2(tm.concurrency);\n\n        if (nPoints <= nChunks*2) nChunks = 1;\n\n        const pointsPerChunk = nPoints / nChunks;\n\n        const powerChunk = log2(pointsPerChunk);\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [];\n            const b = buff.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b});\n            for (let j=1; j<=powerChunk; j++) {\n                task.push({cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {val: pointsPerChunk},\n                    {val: j}\n                ]});\n            }\n            task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        const chunks = [];\n        for (let i=0; i<result.length; i++) chunks[i] = result[i][0];\n\n\n        for (let i = powerChunk+1; i<=power; i++) {\n            const nGroups = 1 << (power - i);\n            const nChunksPerGroup = nChunks / nGroups;\n            const opPromises = [];\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const first = Fr.exp( Fr.w[i], k*pointsPerChunk);\n                    const inc = Fr.w[i];\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n\n                    const task = [];\n                    task.push({cmd: \"ALLOCSET\", var: 0, buff: chunks[o1]});\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: chunks[o2]});\n                    task.push({cmd: \"ALLOCSET\", var: 2, buff: first});\n                    task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n                    task.push({cmd: \"CALL\", fnName: fnFFTJoin,  params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: pointsPerChunk},\n                        {var: 2},\n                        {var: 3}\n                    ]});\n                    task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n                    task.push({cmd: \"GET\", out: 1, var: 1, len: pointsPerChunk*sG});\n                    opPromises.push(tm.queueAction(task));\n                }\n            }\n\n            const res = await Promise.all(opPromises);\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n                    const resChunk = res.shift();\n                    chunks[o1] = resChunk[0];\n                    chunks[o2] = resChunk[1];\n                }\n            }\n        }\n\n        let fullBuffOut;\n        if (buff instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sG);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sG);\n        }\n        let p =0;\n        for (let i=0; i<nChunks; i++) {\n            fullBuffOut.set(chunks[i], p);\n            p+=chunks[i].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n\n    G.fftJoin = async function fftJoin(buff1, buff2, first, inc) {\n        const sG = G.F.n8*3;\n        let fnName;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftJoin\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftJoin\";\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_fftJoin\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        if (buff1.byteLength != buff2.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const nPoints = Math.floor(buff1.byteLength / sG);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        let nChunks = 1 << log2(tm.concurrency);\n        if (nPoints <= nChunks*2) nChunks = 1;\n\n        const pointsPerChunk = nPoints / nChunks;\n\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [];\n\n            const firstChunk = Fr.mul(first, Fr.exp(inc, i*pointsPerChunk));\n            const b1 = buff1.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            const b2 = buff2.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b1});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: b2});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: firstChunk});\n            task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {var: 1},\n                {val: pointsPerChunk},\n                {var: 2},\n                {var: 3}\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n            task.push({cmd: \"GET\", out: 1, var: 1, len: pointsPerChunk*sG});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut1;\n        let fullBuffOut2;\n        if (buff1 instanceof BigBuffer) {\n            fullBuffOut1 = new BigBuffer(nPoints*sG);\n            fullBuffOut2 = new BigBuffer(nPoints*sG);\n        } else {\n            fullBuffOut1 = new Uint8Array(nPoints*sG);\n            fullBuffOut2 = new Uint8Array(nPoints*sG);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut1.set(result[i][0], p);\n            fullBuffOut2.set(result[i][1], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return [fullBuffOut1, fullBuffOut2];\n    };\n\n\n\n    G.fftFinal =  async function fftFinal(buff, factor) {\n        const sG = G.F.n8*3;\n        const sGout = G.F.n8*2;\n        let fnName, fnToAffine;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftFinal\";\n            fnToAffine = \"g1m_batchToAffine\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftFinal\";\n            fnToAffine = \"g2m_batchToAffine\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buff.byteLength / sG);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        const pointsPerChunk = Math.floor(nPoints / tm.concurrency);\n\n        const opPromises = [];\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n            const task = [];\n            const b = buff.slice((i* pointsPerChunk)*sG, (i*pointsPerChunk+n)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: factor});\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {val: n},\n                {var: 1},\n            ]});\n            task.push({cmd: \"CALL\", fnName: fnToAffine, params: [\n                {var: 0},\n                {val: n},\n                {var: 0},\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 0, len: n*sGout});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buff instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sGout);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sGout);\n        }\n\n        let p =0;\n        for (let i=result.length-1; i>=0; i--) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexport { ModuleBuilder } from \"./src/modulebuilder.js\";\nexport { ModuleBuilderWat } from \"./src/modulebuilder_wat.js\";\nexport { buildProtoboard } from \"./src/protoboard.js\";\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nimport { FunctionBuilder } from \"./functionbuilder.js\";\nimport * as utils from \"./utils.js\";\n\nexport class ModuleBuilder {\n\n    constructor() {\n        this.functions = [];\n        this.functionIdxByName = {};\n        this.nImportFunctions = 0;\n        this.nInternalFunctions =0;\n        this.memory = {\n            pagesSize: 1,\n            moduleName: \"env\",\n            fieldName: \"memory\"\n        };\n        this.free = 8;\n        this.datas = [];\n        this.modules = {};\n        this.exports = [];\n        this.functionsTable = [];\n    }\n\n    build() {\n        this._setSignatures();\n        return new Uint8Array([\n            ...utils.u32(0x6d736100),\n            ...utils.u32(1),\n            ...this._buildType(),\n            ...this._buildImport(),\n            ...this._buildFunctionDeclarations(),\n            ...this._buildFunctionsTable(),\n            ...this._buildExports(),\n            ...this._buildElements(),\n            ...this._buildCode(),\n            ...this._buildData()\n        ]);\n    }\n\n    addFunction(fnName) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilder(this, fnName, \"internal\"));\n\n        this.nInternalFunctions++;\n        return this.functions[idx];\n    }\n\n    addIimportFunction(fnName, moduleName, _fieldName) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        if (  (this.functions.length>0)\n            &&(this.functions[this.functions.length-1].type == \"internal\"))\n            throw new Error(`Import functions must be declared before internal: ${fnName}`);\n\n        let fieldName = _fieldName || fnName;\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilder(this, fnName, \"import\", moduleName, fieldName));\n\n        this.nImportFunctions ++;\n        return this.functions[idx];\n    }\n\n    setMemory(pagesSize, moduleName, fieldName) {\n        this.memory = {\n            pagesSize: pagesSize,\n            moduleName: moduleName || \"env\",\n            fieldName: fieldName || \"memory\"\n        };\n    }\n\n    exportFunction(fnName, _exportName) {\n        const exportName = _exportName || fnName;\n        if (typeof(this.functionIdxByName[fnName]) === \"undefined\")\n            throw new Error(`Function not defined: ${fnName}`);\n        const idx = this.functionIdxByName[fnName];\n        if (exportName != fnName) {\n            this.functionIdxByName[exportName] = idx;\n        }\n        this.exports.push({\n            exportName: exportName,\n            idx: idx\n        });\n    }\n\n    addFunctionToTable(fnName) {\n        const idx = this.functionIdxByName[fnName];\n        this.functionsTable.push(idx);\n    }\n\n    addData(offset, bytes) {\n        this.datas.push({\n            offset: offset,\n            bytes: bytes\n        });\n    }\n\n    alloc(a, b) {\n        let size;\n        let bytes;\n        if ((Array.isArray(a) || ArrayBuffer.isView(a)) && (typeof(b) === \"undefined\")) {\n            size = a.length;\n            bytes = a;\n        } else {\n            size = a;\n            bytes = b;\n        }\n        size = (((size-1)>>3) +1)<<3;       // Align to 64 bits.\n        const p = this.free;\n        this.free += size;\n        if (bytes) {\n            this.addData(p, bytes);\n        }\n        return p;\n    }\n\n    allocString(s) {\n        const encoder = new globalThis.TextEncoder();\n        const uint8array = encoder.encode(s);\n        return this.alloc([...uint8array, 0]);\n    }\n\n    _setSignatures() {\n        this.signatures = [];\n        const signatureIdxByName = {};\n        if (this.functionsTable.length>0) {\n            const signature = this.functions[this.functionsTable[0]].getSignature();\n            const signatureName = \"s_\"+utils.toHexString(signature);\n            signatureIdxByName[signatureName] = 0;\n            this.signatures.push(signature);\n        }\n        for (let i=0; i<this.functions.length; i++) {\n            const signature = this.functions[i].getSignature();\n            const signatureName = \"s_\"+utils.toHexString(signature);\n            if (typeof(signatureIdxByName[signatureName]) === \"undefined\") {\n                signatureIdxByName[signatureName] = this.signatures.length;\n                this.signatures.push(signature);\n            }\n\n            this.functions[i].signatureIdx = signatureIdxByName[signatureName];\n        }\n\n    }\n\n    _buildSection(sectionType, section) {\n        return [sectionType, ...utils.varuint32(section.length), ...section];\n    }\n\n    _buildType() {\n        return this._buildSection(\n            0x01,\n            [\n                ...utils.varuint32(this.signatures.length),\n                ...[].concat(...this.signatures)\n            ]\n        );\n    }\n\n    _buildImport() {\n        const entries = [];\n        entries.push([\n            ...utils.string(this.memory.moduleName),\n            ...utils.string(this.memory.fieldName),\n            0x02,\n            0x00,   //Flags no init valua\n            ...utils.varuint32(this.memory.pagesSize)\n        ]);\n        for (let i=0; i< this.nImportFunctions; i++) {\n            entries.push([\n                ...utils.string(this.functions[i].moduleName),\n                ...utils.string(this.functions[i].fieldName),\n                0x00,\n                ...utils.varuint32(this.functions[i].signatureIdx)\n            ]);\n        }\n        return this._buildSection(\n            0x02,\n            utils.varuint32(entries.length).concat(...entries)\n        );\n    }\n\n    _buildFunctionDeclarations() {\n        const entries = [];\n        for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {\n            entries.push(...utils.varuint32(this.functions[i].signatureIdx));\n        }\n        return this._buildSection(\n            0x03,\n            [\n                ...utils.varuint32(entries.length),\n                ...[...entries]\n            ]\n        );\n    }\n\n    _buildFunctionsTable() {\n        if (this.functionsTable.length == 0) return [];\n        return this._buildSection(\n            0x04,\n            [\n                ...utils.varuint32(1),\n                0x70, 0, ...utils.varuint32(this.functionsTable.length)\n            ]\n        );\n    }\n\n    _buildElements() {\n        if (this.functionsTable.length == 0) return [];\n        const entries = [];\n        for (let i=0; i<this.functionsTable.length; i++) {\n            entries.push(...utils.varuint32(this.functionsTable[i]));\n        }\n        return this._buildSection(\n            0x09,\n            [\n                ...utils.varuint32(1),      // 1 entry\n                ...utils.varuint32(0),      // Table (0 in MVP)\n                0x41,                       // offset 0\n                ...utils.varint32(0),\n                0x0b,\n                ...utils.varuint32(this.functionsTable.length), // Number of elements\n                ...[...entries]\n            ]\n        );\n    }\n\n    _buildExports() {\n        const entries = [];\n        for (let i=0; i< this.exports.length; i++) {\n            entries.push([\n                ...utils.string(this.exports[i].exportName),\n                0x00,\n                ...utils.varuint32(this.exports[i].idx)\n            ]);\n        }\n        return this._buildSection(\n            0x07,\n            utils.varuint32(entries.length).concat(...entries)\n        );\n    }\n\n    _buildCode() {\n        const entries = [];\n        for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {\n            entries.push(this.functions[i].getBody());\n        }\n        return this._buildSection(\n            0x0a,\n            utils.varuint32(entries.length).concat(...entries)\n        );\n    }\n\n    _buildData() {\n        const entries = [];\n        entries.push([\n            0x00,\n            0x41,\n            0x00,\n            0x0b,\n            0x04,\n            ...utils.u32(this.free)\n        ]);\n        for (let i=0; i< this.datas.length; i++) {\n            entries.push([\n                0x00,\n                0x41,\n                ...utils.varint32(this.datas[i].offset),\n                0x0b,\n                ...utils.varuint32(this.datas[i].bytes.length),\n                ...this.datas[i].bytes,\n            ]);\n        }\n        return this._buildSection(\n            0x0b,\n            utils.varuint32(entries.length).concat(...entries)\n        );\n    }\n\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { CodeBuilder } from \"./codebuilder.js\";\nimport * as utils from \"./utils.js\";\n\nconst typeCodes = {\n    \"i32\": 0x7f,\n    \"i64\": 0x7e,\n    \"f32\": 0x7d,\n    \"f64\": 0x7c,\n    \"anyfunc\": 0x70,\n    \"func\": 0x60,\n    \"emptyblock\": 0x40\n};\n\n\nexport class FunctionBuilder {\n\n    constructor (module, fnName, fnType, moduleName, fieldName) {\n        if (fnType == \"import\") {\n            this.fnType = \"import\";\n            this.moduleName = moduleName;\n            this.fieldName = fieldName;\n        } else if (fnType == \"internal\") {\n            this.fnType = \"internal\";\n        } else {\n            throw new Error(\"Invalid function fnType: \" + fnType);\n        }\n        this.module = module;\n        this.fnName = fnName;\n        this.params = [];\n        this.locals = [];\n        this.localIdxByName = {};\n        this.code = [];\n        this.returnType = null;\n        this.nextLocal =0;\n    }\n\n    addParam(paramName, paramType) {\n        if (this.localIdxByName[paramName])\n            throw new Error(`param already exists. Function: ${this.fnName}, Param: ${paramName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[paramName] = idx;\n        this.params.push({\n            type: paramType\n        });\n    }\n\n    addLocal(localName, localType, _length) {\n        const length = _length || 1;\n        if (this.localIdxByName[localName])\n            throw new Error(`local already exists. Function: ${this.fnName}, Param: ${localName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[localName] = idx;\n        this.locals.push({\n            type: localType,\n            length: length\n        });\n    }\n\n    setReturnType(returnType) {\n        if (this.returnType)\n            throw new Error(`returnType already defined. Function: ${this.fnName}`);\n        this.returnType = returnType;\n    }\n\n    getSignature() {\n        const params = [...utils.varuint32(this.params.length), ...this.params.map((p) => typeCodes[p.type])];\n        const returns = this.returnType ? [0x01, typeCodes[this.returnType]] : [0];\n        return [0x60, ...params, ...returns];\n    }\n\n    getBody() {\n        const locals = this.locals.map((l) => [\n            ...utils.varuint32(l.length),\n            typeCodes[l.type]\n        ]);\n\n        const body = [\n            ...utils.varuint32(this.locals.length),\n            ...[].concat(...locals),\n            ...this.code,\n            0x0b\n        ];\n        return [\n            ...utils.varuint32(body.length),\n            ...body\n        ];\n    }\n\n    addCode(...code) {\n        this.code.push(...[].concat(...[...code]));\n    }\n\n    getCodeBuilder() {\n        return new CodeBuilder(this);\n    }\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as utils from \"./utils.js\";\n\nexport class CodeBuilder {\n    constructor(func) {\n        this.func = func;\n        this.functionName = func.functionName;\n        this.module = func.module;\n    }\n\n    setLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [...valCode, 0x21, ...utils.varuint32( idx )];\n    }\n\n    teeLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [...valCode, 0x22, ...utils.varuint32( idx )];\n    }\n\n    getLocal(localName) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [0x20, ...utils.varuint32( idx )];\n    }\n\n    i64_load8_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 8 bits alignment by default\n        return [...idxCode, 0x30, align, ...utils.varuint32(offset)];\n    }\n\n    i64_load8_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 8 bits alignment by default\n        return [...idxCode, 0x31, align, ...utils.varuint32(offset)];\n    }\n\n    i64_load16_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 16 bits alignment by default\n        return [...idxCode, 0x32, align, ...utils.varuint32(offset)];\n    }\n\n    i64_load16_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 16 bits alignment by default\n        return [...idxCode, 0x33, align, ...utils.varuint32(offset)];\n    }\n\n    i64_load32_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x34, align, ...utils.varuint32(offset)];\n    }\n\n    i64_load32_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x35, align, ...utils.varuint32(offset)];\n    }\n\n    i64_load(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 3 : _align;  // 64 bits alignment by default\n        return [...idxCode, 0x29, align, ...utils.varuint32(offset)];\n    }\n\n\n    i64_store(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 3;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 3;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x37, align, ...utils.varuint32(offset)];\n    }\n\n    i64_store32(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 2;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 2;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3e, align, ...utils.varuint32(offset)];\n    }\n\n\n    i64_store16(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 1;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 1;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3d, align, ...utils.varuint32(offset)];\n    }\n\n\n    i64_store8(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 0;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 0;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3c, align, ...utils.varuint32(offset)];\n    }\n\n    i32_load8_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2c, align, ...utils.varuint32(offset)];\n    }\n\n    i32_load8_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 0 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2d, align, ...utils.varuint32(offset)];\n    }\n\n    i32_load16_s(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2e, align, ...utils.varuint32(offset)];\n    }\n\n    i32_load16_u(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 1 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x2f, align, ...utils.varuint32(offset)];\n    }\n\n    i32_load(idxCode, _offset, _align) {\n        const offset = _offset || 0;\n        const align = (_align === undefined) ? 2 : _align;  // 32 bits alignment by default\n        return [...idxCode, 0x28, align, ...utils.varuint32(offset)];\n    }\n\n    i32_store(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 2;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 2;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x36, align, ...utils.varuint32(offset)];\n    }\n\n\n    i32_store16(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 1;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 1;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3b, align, ...utils.varuint32(offset)];\n    }\n\n    i32_store8(idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (Array.isArray(_offset)) {\n            offset = 0;\n            align = 0;\n            codeVal = _offset;\n        } else if (Array.isArray(_align)) {\n            offset = _offset;\n            align = 0;\n            codeVal = _align;\n        } else if (Array.isArray(_codeVal)) {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        return [...idxCode, ...codeVal, 0x3a, align, ...utils.varuint32(offset)];\n    }\n\n    call(fnName, ...args) {\n        const idx = this.module.functionIdxByName[fnName];\n        if (idx === undefined)\n            throw new Error(`Function not defined: Function: ${fnName}`);\n        return [...[].concat(...args), 0x10, ...utils.varuint32(idx)];\n    }\n\n    call_indirect(fnIdx, ...args) {\n        return [...[].concat(...args), ...fnIdx, 0x11, 0, 0];\n    }\n\n    if(condCode, thenCode, elseCode) {\n        if (elseCode) {\n            return [...condCode, 0x04, 0x40, ...thenCode, 0x05, ...elseCode, 0x0b];\n        } else {\n            return [...condCode, 0x04, 0x40, ...thenCode, 0x0b];\n        }\n    }\n\n    block(bCode) { return [0x02, 0x40, ...bCode, 0x0b]; }\n    loop(...args) {\n        return [0x03, 0x40, ...[].concat(...[...args]), 0x0b];\n    }\n    br_if(relPath, condCode) { return [...condCode, 0x0d, ...utils.varuint32(relPath)]; }\n    br(relPath) { return [0x0c, ...utils.varuint32(relPath)]; }\n    ret(rCode) { return [...rCode, 0x0f]; }\n    drop(dCode) { return [...dCode,  0x1a]; }\n\n    i64_const(num) { return [0x42, ...utils.varint64(num)]; }\n    i32_const(num) { return [0x41, ...utils.varint32(num)]; }\n\n\n    i64_eqz(opcode) { return [...opcode, 0x50]; }\n    i64_eq(op1code, op2code) { return [...op1code, ...op2code, 0x51]; }\n    i64_ne(op1code, op2code) { return [...op1code, ...op2code, 0x52]; }\n    i64_lt_s(op1code, op2code) { return [...op1code, ...op2code, 0x53]; }\n    i64_lt_u(op1code, op2code) { return [...op1code, ...op2code, 0x54]; }\n    i64_gt_s(op1code, op2code) { return [...op1code, ...op2code, 0x55]; }\n    i64_gt_u(op1code, op2code) { return [...op1code, ...op2code, 0x56]; }\n    i64_le_s(op1code, op2code) { return [...op1code, ...op2code, 0x57]; }\n    i64_le_u(op1code, op2code) { return [...op1code, ...op2code, 0x58]; }\n    i64_ge_s(op1code, op2code) { return [...op1code, ...op2code, 0x59]; }\n    i64_ge_u(op1code, op2code) { return [...op1code, ...op2code, 0x5a]; }\n    i64_add(op1code, op2code) { return [...op1code, ...op2code, 0x7c]; }\n    i64_sub(op1code, op2code) { return [...op1code, ...op2code, 0x7d]; }\n    i64_mul(op1code, op2code) { return [...op1code, ...op2code, 0x7e]; }\n    i64_div_s(op1code, op2code) { return [...op1code, ...op2code, 0x7f]; }\n    i64_div_u(op1code, op2code) { return [...op1code, ...op2code, 0x80]; }\n    i64_rem_s(op1code, op2code) { return [...op1code, ...op2code, 0x81]; }\n    i64_rem_u(op1code, op2code) { return [...op1code, ...op2code, 0x82]; }\n    i64_and(op1code, op2code) { return [...op1code, ...op2code, 0x83]; }\n    i64_or(op1code, op2code) { return [...op1code, ...op2code, 0x84]; }\n    i64_xor(op1code, op2code) { return [...op1code, ...op2code, 0x85]; }\n    i64_shl(op1code, op2code) { return [...op1code, ...op2code, 0x86]; }\n    i64_shr_s(op1code, op2code) { return [...op1code, ...op2code, 0x87]; }\n    i64_shr_u(op1code, op2code) { return [...op1code, ...op2code, 0x88]; }\n    i64_extend_i32_s(op1code) { return [...op1code, 0xac]; }\n    i64_extend_i32_u(op1code) { return [...op1code, 0xad]; }\n    i64_clz(op1code) { return [...op1code, 0x79]; }\n    i64_ctz(op1code) { return [...op1code, 0x7a]; }\n\n    i32_eqz(op1code) { return [...op1code, 0x45]; }\n    i32_eq(op1code, op2code) { return [...op1code, ...op2code, 0x46]; }\n    i32_ne(op1code, op2code) { return [...op1code, ...op2code, 0x47]; }\n    i32_lt_s(op1code, op2code) { return [...op1code, ...op2code, 0x48]; }\n    i32_lt_u(op1code, op2code) { return [...op1code, ...op2code, 0x49]; }\n    i32_gt_s(op1code, op2code) { return [...op1code, ...op2code, 0x4a]; }\n    i32_gt_u(op1code, op2code) { return [...op1code, ...op2code, 0x4b]; }\n    i32_le_s(op1code, op2code) { return [...op1code, ...op2code, 0x4c]; }\n    i32_le_u(op1code, op2code) { return [...op1code, ...op2code, 0x4d]; }\n    i32_ge_s(op1code, op2code) { return [...op1code, ...op2code, 0x4e]; }\n    i32_ge_u(op1code, op2code) { return [...op1code, ...op2code, 0x4f]; }\n    i32_add(op1code, op2code) { return [...op1code, ...op2code, 0x6a]; }\n    i32_sub(op1code, op2code) { return [...op1code, ...op2code, 0x6b]; }\n    i32_mul(op1code, op2code) { return [...op1code, ...op2code, 0x6c]; }\n    i32_div_s(op1code, op2code) { return [...op1code, ...op2code, 0x6d]; }\n    i32_div_u(op1code, op2code) { return [...op1code, ...op2code, 0x6e]; }\n    i32_rem_s(op1code, op2code) { return [...op1code, ...op2code, 0x6f]; }\n    i32_rem_u(op1code, op2code) { return [...op1code, ...op2code, 0x70]; }\n    i32_and(op1code, op2code) { return [...op1code, ...op2code, 0x71]; }\n    i32_or(op1code, op2code) { return [...op1code, ...op2code, 0x72]; }\n    i32_xor(op1code, op2code) { return [...op1code, ...op2code, 0x73]; }\n    i32_shl(op1code, op2code) { return [...op1code, ...op2code, 0x74]; }\n    i32_shr_s(op1code, op2code) { return [...op1code, ...op2code, 0x75]; }\n    i32_shr_u(op1code, op2code) { return [...op1code, ...op2code, 0x76]; }\n    i32_rotl(op1code, op2code) { return [...op1code, ...op2code, 0x77]; }\n    i32_rotr(op1code, op2code) { return [...op1code, ...op2code, 0x78]; }\n    i32_wrap_i64(op1code) { return [...op1code, 0xa7]; }\n    i32_clz(op1code) { return [...op1code, 0x67]; }\n    i32_ctz(op1code) { return [...op1code, 0x68]; }\n\n    unreachable() { return [ 0x0 ]; }\n\n    current_memory() { return [ 0x3f, 0]; }\n\n    comment() { return []; }\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexport function toNumber(n) {\n    return BigInt(n);\n}\n\nexport function isNegative(n) {\n    return n < 0n;\n}\n\nexport function isZero(n) {\n    return n === 0n;\n}\n\nexport function bitLength(n) {\n    if (isNegative(n)) {\n        return n.toString(2).length - 1; // discard the - sign\n    } else {\n        return n.toString(2).length;\n    }\n}\n\nexport function u32(n) {\n    const b = [];\n    const v = toNumber(n);\n    b.push(Number(v & 0xFFn));\n    b.push(Number(v >> 8n & 0xFFn));\n    b.push(Number(v >> 16n & 0xFFn));\n    b.push(Number(v >> 24n & 0xFFn));\n    return b;\n}\n\nexport function u64(n) {\n    const b = [];\n    const v = toNumber(n);\n    b.push(Number(v & 0xFFn));\n    b.push(Number(v >> 8n & 0xFFn));\n    b.push(Number(v >> 16n & 0xFFn));\n    b.push(Number(v >> 24n & 0xFFn));\n    b.push(Number(v >> 32n & 0xFFn));\n    b.push(Number(v >> 40n & 0xFFn));\n    b.push(Number(v >> 48n & 0xFFn));\n    b.push(Number(v >> 56n & 0xFFn));\n    return b;\n}\n\nexport function toUTF8Array(str) {\n    var utf8 = [];\n    for (var i=0; i < str.length; i++) {\n        var charcode = str.charCodeAt(i);\n        if (charcode < 0x80) utf8.push(charcode);\n        else if (charcode < 0x800) {\n            utf8.push(0xc0 | (charcode >> 6),\n                0x80 | (charcode & 0x3f));\n        }\n        else if (charcode < 0xd800 || charcode >= 0xe000) {\n            utf8.push(0xe0 | (charcode >> 12),\n                0x80 | ((charcode>>6) & 0x3f),\n                0x80 | (charcode & 0x3f));\n        }\n        // surrogate pair\n        else {\n            i++;\n            // UTF-16 encodes 0x10000-0x10FFFF by\n            // subtracting 0x10000 and splitting the\n            // 20 bits of 0x0-0xFFFFF into two halves\n            charcode = 0x10000 + (((charcode & 0x3ff)<<10)\n                      | (str.charCodeAt(i) & 0x3ff));\n            utf8.push(0xf0 | (charcode >>18),\n                0x80 | ((charcode>>12) & 0x3f),\n                0x80 | ((charcode>>6) & 0x3f),\n                0x80 | (charcode & 0x3f));\n        }\n    }\n    return utf8;\n}\n\nexport function string(str) {\n    const bytes = toUTF8Array(str);\n    return [ ...varuint32(bytes.length), ...bytes ];\n}\n\nexport function varuint(n) {\n    const code = [];\n    let v = toNumber(n);\n    if (isNegative(v)) throw new Error(\"Number cannot be negative\");\n    while (!isZero(v)) {\n        code.push(Number(v & 0x7Fn));\n        v = v >> 7n;\n    }\n    if (code.length==0) code.push(0);\n    for (let i=0; i<code.length-1; i++) {\n        code[i] = code[i] | 0x80;\n    }\n    return code;\n}\n\nexport function varint(_n) {\n    let n, sign;\n    const bits = bitLength(_n);\n    if (_n<0) {\n        sign = true;\n        n = (1n << BigInt(bits)) + _n;\n    } else {\n        sign = false;\n        n = toNumber(_n);\n    }\n    const paddingBits = 7 - (bits % 7);\n\n    const padding = ((1n << BigInt(paddingBits)) - 1n) << BigInt(bits);\n    const paddingMask = ((1 << (7 - paddingBits))-1) | 0x80;\n\n    const code = varuint(n + padding);\n\n    if (!sign) {\n        code[code.length-1] = code[code.length-1] & paddingMask;\n    }\n\n    return code;\n}\n\nexport function varint32(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFn) throw new Error(\"Number too big\");\n    if (v > 0x7FFFFFFFn) v = v - 0x100000000n;\n    // bigInt(\"-80000000\", 16) as base10\n    if (v < -2147483648n) throw new Error(\"Number too small\");\n    return varint(v);\n}\n\nexport function varint64(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFFFFFFFFFn) throw new Error(\"Number too big\");\n    if (v > 0x7FFFFFFFFFFFFFFFn) v = v - 0x10000000000000000n;\n    // bigInt(\"-8000000000000000\", 16) as base10\n    if (v < -9223372036854775808n) throw new Error(\"Number too small\");\n    return varint(v);\n}\n\nexport function varuint32(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFn) throw new Error(\"Number too big\");\n    return varuint(v);\n}\n\nexport function varuint64(n) {\n    let v = toNumber(n);\n    if (v > 0xFFFFFFFFFFFFFFFFn) throw new Error(\"Number too big\");\n    return varuint(v);\n}\n\nexport function toHexString(byteArray) {\n    return Array.from(byteArray, function(byte) {\n        return (\"0\" + (byte & 0xFF).toString(16)).slice(-2);\n    }).join(\"\");\n}\n\nexport function ident(text) {\n    if (typeof text === \"string\") {\n        let lines = text.split(\"\\n\");\n        for (let i=0; i<lines.length; i++) {\n            if (lines[i]) lines[i] = \"    \"+lines[i];\n        }\n        return lines.join(\"\\n\");\n    } else if (Array.isArray(text)) {\n        for (let i=0; i<text.length; i++ ) {\n            text[i] = ident(text[i]);\n        }\n        return text;\n    }\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\nimport { FunctionBuilderWat } from \"./functionbuilder_wat.js\";\nimport * as utils from \"./utils.js\";\n\nexport class ModuleBuilderWat {\n\n    constructor() {\n        this.functions = [];\n        this.functionIdxByName = {};\n        this.nImportFunctions = 0;\n        this.nInternalFunctions =0;\n        this.memory = {\n            pagesSize: 1,\n            moduleName: \"env\",\n            fieldName: \"memory\"\n        };\n        this.free = 8;\n        this.datas = [];\n        this.modules = {};\n        this.exports = [];\n        this.functionsTable = [];\n    }\n\n    build() {\n        const src = [];\n        this._setSignatures();\n        src.push(this._buildType());\n        src.push(this._buildImport());\n        if (this.functionsTable.length>0) {\n            src.push(this._buildFunctionsTable());\n        }\n        if (this.exports.length > 0) {\n            src.push(this._buildExports());\n        }\n        if (this.functionsTable.length>0) {\n            src.push(this._buildElements());\n        }\n        if (this.nInternalFunctions>0) {\n            src.push(this._buildFunctions());\n        }\n        src.push(this._buildData());\n        return [\n            \"(module\",\n            utils.ident(src),\n            \")\"\n        ];\n    }\n\n    addFunction(fnName, comment) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilderWat(this, fnName, \"internal\", comment));\n\n        this.nInternalFunctions++;\n        return this.functions[idx];\n    }\n\n    addIimportFunction(fnName, moduleName, _fieldName) {\n        if (typeof(this.functionIdxByName[fnName]) !== \"undefined\")\n            throw new Error(`Function already defined: ${fnName}`);\n\n        if (  (this.functions.length>0)\n            &&(this.functions[this.functions.length-1].type == \"internal\"))\n            throw new Error(`Import functions must be declared before internal: ${fnName}`);\n\n        let fieldName = _fieldName || fnName;\n\n        const idx = this.functions.length;\n        this.functionIdxByName[fnName] = idx;\n\n        this.functions.push(new FunctionBuilderWat(this, fnName, \"import\", moduleName, fieldName));\n\n        this.nImportFunctions ++;\n        return this.functions[idx];\n    }\n\n    setMemory(pagesSize, moduleName, fieldName) {\n        this.memory = {\n            pagesSize: pagesSize,\n            moduleName: moduleName || \"env\",\n            fieldName: fieldName || \"memory\"\n        };\n    }\n\n    exportFunction(fnName, _exportName) {\n        const exportName = _exportName || fnName;\n        if (typeof(this.functionIdxByName[fnName]) === \"undefined\")\n            throw new Error(`Function not defined: ${fnName}`);\n        const idx = this.functionIdxByName[fnName];\n        if (exportName != fnName) {\n            this.functionIdxByName[exportName] = idx;\n        }\n        this.exports.push({\n            exportName: exportName,\n            idx: idx\n        });\n    }\n\n    addFunctionToTable(fnName) {\n        const idx = this.functionIdxByName[fnName];\n        this.functionsTable.push(idx);\n    }\n\n    addData(offset, bytes) {\n        this.datas.push({\n            offset: offset,\n            bytes: bytes\n        });\n    }\n\n    alloc(a, b) {\n        let size;\n        let bytes;\n        if ((Array.isArray(a) || ArrayBuffer.isView(a)) && (typeof(b) === \"undefined\")) {\n            size = a.length;\n            bytes = a;\n        } else {\n            size = a;\n            bytes = b;\n        }\n        size = (((size-1)>>3) +1)<<3;       // Align to 64 bits.\n        const p = this.free;\n        this.free += size;\n        if (bytes) {\n            this.addData(p, bytes);\n        }\n        return p;\n    }\n\n    allocString(s) {\n        const encoder = new TextEncoder();\n        const uint8array = encoder.encode(s);\n        return this.alloc([...uint8array, 0]);\n    }\n\n    _setSignatures() {\n        this.signatures = [];\n        const signatureIdxByName = {};\n        if (this.functionsTable.length>0) {\n            const signature = this.functions[this.functionsTable[0]].getSignature();\n            const signatureName = this.functions[this.functionsTable[0]].getSignatureName();\n            signatureIdxByName[signatureName] = 0;\n            this.signatures.push(signature);\n        }\n        for (let i=0; i<this.functions.length; i++) {\n            const signature = this.functions[i].getSignature();\n            const signatureName = this.functions[i].getSignatureName();\n            if (typeof(signatureIdxByName[signatureName]) === \"undefined\") {\n                signatureIdxByName[signatureName] = this.signatures.length;\n                this.signatures.push(signature);\n            }\n\n            this.functions[i].signatureIdx = signatureIdxByName[signatureName];\n            this.functions[i].signatureName = signatureName;\n        }\n\n    }\n\n    _buildType() {\n        return this.signatures;\n    }\n\n    _buildImport() {\n        const src = [];\n        src.push(`(import \"${this.memory.moduleName}\" \"${this.memory.fieldName}\" (memory ${this.memory.pagesSize}))`);\n        for (let i=0; i< this.nImportFunctions; i++) {\n            src.push(`(import \"${this.functions[i].moduleName}\" \"${this.functions[i].fieldName}\" (func $${this.functions[i].fnName} (type $${this.functions[i].getSignatureName()})))`);\n        }\n        return src;\n    }\n\n    _buildFunctionsTable() {\n        return `(table ${this.functionsTable.length} anyfunc)`;\n    }\n\n    _buildElements() {\n        let funcs=\"\";\n        for (let i=0; i<this.functionsTable.length; i++) {\n            funcs += \" $\"+this.functions[this.functionsTable[i]].fnName;\n        }\n        return `(elem (i32.const 0) ${funcs})`;\n    }\n\n    _buildExports() {\n        const src = [];\n        for (let i=0; i< this.exports.length; i++) {\n            src.push(`(export \"${this.exports[i].exportName}\" (func $${this.functions[this.exports[i].idx].fnName}))`);\n        }\n        return src;\n    }\n\n    _buildFunctions() {\n        const src = [];\n        for (let i=this.nImportFunctions; i< this.nImportFunctions + this.nInternalFunctions; i++) {\n            src.push(this.functions[i].getBody());\n        }\n        return src;\n    }\n\n    _buildData() {\n        const src = [];\n        const buf = Buffer.alloc(4);\n        buf.writeUInt32LE(this.free, 0);\n        src.push(`(data (i32.const 0) ${bytes2string(buf)})`);\n        for (let i=0; i< this.datas.length; i++) {\n            src.push(`(data (i32.const ${this.datas[i].offset}) ${bytes2string(this.datas[i].bytes)})`);\n        }\n        return src;\n\n        function bytes2string(b) {\n            let S = \"\\\"\";\n            for (let i=0; i<b.length; i++) {\n                if (b[i]<32 || b[i] >126 || b[i] == 34 || b[i]==92) {\n                    let h=b[i].toString(16);\n                    while (h.length<2) h = \"0\"+h;\n                    S += \"\\\\\" + h;\n                } else {\n                    S += String.fromCharCode(b[i]);\n                }\n            }\n            S +=  \"\\\"\";\n            return S;\n        }\n    }\n\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { CodeBuilderWat } from \"./codebuilder_wat.js\";\nimport * as utils from \"./utils.js\";\n\nexport class FunctionBuilderWat {\n\n    constructor (module, fnName, fnType, moduleName, fieldName) {\n        if (fnType == \"import\") {\n            this.fnType = \"import\";\n            this.moduleName = moduleName;\n            this.fieldName = fieldName;\n        } else if (fnType == \"internal\") {\n            this.fnType = \"internal\";\n            this.comment = moduleName;\n        } else {\n            throw new Error(\"Invalid function fnType: \" + fnType);\n        }\n        this.module = module;\n        this.fnName = fnName;\n        this.params = [];\n        this.locals = [];\n        this.localIdxByName = {};\n        this.code = [];\n        this.returnType = null;\n        this.nextLocal =0;\n    }\n\n    addParam(paramName, paramType) {\n        if (this.localIdxByName[paramName])\n            throw new Error(`param already exists. Function: ${this.fnName}, Param: ${paramName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[paramName] = idx;\n        this.params.push({\n            type: paramType,\n            name: paramName\n        });\n    }\n\n    addLocal(localName, localType, _length) {\n        if ((typeof _length != \"undefined\") && (_length != 1)) {\n            throw new Error(\"Locals greater than 1 not implemented\");\n        }\n        if (this.localIdxByName[localName])\n            throw new Error(`local already exists. Function: ${this.fnName}, Param: ${localName} `);\n        const idx = this.nextLocal++;\n        this.localIdxByName[localName] = idx;\n        this.locals.push({\n            type: localType,\n            name: localName,\n        });\n    }\n\n    setReturnType(returnType) {\n        if (this.returnType)\n            throw new Error(`returnType already defined. Function: ${this.fnName}`);\n        this.returnType = returnType;\n    }\n\n    getSignature() {\n        let p = \"\";\n        for (let i=0; i<this.params.length; i++) {\n            if (i==0) p += \" (param\";\n            p += \" \" + this.params[i].type;\n        }\n        if (p!=\"\") p+= \")\";\n        let r = \"\";\n        if (this.returnType) {\n            r += ` (result ${this.returnType})`;\n        }\n        return `(type $${this.getSignatureName()} (func ${p}${r}))`;\n    }\n\n    getSignatureName() {\n        let s = \"_sig_\";\n        for (let i=0; i<this.params.length; i++) {\n            s += this.params[i].type;\n        }\n        if (this.returnType) {\n            s+=\"r\"+this.returnType;\n        }\n        return s;\n    }\n\n    getBody() {\n        const src = [];\n\n        for (let i=0; i<this.params.length; i++) {\n            src.push(` (param $${this.params[i].name} ${this.params[i].type})`);\n        }\n        if (this.returnType) {\n            src.push(`(result ${this.returnType})`);\n        }\n        for (let i=0; i<this.locals.length; i++) {\n            src.push(` (local $${this.locals[i].name} ${this.locals[i].type})`);\n        }\n        src.push(this.code);\n\n        let Ss;\n        if (this.comment) {\n            Ss = this.comment.split(\"\\n\");\n            for (let i=0; i<Ss.length; i++) {\n                Ss[i] = \";; \" + Ss[i];\n            }\n        } else {\n            Ss = [];\n        }\n\n        return [\n            ...Ss,\n            `(func $${this.fnName} (type $${this.getSignatureName()})`,\n            utils.ident(src),\n            \")\"\n        ];\n\n    }\n\n    addCode(...code) {\n        this.code.push(code);\n    }\n\n    getCodeBuilder() {\n        return new CodeBuilderWat(this);\n    }\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmbuilder\n\n    wasmbuilder is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmbuilder is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmbuilder. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as utils from \"./utils.js\";\n\nexport class CodeBuilderWat {\n    constructor(func) {\n        this.func = func;\n        this.functionName = func.functionName;\n        this.module = func.module;\n    }\n\n    setLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [valCode, `set_local $${localName}`];\n    }\n\n    teeLocal(localName, valCode) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return [valCode, `tee_local $${localName}`];\n    }\n\n    getLocal(localName) {\n        const idx = this.func.localIdxByName[localName];\n        if (idx === undefined)\n            throw new Error(`Local Variable not defined: Function: ${this.functionName} local: ${localName} `);\n        return `get_local $${localName}`;\n    }\n\n    genLoad(inst, def_align, idxCode, _offset, _align) {\n        let S = inst;\n        const offset = _offset || 0;\n        if (offset>0) S += ` offset=${offset}`;\n        const align = (_align === undefined) ? def_align : _align;  // 8 bits alignment by default\n        if (align!=def_align) S += ` align=${1 << align}`;\n        return [idxCode, S];\n    }\n\n\n    genStore(inst, def_align, idxCode, _offset, _align, _codeVal) {\n        let offset, align, codeVal;\n        if (typeof _align === \"undefined\") {\n            offset = 0;\n            align = def_align;\n            codeVal = _offset;\n        } else if (typeof _codeVal === \"undefined\") {\n            offset = _offset;\n            align = def_align;\n            codeVal = _align;\n        } else {\n            offset = _offset;\n            align = _align;\n            codeVal = _codeVal;\n        }\n        let S = inst;\n        if (offset>0) S += ` offset=${offset}`;\n        if (align!=def_align) S += ` align=${1 << align}`;\n        return [idxCode, codeVal, S];\n    }\n\n    i64_load8_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load8_s\", 0, idxCode, _offset, _align);\n    }\n\n    i64_load8_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load8_u\", 0, idxCode, _offset, _align);\n    }\n\n    i64_load16_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load16_s\", 1,idxCode, _offset, _align);\n    }\n\n    i64_load16_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load16_u\", 1, idxCode, _offset, _align);\n    }\n\n    i64_load32_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load32_s\", 2, idxCode, _offset, _align);\n    }\n\n    i64_load32_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load32_u\", 2, idxCode, _offset, _align);\n    }\n\n    i64_load(idxCode, _offset, _align) {\n        return this.genLoad(\"i64.load\", 3, idxCode, _offset, _align);\n    }\n\n\n    i64_store(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i64.store\", 3, idxCode, _offset, _align, _codeVal);\n    }\n\n    i64_store32(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i64.store32\", 2, idxCode, _offset, _align, _codeVal);\n    }\n\n    i64_store16(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i64.store16\", 1, idxCode, _offset, _align, _codeVal);\n    }\n\n    i64_store8(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i64.store8\", 0, idxCode, _offset, _align, _codeVal);\n    }\n\n    i32_load8_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load8_s\", 0, idxCode, _offset, _align);\n    }\n\n    i32_load8_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load8_u\", 0, idxCode, _offset, _align);\n    }\n\n    i32_load16_s(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load16_s\", 1, idxCode, _offset, _align);\n    }\n\n    i32_load16_u(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load16_u\", 1, idxCode, _offset, _align);\n    }\n\n    i32_load(idxCode, _offset, _align) {\n        return this.genLoad(\"i32.load\", 2, idxCode, _offset, _align);\n    }\n\n    i32_store(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i32.store\", 2, idxCode, _offset, _align, _codeVal);\n    }\n\n    i32_store16(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i32.store16\", 1, idxCode, _offset, _align, _codeVal);\n    }\n\n    i32_store8(idxCode, _offset, _align, _codeVal) {\n        return this.genStore(\"i32.store8\", 0, idxCode, _offset, _align, _codeVal);\n    }\n\n    call(fnName, ...args) {\n        const idx = this.module.functionIdxByName[fnName];\n        if (idx === undefined)\n            throw new Error(`Function not defined: Function: ${fnName}`);\n        return [args, `call $${fnName}`];\n    }\n\n    call_indirect(fnIdx, ...args) {\n        return [args, fnIdx, \"call_indirect (type 0)\"];\n    }\n\n    if(condCode, thenCode, elseCode) {\n        if (elseCode) {\n            return [condCode, \"if\", utils.ident(thenCode), \"else\", utils.ident(elseCode), \"end\"];\n        } else {\n            return [condCode, \"if\", utils.ident(thenCode), \"end\"];\n        }\n    }\n\n    block(bCode) { return [\"block\", utils.ident(bCode), \"end\"]; }\n    loop(...args) { return [\"loop\", utils.ident(args), \"end\"]; }\n    br_if(relPath, condCode) { return [condCode, `br_if ${relPath}`]; }\n    br(relPath) { return `br ${relPath}`; }\n    ret(rCode) { return [rCode, \"return\"]; }\n    drop(dCode) { return [dCode,  \"drop\"]; }\n\n    i64_const(num) { return `i64.const ${num}`; }\n    i32_const(num) { return `i32.const ${num}`; }\n\n    i64_eqz(opcode) { return [opcode, \"i64.eqz\"]; }\n    i64_eq(op1code, op2code) { return [op1code, op2code, \"i64.eq\"]; }\n    i64_ne(op1code, op2code) { return [op1code, op2code, \"i64.ne\"]; }\n    i64_lt_s(op1code, op2code) { return [op1code, op2code, \"i64.lt_s\"]; }\n    i64_lt_u(op1code, op2code) { return [op1code, op2code, \"i64.lt_u\"]; }\n    i64_gt_s(op1code, op2code) { return [op1code, op2code, \"i64.gt_s\"]; }\n    i64_gt_u(op1code, op2code) { return [op1code, op2code, \"i64.gt_u\"]; }\n    i64_le_s(op1code, op2code) { return [op1code, op2code, \"i64.le_s\"]; }\n    i64_le_u(op1code, op2code) { return [op1code, op2code, \"i64.le_u\"]; }\n    i64_ge_s(op1code, op2code) { return [op1code, op2code, \"i64.ge_s\"]; }\n    i64_ge_u(op1code, op2code) { return [op1code, op2code, \"i64.ge_u\"]; }\n    i64_add(op1code, op2code) { return [op1code, op2code, \"i64.add\"]; }\n    i64_sub(op1code, op2code) { return [op1code, op2code, \"i64.sub\"]; }\n    i64_mul(op1code, op2code) { return [op1code, op2code, \"i64.mul\"]; }\n    i64_div_s(op1code, op2code) { return [op1code, op2code, \"i64.div_s\"]; }\n    i64_div_u(op1code, op2code) { return [op1code, op2code, \"i64.div_u\"]; }\n    i64_rem_s(op1code, op2code) { return [op1code, op2code, \"i64.rem_s\"]; }\n    i64_rem_u(op1code, op2code) { return [op1code, op2code, \"i64.rem_u\"]; }\n    i64_and(op1code, op2code) { return [op1code, op2code, \"i64.and\"]; }\n    i64_or(op1code, op2code) { return [op1code, op2code, \"i64.or\"]; }\n    i64_xor(op1code, op2code) { return [op1code, op2code, \"i64.xor\"]; }\n    i64_shl(op1code, op2code) { return [op1code, op2code, \"i64.shl\"]; }\n    i64_shr_s(op1code, op2code) { return [op1code, op2code, \"i64.shr_s\"]; }\n    i64_shr_u(op1code, op2code) { return [op1code, op2code, \"i64.shr_u\"]; }\n    i64_extend_i32_s(op1code) { return [op1code, \"i64.extend_s/i32\"]; }\n    i64_extend_i32_u(op1code) { return [op1code, \"i64.extend_u/i32\"]; }\n\n\n    i32_eqz(op1code) { return [op1code, \"i32.eqz\"]; }\n    i32_eq(op1code, op2code) { return [op1code, op2code, \"i32.eq\"]; }\n    i32_ne(op1code, op2code) { return [op1code, op2code, \"i32.ne\"]; }\n    i32_lt_s(op1code, op2code) { return [op1code, op2code, \"i32.lt_s\"]; }\n    i32_lt_u(op1code, op2code) { return [op1code, op2code, \"i32.lt_u\"]; }\n    i32_gt_s(op1code, op2code) { return [op1code, op2code, \"i32.gt_s\"]; }\n    i32_gt_u(op1code, op2code) { return [op1code, op2code, \"i32.gt_u\"]; }\n    i32_le_s(op1code, op2code) { return [op1code, op2code, \"i32.le_s\"]; }\n    i32_le_u(op1code, op2code) { return [op1code, op2code, \"i32.le_u\"]; }\n    i32_ge_s(op1code, op2code) { return [op1code, op2code, \"i32.ge_s\"]; }\n    i32_ge_u(op1code, op2code) { return [op1code, op2code, \"i32.ge_u\"]; }\n    i32_add(op1code, op2code) { return [op1code, op2code, \"i32.add\"]; }\n    i32_sub(op1code, op2code) { return [op1code, op2code, \"i32.sub\"]; }\n    i32_mul(op1code, op2code) { return [op1code, op2code, \"i32.mul\"]; }\n    i32_div_s(op1code, op2code) { return [op1code, op2code, \"i32.div_s\"]; }\n    i32_div_u(op1code, op2code) { return [op1code, op2code, \"i32.div_u\"]; }\n    i32_rem_s(op1code, op2code) { return [op1code, op2code, \"i32.rem_s\"]; }\n    i32_rem_u(op1code, op2code) { return [op1code, op2code, \"i32.rem_u\"]; }\n    i32_and(op1code, op2code) { return [op1code, op2code, \"i32.and\"]; }\n    i32_or(op1code, op2code) { return [op1code, op2code, \"i32.or\"]; }\n    i32_xor(op1code, op2code) { return [op1code, op2code, \"i32.xor\"]; }\n    i32_shl(op1code, op2code) { return [op1code, op2code, \"i32.shl\"]; }\n    i32_shr_s(op1code, op2code) { return [op1code, op2code, \"i32.shr_s\"]; }\n    i32_shr_u(op1code, op2code) { return [op1code, op2code, \"i32.shr_u\"]; }\n    i32_rotl(op1code, op2code) { return [op1code, op2code, \"i32.rotl\"]; }\n    i32_rotr(op1code, op2code) { return [op1code, op2code, \"i32.rotr\"]; }\n    i32_wrap_i64(op1code) { return [op1code, \"i32.wrap/i64\"]; }\n\n    ureachable() { return \"unreachable\"; }\n\n    current_memory() { return \"current_memory\"; }\n\n    comment(c) { return \";; \" + c; }\n\n}\n", "/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of websnark (Web Assembly zkSnark Prover).\n\n    websnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    websnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with websnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { ModuleBuilder } from \"./modulebuilder.js\";\n\nexport async function buildProtoboard(builder, defBytes, bitsPerBytes) {\n    const protoboard = new Protoboard();\n\n    protoboard.defBytes = defBytes;\n    protoboard.bitsPerBytes = bitsPerBytes || 32;\n\n    protoboard.memory = new WebAssembly.Memory({initial:20000});\n    protoboard.i32 = new Uint32Array(protoboard.memory.buffer);\n    protoboard.i8 = new Uint8Array(protoboard.memory.buffer);\n\n    const moduleBuilder = new ModuleBuilder();\n\n    const fLog32 = moduleBuilder.addIimportFunction(\"debug_log32\", \"debug\", \"log32\");\n    fLog32.addParam(\"x\", \"i32\");\n    const fLog64 = moduleBuilder.addIimportFunction(\"debug_log64\", \"debug\", \"log64\");\n    fLog64.addParam(\"x\", \"i32\");\n    fLog64.addParam(\"y\", \"i32\");\n\n    buildLog32(moduleBuilder);\n    buildLog64(moduleBuilder);\n\n    builder(moduleBuilder, protoboard);\n\n\n    const code = moduleBuilder.build();\n\n    const wasmModule = await WebAssembly.compile(code);\n\n    protoboard.log = console.log;\n\n    protoboard.instance = await WebAssembly.instantiate(wasmModule, {\n        env: {\n            \"memory\": protoboard.memory\n        },\n        debug: {\n            log32: function (c1) {\n                if (c1<0) c1 = 0x100000000+c1;\n                let s=c1.toString(16);\n                while (s.length<8) s = \"0\"+s;\n                protoboard.log(s + \": \" + c1.toString());\n            },\n            log64: function (c1, c2) {\n                if (c1<0) c1 = 0x100000000+c1;\n                if (c2<0) c2 = 0x100000000+c2;\n                const n = BigInt(c1) + (BigInt(c2) << 32n);\n                let s=n.toString(16);\n                while (s.length<16) s = \"0\"+s;\n                protoboard.log(s + \": \" + n.toString());\n            }\n        }\n    });\n\n    Object.assign(protoboard, protoboard.instance.exports);\n    Object.assign(protoboard, moduleBuilder.modules);\n\n    return protoboard;\n\n    function buildLog32(module) {\n\n        const f = module.addFunction(\"log32\");\n        f.addParam(\"x\", \"i32\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(\"debug_log32\", c.getLocal(\"x\")));\n    }\n\n    function buildLog64(module) {\n\n        const f = module.addFunction(\"log64\");\n        f.addParam(\"x\", \"i64\");\n\n        const c = f.getCodeBuilder();\n        f.addCode(c.call(\n            \"debug_log64\",\n            c.i32_wrap_i64(c.getLocal(\"x\")),\n            c.i32_wrap_i64(\n                c.i64_shr_u(\n                    c.getLocal(\"x\"),\n                    c.i64_const(32)\n                )\n            )\n        ));\n    }\n\n}\n\nclass Protoboard {\n\n    constructor() {\n\n    }\n\n    alloc(length) {\n        if (typeof length === \"undefined\") {\n            length = this.defBytes;\n        }\n        length = (((length-1)>>3) +1)<<3;       // Align to 64 bits.\n\n        const res = this.i32[0];\n        this.i32[0] += length;\n        return res;\n    }\n\n    set(pos, nums, nBytes) {\n        if (!Array.isArray(nums)) {\n            nums = [nums];\n        }\n        if (typeof nBytes === \"undefined\") {\n            nBytes = this.defBytes;\n        }\n\n        const words = Math.floor((nBytes -1)/4)+1;\n        let p = pos;\n\n        const CHUNK = 1n << BigInt(this.bitsPerBytes);\n\n        for (let i=0; i<nums.length; i++) {\n            let v = BigInt(nums[i]);\n            for (let j=0; j<words; j++) {\n                const quotient = v / CHUNK;\n                const remainder = v % CHUNK;\n                this.i32[p>>2] = Number(remainder);\n                v = quotient;\n                p += 4;\n            }\n            if (v !== 0n) {\n                throw new Error(\"Expected v to be 0\");\n            }\n        }\n\n        return pos;\n    }\n\n    get(pos, nElements, nBytes) {\n        if (typeof nBytes == \"undefined\") {\n            if (typeof nElements == \"undefined\") {\n                nElements = 1;\n                nBytes = this.defBytes;\n            } else {\n                nElements = nBytes;\n                nBytes = this.defBytes;\n            }\n        }\n\n        const words = Math.floor((nBytes -1)/4)+1;\n\n        const CHUNK = 1n << BigInt(this.bitsPerBytes);\n\n\n        const nums = [];\n        for (let i=0; i<nElements; i++) {\n            let acc = 0n;\n            for (let j=words-1; j>=0; j--) {\n                acc = acc * CHUNK;\n                let v = this.i32[(pos>>2)+j];\n                if (this.bitsPerBytes <32) {\n                    if (v&0x80000000) v = v-0x100000000;\n                }\n                acc = acc + BigInt(v);\n            }\n            nums.push(acc);\n            pos += words*4;\n        }\n\n        if (nums.length == 1) return nums[0];\n        return nums;\n    }\n}\n", "import { buildBls12381 as buildBls12381wasm } from \"wasmcurves\";\nimport buildEngine from \"./engine.js\";\nimport * as Scalar from \"./scalar.js\";\nimport { ModuleBuilder } from \"wasmbuilder\";\n\nglobalThis.curve_bls12381 = null;\n\nexport default async function buildBls12381(singleThread, plugins) {\n\n    const moduleBuilder = new ModuleBuilder();\n    moduleBuilder.setMemory(25);\n    buildBls12381wasm(moduleBuilder);\n\n    if (plugins) plugins(moduleBuilder);\n\n    const bls12381wasm = {};\n\n    bls12381wasm.code = moduleBuilder.build();\n    bls12381wasm.pq = moduleBuilder.modules.f1m.pq;\n    bls12381wasm.pr = moduleBuilder.modules.frm.pq;\n    bls12381wasm.pG1gen = moduleBuilder.modules.bls12381.pG1gen;\n    bls12381wasm.pG1zero = moduleBuilder.modules.bls12381.pG1zero;\n    bls12381wasm.pG1b = moduleBuilder.modules.bls12381.pG1b;\n    bls12381wasm.pG2gen = moduleBuilder.modules.bls12381.pG2gen;\n    bls12381wasm.pG2zero = moduleBuilder.modules.bls12381.pG2zero;\n    bls12381wasm.pG2b = moduleBuilder.modules.bls12381.pG2b;\n    bls12381wasm.pOneT = moduleBuilder.modules.bls12381.pOneT;\n    bls12381wasm.prePSize = moduleBuilder.modules.bls12381.prePSize;\n    bls12381wasm.preQSize = moduleBuilder.modules.bls12381.preQSize;\n    bls12381wasm.n8q = 48;\n    bls12381wasm.n8r = 32;\n    bls12381wasm.q = moduleBuilder.modules.bls12381.q;\n    bls12381wasm.r = moduleBuilder.modules.bls12381.r;\n\n\n    if ((!singleThread) && (globalThis.curve_bls12381)) return globalThis.curve_bls12381;\n    const params = {\n        name: \"bls12381\",\n        wasm: bls12381wasm,\n        q: Scalar.e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16),\n        r: Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16),\n        n8q: 48,\n        n8r: 32,\n        cofactorG1: Scalar.e(\"0x396c8c005555e1568c00aaab0000aaab\", 16),\n        cofactorG2: Scalar.e(\"0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5\", 16),\n        singleThread: singleThread ? true : false\n    };\n\n    const curve = await buildEngine(params);\n    curve.terminate = async function () {\n        if (!params.singleThread) {\n            globalThis.curve_bls12381 = null;\n            await this.tm.terminate();\n        }\n    };\n\n    if (!singleThread) {\n        globalThis.curve_bls12381 = curve;\n    }\n\n    return curve;\n}\n\n", "import * as Scalar from \"./scalar.js\";\nimport {default as buildBn128} from \"./bn128.js\";\nimport {default as buildBls12381} from \"./bls12381.js\";\n\nconst bls12381r = Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16);\nconst bn128r = Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\");\n\nconst bls12381q = Scalar.e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16);\nconst bn128q = Scalar.e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\");\n\nexport async function getCurveFromR(r, singleThread, plugins) {\n    let curve;\n    if (Scalar.eq(r, bn128r)) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if (Scalar.eq(r, bls12381r)) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(r)}`);\n    }\n    return curve;\n}\n\nexport async function getCurveFromQ(q, singleThread, plugins) {\n    let curve;\n    if (Scalar.eq(q, bn128q)) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if (Scalar.eq(q, bls12381q)) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(q, 16)}`);\n    }\n    return curve;\n}\n\nexport async function getCurveFromName(name, singleThread, plugins) {\n    let curve;\n    const normName = normalizeName(name);\n    if ([\"BN128\", \"BN254\", \"ALTBN128\"].indexOf(normName) >= 0) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if ([\"BLS12381\"].indexOf(normName) >= 0) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${name}`);\n    }\n    return curve;\n\n    function normalizeName(n) {\n        return n.toUpperCase().match(/[A-Za-z0-9]+/g).join(\"\");\n    }\n\n}\n", null, null, null, null, null, null, null, null, "import { hash } from './hash';\nimport {\n  ZKProof,\n  ProvingMethod,\n  ProvingMethodAlg,\n  ProofInputsPreparerHandlerFunc,\n  getProvingMethod,\n  prepare,\n} from './proving';\n\nimport { base64url as base64 } from 'rfc4648';\nimport { toBigEndian } from '@iden3/js-iden3-core';\n\nexport enum Header {\n  Type = 'typ',\n  Alg = 'alg',\n  CircuitId = 'circuitId',\n  Critical = 'crit',\n}\n\nexport interface IRawJSONWebZeroknowledge {\n  payload: Uint8Array;\n  protectedHeaders: Uint8Array;\n  header: { [key: string]: unknown };\n  zkp: Uint8Array;\n\n  sanitized(): Promise<Token>;\n}\n\nexport class RawJSONWebZeroknowledge implements IRawJSONWebZeroknowledge {\n  constructor(\n    public payload: Uint8Array,\n    public protectedHeaders: Uint8Array,\n    public header: { [key: string]: unknown },\n    public zkp: Uint8Array,\n  ) {}\n\n  async sanitized(): Promise<Token> {\n    if (!this.payload) {\n      throw new Error('iden3/js-jwz: missing payload in JWZ message');\n    }\n\n    const headers: { [key: string]: unknown } = JSON.parse(\n      new TextDecoder().decode(this.protectedHeaders),\n    );\n    const criticalHeaders = headers[Header.Critical] as string[];\n    criticalHeaders.forEach((key: string) => {\n      if (!headers[key]) {\n        throw new Error(\n          `iden3/js-jwz: header is listed in critical ${key}, but not presented`,\n        );\n      }\n    });\n\n    const alg = headers[Header.Alg] as string;\n    const circuitId = headers[Header.CircuitId] as string;\n\n    const method = await getProvingMethod(new ProvingMethodAlg(alg, circuitId));\n    const zkp = JSON.parse(new TextDecoder().decode(this.zkp));\n    const token = new Token(method, new TextDecoder().decode(this.payload));\n    token.alg = alg;\n    token.circuitId = circuitId;\n    token.zkProof = zkp;\n    for (const [key, value] of Object.entries(headers)) {\n      token.setHeader(key, value);\n    }\n\n    return token;\n  }\n}\n\n// Token represents a JWZ Token.\nexport class Token {\n  public alg: string;\n  public circuitId: string;\n  private raw: IRawJSONWebZeroknowledge;\n  public zkProof: ZKProof = {} as ZKProof;\n\n  constructor(\n    public readonly method: ProvingMethod,\n    payload: string,\n    private readonly inputsPreparer?: ProofInputsPreparerHandlerFunc,\n  ) {\n    this.alg = this.method.alg;\n    this.circuitId = this.method.circuitId;\n    this.raw = {} as IRawJSONWebZeroknowledge;\n    this.raw.header = this.getDefaultHeaders();\n\n    this.raw.payload = new TextEncoder().encode(payload);\n  }\n\n  public setHeader(key: string, value: unknown): void {\n    this.raw.header[key] = value;\n  }\n\n  public getPayload(): string {\n    return new TextDecoder().decode(this.raw.payload);\n  }\n\n  private getDefaultHeaders(): { [key: string]: string | string[] } {\n    return {\n      [Header.Alg]: this.alg,\n      [Header.Critical]: [Header.CircuitId],\n      [Header.CircuitId]: this.circuitId,\n      [Header.Type]: 'JWZ',\n    };\n  }\n\n  // Parse parses a jwz message in compact or full serialization format.\n  static parse(tokenStr: string): Promise<Token> {\n    // Parse parses a jwz message in compact or full serialization format.\n    const token = tokenStr?.trim();\n    return token.startsWith('{')\n      ? Token.parseFull(tokenStr)\n      : Token.parseCompact(tokenStr);\n  }\n\n  // parseCompact parses a message in compact format.\n  private static async parseCompact(tokenStr: string): Promise<Token> {\n    const parts = tokenStr.split('.');\n    if (parts.length != 3) {\n      throw new Error(\n        'iden3/js-jwz: compact JWZ format must have three segments',\n      );\n    }\n    const rawProtected = base64.parse(parts[0], { loose: true });\n\n    const rawPayload = base64.parse(parts[1], { loose: true });\n\n    const proof = base64.parse(parts[2], { loose: true });\n\n    const raw: IRawJSONWebZeroknowledge = new RawJSONWebZeroknowledge(\n      rawPayload,\n      rawProtected,\n      {},\n      proof,\n    );\n\n    return await raw.sanitized();\n  }\n\n  // parseFull parses a message in full format.\n  private static async parseFull(tokenStr: string): Promise<Token> {\n    const raw: IRawJSONWebZeroknowledge = JSON.parse(tokenStr);\n    return await raw.sanitized();\n  }\n\n  // Prove creates and returns a complete, proved JWZ.\n  // The token is proven using the Proving Method specified in the token.\n  async prove(provingKey: Uint8Array, wasm: Uint8Array): Promise<string> {\n    // all headers must be protected\n    const headers = this.serializeHeaders();\n\n    this.raw.protectedHeaders = new TextEncoder().encode(headers);\n\n    const msgHash: Uint8Array = await this.getMessageHash();\n\n    if (!this.inputsPreparer) {\n      throw new Error('iden3/jwz: prepare func must be defined');\n    }\n    const inputs: Uint8Array = await prepare(\n      this.inputsPreparer,\n      msgHash,\n      this.circuitId,\n    );\n\n    const proof: ZKProof = await this.method.prove(inputs, provingKey, wasm);\n\n    const marshaledProof = JSON.stringify(proof);\n\n    this.zkProof = proof;\n    this.raw.zkp = new TextEncoder().encode(marshaledProof);\n\n    return this.compactSerialize();\n  }\n\n  // CompactSerialize returns token serialized in three parts: base64 encoded headers, payload and proof.\n  compactSerialize(): string {\n    if (!this.raw.header || !this.raw.protectedHeaders || !this.zkProof) {\n      throw new Error(\"iden3/jwz:can't serialize without one of components\");\n    }\n\n    const serializedProtected = base64.stringify(this.raw.protectedHeaders, {\n      pad: false,\n    });\n    const serializedProof = base64.stringify(this.raw.zkp, { pad: false });\n    const serializedPayload = base64.stringify(this.raw.payload, {\n      pad: false,\n    });\n    return `${serializedProtected}.${serializedPayload}.${serializedProof}`;\n  }\n\n  // fullSerialize returns marshaled presentation of raw token as json string.\n  fullSerialize(): string {\n    return JSON.stringify(this.raw);\n  }\n\n  async getMessageHash(): Promise<Uint8Array> {\n    const serializedHeadersJSON = this.serializeHeaders();\n\n    const serializedHeaders = new TextEncoder().encode(serializedHeadersJSON);\n    const protectedHeaders = base64.stringify(serializedHeaders, {\n      pad: false,\n    });\n\n    const payload = base64.stringify(this.raw.payload, { pad: false });\n\n    // JWZ ZkProof input value is ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' || BASE64URL(JWS Payload)).\n    const messageToProof = new TextEncoder().encode(\n      `${protectedHeaders}.${payload}`,\n    );\n\n    const hashInt: bigint = await hash(messageToProof);\n\n    return toBigEndian(hashInt, 32);\n  }\n\n  // Verify  perform zero knowledge verification.\n  async verify(verificationKey: Uint8Array): Promise<boolean> {\n    // 1. prepare hash o payload message that had to be proven\n    const msgHash = await this.getMessageHash();\n\n    // 2. verify that zkp is valid\n\n    return this.method.verify(msgHash, this.zkProof, verificationKey);\n  }\n\n  serializeHeaders() {\n    return JSON.stringify(this.raw.header, Object.keys(this.raw.header).sort());\n  }\n}\n", "export interface ZKProof {\n  proof: ProofData;\n  pub_signals: string[];\n}\nexport interface ProofData {\n  pi_a: string[];\n  pi_b: string[][];\n  pi_c: string[];\n  protocol: string;\n}\n\nexport class ProvingMethodAlg {\n  constructor(public readonly alg: string, public readonly circuitId: string) {}\n\n  toString(): string {\n    return `${this.alg}:${this.circuitId}`;\n  }\n}\n\nconst provingMethods = new Map<string, () => ProvingMethod>(); // map[string]func() ProvingMethod{}\n\n// ProvingMethod can be used add new methods for signing or verifying tokens.\nexport interface ProvingMethod {\n  // Returns true if proof is valid\n  verify(\n    messageHash: Uint8Array,\n    proof: ZKProof,\n    verificationKey: Uint8Array,\n  ): Promise<boolean>;\n  // Returns proof or error\n  prove(\n    inputs: Uint8Array,\n    provingKey: Uint8Array,\n    wasm: Uint8Array,\n  ): Promise<ZKProof>;\n\n  readonly methodAlg: ProvingMethodAlg;\n\n  readonly alg: string;\n  // Returns the alg identifier for this method (example: 'AUTH-GROTH-16')\n  readonly circuitId: string;\n}\n\n// RegisterProvingMethod registers the \"alg\" name and a factory function for proving method.\n// This is typically done during init() in the method's implementation\nexport function registerProvingMethod(\n  alg: ProvingMethodAlg,\n  f: () => ProvingMethod,\n): Promise<void> {\n  return new Promise((res) => {\n    provingMethods.set(alg.toString(), f);\n    res();\n  });\n}\n\n// GetProvingMethod retrieves a proving method from an \"alg\" string\nexport function getProvingMethod(\n  alg: ProvingMethodAlg,\n): Promise<ProvingMethod> {\n  return new Promise((res, rej) => {\n    const func = provingMethods.get(alg.toString());\n    if (func) {\n      const method: ProvingMethod = func();\n      res(method);\n    } else {\n      rej('unknown alg');\n    }\n  });\n}\n\nexport function getAlgorithms(): Promise<string[]> {\n  return Promise.resolve(\n    Array.from(provingMethods.keys()).map((k) => k.split(':')[0]),\n  );\n}\n\n// ProofInputsPreparerHandlerFunc prepares inputs using hash message and circuit id\nexport type ProofInputsPreparerHandlerFunc = (\n  hash: Uint8Array,\n  circuitId: string,\n) => Promise<Uint8Array>;\n\n// Prepare function is responsible to call provided handler for inputs preparation\nexport function prepare(\n  f: ProofInputsPreparerHandlerFunc,\n  hash: Uint8Array,\n  circuitId: string,\n): Promise<Uint8Array> {\n  return f(hash, circuitId);\n}\n", "// Generated by rollup-plugin-mjs-entry\n\nimport cjs from './index.js';\n\nexport const base16 = cjs.base16;\nexport const base32 = cjs.base32;\nexport const base32hex = cjs.base32hex;\nexport const base64 = cjs.base64;\nexport const base64url = cjs.base64url;\nexport const codec = cjs.codec;\nexport default cjs;\n", "import { ProvingMethod, ProvingMethodAlg, ZKProof } from './proving';\nimport { Id } from '@iden3/js-iden3-core';\nimport { AuthCircuit, Groth16, prove, verify } from './common';\n\n// AuthPubSignals auth.circom public signals\ninterface AuthPubSignals {\n  challenge: bigint;\n  userState: bigint;\n  userId: Id;\n}\n\n// ProvingMethodGroth16Auth defines proofs family and specific circuit\nclass ProvingMethodGroth16Auth implements ProvingMethod {\n  constructor(public readonly methodAlg: ProvingMethodAlg) {}\n\n  get alg(): string {\n    return this.methodAlg.alg;\n  }\n\n  get circuitId(): string {\n    return this.methodAlg.circuitId;\n  }\n\n  unmarshall(pubsignals: string[]): AuthPubSignals {\n    const outputs: AuthPubSignals = {} as AuthPubSignals;\n    if (pubsignals.length != 3) {\n      throw new Error(\n        `invalid number of Output values expected ${3} got ${\n          pubsignals.length\n        }`,\n      );\n    }\n    outputs.challenge = BigInt(pubsignals[0]);\n    outputs.userState = BigInt(pubsignals[1]);\n    outputs.userId = Id.fromBigInt(BigInt(pubsignals[2]));\n\n    return outputs;\n  }\n\n  async verify(\n    messageHash: Uint8Array,\n    proof: ZKProof,\n    verificationKey: Uint8Array,\n  ): Promise<boolean> {\n    return verify<AuthPubSignals>(\n      messageHash,\n      proof,\n      verificationKey,\n      this.unmarshall,\n    );\n  }\n\n  prove(\n    inputs: Uint8Array,\n    provingKey: Uint8Array,\n    wasm: Uint8Array,\n  ): Promise<ZKProof> {\n    return prove(inputs, provingKey, wasm);\n  }\n}\n\nexport const provingMethodGroth16AuthInstance: ProvingMethod =\n  new ProvingMethodGroth16Auth(new ProvingMethodAlg(Groth16, AuthCircuit));\n", "import { ZKProof } from './proving';\nimport { witnessBuilder } from './witness_calculator';\nimport * as snarkjs from 'snarkjs';\nimport { fromBigEndian } from '@iden3/js-iden3-core';\n\nexport const Groth16 = 'groth16';\nexport const AuthCircuit = 'auth';\nexport const AuthV2Circuit = 'authV2';\n\nexport async function prove(\n  inputs: Uint8Array,\n  provingKey: Uint8Array,\n  wasm: Uint8Array,\n): Promise<ZKProof> {\n  const witnessCalculator = await witnessBuilder(wasm);\n\n  const jsonString = new TextDecoder().decode(inputs);\n\n  const parsedData = JSON.parse(jsonString);\n  const wtnsBytes: Uint8Array = await witnessCalculator.calculateWTNSBin(\n    parsedData,\n    0,\n  );\n\n  const { proof, publicSignals } = await snarkjs.groth16.prove(\n    provingKey,\n    wtnsBytes,\n  );\n\n  return {\n    proof: proof,\n    pub_signals: publicSignals,\n  };\n}\n\nexport async function verify<T extends { challenge: bigint }>(\n  messageHash: Uint8Array,\n  proof: ZKProof,\n  verificationKey: Uint8Array,\n  unmarshall: (pubSignals: string[]) => T,\n): Promise<boolean> {\n  const outputs: T = unmarshall(proof.pub_signals);\n  if (outputs.challenge !== fromBigEndian(messageHash)) {\n    throw new Error('challenge is not equal to message hash');\n  }\n\n  return await snarkjs.groth16.verify(\n    JSON.parse(Buffer.from(verificationKey).toString()),\n    proof.pub_signals,\n    proof.proof,\n  );\n}\n", "/* eslint-disable require-await */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport async function witnessBuilder(code, options?) {\n  options = options || {};\n\n  let wasmModule;\n  try {\n    wasmModule = await WebAssembly.compile(code);\n  } catch (err) {\n    console.log(err);\n    console.log(\n      '\\nTry to run circom --c in order to generate c++ code instead\\n',\n    );\n    throw new Error(err);\n  }\n\n  let wc;\n\n  let errStr = '';\n  let msgStr = '';\n\n  const instance = await WebAssembly.instantiate(wasmModule, {\n    runtime: {\n      exceptionHandler: function (code) {\n        let err;\n        if (code == 1) {\n          err = 'Signal not found.\\n';\n        } else if (code == 2) {\n          err = 'Too many signals set.\\n';\n        } else if (code == 3) {\n          err = 'Signal already set.\\n';\n        } else if (code == 4) {\n          err = 'Assert Failed.\\n';\n        } else if (code == 5) {\n          err = 'Not enough memory.\\n';\n        } else if (code == 6) {\n          err = 'Input signal array access exceeds the size.\\n';\n        } else {\n          err = 'Unknown error.\\n';\n        }\n        throw new Error(err + errStr);\n      },\n      printErrorMessage: function () {\n        errStr += getMessage() + '\\n';\n        // console.error(getMessage());\n      },\n      writeBufferMessage: function () {\n        const msg = getMessage();\n        // Any calls to `log()` will always end with a `\\n`, so that's when we print and reset\n        if (msg === '\\n') {\n          console.log(msgStr);\n          msgStr = '';\n        } else {\n          // If we've buffered other content, put a space in between the items\n          if (msgStr !== '') {\n            msgStr += ' ';\n          }\n          // Then append the message to the message we are creating\n          msgStr += msg;\n        }\n      },\n      showSharedRWMemory: function () {\n        printSharedRWMemory();\n      },\n    },\n  });\n\n  const sanityCheck = options;\n  //        options &&\n  //        (\n  //            options.sanityCheck ||\n  //            options.logGetSignal ||\n  //            options.logSetSignal ||\n  //            options.logStartComponent ||\n  //            options.logFinishComponent\n  //        );\n\n  wc = new WitnessCalculator(instance, sanityCheck);\n  return wc;\n\n  function getMessage() {\n    let message = '';\n    let c = (instance as any).exports.getMessageChar();\n    while (c != 0) {\n      message += String.fromCharCode(c);\n      c = (instance as any).exports.getMessageChar();\n    }\n    return message;\n  }\n\n  function printSharedRWMemory() {\n    const shared_rw_memory_size = (instance as any).exports.getFieldNumLen32();\n    const arr = new Uint32Array(shared_rw_memory_size);\n    for (let j = 0; j < shared_rw_memory_size; j++) {\n      arr[shared_rw_memory_size - 1 - j] = (\n        instance as any\n      ).exports.readSharedRWMemory(j);\n    }\n\n    // If we've buffered other content, put a space in between the items\n    if (msgStr !== '') {\n      msgStr += ' ';\n    }\n    // Then append the value to the message we are creating\n    msgStr += fromArray32(arr).toString();\n  }\n}\n\nclass WitnessCalculator {\n  version: any;\n  n32: any;\n  prime: any;\n  witnessSize: any;\n  sanityCheck: any;\n  constructor(private instance, sanityCheck) {\n    this.instance = instance;\n    this.version = (this.instance.exports as any).getVersion();\n    this.n32 = (this.instance.exports as any).getFieldNumLen32();\n\n    (this.instance.exports as any).getRawPrime();\n    const arr = new Uint32Array(this.n32);\n    for (let i = 0; i < this.n32; i++) {\n      arr[this.n32 - 1 - i] = (this.instance.exports as any).readSharedRWMemory(\n        i,\n      );\n    }\n    this.prime = fromArray32(arr);\n\n    this.witnessSize = (this.instance.exports as any).getWitnessSize();\n\n    this.sanityCheck = sanityCheck;\n  }\n\n  circom_version() {\n    return (this.instance.exports as any).getVersion();\n  }\n\n  async _doCalculateWitness(input, sanityCheck) {\n    //input is assumed to be a map from signals to arrays of bigints\n    (this.instance.exports as any).init(\n      this.sanityCheck || sanityCheck ? 1 : 0,\n    );\n    const keys = Object.keys(input);\n    let input_counter = 0;\n    keys.forEach((k) => {\n      const h = fnvHash(k);\n      const hMSB = parseInt(h.slice(0, 8), 16);\n      const hLSB = parseInt(h.slice(8, 16), 16);\n      const fArr = flatArray(input[k]);\n      let signalSize = (this.instance.exports as any).getInputSignalSize(\n        hMSB,\n        hLSB,\n      );\n      if (signalSize < 0) {\n        throw new Error(`Signal ${k} not found\\n`);\n      }\n      if (fArr.length < signalSize) {\n        throw new Error(`Not enough values for input signal ${k}\\n`);\n      }\n      if (fArr.length > signalSize) {\n        throw new Error(`Too many values for input signal ${k}\\n`);\n      }\n      for (let i = 0; i < fArr.length; i++) {\n        const arrFr = toArray32(BigInt(fArr[i]) % this.prime, this.n32);\n        for (let j = 0; j < this.n32; j++) {\n          (this.instance.exports as any).writeSharedRWMemory(\n            j,\n            arrFr[this.n32 - 1 - j],\n          );\n        }\n        try {\n          (this.instance.exports as any).setInputSignal(hMSB, hLSB, i);\n          input_counter++;\n        } catch (err) {\n          // console.log(`After adding signal ${i} of ${k}`)\n          throw new Error(err);\n        }\n      }\n    });\n    if (input_counter < (this.instance.exports as any).getInputSize()) {\n      throw new Error(\n        `Not all inputs have been set. Only ${input_counter} out of ${(\n          this.instance.exports as any\n        ).getInputSize()}`,\n      );\n    }\n  }\n\n  async calculateWitness(input, sanityCheck) {\n    const w: bigint[] = [];\n\n    await this._doCalculateWitness(input, sanityCheck);\n\n    for (let i = 0; i < this.witnessSize; i++) {\n      (this.instance.exports as any).getWitness(i);\n      const arr = new Uint32Array(this.n32);\n      for (let j = 0; j < this.n32; j++) {\n        arr[this.n32 - 1 - j] = (\n          this.instance.exports as any\n        ).readSharedRWMemory(j);\n      }\n      w.push(fromArray32(arr));\n    }\n\n    return w;\n  }\n\n  async calculateBinWitness(input, sanityCheck) {\n    const buff32 = new Uint32Array(this.witnessSize * this.n32);\n    const buff = new Uint8Array(buff32.buffer);\n    await this._doCalculateWitness(input, sanityCheck);\n\n    for (let i = 0; i < this.witnessSize; i++) {\n      (this.instance.exports as any).getWitness(i);\n      const pos = i * this.n32;\n      for (let j = 0; j < this.n32; j++) {\n        buff32[pos + j] = (this.instance.exports as any).readSharedRWMemory(j);\n      }\n    }\n\n    return buff;\n  }\n\n  async calculateWTNSBin(input, sanityCheck) {\n    const buff32 = new Uint32Array(this.witnessSize * this.n32 + this.n32 + 11);\n    const buff = new Uint8Array(buff32.buffer);\n    await this._doCalculateWitness(input, sanityCheck);\n\n    //\"wtns\"\n    buff[0] = 'w'.charCodeAt(0);\n    buff[1] = 't'.charCodeAt(0);\n    buff[2] = 'n'.charCodeAt(0);\n    buff[3] = 's'.charCodeAt(0);\n\n    //version 2\n    buff32[1] = 2;\n\n    //number of sections: 2\n    buff32[2] = 2;\n\n    //id section 1\n    buff32[3] = 1;\n\n    const n8 = this.n32 * 4;\n    //id section 1 length in 64bytes\n    const idSection1length = 8 + n8;\n    const idSection1lengthHex = idSection1length.toString(16);\n    buff32[4] = parseInt(idSection1lengthHex.slice(0, 8), 16);\n    buff32[5] = parseInt(idSection1lengthHex.slice(8, 16), 16);\n\n    //this.n32\n    buff32[6] = n8;\n\n    //prime number\n    this.instance.exports.getRawPrime();\n\n    let pos = 7;\n    for (let j = 0; j < this.n32; j++) {\n      buff32[pos + j] = this.instance.exports.readSharedRWMemory(j);\n    }\n    pos += this.n32;\n\n    // witness size\n    buff32[pos] = this.witnessSize;\n    pos++;\n\n    //id section 2\n    buff32[pos] = 2;\n    pos++;\n\n    // section 2 length\n    const idSection2length = n8 * this.witnessSize;\n    const idSection2lengthHex = idSection2length.toString(16);\n    buff32[pos] = parseInt(idSection2lengthHex.slice(0, 8), 16);\n    buff32[pos + 1] = parseInt(idSection2lengthHex.slice(8, 16), 16);\n\n    pos += 2;\n    for (let i = 0; i < this.witnessSize; i++) {\n      this.instance.exports.getWitness(i);\n      for (let j = 0; j < this.n32; j++) {\n        buff32[pos + j] = this.instance.exports.readSharedRWMemory(j);\n      }\n      pos += this.n32;\n    }\n\n    return buff;\n  }\n}\n\nfunction toArray32(rem, size) {\n  const res: number[] = []; //new Uint32Array(size); //has no unshift\n  const radix = BigInt(0x100000000);\n  while (rem) {\n    res.unshift(Number(rem % radix));\n    rem = rem / radix;\n  }\n  if (size) {\n    let i = size - res.length;\n    while (i > 0) {\n      res.unshift(0);\n      i--;\n    }\n  }\n  return res;\n}\n\nfunction fromArray32(arr) {\n  //returns a BigInt\n  let res = BigInt(0);\n  const radix = BigInt(0x100000000);\n  for (let i = 0; i < arr.length; i++) {\n    res = res * radix + BigInt(arr[i]);\n  }\n  return res;\n}\n\nfunction flatArray(a) {\n  let res = [];\n  fillArray(res, a);\n  return res;\n\n  function fillArray(res, a) {\n    if (Array.isArray(a)) {\n      for (let i = 0; i < a.length; i++) {\n        fillArray(res, a[i]);\n      }\n    } else {\n      res.push(a);\n    }\n  }\n}\n\nfunction fnvHash(str) {\n  const uint64_max = BigInt(2) ** BigInt(64);\n  let hash = BigInt('0xCBF29CE484222325');\n  for (let i = 0; i < str.length; i++) {\n    hash ^= BigInt(str[i].charCodeAt());\n    hash *= BigInt(0x100000001b3);\n    hash %= uint64_max;\n  }\n  let shash = hash.toString(16);\n  let n = 16 - shash.length;\n  shash = '0'.repeat(n).concat(shash);\n  return shash;\n}\n", "\n\nexport * as groth16 from \"./src/groth16.js\";\nexport * as powersOfTau from \"./src/powersoftau.js\";\nexport * as r1cs from \"./src/r1cs.js\";\nexport * as wtns from \"./src/wtns.js\";\nexport * as zKey from \"./src/zkey.js\";\nexport * as plonk from \"./src/plonk.js\";\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexport {default as fullProve} from \"./groth16_fullprove.js\";\nexport {default as prove} from \"./groth16_prove.js\";\nexport {default as verify} from \"./groth16_verify.js\";\nexport {default as exportSolidityCallData} from \"./groth16_exportsoliditycalldata.js\";\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport groth16_prove from \"./groth16_prove.js\";\nimport wtns_calculate from \"./wtns_calculate.js\";\nimport {utils} from \"ffjavascript\";\nconst {unstringifyBigInts} = utils;\n\nexport default async function groth16FullProve(_input, wasmFile, zkeyFileName, logger) {\n    const input = unstringifyBigInts(_input);\n\n    const wtns= {\n        type: \"mem\"\n    };\n    await wtns_calculate(input, wasmFile, wtns);\n    return await groth16_prove(zkeyFileName, wtns, logger);\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as zkeyUtils from \"./zkey_utils.js\";\nimport * as wtnsUtils from \"./wtns_utils.js\";\nimport { getCurveFromQ as getCurve } from \"./curves.js\";\nimport { log2 } from \"./misc.js\";\nimport { Scalar, utils, BigBuffer } from \"ffjavascript\";\nconst {stringifyBigInts} = utils;\n\nexport default async function groth16Prove(zkeyFileName, witnessFileName, logger) {\n    const {fd: fdWtns, sections: sectionsWtns} = await binFileUtils.readBinFile(witnessFileName, \"wtns\", 2, 1<<25, 1<<23);\n\n    const wtns = await wtnsUtils.readHeader(fdWtns, sectionsWtns);\n\n    const {fd: fdZKey, sections: sectionsZKey} = await binFileUtils.readBinFile(zkeyFileName, \"zkey\", 2, 1<<25, 1<<23);\n\n    const zkey = await zkeyUtils.readHeader(fdZKey, sectionsZKey);\n\n    if (zkey.protocol != \"groth16\") {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n    if (!Scalar.eq(zkey.r,  wtns.q)) {\n        throw new Error(\"Curve of the witness does not match the curve of the proving key\");\n    }\n\n    if (wtns.nWitness != zkey.nVars) {\n        throw new Error(`Invalid witness length. Circuit: ${zkey.nVars}, witness: ${wtns.nWitness}`);\n    }\n\n    const curve = zkey.curve;\n    const Fr = curve.Fr;\n    const G1 = curve.G1;\n    const G2 = curve.G2;\n\n    const power = log2(zkey.domainSize);\n\n    if (logger) logger.debug(\"Reading Wtns\");\n    const buffWitness = await binFileUtils.readSection(fdWtns, sectionsWtns, 2);\n    if (logger) logger.debug(\"Reading Coeffs\");\n    const buffCoeffs = await binFileUtils.readSection(fdZKey, sectionsZKey, 4);\n\n    if (logger) logger.debug(\"Building ABC\");\n    const [buffA_T, buffB_T, buffC_T] = await buildABC1(curve, zkey, buffWitness, buffCoeffs, logger);\n\n    const inc = power == Fr.s ? curve.Fr.shift : curve.Fr.w[power+1];\n\n    const buffA = await Fr.ifft(buffA_T, \"\", \"\", logger, \"IFFT_A\");\n    const buffAodd = await Fr.batchApplyKey(buffA, Fr.e(1), inc);\n    const buffAodd_T = await Fr.fft(buffAodd, \"\", \"\", logger, \"FFT_A\");\n\n    const buffB = await Fr.ifft(buffB_T, \"\", \"\", logger, \"IFFT_B\");\n    const buffBodd = await Fr.batchApplyKey(buffB, Fr.e(1), inc);\n    const buffBodd_T = await Fr.fft(buffBodd, \"\", \"\", logger, \"FFT_B\");\n\n    const buffC = await Fr.ifft(buffC_T, \"\", \"\", logger, \"IFFT_C\");\n    const buffCodd = await Fr.batchApplyKey(buffC, Fr.e(1), inc);\n    const buffCodd_T = await Fr.fft(buffCodd, \"\", \"\", logger, \"FFT_C\");\n\n    if (logger) logger.debug(\"Join ABC\");\n    const buffPodd_T = await joinABC(curve, zkey, buffAodd_T, buffBodd_T, buffCodd_T, logger);\n\n    let proof = {};\n\n    if (logger) logger.debug(\"Reading A Points\");\n    const buffBasesA = await binFileUtils.readSection(fdZKey, sectionsZKey, 5);\n    proof.pi_a = await curve.G1.multiExpAffine(buffBasesA, buffWitness, logger, \"multiexp A\");\n\n    if (logger) logger.debug(\"Reading B1 Points\");\n    const buffBasesB1 = await binFileUtils.readSection(fdZKey, sectionsZKey, 6);\n    let pib1 = await curve.G1.multiExpAffine(buffBasesB1, buffWitness, logger, \"multiexp B1\");\n\n    if (logger) logger.debug(\"Reading B2 Points\");\n    const buffBasesB2 = await binFileUtils.readSection(fdZKey, sectionsZKey, 7);\n    proof.pi_b = await curve.G2.multiExpAffine(buffBasesB2, buffWitness, logger, \"multiexp B2\");\n\n    if (logger) logger.debug(\"Reading C Points\");\n    const buffBasesC = await binFileUtils.readSection(fdZKey, sectionsZKey, 8);\n    proof.pi_c = await curve.G1.multiExpAffine(buffBasesC, buffWitness.slice((zkey.nPublic+1)*curve.Fr.n8), logger, \"multiexp C\");\n\n    if (logger) logger.debug(\"Reading H Points\");\n    const buffBasesH = await binFileUtils.readSection(fdZKey, sectionsZKey, 9);\n    const resH = await curve.G1.multiExpAffine(buffBasesH, buffPodd_T, logger, \"multiexp H\");\n\n    const r = curve.Fr.random();\n    const s = curve.Fr.random();\n\n    proof.pi_a  = G1.add( proof.pi_a, zkey.vk_alpha_1 );\n    proof.pi_a  = G1.add( proof.pi_a, G1.timesFr( zkey.vk_delta_1, r ));\n\n    proof.pi_b  = G2.add( proof.pi_b, zkey.vk_beta_2 );\n    proof.pi_b  = G2.add( proof.pi_b, G2.timesFr( zkey.vk_delta_2, s ));\n\n    pib1 = G1.add( pib1, zkey.vk_beta_1 );\n    pib1 = G1.add( pib1, G1.timesFr( zkey.vk_delta_1, s ));\n\n    proof.pi_c = G1.add(proof.pi_c, resH);\n\n\n    proof.pi_c  = G1.add( proof.pi_c, G1.timesFr( proof.pi_a, s ));\n    proof.pi_c  = G1.add( proof.pi_c, G1.timesFr( pib1, r ));\n    proof.pi_c  = G1.add( proof.pi_c, G1.timesFr( zkey.vk_delta_1, Fr.neg(Fr.mul(r,s) )));\n\n\n    let publicSignals = [];\n\n    for (let i=1; i<= zkey.nPublic; i++) {\n        const b = buffWitness.slice(i*Fr.n8, i*Fr.n8+Fr.n8);\n        publicSignals.push(Scalar.fromRprLE(b));\n    }\n\n    proof.pi_a = G1.toObject(G1.toAffine(proof.pi_a));\n    proof.pi_b = G2.toObject(G2.toAffine(proof.pi_b));\n    proof.pi_c = G1.toObject(G1.toAffine(proof.pi_c));\n\n    proof.protocol = \"groth16\";\n    proof.curve = curve.name;\n\n    await fdZKey.close();\n    await fdWtns.close();\n\n    proof = stringifyBigInts(proof);\n    publicSignals = stringifyBigInts(publicSignals);\n\n    return {proof, publicSignals};\n}\n\n\nasync function buildABC1(curve, zkey, witness, coeffs, logger) {\n    const n8 = curve.Fr.n8;\n    const sCoef = 4*3 + zkey.n8r;\n    const nCoef = (coeffs.byteLength-4) / sCoef;\n\n    const outBuffA = new BigBuffer(zkey.domainSize * n8);\n    const outBuffB = new BigBuffer(zkey.domainSize * n8);\n    const outBuffC = new BigBuffer(zkey.domainSize * n8);\n\n    const outBuf = [ outBuffA, outBuffB ];\n    for (let i=0; i<nCoef; i++) {\n        if ((logger)&&(i%1000000 == 0)) logger.debug(`QAP AB: ${i}/${nCoef}`);\n        const buffCoef = coeffs.slice(4+i*sCoef, 4+i*sCoef+sCoef);\n        const buffCoefV = new DataView(buffCoef.buffer);\n        const m= buffCoefV.getUint32(0, true);\n        const c= buffCoefV.getUint32(4, true);\n        const s= buffCoefV.getUint32(8, true);\n        const coef = buffCoef.slice(12, 12+n8);\n        outBuf[m].set(\n            curve.Fr.add(\n                outBuf[m].slice(c*n8, c*n8+n8),\n                curve.Fr.mul(coef, witness.slice(s*n8, s*n8+n8))\n            ),\n            c*n8\n        );\n    }\n\n    for (let i=0; i<zkey.domainSize; i++) {\n        if ((logger)&&(i%1000000 == 0)) logger.debug(`QAP C: ${i}/${zkey.domainSize}`);\n        outBuffC.set(\n            curve.Fr.mul(\n                outBuffA.slice(i*n8, i*n8+n8),\n                outBuffB.slice(i*n8, i*n8+n8),\n            ),\n            i*n8\n        );\n    }\n\n    return [outBuffA, outBuffB, outBuffC];\n\n}\n\n/*\nasync function buldABC(curve, zkey, witness, coeffs, logger) {\n    const concurrency = curve.tm.concurrency;\n    const sCoef = 4*3 + zkey.n8r;\n\n    let getUint32;\n\n    if (coeffs instanceof BigBuffer) {\n        const coeffsDV = [];\n        const PAGE_LEN = coeffs.buffers[0].length;\n        for (let i=0; i< coeffs.buffers.length; i++) {\n            coeffsDV.push(new DataView(coeffs.buffers[i].buffer));\n        }\n        getUint32 = function (pos) {\n            return coeffsDV[Math.floor(pos/PAGE_LEN)].getUint32(pos % PAGE_LEN, true);\n        };\n    } else {\n        const coeffsDV = new DataView(coeffs.buffer, coeffs.byteOffset, coeffs.byteLength);\n        getUint32 = function (pos) {\n            return coeffsDV.getUint32(pos, true);\n        };\n    }\n\n    const elementsPerChunk = Math.floor(zkey.domainSize/concurrency);\n    const promises = [];\n\n    const cutPoints = [];\n    for (let i=0; i<concurrency; i++) {\n        cutPoints.push( getCutPoint( Math.floor(i*elementsPerChunk) ));\n    }\n    cutPoints.push(coeffs.byteLength);\n\n    const chunkSize = 2**26;\n    for (let s=0 ; s<zkey.nVars ; s+= chunkSize) {\n        if (logger) logger.debug(`QAP ${s}: ${s}/${zkey.nVars}`);\n        const ns= Math.min(zkey.nVars-s, chunkSize );\n\n        for (let i=0; i<concurrency; i++) {\n            let n;\n            if (i< concurrency-1) {\n                n = elementsPerChunk;\n            } else {\n                n = zkey.domainSize - i*elementsPerChunk;\n            }\n            if (n==0) continue;\n\n            const task = [];\n\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: coeffs.slice(cutPoints[i], cutPoints[i+1])});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: witness.slice(s*curve.Fr.n8, (s+ns)*curve.Fr.n8)});\n            task.push({cmd: \"ALLOC\", var: 2, len: n*curve.Fr.n8});\n            task.push({cmd: \"ALLOC\", var: 3, len: n*curve.Fr.n8});\n            task.push({cmd: \"ALLOC\", var: 4, len: n*curve.Fr.n8});\n            task.push({cmd: \"CALL\", fnName: \"qap_buildABC\", params:[\n                {var: 0},\n                {val: (cutPoints[i+1] - cutPoints[i])/sCoef},\n                {var: 1},\n                {var: 2},\n                {var: 3},\n                {var: 4},\n                {val: i*elementsPerChunk},\n                {val: n},\n                {val: s},\n                {val: ns}\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 2, len: n*curve.Fr.n8});\n            task.push({cmd: \"GET\", out: 1, var: 3, len: n*curve.Fr.n8});\n            task.push({cmd: \"GET\", out: 2, var: 4, len: n*curve.Fr.n8});\n            promises.push(curve.tm.queueAction(task));\n        }\n    }\n\n    let result = await Promise.all(promises);\n\n    const nGroups = result.length / concurrency;\n    if (nGroups>1) {\n        const promises2 = [];\n        for (let i=0; i<concurrency; i++) {\n            const task=[];\n            task.push({cmd: \"ALLOC\", var: 0, len: result[i][0].byteLength});\n            task.push({cmd: \"ALLOC\", var: 1, len: result[i][0].byteLength});\n            for (let m=0; m<3; m++) {\n                task.push({cmd: \"SET\", var: 0, buff: result[i][m]});\n                for (let s=1; s<nGroups; s++) {\n                    task.push({cmd: \"SET\", var: 1, buff: result[s*concurrency + i][m]});\n                    task.push({cmd: \"CALL\", fnName: \"qap_batchAdd\", params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: result[i][m].length/curve.Fr.n8},\n                        {var: 0}\n                    ]});\n                }\n                task.push({cmd: \"GET\", out: m, var: 0, len: result[i][m].length});\n            }\n            promises2.push(curve.tm.queueAction(task));\n        }\n        result = await Promise.all(promises2);\n    }\n\n    const outBuffA = new BigBuffer(zkey.domainSize * curve.Fr.n8);\n    const outBuffB = new BigBuffer(zkey.domainSize * curve.Fr.n8);\n    const outBuffC = new BigBuffer(zkey.domainSize * curve.Fr.n8);\n    let p=0;\n    for (let i=0; i<result.length; i++) {\n        outBuffA.set(result[i][0], p);\n        outBuffB.set(result[i][1], p);\n        outBuffC.set(result[i][2], p);\n        p += result[i][0].byteLength;\n    }\n\n    return [outBuffA, outBuffB, outBuffC];\n\n    function getCutPoint(v) {\n        let m = 0;\n        let n = getUint32(0);\n        while (m < n) {\n            var k = Math.floor((n + m) / 2);\n            const va = getUint32(4 + k*sCoef + 4);\n            if (va > v) {\n                n = k - 1;\n            } else if (va < v) {\n                m = k + 1;\n            } else {\n                n = k;\n            }\n        }\n        return 4 + m*sCoef;\n    }\n}\n*/\n\nasync function joinABC(curve, zkey, a, b, c, logger) {\n    const MAX_CHUNK_SIZE = 1 << 22;\n\n    const n8 = curve.Fr.n8;\n    const nElements = Math.floor(a.byteLength / curve.Fr.n8);\n\n    const promises = [];\n\n    for (let i=0; i<nElements; i += MAX_CHUNK_SIZE) {\n        if (logger) logger.debug(`JoinABC: ${i}/${nElements}`);\n        const n= Math.min(nElements - i, MAX_CHUNK_SIZE);\n\n        const task = [];\n\n        const aChunk = a.slice(i*n8, (i + n)*n8 );\n        const bChunk = b.slice(i*n8, (i + n)*n8 );\n        const cChunk = c.slice(i*n8, (i + n)*n8 );\n\n        task.push({cmd: \"ALLOCSET\", var: 0, buff: aChunk});\n        task.push({cmd: \"ALLOCSET\", var: 1, buff: bChunk});\n        task.push({cmd: \"ALLOCSET\", var: 2, buff: cChunk});\n        task.push({cmd: \"ALLOC\", var: 3, len: n*n8});\n        task.push({cmd: \"CALL\", fnName: \"qap_joinABC\", params:[\n            {var: 0},\n            {var: 1},\n            {var: 2},\n            {val: n},\n            {var: 3},\n        ]});\n        task.push({cmd: \"CALL\", fnName: \"frm_batchFromMontgomery\", params:[\n            {var: 3},\n            {val: n},\n            {var: 3}\n        ]});\n        task.push({cmd: \"GET\", out: 0, var: 3, len: n*n8});\n        promises.push(curve.tm.queueAction(task));\n    }\n\n    const result = await Promise.all(promises);\n\n    let outBuff;\n    if (a instanceof BigBuffer) {\n        outBuff = new BigBuffer(a.byteLength);\n    } else {\n        outBuff = new Uint8Array(a.byteLength);\n    }\n\n    let p=0;\n    for (let i=0; i<result.length; i++) {\n        outBuff.set(result[i][0], p);\n        p += result[i][0].byteLength;\n    }\n\n    return outBuff;\n}\n\n", "\nimport  { Scalar, BigBuffer } from \"ffjavascript\";\nimport * as fastFile from \"fastfile\";\n\nexport async function readBinFile(fileName, type, maxVersion, cacheSize, pageSize) {\n\n    const fd = await fastFile.readExisting(fileName, cacheSize, pageSize);\n\n    const b = await fd.read(4);\n    let readedType = \"\";\n    for (let i=0; i<4; i++) readedType += String.fromCharCode(b[i]);\n\n    if (readedType != type) throw new Error(fileName + \": Invalid File format\");\n\n    let v = await fd.readULE32();\n\n    if (v>maxVersion) throw new Error(\"Version not supported\");\n\n    const nSections = await fd.readULE32();\n\n    // Scan sections\n    let sections = [];\n    for (let i=0; i<nSections; i++) {\n        let ht = await fd.readULE32();\n        let hl = await fd.readULE64();\n        if (typeof sections[ht] == \"undefined\") sections[ht] = [];\n        sections[ht].push({\n            p: fd.pos,\n            size: hl\n        });\n        fd.pos += hl;\n    }\n\n    return {fd, sections};\n}\n\nexport async function createBinFile(fileName, type, version, nSections, cacheSize, pageSize) {\n\n    const fd = await fastFile.createOverride(fileName, cacheSize, pageSize);\n\n    const buff = new Uint8Array(4);\n    for (let i=0; i<4; i++) buff[i] = type.charCodeAt(i);\n    await fd.write(buff, 0); // Magic \"r1cs\"\n\n    await fd.writeULE32(version); // Version\n    await fd.writeULE32(nSections); // Number of Sections\n\n    return fd;\n}\n\nexport async function startWriteSection(fd, idSection) {\n    if (typeof fd.writingSection !== \"undefined\") throw new Error(\"Already writing a section\");\n    await fd.writeULE32(idSection); // Header type\n    fd.writingSection = {\n        pSectionSize: fd.pos\n    };\n    await fd.writeULE64(0); // Temporally set to 0 length\n}\n\nexport async function endWriteSection(fd) {\n    if (typeof fd.writingSection === \"undefined\") throw new Error(\"Not writing a section\");\n\n    const sectionSize = fd.pos - fd.writingSection.pSectionSize - 8;\n    const oldPos = fd.pos;\n    fd.pos = fd.writingSection.pSectionSize;\n    await fd.writeULE64(sectionSize);\n    fd.pos = oldPos;\n    delete fd.writingSection;\n}\n\nexport async function startReadUniqueSection(fd, sections, idSection) {\n    if (typeof fd.readingSection !== \"undefined\") throw new Error(\"Already reading a section\");\n    if (!sections[idSection])  throw new Error(fd.fileName + \": Missing section \"+ idSection );\n    if (sections[idSection].length>1) throw new Error(fd.fileName +\": Section Duplicated \" +idSection);\n\n    fd.pos = sections[idSection][0].p;\n\n    fd.readingSection = sections[idSection][0];\n}\n\nexport async function endReadSection(fd, noCheck) {\n    if (typeof fd.readingSection === \"undefined\") throw new Error(\"Not reading a section\");\n    if (!noCheck) {\n        if (fd.pos-fd.readingSection.p !=  fd.readingSection.size) throw new Error(\"Invalid section size reading\");\n    }\n    delete fd.readingSection;\n}\n\nexport async function writeBigInt(fd, n, n8, pos) {\n    const buff = new Uint8Array(n8);\n    Scalar.toRprLE(buff, 0, n, n8);\n    await fd.write(buff, pos);\n}\n\nexport async function readBigInt(fd, n8, pos) {\n    const buff = await fd.read(n8, pos);\n    return Scalar.fromRprLE(buff, 0, n8);\n}\n\nexport async function copySection(fdFrom, sections, fdTo, sectionId, size) {\n    if (typeof size === \"undefined\") {\n        size = sections[sectionId][0].size;\n    }\n    const chunkSize = fdFrom.pageSize;\n    await startReadUniqueSection(fdFrom, sections, sectionId);\n    await startWriteSection(fdTo, sectionId);\n    for (let p=0; p<size; p+=chunkSize) {\n        const l = Math.min(size -p, chunkSize);\n        const buff = await fdFrom.read(l);\n        await fdTo.write(buff);\n    }\n    await endWriteSection(fdTo);\n    await endReadSection(fdFrom, size != sections[sectionId][0].size);\n\n}\n\nexport async function readSection(fd, sections, idSection, offset, length) {\n\n    offset = (typeof offset === \"undefined\") ? 0 : offset;\n    length = (typeof length === \"undefined\") ? sections[idSection][0].size - offset : length;\n\n    if (offset + length > sections[idSection][0].size) {\n        throw new Error(\"Reading out of the range of the section\");\n    }\n\n    let buff;\n    if (length < (1 << 30) ) {\n        buff = new Uint8Array(length);\n    } else {\n        buff = new BigBuffer(length);\n    }\n\n    await fd.readToBuffer(buff, 0, length, sections[idSection][0].p + offset);\n    return buff;\n}\n\nexport async function sectionIsEqual(fd1, sections1, fd2, sections2, idSection) {\n    const MAX_BUFF_SIZE = fd1.pageSize * 16;\n    await startReadUniqueSection(fd1, sections1, idSection);\n    await startReadUniqueSection(fd2, sections2, idSection);\n    if (sections1[idSection][0].size != sections2[idSection][0].size) return false;\n    const totalBytes=sections1[idSection][0].size;\n    for (let i=0; i<totalBytes; i+= MAX_BUFF_SIZE) {\n        const n = Math.min(totalBytes-i, MAX_BUFF_SIZE);\n        const buff1 = await fd1.read(n);\n        const buff2 = await fd2.read(n);\n        for (let j=0; j<n; j++) if (buff1[j] != buff2[j]) return false;\n    }\n    await endReadSection(fd1);\n    await endReadSection(fd2);\n    return true;\n}\n", "/* global fetch */\nimport { open } from \"./osfile.js\";\nimport * as memFile from \"./memfile.js\";\nimport * as bigMemFile from \"./bigmemfile.js\";\nimport { O_TRUNC, O_CREAT, O_RDWR, O_EXCL, O_RDONLY } from \"constants\";\n\nconst DEFAULT_CACHE_SIZE = (1 << 16);\nconst DEFAULT_PAGE_SIZE = (1 << 13);\n\n\nexport async function createOverride(o, b, c) {\n    if (typeof o === \"string\") {\n        o = {\n            type: \"file\",\n            fileName: o,\n            cacheSize: b || DEFAULT_CACHE_SIZE,\n            pageSize: c || DEFAULT_PAGE_SIZE\n        };\n    }\n    if (o.type == \"file\") {\n        return await open(o.fileName, O_TRUNC | O_CREAT | O_RDWR, o.cacheSize, o.pageSize);\n    } else if (o.type == \"mem\") {\n        return memFile.createNew(o);\n    } else if (o.type == \"bigMem\") {\n        return bigMemFile.createNew(o);\n    } else {\n        throw new Error(\"Invalid FastFile type: \"+o.type);\n    }\n}\n\nexport function createNoOverride(o, b, c) {\n    if (typeof o === \"string\") {\n        o = {\n            type: \"file\",\n            fileName: o,\n            cacheSize: b || DEFAULT_CACHE_SIZE,\n            pageSize: c || DEFAULT_PAGE_SIZE\n        };\n    }\n    if (o.type == \"file\") {\n        return open(o.fileName, O_TRUNC | O_CREAT | O_RDWR | O_EXCL, o.cacheSize, o.pageSize);\n    } else if (o.type == \"mem\") {\n        return memFile.createNew(o);\n    } else if (o.type == \"bigMem\") {\n        return bigMemFile.createNew(o);\n    } else {\n        throw new Error(\"Invalid FastFile type: \"+o.type);\n    }\n}\n\nexport async function readExisting(o, b, c) {\n    if (o instanceof Uint8Array) {\n        o = {\n            type: \"mem\",\n            data: o\n        };\n    }\n    if (process.browser) {\n        if (typeof o === \"string\") {\n            const buff = await fetch(o).then( function(res) {\n                return res.arrayBuffer();\n            }).then(function (ab) {\n                return new Uint8Array(ab);\n            });\n            o = {\n                type: \"mem\",\n                data: buff\n            };\n        }\n    } else {\n        if (typeof o === \"string\") {\n            o = {\n                type: \"file\",\n                fileName: o,\n                cacheSize: b || DEFAULT_CACHE_SIZE,\n                pageSize: c || DEFAULT_PAGE_SIZE\n            };\n        }\n    }\n    if (o.type == \"file\") {\n        return await open(o.fileName, O_RDONLY, o.cacheSize, o.pageSize);\n    } else if (o.type == \"mem\") {\n        return await memFile.readExisting(o);\n    } else if (o.type == \"bigMem\") {\n        return await bigMemFile.readExisting(o);\n    } else {\n        throw new Error(\"Invalid FastFile type: \"+o.type);\n    }\n}\n\nexport function readWriteExisting(o, b, c) {\n    if (typeof o === \"string\") {\n        o = {\n            type: \"file\",\n            fileName: o,\n            cacheSize: b || DEFAULT_CACHE_SIZE,\n            pageSize: c || DEFAULT_PAGE_SIZE\n        };\n    }\n    if (o.type == \"file\") {\n        return open(o.fileName, O_CREAT | O_RDWR, o.cacheSize, o.pageSize);\n    } else if (o.type == \"mem\") {\n        return memFile.readWriteExisting(o);\n    } else if (o.type == \"bigMem\") {\n        return bigMemFile.readWriteExisting(o);\n    } else {\n        throw new Error(\"Invalid FastFile type: \"+o.type);\n    }\n}\n\nexport function readWriteExistingOrCreate(o, b, c) {\n    if (typeof o === \"string\") {\n        o = {\n            type: \"file\",\n            fileName: o,\n            cacheSize: b || DEFAULT_CACHE_SIZE,\n            pageSize: c || DEFAULT_PAGE_SIZE\n        };\n    }\n    if (o.type == \"file\") {\n        return open(o.fileName, O_CREAT | O_RDWR | O_EXCL, o.cacheSize);\n    } else if (o.type == \"mem\") {\n        return memFile.readWriteExisting(o);\n    } else if (o.type == \"bigMem\") {\n        return bigMemFile.readWriteExisting(o);\n    } else {\n        throw new Error(\"Invalid FastFile type: \"+o.type);\n    }\n}\n", "\nimport fs from\"fs\";\n\nexport async function open(fileName, openFlags, cacheSize, pageSize) {\n    cacheSize = cacheSize || 4096*64;\n    if (typeof openFlags !== \"number\" && [\"w+\", \"wx+\", \"r\", \"ax+\", \"a+\"].indexOf(openFlags) <0)\n        throw new Error(\"Invalid open option\");\n    const fd =await fs.promises.open(fileName, openFlags);\n\n    const stats = await fd.stat();\n\n    return  new FastFile(fd, stats, cacheSize, pageSize, fileName);\n}\n\n\nclass FastFile {\n\n    constructor(fd, stats, cacheSize, pageSize, fileName) {\n        this.fileName = fileName;\n        this.fd = fd;\n        this.pos = 0;\n        this.pageSize = pageSize || (1 << 8);\n        while (this.pageSize < stats.blksize) {\n            this.pageSize *= 2;\n        }\n        this.totalSize = stats.size;\n        this.totalPages = Math.floor((stats.size -1) / this.pageSize)+1;\n        this.maxPagesLoaded = Math.floor( cacheSize / this.pageSize)+1;\n        this.pages = {};\n        this.pendingLoads = [];\n        this.writing = false;\n        this.reading = false;\n        this.avBuffs = [];\n        this.history = {};\n    }\n\n    _loadPage(p) {\n        const self = this;\n        const P = new Promise((resolve, reject)=> {\n            self.pendingLoads.push({\n                page: p,\n                resolve: resolve,\n                reject: reject\n            });\n        });\n        self.__statusPage(\"After Load request: \", p);\n        return P;\n    }\n\n    __statusPage(s, p) {\n        const logEntry = [];\n        const self=this;\n        if (!self.logHistory) return;\n        logEntry.push(\"==\" + s+ \" \" +p);\n        let S = \"\";\n        for (let i=0; i<self.pendingLoads.length; i++) {\n            if (self.pendingLoads[i].page == p) S = S + \" \" + i;\n        }\n        if (S) logEntry.push(\"Pending loads:\"+S);\n        if (typeof self.pages[p] != \"undefined\") {\n            const page = self.pages[p];\n            logEntry.push(\"Loaded\");\n            logEntry.push(\"pendingOps: \"+page.pendingOps);\n            if (page.loading) logEntry.push(\"loading: \"+page.loading);\n            if (page.writing) logEntry.push(\"writing\");\n            if (page.dirty) logEntry.push(\"dirty\");\n        }\n        logEntry.push(\"==\");\n\n        if (!self.history[p]) self.history[p] = [];\n        self.history[p].push(logEntry);\n    }\n\n    __printHistory(p) {\n        const self = this;\n        if (!self.history[p]) console.log(\"Empty History \", p);\n        console.log(\"History \"+p);\n        for (let i=0; i<self.history[p].length; i++) {\n            for (let j=0; j<self.history[p][i].length; j++) {\n                console.log(\"-> \" + self.history[p][i][j]);\n            }\n        }\n    }\n\n\n\n    _triggerLoad() {\n        const self = this;\n\n        if (self.reading) return;\n        if (self.pendingLoads.length==0) return;\n\n        const pageIdxs = Object.keys(self.pages);\n\n        const deletablePages = [];\n        for (let i=0; i<pageIdxs.length; i++) {\n            const page = self.pages[parseInt(pageIdxs[i])];\n            if ((page.dirty == false)&&(page.pendingOps==0)&&(!page.writing)&&(!page.loading)) deletablePages.push(parseInt(pageIdxs[i]));\n        }\n\n        let freePages = self.maxPagesLoaded - pageIdxs.length;\n\n        const ops = [];\n\n        // while pending loads and\n        //     the page is loaded or I can recover one.\n        while (\n            (self.pendingLoads.length>0) &&\n            (   (typeof self.pages[self.pendingLoads[0].page] != \"undefined\" )\n              ||(  (freePages>0)\n                 ||(deletablePages.length>0)))) {\n            const load = self.pendingLoads.shift();\n            if (typeof self.pages[load.page] != \"undefined\") {\n                self.pages[load.page].pendingOps ++;\n                const idx = deletablePages.indexOf(load.page);\n                if (idx>=0) deletablePages.splice(idx, 1);\n                if (self.pages[load.page].loading) {\n                    self.pages[load.page].loading.push(load);\n                } else {\n                    load.resolve();\n                }\n                self.__statusPage(\"After Load (cached): \", load.page);\n\n            } else {\n                if (freePages) {\n                    freePages--;\n                } else {\n                    const fp = deletablePages.shift();\n                    self.__statusPage(\"Before Unload: \", fp);\n                    self.avBuffs.unshift(self.pages[fp]);\n                    delete self.pages[fp];\n                    self.__statusPage(\"After Unload: \", fp);\n                }\n\n                if (load.page>=self.totalPages) {\n                    self.pages[load.page] = getNewPage();\n                    load.resolve();\n                    self.__statusPage(\"After Load (new): \", load.page);\n                } else {\n                    self.reading = true;\n                    self.pages[load.page] = getNewPage();\n                    self.pages[load.page].loading = [load];\n                    ops.push(self.fd.read(self.pages[load.page].buff, 0, self.pageSize, load.page*self.pageSize).then((res)=> {\n                        self.pages[load.page].size = res.bytesRead;\n                        const loading = self.pages[load.page].loading;\n                        delete self.pages[load.page].loading;\n                        for (let i=0; i<loading.length; i++) {\n                            loading[i].resolve();\n                        }\n                        self.__statusPage(\"After Load (loaded): \", load.page);\n                        return res;\n                    }, (err) => {\n                        load.reject(err);\n                    }));\n                    self.__statusPage(\"After Load (loading): \", load.page);\n                }\n            }\n        }\n        // if (ops.length>1) console.log(ops.length);\n\n        Promise.all(ops).then( () => {\n            self.reading = false;\n            if (self.pendingLoads.length>0) setImmediate(self._triggerLoad.bind(self));\n            self._tryClose();\n        });\n\n        function getNewPage() {\n            if (self.avBuffs.length>0) {\n                const p = self.avBuffs.shift();\n                p.dirty = false;\n                p.pendingOps = 1;\n                p.size =0;\n                return p;\n            } else {\n                return {\n                    dirty: false,\n                    buff: new Uint8Array(self.pageSize),\n                    pendingOps: 1,\n                    size: 0\n                };\n            }\n        }\n\n    }\n\n\n    _triggerWrite() {\n        const self = this;\n        if (self.writing) return;\n\n        const pageIdxs = Object.keys(self.pages);\n\n        const ops = [];\n\n        for (let i=0; i<pageIdxs.length; i++) {\n            const page = self.pages[parseInt(pageIdxs[i])];\n            if (page.dirty) {\n                page.dirty = false;\n                page.writing = true;\n                self.writing = true;\n                ops.push( self.fd.write(page.buff, 0, page.size, parseInt(pageIdxs[i])*self.pageSize).then(() => {\n                    page.writing = false;\n                    return;\n                }, (err) => {\n                    console.log(\"ERROR Writing: \"+err);\n                    self.error = err;\n                    self._tryClose();\n                }));\n            }\n        }\n\n        if (self.writing) {\n            Promise.all(ops).then( () => {\n                self.writing = false;\n                setImmediate(self._triggerWrite.bind(self));\n                self._tryClose();\n                if (self.pendingLoads.length>0) setImmediate(self._triggerLoad.bind(self));\n            });\n        }\n    }\n\n    _getDirtyPage() {\n        for (let p in this.pages) {\n            if (this.pages[p].dirty) return p;\n        }\n        return -1;\n    }\n\n    async write(buff, pos) {\n        if (buff.byteLength == 0) return;\n        const self = this;\n/*\n        if (buff.byteLength > self.pageSize*self.maxPagesLoaded*0.8) {\n            const cacheSize = Math.floor(buff.byteLength * 1.1);\n            this.maxPagesLoaded = Math.floor( cacheSize / self.pageSize)+1;\n        }\n*/\n        if (typeof pos == \"undefined\") pos = self.pos;\n        self.pos = pos+buff.byteLength;\n        if (self.totalSize < pos + buff.byteLength) self.totalSize = pos + buff.byteLength;\n        if (self.pendingClose)\n            throw new Error(\"Writing a closing file\");\n        const firstPage = Math.floor(pos / self.pageSize);\n        const lastPage = Math.floor((pos + buff.byteLength -1) / self.pageSize);\n\n        const pagePromises = [];\n        for (let i=firstPage; i<=lastPage; i++) pagePromises.push(self._loadPage(i));\n        self._triggerLoad();\n\n        let p = firstPage;\n        let o = pos % self.pageSize;\n        let r = buff.byteLength;\n        while (r>0) {\n            await pagePromises[p-firstPage];\n            const l = (o+r > self.pageSize) ? (self.pageSize -o) : r;\n            const srcView = buff.slice( buff.byteLength - r, buff.byteLength - r + l);\n            const dstView = new Uint8Array(self.pages[p].buff.buffer, o, l);\n            dstView.set(srcView);\n            self.pages[p].dirty = true;\n            self.pages[p].pendingOps --;\n            self.pages[p].size = Math.max(o+l, self.pages[p].size);\n            if (p>=self.totalPages) {\n                self.totalPages = p+1;\n            }\n            r = r-l;\n            p ++;\n            o = 0;\n            if (!self.writing) setImmediate(self._triggerWrite.bind(self));\n        }\n    }\n\n    async read(len, pos) {\n        const self = this;\n        let buff = new Uint8Array(len);\n        await self.readToBuffer(buff, 0, len, pos);\n\n        return buff;\n    }\n\n    async readToBuffer(buffDst, offset, len, pos) {\n        if (len == 0) {\n            return;\n        }\n        const self = this;\n        if (len > self.pageSize*self.maxPagesLoaded*0.8) {\n            const cacheSize = Math.floor(len * 1.1);\n            this.maxPagesLoaded = Math.floor( cacheSize / self.pageSize)+1;\n        }\n        if (typeof pos == \"undefined\") pos = self.pos;\n        self.pos = pos+len;\n        if (self.pendingClose)\n            throw new Error(\"Reading a closing file\");\n        const firstPage = Math.floor(pos / self.pageSize);\n        const lastPage = Math.floor((pos + len -1) / self.pageSize);\n\n        const pagePromises = [];\n        for (let i=firstPage; i<=lastPage; i++) pagePromises.push(self._loadPage(i));\n\n        self._triggerLoad();\n\n        let p = firstPage;\n        let o = pos % self.pageSize;\n        // Remaining bytes to read\n        let r = pos + len > self.totalSize ? len - (pos + len - self.totalSize): len;\n        while (r>0) {\n            await pagePromises[p - firstPage];\n            self.__statusPage(\"After Await (read): \", p);\n\n            // bytes to copy from this page\n            const l = (o+r > self.pageSize) ? (self.pageSize -o) : r;\n            const srcView = new Uint8Array(self.pages[p].buff.buffer, self.pages[p].buff.byteOffset + o, l);\n            buffDst.set(srcView, offset+len-r);\n            self.pages[p].pendingOps --;\n\n            self.__statusPage(\"After Op done: \", p);\n\n            r = r-l;\n            p ++;\n            o = 0;\n            if (self.pendingLoads.length>0) setImmediate(self._triggerLoad.bind(self));\n        }\n\n        this.pos = pos + len;\n\n    }\n\n\n    _tryClose() {\n        const self = this;\n        if (!self.pendingClose) return;\n        if (self.error) {\n            self.pendingCloseReject(self.error);\n        }\n        const p = self._getDirtyPage();\n        if ((p>=0) || (self.writing) || (self.reading) || (self.pendingLoads.length>0)) return;\n        self.pendingClose();\n    }\n\n    close() {\n        const self = this;\n        if (self.pendingClose)\n            throw new Error(\"Closing the file twice\");\n        return new Promise((resolve, reject) => {\n            self.pendingClose = resolve;\n            self.pendingCloseReject = reject;\n            self._tryClose();\n        }).then(()=> {\n            self.fd.close();\n        }, (err) => {\n            self.fd.close();\n            throw (err);\n        });\n    }\n\n    async discard() {\n        const self = this;\n        await self.close();\n        await fs.promises.unlink(this.fileName);\n    }\n\n    async writeULE32(v, pos) {\n        const self = this;\n        const tmpBuff32 = new Uint8Array(4);\n        const tmpBuff32v = new DataView(tmpBuff32.buffer);\n\n        tmpBuff32v.setUint32(0, v, true);\n\n        await self.write(tmpBuff32, pos);\n    }\n\n    async writeUBE32(v, pos) {\n        const self = this;\n\n        const tmpBuff32 = new Uint8Array(4);\n        const tmpBuff32v = new DataView(tmpBuff32.buffer);\n\n        tmpBuff32v.setUint32(0, v, false);\n\n        await self.write(tmpBuff32, pos);\n    }\n\n\n    async writeULE64(v, pos) {\n        const self = this;\n\n        const tmpBuff64 = new Uint8Array(8);\n        const tmpBuff64v = new DataView(tmpBuff64.buffer);\n\n        tmpBuff64v.setUint32(0, v & 0xFFFFFFFF, true);\n        tmpBuff64v.setUint32(4, Math.floor(v / 0x100000000) , true);\n\n        await self.write(tmpBuff64, pos);\n    }\n\n    async readULE32(pos) {\n        const self = this;\n        const b = await self.read(4, pos);\n\n        const view = new Uint32Array(b.buffer);\n\n        return view[0];\n    }\n\n    async readUBE32(pos) {\n        const self = this;\n        const b = await self.read(4, pos);\n\n        const view = new DataView(b.buffer);\n\n        return view.getUint32(0, false);\n    }\n\n    async readULE64(pos) {\n        const self = this;\n        const b = await self.read(8, pos);\n\n        const view = new Uint32Array(b.buffer);\n\n        return view[1] * 0x100000000 + view[0];\n    }\n\n    async readString(pos) {\n        const self = this;\n\n        if (self.pendingClose) {\n            throw new Error(\"Reading a closing file\");\n        }\n\n        let currentPosition = typeof pos == \"undefined\" ? self.pos : pos;\n        let currentPage = Math.floor(currentPosition / self.pageSize);\n\n        let endOfStringFound = false;\n        let str = \"\";\n\n        while (!endOfStringFound) {\n            //Read page\n            let pagePromise = self._loadPage(currentPage);\n            self._triggerLoad();\n            await pagePromise;\n            self.__statusPage(\"After Await (read): \", currentPage);\n\n            let offsetOnPage = currentPosition % self.pageSize;\n\n            const dataArray = new Uint8Array(\n                self.pages[currentPage].buff.buffer,\n                self.pages[currentPage].buff.byteOffset + offsetOnPage,\n                self.pageSize - offsetOnPage\n            );\n\n            let indexEndOfString = dataArray.findIndex(element => element === 0);\n            endOfStringFound = indexEndOfString !== -1;\n\n            if (endOfStringFound) {\n                str += new TextDecoder().decode(dataArray.slice(0, indexEndOfString));\n                self.pos = currentPage * this.pageSize + offsetOnPage + indexEndOfString + 1;\n            } else {\n                str += new TextDecoder().decode(dataArray);\n                self.pos = currentPage * this.pageSize + offsetOnPage + dataArray.length;\n            }\n\n            self.pages[currentPage].pendingOps--;\n            self.__statusPage(\"After Op done: \", currentPage);\n\n            currentPosition = self.pos;\n            currentPage++;\n\n            if (self.pendingLoads.length > 0) setImmediate(self._triggerLoad.bind(self));\n        }\n\n        return str;\n    }\n}\n", "export function createNew(o) {\n    const initialSize = o.initialSize || 1<<20;\n    const fd = new MemFile();\n    fd.o = o;\n    fd.o.data = new Uint8Array(initialSize);\n    fd.allocSize = initialSize;\n    fd.totalSize = 0;\n    fd.readOnly = false;\n    fd.pos = 0;\n    return fd;\n}\n\nexport function readExisting(o) {\n    const fd = new MemFile();\n    fd.o = o;\n    fd.allocSize = o.data.byteLength;\n    fd.totalSize = o.data.byteLength;\n    fd.readOnly = true;\n    fd.pos = 0;\n    return fd;\n}\n\nexport function readWriteExisting(o) {\n    const fd = new MemFile();\n    fd.o = o;\n    fd.allocSize = o.data.byteLength;\n    fd.totalSize = o.data.byteLength;\n    fd.readOnly = false;\n    fd.pos = 0;\n    return fd;\n}\n\nconst tmpBuff32 = new Uint8Array(4);\nconst tmpBuff32v = new DataView(tmpBuff32.buffer);\nconst tmpBuff64 = new Uint8Array(8);\nconst tmpBuff64v = new DataView(tmpBuff64.buffer);\n\nclass MemFile {\n\n    constructor() {\n        this.pageSize = 1 << 14;  // for compatibility\n    }\n\n    _resizeIfNeeded(newLen) {\n        if (newLen > this.allocSize) {\n            const newAllocSize = Math.max(\n                this.allocSize + (1 << 20),\n                Math.floor(this.allocSize * 1.1),\n                newLen\n            );\n            const newData = new Uint8Array(newAllocSize);\n            newData.set(this.o.data);\n            this.o.data = newData;\n            this.allocSize = newAllocSize;\n        }\n    }\n\n    async write(buff, pos) {\n        const self =this;\n        if (typeof pos == \"undefined\") pos = self.pos;\n        if (this.readOnly) throw new Error(\"Writing a read only file\");\n\n        this._resizeIfNeeded(pos + buff.byteLength);\n\n        this.o.data.set(buff.slice(), pos);\n\n        if (pos + buff.byteLength > this.totalSize) this.totalSize = pos + buff.byteLength;\n\n        this.pos = pos + buff.byteLength;\n    }\n\n    async readToBuffer(buffDest, offset, len, pos) {\n        const self = this;\n        if (typeof pos == \"undefined\") pos = self.pos;\n        if (this.readOnly) {\n            if (pos + len > this.totalSize) throw new Error(\"Reading out of bounds\");\n        }\n        this._resizeIfNeeded(pos + len);\n\n        const buffSrc = new Uint8Array(this.o.data.buffer, this.o.data.byteOffset + pos, len);\n\n        buffDest.set(buffSrc, offset);\n\n        this.pos = pos + len;\n    }\n\n    async read(len, pos) {\n        const self = this;\n\n        const buff = new Uint8Array(len);\n        await self.readToBuffer(buff, 0, len, pos);\n\n        return buff;\n    }\n\n    close() {\n        if (this.o.data.byteLength != this.totalSize) {\n            this.o.data = this.o.data.slice(0, this.totalSize);\n        }\n    }\n\n    async discard() {\n    }\n\n\n    async writeULE32(v, pos) {\n        const self = this;\n\n        tmpBuff32v.setUint32(0, v, true);\n\n        await self.write(tmpBuff32, pos);\n    }\n\n    async writeUBE32(v, pos) {\n        const self = this;\n\n        tmpBuff32v.setUint32(0, v, false);\n\n        await self.write(tmpBuff32, pos);\n    }\n\n\n    async writeULE64(v, pos) {\n        const self = this;\n\n        tmpBuff64v.setUint32(0, v & 0xFFFFFFFF, true);\n        tmpBuff64v.setUint32(4, Math.floor(v / 0x100000000) , true);\n\n        await self.write(tmpBuff64, pos);\n    }\n\n\n    async readULE32(pos) {\n        const self = this;\n        const b = await self.read(4, pos);\n\n        const view = new Uint32Array(b.buffer);\n\n        return view[0];\n    }\n\n    async readUBE32(pos) {\n        const self = this;\n        const b = await self.read(4, pos);\n\n        const view = new DataView(b.buffer);\n\n        return view.getUint32(0, false);\n    }\n\n    async readULE64(pos) {\n        const self = this;\n        const b = await self.read(8, pos);\n\n        const view = new Uint32Array(b.buffer);\n\n        return view[1] * 0x100000000 + view[0];\n    }\n\n    async readString(pos) {\n        const self = this;\n\n        let currentPosition = typeof pos == \"undefined\" ? self.pos : pos;\n\n        if (currentPosition > this.totalSize) {\n            if (this.readOnly) {\n                throw new Error(\"Reading out of bounds\");\n            }\n            this._resizeIfNeeded(pos);\n        }\n        const dataArray = new Uint8Array(\n            self.o.data.buffer,\n            currentPosition,\n            this.totalSize - currentPosition\n        );\n\n        let indexEndOfString = dataArray.findIndex(element => element === 0);\n        let endOfStringFound = indexEndOfString !== -1;\n\n        let str = \"\";\n        if (endOfStringFound) {\n            str = new TextDecoder().decode(dataArray.slice(0, indexEndOfString));\n            self.pos = currentPosition + indexEndOfString + 1;\n        } else {\n            self.pos = currentPosition;\n        }\n        return str;\n    }\n}\n", "const PAGE_SIZE = 1<<22;\n\nexport function createNew(o) {\n    const initialSize = o.initialSize || 0;\n    const fd = new BigMemFile();\n    fd.o = o;\n    const nPages = initialSize ? Math.floor((initialSize - 1) / PAGE_SIZE)+1 : 0;\n    fd.o.data = [];\n    for (let i=0; i<nPages-1; i++) {\n        fd.o.data.push( new Uint8Array(PAGE_SIZE));\n    }\n    if (nPages) fd.o.data.push( new Uint8Array(initialSize - PAGE_SIZE*(nPages-1)));\n    fd.totalSize = 0;\n    fd.readOnly = false;\n    fd.pos = 0;\n    return fd;\n}\n\nexport function readExisting(o) {\n    const fd = new BigMemFile();\n    fd.o = o;\n    fd.totalSize = (o.data.length-1)* PAGE_SIZE + o.data[o.data.length-1].byteLength;\n    fd.readOnly = true;\n    fd.pos = 0;\n    return fd;\n}\n\nexport function readWriteExisting(o) {\n    const fd = new BigMemFile();\n    fd.o = o;\n    fd.totalSize = (o.data.length-1)* PAGE_SIZE + o.data[o.data.length-1].byteLength;\n    fd.readOnly = false;\n    fd.pos = 0;\n    return fd;\n}\n\nconst tmpBuff32 = new Uint8Array(4);\nconst tmpBuff32v = new DataView(tmpBuff32.buffer);\nconst tmpBuff64 = new Uint8Array(8);\nconst tmpBuff64v = new DataView(tmpBuff64.buffer);\n\nclass BigMemFile {\n\n    constructor() {\n        this.pageSize = 1 << 14;  // for compatibility\n    }\n\n    _resizeIfNeeded(newLen) {\n\n        if (newLen <= this.totalSize) return;\n\n        if (this.readOnly) throw new Error(\"Reading out of file bounds\");\n\n        const nPages = Math.floor((newLen - 1) / PAGE_SIZE)+1;\n        for (let i= Math.max(this.o.data.length-1, 0); i<nPages; i++) {\n            const newSize = i<nPages-1 ? PAGE_SIZE : newLen - (nPages-1)*PAGE_SIZE;\n            const p = new Uint8Array(newSize);\n            if (i == this.o.data.length-1) p.set(this.o.data[i]);\n            this.o.data[i] = p;\n        }\n        this.totalSize = newLen;\n    }\n\n    async write(buff, pos) {\n        const self =this;\n        if (typeof pos == \"undefined\") pos = self.pos;\n        if (this.readOnly) throw new Error(\"Writing a read only file\");\n\n        this._resizeIfNeeded(pos + buff.byteLength);\n\n        const firstPage = Math.floor(pos / PAGE_SIZE);\n\n        let p = firstPage;\n        let o = pos % PAGE_SIZE;\n        let r = buff.byteLength;\n        while (r>0) {\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = buff.slice(buff.byteLength - r, buff.byteLength - r + l);\n            const dstView = new Uint8Array(self.o.data[p].buffer, o, l);\n            dstView.set(srcView);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n        this.pos = pos + buff.byteLength;\n    }\n\n    async readToBuffer(buffDst, offset, len, pos) {\n        const self = this;\n        if (typeof pos == \"undefined\") pos = self.pos;\n        if (this.readOnly) {\n            if (pos + len > this.totalSize) throw new Error(\"Reading out of bounds\");\n        }\n        this._resizeIfNeeded(pos + len);\n\n        const firstPage = Math.floor(pos / PAGE_SIZE);\n\n        let p = firstPage;\n        let o = pos % PAGE_SIZE;\n        // Remaining bytes to read\n        let r = len;\n        while (r>0) {\n            // bytes to copy from this page\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = new Uint8Array(self.o.data[p].buffer, o, l);\n            buffDst.set(srcView, offset+len-r);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n        this.pos = pos + len;\n    }\n\n    async read(len, pos) {\n        const self = this;\n        const buff = new Uint8Array(len);\n\n        await self.readToBuffer(buff, 0, len, pos);\n\n        return buff;\n    }\n\n    close() {\n    }\n\n    async discard() {\n    }\n\n\n    async writeULE32(v, pos) {\n        const self = this;\n\n        tmpBuff32v.setUint32(0, v, true);\n\n        await self.write(tmpBuff32, pos);\n    }\n\n    async writeUBE32(v, pos) {\n        const self = this;\n\n        tmpBuff32v.setUint32(0, v, false);\n\n        await self.write(tmpBuff32, pos);\n    }\n\n\n    async writeULE64(v, pos) {\n        const self = this;\n\n        tmpBuff64v.setUint32(0, v & 0xFFFFFFFF, true);\n        tmpBuff64v.setUint32(4, Math.floor(v / 0x100000000) , true);\n\n        await self.write(tmpBuff64, pos);\n    }\n\n\n    async readULE32(pos) {\n        const self = this;\n        const b = await self.read(4, pos);\n\n        const view = new Uint32Array(b.buffer);\n\n        return view[0];\n    }\n\n    async readUBE32(pos) {\n        const self = this;\n        const b = await self.read(4, pos);\n\n        const view = new DataView(b.buffer);\n\n        return view.getUint32(0, false);\n    }\n\n    async readULE64(pos) {\n        const self = this;\n        const b = await self.read(8, pos);\n\n        const view = new Uint32Array(b.buffer);\n\n        return view[1] * 0x100000000 + view[0];\n    }\n\n    async readString(pos) {\n        const self = this;\n        const fixedSize = 2048;\n\n        let currentPosition = typeof pos == \"undefined\" ? self.pos : pos;\n\n        if (currentPosition > this.totalSize) {\n            if (this.readOnly) {\n                throw new Error(\"Reading out of bounds\");\n            }\n            this._resizeIfNeeded(pos);\n        }\n\n        let endOfStringFound = false;\n        let str = \"\";\n\n        while (!endOfStringFound) {\n            let currentPage = Math.floor(currentPosition / PAGE_SIZE);\n            let offsetOnPage = currentPosition % PAGE_SIZE;\n\n            if (self.o.data[currentPage] === undefined) {\n                throw new Error(\"ERROR\");\n            }\n\n            let readLength = Math.min(fixedSize, self.o.data[currentPage].length - offsetOnPage);\n            const dataArray = new Uint8Array(self.o.data[currentPage].buffer, offsetOnPage, readLength);\n\n            let indexEndOfString = dataArray.findIndex(element => element === 0);\n            endOfStringFound = indexEndOfString !== -1;\n\n            if (endOfStringFound) {\n                str += new TextDecoder().decode(dataArray.slice(0, indexEndOfString));\n                self.pos = currentPage * PAGE_SIZE + offsetOnPage + indexEndOfString + 1;\n            } else {\n                str += new TextDecoder().decode(dataArray);\n                self.pos = currentPage * PAGE_SIZE + offsetOnPage + dataArray.length;\n            }\n\n            currentPosition = self.pos;\n        }\n        return str;\n    }\n}\n", "export var RTLD_LAZY = 1;\nexport var RTLD_NOW = 2;\nexport var RTLD_GLOBAL = 8;\nexport var RTLD_LOCAL = 4;\nexport var E2BIG = 7;\nexport var EACCES = 13;\nexport var EADDRINUSE = 48;\nexport var EADDRNOTAVAIL = 49;\nexport var EAFNOSUPPORT = 47;\nexport var EAGAIN = 35;\nexport var EALREADY = 37;\nexport var EBADF = 9;\nexport var EBADMSG = 94;\nexport var EBUSY = 16;\nexport var ECANCELED = 89;\nexport var ECHILD = 10;\nexport var ECONNABORTED = 53;\nexport var ECONNREFUSED = 61;\nexport var ECONNRESET = 54;\nexport var EDEADLK = 11;\nexport var EDESTADDRREQ = 39;\nexport var EDOM = 33;\nexport var EDQUOT = 69;\nexport var EEXIST = 17;\nexport var EFAULT = 14;\nexport var EFBIG = 27;\nexport var EHOSTUNREACH = 65;\nexport var EIDRM = 90;\nexport var EILSEQ = 92;\nexport var EINPROGRESS = 36;\nexport var EINTR = 4;\nexport var EINVAL = 22;\nexport var EIO = 5;\nexport var EISCONN = 56;\nexport var EISDIR = 21;\nexport var ELOOP = 62;\nexport var EMFILE = 24;\nexport var EMLINK = 31;\nexport var EMSGSIZE = 40;\nexport var EMULTIHOP = 95;\nexport var ENAMETOOLONG = 63;\nexport var ENETDOWN = 50;\nexport var ENETRESET = 52;\nexport var ENETUNREACH = 51;\nexport var ENFILE = 23;\nexport var ENOBUFS = 55;\nexport var ENODATA = 96;\nexport var ENODEV = 19;\nexport var ENOENT = 2;\nexport var ENOEXEC = 8;\nexport var ENOLCK = 77;\nexport var ENOLINK = 97;\nexport var ENOMEM = 12;\nexport var ENOMSG = 91;\nexport var ENOPROTOOPT = 42;\nexport var ENOSPC = 28;\nexport var ENOSR = 98;\nexport var ENOSTR = 99;\nexport var ENOSYS = 78;\nexport var ENOTCONN = 57;\nexport var ENOTDIR = 20;\nexport var ENOTEMPTY = 66;\nexport var ENOTSOCK = 38;\nexport var ENOTSUP = 45;\nexport var ENOTTY = 25;\nexport var ENXIO = 6;\nexport var EOPNOTSUPP = 102;\nexport var EOVERFLOW = 84;\nexport var EPERM = 1;\nexport var EPIPE = 32;\nexport var EPROTO = 100;\nexport var EPROTONOSUPPORT = 43;\nexport var EPROTOTYPE = 41;\nexport var ERANGE = 34;\nexport var EROFS = 30;\nexport var ESPIPE = 29;\nexport var ESRCH = 3;\nexport var ESTALE = 70;\nexport var ETIME = 101;\nexport var ETIMEDOUT = 60;\nexport var ETXTBSY = 26;\nexport var EWOULDBLOCK = 35;\nexport var EXDEV = 18;\nexport var PRIORITY_LOW = 19;\nexport var PRIORITY_BELOW_NORMAL = 10;\nexport var PRIORITY_NORMAL = 0;\nexport var PRIORITY_ABOVE_NORMAL = -7;\nexport var PRIORITY_HIGH = -14;\nexport var PRIORITY_HIGHEST = -20;\nexport var SIGHUP = 1;\nexport var SIGINT = 2;\nexport var SIGQUIT = 3;\nexport var SIGILL = 4;\nexport var SIGTRAP = 5;\nexport var SIGABRT = 6;\nexport var SIGIOT = 6;\nexport var SIGBUS = 10;\nexport var SIGFPE = 8;\nexport var SIGKILL = 9;\nexport var SIGUSR1 = 30;\nexport var SIGSEGV = 11;\nexport var SIGUSR2 = 31;\nexport var SIGPIPE = 13;\nexport var SIGALRM = 14;\nexport var SIGTERM = 15;\nexport var SIGCHLD = 20;\nexport var SIGCONT = 19;\nexport var SIGSTOP = 17;\nexport var SIGTSTP = 18;\nexport var SIGTTIN = 21;\nexport var SIGTTOU = 22;\nexport var SIGURG = 16;\nexport var SIGXCPU = 24;\nexport var SIGXFSZ = 25;\nexport var SIGVTALRM = 26;\nexport var SIGPROF = 27;\nexport var SIGWINCH = 28;\nexport var SIGIO = 23;\nexport var SIGINFO = 29;\nexport var SIGSYS = 12;\nexport var UV_FS_SYMLINK_DIR = 1;\nexport var UV_FS_SYMLINK_JUNCTION = 2;\nexport var O_RDONLY = 0;\nexport var O_WRONLY = 1;\nexport var O_RDWR = 2;\nexport var UV_DIRENT_UNKNOWN = 0;\nexport var UV_DIRENT_FILE = 1;\nexport var UV_DIRENT_DIR = 2;\nexport var UV_DIRENT_LINK = 3;\nexport var UV_DIRENT_FIFO = 4;\nexport var UV_DIRENT_SOCKET = 5;\nexport var UV_DIRENT_CHAR = 6;\nexport var UV_DIRENT_BLOCK = 7;\nexport var S_IFMT = 61440;\nexport var S_IFREG = 32768;\nexport var S_IFDIR = 16384;\nexport var S_IFCHR = 8192;\nexport var S_IFBLK = 24576;\nexport var S_IFIFO = 4096;\nexport var S_IFLNK = 40960;\nexport var S_IFSOCK = 49152;\nexport var O_CREAT = 512;\nexport var O_EXCL = 2048;\nexport var O_NOCTTY = 131072;\nexport var O_TRUNC = 1024;\nexport var O_APPEND = 8;\nexport var O_DIRECTORY = 1048576;\nexport var O_NOFOLLOW = 256;\nexport var O_SYNC = 128;\nexport var O_DSYNC = 4194304;\nexport var O_SYMLINK = 2097152;\nexport var O_NONBLOCK = 4;\nexport var S_IRWXU = 448;\nexport var S_IRUSR = 256;\nexport var S_IWUSR = 128;\nexport var S_IXUSR = 64;\nexport var S_IRWXG = 56;\nexport var S_IRGRP = 32;\nexport var S_IWGRP = 16;\nexport var S_IXGRP = 8;\nexport var S_IRWXO = 7;\nexport var S_IROTH = 4;\nexport var S_IWOTH = 2;\nexport var S_IXOTH = 1;\nexport var F_OK = 0;\nexport var R_OK = 4;\nexport var W_OK = 2;\nexport var X_OK = 1;\nexport var UV_FS_COPYFILE_EXCL = 1;\nexport var COPYFILE_EXCL = 1;\nexport var UV_FS_COPYFILE_FICLONE = 2;\nexport var COPYFILE_FICLONE = 2;\nexport var UV_FS_COPYFILE_FICLONE_FORCE = 4;\nexport var COPYFILE_FICLONE_FORCE = 4;\nexport var OPENSSL_VERSION_NUMBER = 269488175;\nexport var SSL_OP_ALL = 2147485780;\nexport var SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = 262144;\nexport var SSL_OP_CIPHER_SERVER_PREFERENCE = 4194304;\nexport var SSL_OP_CISCO_ANYCONNECT = 32768;\nexport var SSL_OP_COOKIE_EXCHANGE = 8192;\nexport var SSL_OP_CRYPTOPRO_TLSEXT_BUG = 2147483648;\nexport var SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS = 2048;\nexport var SSL_OP_EPHEMERAL_RSA = 0;\nexport var SSL_OP_LEGACY_SERVER_CONNECT = 4;\nexport var SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER = 0;\nexport var SSL_OP_MICROSOFT_SESS_ID_BUG = 0;\nexport var SSL_OP_MSIE_SSLV2_RSA_PADDING = 0;\nexport var SSL_OP_NETSCAPE_CA_DN_BUG = 0;\nexport var SSL_OP_NETSCAPE_CHALLENGE_BUG = 0;\nexport var SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG = 0;\nexport var SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG = 0;\nexport var SSL_OP_NO_COMPRESSION = 131072;\nexport var SSL_OP_NO_QUERY_MTU = 4096;\nexport var SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = 65536;\nexport var SSL_OP_NO_SSLv2 = 0;\nexport var SSL_OP_NO_SSLv3 = 33554432;\nexport var SSL_OP_NO_TICKET = 16384;\nexport var SSL_OP_NO_TLSv1 = 67108864;\nexport var SSL_OP_NO_TLSv1_1 = 268435456;\nexport var SSL_OP_NO_TLSv1_2 = 134217728;\nexport var SSL_OP_PKCS1_CHECK_1 = 0;\nexport var SSL_OP_PKCS1_CHECK_2 = 0;\nexport var SSL_OP_SINGLE_DH_USE = 0;\nexport var SSL_OP_SINGLE_ECDH_USE = 0;\nexport var SSL_OP_SSLEAY_080_CLIENT_DH_BUG = 0;\nexport var SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG = 0;\nexport var SSL_OP_TLS_BLOCK_PADDING_BUG = 0;\nexport var SSL_OP_TLS_D5_BUG = 0;\nexport var SSL_OP_TLS_ROLLBACK_BUG = 8388608;\nexport var ENGINE_METHOD_RSA = 1;\nexport var ENGINE_METHOD_DSA = 2;\nexport var ENGINE_METHOD_DH = 4;\nexport var ENGINE_METHOD_RAND = 8;\nexport var ENGINE_METHOD_EC = 2048;\nexport var ENGINE_METHOD_CIPHERS = 64;\nexport var ENGINE_METHOD_DIGESTS = 128;\nexport var ENGINE_METHOD_PKEY_METHS = 512;\nexport var ENGINE_METHOD_PKEY_ASN1_METHS = 1024;\nexport var ENGINE_METHOD_ALL = 65535;\nexport var ENGINE_METHOD_NONE = 0;\nexport var DH_CHECK_P_NOT_SAFE_PRIME = 2;\nexport var DH_CHECK_P_NOT_PRIME = 1;\nexport var DH_UNABLE_TO_CHECK_GENERATOR = 4;\nexport var DH_NOT_SUITABLE_GENERATOR = 8;\nexport var ALPN_ENABLED = 1;\nexport var RSA_PKCS1_PADDING = 1;\nexport var RSA_SSLV23_PADDING = 2;\nexport var RSA_NO_PADDING = 3;\nexport var RSA_PKCS1_OAEP_PADDING = 4;\nexport var RSA_X931_PADDING = 5;\nexport var RSA_PKCS1_PSS_PADDING = 6;\nexport var RSA_PSS_SALTLEN_DIGEST = -1;\nexport var RSA_PSS_SALTLEN_MAX_SIGN = -2;\nexport var RSA_PSS_SALTLEN_AUTO = -2;\nexport var defaultCoreCipherList = \"TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA\";\nexport var TLS1_VERSION = 769;\nexport var TLS1_1_VERSION = 770;\nexport var TLS1_2_VERSION = 771;\nexport var TLS1_3_VERSION = 772;\nexport var POINT_CONVERSION_COMPRESSED = 2;\nexport var POINT_CONVERSION_UNCOMPRESSED = 4;\nexport var POINT_CONVERSION_HYBRID = 6;\nexport var defaultCipherList = \"TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA\";\nexport default {\n  RTLD_LAZY: RTLD_LAZY,\n  RTLD_NOW: RTLD_NOW,\n  RTLD_GLOBAL: RTLD_GLOBAL,\n  RTLD_LOCAL: RTLD_LOCAL,\n  E2BIG: E2BIG,\n  EACCES: EACCES,\n  EADDRINUSE: EADDRINUSE,\n  EADDRNOTAVAIL: EADDRNOTAVAIL,\n  EAFNOSUPPORT: EAFNOSUPPORT,\n  EAGAIN: EAGAIN,\n  EALREADY: EALREADY,\n  EBADF: EBADF,\n  EBADMSG: EBADMSG,\n  EBUSY: EBUSY,\n  ECANCELED: ECANCELED,\n  ECHILD: ECHILD,\n  ECONNABORTED: ECONNABORTED,\n  ECONNREFUSED: ECONNREFUSED,\n  ECONNRESET: ECONNRESET,\n  EDEADLK: EDEADLK,\n  EDESTADDRREQ: EDESTADDRREQ,\n  EDOM: EDOM,\n  EDQUOT: EDQUOT,\n  EEXIST: EEXIST,\n  EFAULT: EFAULT,\n  EFBIG: EFBIG,\n  EHOSTUNREACH: EHOSTUNREACH,\n  EIDRM: EIDRM,\n  EILSEQ: EILSEQ,\n  EINPROGRESS: EINPROGRESS,\n  EINTR: EINTR,\n  EINVAL: EINVAL,\n  EIO: EIO,\n  EISCONN: EISCONN,\n  EISDIR: EISDIR,\n  ELOOP: ELOOP,\n  EMFILE: EMFILE,\n  EMLINK: EMLINK,\n  EMSGSIZE: EMSGSIZE,\n  EMULTIHOP: EMULTIHOP,\n  ENAMETOOLONG: ENAMETOOLONG,\n  ENETDOWN: ENETDOWN,\n  ENETRESET: ENETRESET,\n  ENETUNREACH: ENETUNREACH,\n  ENFILE: ENFILE,\n  ENOBUFS: ENOBUFS,\n  ENODATA: ENODATA,\n  ENODEV: ENODEV,\n  ENOENT: ENOENT,\n  ENOEXEC: ENOEXEC,\n  ENOLCK: ENOLCK,\n  ENOLINK: ENOLINK,\n  ENOMEM: ENOMEM,\n  ENOMSG: ENOMSG,\n  ENOPROTOOPT: ENOPROTOOPT,\n  ENOSPC: ENOSPC,\n  ENOSR: ENOSR,\n  ENOSTR: ENOSTR,\n  ENOSYS: ENOSYS,\n  ENOTCONN: ENOTCONN,\n  ENOTDIR: ENOTDIR,\n  ENOTEMPTY: ENOTEMPTY,\n  ENOTSOCK: ENOTSOCK,\n  ENOTSUP: ENOTSUP,\n  ENOTTY: ENOTTY,\n  ENXIO: ENXIO,\n  EOPNOTSUPP: EOPNOTSUPP,\n  EOVERFLOW: EOVERFLOW,\n  EPERM: EPERM,\n  EPIPE: EPIPE,\n  EPROTO: EPROTO,\n  EPROTONOSUPPORT: EPROTONOSUPPORT,\n  EPROTOTYPE: EPROTOTYPE,\n  ERANGE: ERANGE,\n  EROFS: EROFS,\n  ESPIPE: ESPIPE,\n  ESRCH: ESRCH,\n  ESTALE: ESTALE,\n  ETIME: ETIME,\n  ETIMEDOUT: ETIMEDOUT,\n  ETXTBSY: ETXTBSY,\n  EWOULDBLOCK: EWOULDBLOCK,\n  EXDEV: EXDEV,\n  PRIORITY_LOW: PRIORITY_LOW,\n  PRIORITY_BELOW_NORMAL: PRIORITY_BELOW_NORMAL,\n  PRIORITY_NORMAL: PRIORITY_NORMAL,\n  PRIORITY_ABOVE_NORMAL: PRIORITY_ABOVE_NORMAL,\n  PRIORITY_HIGH: PRIORITY_HIGH,\n  PRIORITY_HIGHEST: PRIORITY_HIGHEST,\n  SIGHUP: SIGHUP,\n  SIGINT: SIGINT,\n  SIGQUIT: SIGQUIT,\n  SIGILL: SIGILL,\n  SIGTRAP: SIGTRAP,\n  SIGABRT: SIGABRT,\n  SIGIOT: SIGIOT,\n  SIGBUS: SIGBUS,\n  SIGFPE: SIGFPE,\n  SIGKILL: SIGKILL,\n  SIGUSR1: SIGUSR1,\n  SIGSEGV: SIGSEGV,\n  SIGUSR2: SIGUSR2,\n  SIGPIPE: SIGPIPE,\n  SIGALRM: SIGALRM,\n  SIGTERM: SIGTERM,\n  SIGCHLD: SIGCHLD,\n  SIGCONT: SIGCONT,\n  SIGSTOP: SIGSTOP,\n  SIGTSTP: SIGTSTP,\n  SIGTTIN: SIGTTIN,\n  SIGTTOU: SIGTTOU,\n  SIGURG: SIGURG,\n  SIGXCPU: SIGXCPU,\n  SIGXFSZ: SIGXFSZ,\n  SIGVTALRM: SIGVTALRM,\n  SIGPROF: SIGPROF,\n  SIGWINCH: SIGWINCH,\n  SIGIO: SIGIO,\n  SIGINFO: SIGINFO,\n  SIGSYS: SIGSYS,\n  UV_FS_SYMLINK_DIR: UV_FS_SYMLINK_DIR,\n  UV_FS_SYMLINK_JUNCTION: UV_FS_SYMLINK_JUNCTION,\n  O_RDONLY: O_RDONLY,\n  O_WRONLY: O_WRONLY,\n  O_RDWR: O_RDWR,\n  UV_DIRENT_UNKNOWN: UV_DIRENT_UNKNOWN,\n  UV_DIRENT_FILE: UV_DIRENT_FILE,\n  UV_DIRENT_DIR: UV_DIRENT_DIR,\n  UV_DIRENT_LINK: UV_DIRENT_LINK,\n  UV_DIRENT_FIFO: UV_DIRENT_FIFO,\n  UV_DIRENT_SOCKET: UV_DIRENT_SOCKET,\n  UV_DIRENT_CHAR: UV_DIRENT_CHAR,\n  UV_DIRENT_BLOCK: UV_DIRENT_BLOCK,\n  S_IFMT: S_IFMT,\n  S_IFREG: S_IFREG,\n  S_IFDIR: S_IFDIR,\n  S_IFCHR: S_IFCHR,\n  S_IFBLK: S_IFBLK,\n  S_IFIFO: S_IFIFO,\n  S_IFLNK: S_IFLNK,\n  S_IFSOCK: S_IFSOCK,\n  O_CREAT: O_CREAT,\n  O_EXCL: O_EXCL,\n  O_NOCTTY: O_NOCTTY,\n  O_TRUNC: O_TRUNC,\n  O_APPEND: O_APPEND,\n  O_DIRECTORY: O_DIRECTORY,\n  O_NOFOLLOW: O_NOFOLLOW,\n  O_SYNC: O_SYNC,\n  O_DSYNC: O_DSYNC,\n  O_SYMLINK: O_SYMLINK,\n  O_NONBLOCK: O_NONBLOCK,\n  S_IRWXU: S_IRWXU,\n  S_IRUSR: S_IRUSR,\n  S_IWUSR: S_IWUSR,\n  S_IXUSR: S_IXUSR,\n  S_IRWXG: S_IRWXG,\n  S_IRGRP: S_IRGRP,\n  S_IWGRP: S_IWGRP,\n  S_IXGRP: S_IXGRP,\n  S_IRWXO: S_IRWXO,\n  S_IROTH: S_IROTH,\n  S_IWOTH: S_IWOTH,\n  S_IXOTH: S_IXOTH,\n  F_OK: F_OK,\n  R_OK: R_OK,\n  W_OK: W_OK,\n  X_OK: X_OK,\n  UV_FS_COPYFILE_EXCL: UV_FS_COPYFILE_EXCL,\n  COPYFILE_EXCL: COPYFILE_EXCL,\n  UV_FS_COPYFILE_FICLONE: UV_FS_COPYFILE_FICLONE,\n  COPYFILE_FICLONE: COPYFILE_FICLONE,\n  UV_FS_COPYFILE_FICLONE_FORCE: UV_FS_COPYFILE_FICLONE_FORCE,\n  COPYFILE_FICLONE_FORCE: COPYFILE_FICLONE_FORCE,\n  OPENSSL_VERSION_NUMBER: OPENSSL_VERSION_NUMBER,\n  SSL_OP_ALL: SSL_OP_ALL,\n  SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION: SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION,\n  SSL_OP_CIPHER_SERVER_PREFERENCE: SSL_OP_CIPHER_SERVER_PREFERENCE,\n  SSL_OP_CISCO_ANYCONNECT: SSL_OP_CISCO_ANYCONNECT,\n  SSL_OP_COOKIE_EXCHANGE: SSL_OP_COOKIE_EXCHANGE,\n  SSL_OP_CRYPTOPRO_TLSEXT_BUG: SSL_OP_CRYPTOPRO_TLSEXT_BUG,\n  SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS: SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS,\n  SSL_OP_EPHEMERAL_RSA: SSL_OP_EPHEMERAL_RSA,\n  SSL_OP_LEGACY_SERVER_CONNECT: SSL_OP_LEGACY_SERVER_CONNECT,\n  SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER: SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER,\n  SSL_OP_MICROSOFT_SESS_ID_BUG: SSL_OP_MICROSOFT_SESS_ID_BUG,\n  SSL_OP_MSIE_SSLV2_RSA_PADDING: SSL_OP_MSIE_SSLV2_RSA_PADDING,\n  SSL_OP_NETSCAPE_CA_DN_BUG: SSL_OP_NETSCAPE_CA_DN_BUG,\n  SSL_OP_NETSCAPE_CHALLENGE_BUG: SSL_OP_NETSCAPE_CHALLENGE_BUG,\n  SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG: SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG,\n  SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG: SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG,\n  SSL_OP_NO_COMPRESSION: SSL_OP_NO_COMPRESSION,\n  SSL_OP_NO_QUERY_MTU: SSL_OP_NO_QUERY_MTU,\n  SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION: SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION,\n  SSL_OP_NO_SSLv2: SSL_OP_NO_SSLv2,\n  SSL_OP_NO_SSLv3: SSL_OP_NO_SSLv3,\n  SSL_OP_NO_TICKET: SSL_OP_NO_TICKET,\n  SSL_OP_NO_TLSv1: SSL_OP_NO_TLSv1,\n  SSL_OP_NO_TLSv1_1: SSL_OP_NO_TLSv1_1,\n  SSL_OP_NO_TLSv1_2: SSL_OP_NO_TLSv1_2,\n  SSL_OP_PKCS1_CHECK_1: SSL_OP_PKCS1_CHECK_1,\n  SSL_OP_PKCS1_CHECK_2: SSL_OP_PKCS1_CHECK_2,\n  SSL_OP_SINGLE_DH_USE: SSL_OP_SINGLE_DH_USE,\n  SSL_OP_SINGLE_ECDH_USE: SSL_OP_SINGLE_ECDH_USE,\n  SSL_OP_SSLEAY_080_CLIENT_DH_BUG: SSL_OP_SSLEAY_080_CLIENT_DH_BUG,\n  SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG: SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG,\n  SSL_OP_TLS_BLOCK_PADDING_BUG: SSL_OP_TLS_BLOCK_PADDING_BUG,\n  SSL_OP_TLS_D5_BUG: SSL_OP_TLS_D5_BUG,\n  SSL_OP_TLS_ROLLBACK_BUG: SSL_OP_TLS_ROLLBACK_BUG,\n  ENGINE_METHOD_RSA: ENGINE_METHOD_RSA,\n  ENGINE_METHOD_DSA: ENGINE_METHOD_DSA,\n  ENGINE_METHOD_DH: ENGINE_METHOD_DH,\n  ENGINE_METHOD_RAND: ENGINE_METHOD_RAND,\n  ENGINE_METHOD_EC: ENGINE_METHOD_EC,\n  ENGINE_METHOD_CIPHERS: ENGINE_METHOD_CIPHERS,\n  ENGINE_METHOD_DIGESTS: ENGINE_METHOD_DIGESTS,\n  ENGINE_METHOD_PKEY_METHS: ENGINE_METHOD_PKEY_METHS,\n  ENGINE_METHOD_PKEY_ASN1_METHS: ENGINE_METHOD_PKEY_ASN1_METHS,\n  ENGINE_METHOD_ALL: ENGINE_METHOD_ALL,\n  ENGINE_METHOD_NONE: ENGINE_METHOD_NONE,\n  DH_CHECK_P_NOT_SAFE_PRIME: DH_CHECK_P_NOT_SAFE_PRIME,\n  DH_CHECK_P_NOT_PRIME: DH_CHECK_P_NOT_PRIME,\n  DH_UNABLE_TO_CHECK_GENERATOR: DH_UNABLE_TO_CHECK_GENERATOR,\n  DH_NOT_SUITABLE_GENERATOR: DH_NOT_SUITABLE_GENERATOR,\n  ALPN_ENABLED: ALPN_ENABLED,\n  RSA_PKCS1_PADDING: RSA_PKCS1_PADDING,\n  RSA_SSLV23_PADDING: RSA_SSLV23_PADDING,\n  RSA_NO_PADDING: RSA_NO_PADDING,\n  RSA_PKCS1_OAEP_PADDING: RSA_PKCS1_OAEP_PADDING,\n  RSA_X931_PADDING: RSA_X931_PADDING,\n  RSA_PKCS1_PSS_PADDING: RSA_PKCS1_PSS_PADDING,\n  RSA_PSS_SALTLEN_DIGEST: RSA_PSS_SALTLEN_DIGEST,\n  RSA_PSS_SALTLEN_MAX_SIGN: RSA_PSS_SALTLEN_MAX_SIGN,\n  RSA_PSS_SALTLEN_AUTO: RSA_PSS_SALTLEN_AUTO,\n  defaultCoreCipherList: defaultCoreCipherList,\n  TLS1_VERSION: TLS1_VERSION,\n  TLS1_1_VERSION: TLS1_1_VERSION,\n  TLS1_2_VERSION: TLS1_2_VERSION,\n  TLS1_3_VERSION: TLS1_3_VERSION,\n  POINT_CONVERSION_COMPRESSED: POINT_CONVERSION_COMPRESSED,\n  POINT_CONVERSION_UNCOMPRESSED: POINT_CONVERSION_UNCOMPRESSED,\n  POINT_CONVERSION_HYBRID: POINT_CONVERSION_HYBRID,\n  defaultCipherList: defaultCipherList\n};\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// Format\n// ======\n// Header(1)\n//      Prover Type 1 Groth\n// HeaderGroth(2)\n//      n8q\n//      q\n//      n8r\n//      r\n//      NVars\n//      NPub\n//      DomainSize  (multiple of 2\n//      alpha1\n//      beta1\n//      delta1\n//      beta2\n//      gamma2\n//      delta2\n// IC(3)\n// Coefs(4)\n// PointsA(5)\n// PointsB1(6)\n// PointsB2(7)\n// PointsC(8)\n// PointsH(9)\n// Contributions(10)\n\nimport { Scalar, F1Field } from \"ffjavascript\";\nimport * as binFileUtils from \"@iden3/binfileutils\";\n\nimport { getCurveFromQ as getCurve } from \"./curves.js\";\nimport { log2 } from \"./misc.js\";\n\nexport async function writeHeader(fd, zkey) {\n\n    // Write the header\n    ///////////\n    await binFileUtils.startWriteSection(fd, 1);\n    await fd.writeULE32(1); // Groth\n    await binFileUtils.endWriteSection(fd);\n\n    // Write the Groth header section\n    ///////////\n\n    const curve = await getCurve(zkey.q);\n\n    await binFileUtils.startWriteSection(fd, 2);\n    const primeQ = curve.q;\n    const n8q = (Math.floor( (Scalar.bitLength(primeQ) - 1) / 64) +1)*8;\n\n    const primeR = curve.r;\n    const n8r = (Math.floor( (Scalar.bitLength(primeR) - 1) / 64) +1)*8;\n\n    await fd.writeULE32(n8q);\n    await binFileUtils.writeBigInt(fd, primeQ, n8q);\n    await fd.writeULE32(n8r);\n    await binFileUtils.writeBigInt(fd, primeR, n8r);\n    await fd.writeULE32(zkey.nVars);                         // Total number of bars\n    await fd.writeULE32(zkey.nPublic);                       // Total number of public vars (not including ONE)\n    await fd.writeULE32(zkey.domainSize);                  // domainSize\n    await writeG1(fd, curve, zkey.vk_alpha_1);\n    await writeG1(fd, curve, zkey.vk_beta_1);\n    await writeG2(fd, curve, zkey.vk_beta_2);\n    await writeG2(fd, curve, zkey.vk_gamma_2);\n    await writeG1(fd, curve, zkey.vk_delta_1);\n    await writeG2(fd, curve, zkey.vk_delta_2);\n\n    await binFileUtils.endWriteSection(fd);\n\n\n}\n\nexport async function writeZKey(fileName, zkey) {\n\n    let curve = getCurve(zkey.q);\n\n    const fd = await binFileUtils.createBinFile(fileName,\"zkey\", 1, 9);\n\n    await writeHeader(fd, zkey);\n    const n8r = (Math.floor( (Scalar.bitLength(zkey.r) - 1) / 64) +1)*8;\n    const Rr = Scalar.mod(Scalar.shl(1, n8r*8), zkey.r);\n    const R2r = Scalar.mod(Scalar.mul(Rr,Rr), zkey.r);\n\n    // Write Pols (A and B (C can be ommited))\n    ///////////\n\n    zkey.ccoefs = zkey.ccoefs.filter(c => c.matrix<2);\n    zkey.ccoefs.sort( (a,b) => a.constraint - b.constraint );\n    await binFileUtils.startWriteSection(fd, 4);\n    await fd.writeULE32(zkey.ccoefs.length);\n    for (let i=0; i<zkey.ccoefs.length; i++) {\n        const coef = zkey.ccoefs[i];\n        await fd.writeULE32(coef.matrix);\n        await fd.writeULE32(coef.constraint);\n        await fd.writeULE32(coef.signal);\n        await writeFr2(coef.value);\n    }\n    await binFileUtils.endWriteSection(fd);\n\n\n    // Write IC Section\n    ///////////\n    await binFileUtils.startWriteSection(fd, 3);\n    for (let i=0; i<= zkey.nPublic; i++) {\n        await writeG1(fd, curve, zkey.IC[i] );\n    }\n    await binFileUtils.endWriteSection(fd);\n\n\n    // Write A\n    ///////////\n    await binFileUtils.startWriteSection(fd, 5);\n    for (let i=0; i<zkey.nVars; i++) {\n        await writeG1(fd, curve, zkey.A[i]);\n    }\n    await binFileUtils.endWriteSection(fd);\n\n    // Write B1\n    ///////////\n    await binFileUtils.startWriteSection(fd, 6);\n    for (let i=0; i<zkey.nVars; i++) {\n        await writeG1(fd, curve, zkey.B1[i]);\n    }\n    await binFileUtils.endWriteSection(fd);\n\n    // Write B2\n    ///////////\n    await binFileUtils.startWriteSection(fd, 7);\n    for (let i=0; i<zkey.nVars; i++) {\n        await writeG2(fd, curve, zkey.B2[i]);\n    }\n    await binFileUtils.endWriteSection(fd);\n\n    // Write C\n    ///////////\n    await binFileUtils.startWriteSection(fd, 8);\n    for (let i=zkey.nPublic+1; i<zkey.nVars; i++) {\n        await writeG1(fd, curve, zkey.C[i]);\n    }\n    await binFileUtils.endWriteSection(fd);\n\n\n    // Write H points\n    ///////////\n    await binFileUtils.startWriteSection(fd, 9);\n    for (let i=0; i<zkey.domainSize; i++) {\n        await writeG1(fd, curve, zkey.hExps[i]);\n    }\n    await binFileUtils.endWriteSection(fd);\n\n    await fd.close();\n\n    async function writeFr2(n) {\n        // Convert to montgomery\n        n = Scalar.mod( Scalar.mul(n, R2r), zkey.r);\n\n        await binFileUtils.writeBigInt(fd, n, n8r);\n    }\n\n}\n\nasync function writeG1(fd, curve, p) {\n    const buff = new Uint8Array(curve.G1.F.n8*2);\n    curve.G1.toRprLEM(buff, 0, p);\n    await fd.write(buff);\n}\n\nasync function writeG2(fd, curve, p) {\n    const buff = new Uint8Array(curve.G2.F.n8*2);\n    curve.G2.toRprLEM(buff, 0, p);\n    await fd.write(buff);\n}\n\nasync function readG1(fd, curve, toObject) {\n    const buff = await fd.read(curve.G1.F.n8*2);\n    const res = curve.G1.fromRprLEM(buff, 0);\n    return toObject ? curve.G1.toObject(res) : res;\n}\n\nasync function readG2(fd, curve, toObject) {\n    const buff = await fd.read(curve.G2.F.n8*2);\n    const res = curve.G2.fromRprLEM(buff, 0);\n    return toObject ? curve.G2.toObject(res) : res;\n}\n\n\nexport async function readHeader(fd, sections, toObject) {\n    // Read Header\n    /////////////////////\n    await binFileUtils.startReadUniqueSection(fd, sections, 1);\n    const protocolId = await fd.readULE32();\n    await binFileUtils.endReadSection(fd);\n\n    if (protocolId == 1) {\n        return await readHeaderGroth16(fd, sections, toObject);\n    } else if (protocolId == 2) {\n        return await readHeaderPlonk(fd, sections, toObject);\n    } else {\n        throw new Error(\"Protocol not supported: \");\n    }        \n}\n\n\n\n\nasync function readHeaderGroth16(fd, sections, toObject) {\n    const zkey = {};\n\n    zkey.protocol = \"groth16\";\n\n    // Read Groth Header\n    /////////////////////\n    await binFileUtils.startReadUniqueSection(fd, sections, 2);\n    const n8q = await fd.readULE32();\n    zkey.n8q = n8q;\n    zkey.q = await binFileUtils.readBigInt(fd, n8q);\n\n    const n8r = await fd.readULE32();\n    zkey.n8r = n8r;\n    zkey.r = await binFileUtils.readBigInt(fd, n8r);\n    zkey.curve = await getCurve(zkey.q);\n    zkey.nVars = await fd.readULE32();\n    zkey.nPublic = await fd.readULE32();\n    zkey.domainSize = await fd.readULE32();\n    zkey.power = log2(zkey.domainSize);\n    zkey.vk_alpha_1 = await readG1(fd, zkey.curve, toObject);\n    zkey.vk_beta_1 = await readG1(fd, zkey.curve, toObject);\n    zkey.vk_beta_2 = await readG2(fd, zkey.curve, toObject);\n    zkey.vk_gamma_2 = await readG2(fd, zkey.curve, toObject);\n    zkey.vk_delta_1 = await readG1(fd, zkey.curve, toObject);\n    zkey.vk_delta_2 = await readG2(fd, zkey.curve, toObject);\n    await binFileUtils.endReadSection(fd);\n\n    return zkey;\n\n}\n\n\n\n\nasync function readHeaderPlonk(fd, sections, toObject) {\n    const zkey = {};\n\n    zkey.protocol = \"plonk\";\n\n    // Read Plonk Header\n    /////////////////////\n    await binFileUtils.startReadUniqueSection(fd, sections, 2);\n    const n8q = await fd.readULE32();\n    zkey.n8q = n8q;\n    zkey.q = await binFileUtils.readBigInt(fd, n8q);\n\n    const n8r = await fd.readULE32();\n    zkey.n8r = n8r;\n    zkey.r = await binFileUtils.readBigInt(fd, n8r);\n    zkey.curve = await getCurve(zkey.q);\n    zkey.nVars = await fd.readULE32();\n    zkey.nPublic = await fd.readULE32();\n    zkey.domainSize = await fd.readULE32();\n    zkey.power = log2(zkey.domainSize);\n    zkey.nAdditions = await fd.readULE32();\n    zkey.nConstrains = await fd.readULE32();\n    zkey.k1 = await fd.read(n8r);\n    zkey.k2 = await fd.read(n8r);\n\n    zkey.Qm = await readG1(fd, zkey.curve, toObject);\n    zkey.Ql = await readG1(fd, zkey.curve, toObject);\n    zkey.Qr = await readG1(fd, zkey.curve, toObject);\n    zkey.Qo = await readG1(fd, zkey.curve, toObject);\n    zkey.Qc = await readG1(fd, zkey.curve, toObject);\n    zkey.S1 = await readG1(fd, zkey.curve, toObject);\n    zkey.S2 = await readG1(fd, zkey.curve, toObject);\n    zkey.S3 = await readG1(fd, zkey.curve, toObject);\n    zkey.X_2 = await readG2(fd, zkey.curve, toObject);\n\n    await binFileUtils.endReadSection(fd);\n\n    return zkey;\n}\n\nexport async function readZKey(fileName, toObject) {\n    const {fd, sections} = await binFileUtils.readBinFile(fileName, \"zkey\", 1);\n\n    const zkey = await readHeader(fd, sections, toObject);\n\n    const Fr = new F1Field(zkey.r);\n    const Rr = Scalar.mod(Scalar.shl(1, zkey.n8r*8), zkey.r);\n    const Rri = Fr.inv(Rr);\n    const Rri2 = Fr.mul(Rri, Rri);\n\n    let curve = await getCurve(zkey.q);\n\n    // Read IC Section\n    ///////////\n    await binFileUtils.startReadUniqueSection(fd, sections, 3);\n    zkey.IC = [];\n    for (let i=0; i<= zkey.nPublic; i++) {\n        const P = await readG1(fd, curve, toObject);\n        zkey.IC.push(P);\n    }\n    await binFileUtils.endReadSection(fd);\n\n\n    // Read Coefs\n    ///////////\n    await binFileUtils.startReadUniqueSection(fd, sections, 4);\n    const nCCoefs = await fd.readULE32();\n    zkey.ccoefs = [];\n    for (let i=0; i<nCCoefs; i++) {\n        const m = await fd.readULE32();\n        const c = await fd.readULE32();\n        const s = await fd.readULE32();\n        const v = await readFr2(toObject);\n        zkey.ccoefs.push({\n            matrix: m,\n            constraint: c,\n            signal: s,\n            value: v\n        });\n    }\n    await binFileUtils.endReadSection(fd);\n\n    // Read A points\n    ///////////\n    await binFileUtils.startReadUniqueSection(fd, sections, 5);\n    zkey.A = [];\n    for (let i=0; i<zkey.nVars; i++) {\n        const A = await readG1(fd, curve, toObject);\n        zkey.A[i] = A;\n    }\n    await binFileUtils.endReadSection(fd);\n\n\n    // Read B1\n    ///////////\n    await binFileUtils.startReadUniqueSection(fd, sections, 6);\n    zkey.B1 = [];\n    for (let i=0; i<zkey.nVars; i++) {\n        const B1 = await readG1(fd, curve, toObject);\n\n        zkey.B1[i] = B1;\n    }\n    await binFileUtils.endReadSection(fd);\n\n\n    // Read B2 points\n    ///////////\n    await binFileUtils.startReadUniqueSection(fd, sections, 7);\n    zkey.B2 = [];\n    for (let i=0; i<zkey.nVars; i++) {\n        const B2 = await readG2(fd, curve, toObject);\n        zkey.B2[i] = B2;\n    }\n    await binFileUtils.endReadSection(fd);\n\n\n    // Read C points\n    ///////////\n    await binFileUtils.startReadUniqueSection(fd, sections, 8);\n    zkey.C = [];\n    for (let i=zkey.nPublic+1; i<zkey.nVars; i++) {\n        const C = await readG1(fd, curve, toObject);\n\n        zkey.C[i] = C;\n    }\n    await binFileUtils.endReadSection(fd);\n\n\n    // Read H points\n    ///////////\n    await binFileUtils.startReadUniqueSection(fd, sections, 9);\n    zkey.hExps = [];\n    for (let i=0; i<zkey.domainSize; i++) {\n        const H = await readG1(fd, curve, toObject);\n        zkey.hExps.push(H);\n    }\n    await binFileUtils.endReadSection(fd);\n\n    await fd.close();\n\n    return zkey;\n\n    async function readFr2(/* toObject */) {\n        const n = await binFileUtils.readBigInt(fd, zkey.n8r);\n        return Fr.mul(n, Rri2);\n    }\n\n}\n\n\nasync function readContribution(fd, curve, toObject) {\n    const c = {delta:{}};\n    c.deltaAfter = await readG1(fd, curve, toObject);\n    c.delta.g1_s = await readG1(fd, curve, toObject);\n    c.delta.g1_sx = await readG1(fd, curve, toObject);\n    c.delta.g2_spx = await readG2(fd, curve, toObject);\n    c.transcript = await fd.read(64);\n    c.type = await fd.readULE32();\n\n    const paramLength = await fd.readULE32();\n    const curPos = fd.pos;\n    let lastType =0;\n    while (fd.pos-curPos < paramLength) {\n        const buffType = await fd.read(1);\n        if (buffType[0]<= lastType) throw new Error(\"Parameters in the contribution must be sorted\");\n        lastType = buffType[0];\n        if (buffType[0]==1) {     // Name\n            const buffLen = await fd.read(1);\n            const buffStr = await fd.read(buffLen[0]);\n            c.name = new TextDecoder().decode(buffStr);\n        } else if (buffType[0]==2) {\n            const buffExp = await fd.read(1);\n            c.numIterationsExp = buffExp[0];\n        } else if (buffType[0]==3) {\n            const buffLen = await fd.read(1);\n            c.beaconHash = await fd.read(buffLen[0]);\n        } else {\n            throw new Error(\"Parameter not recognized\");\n        }\n    }\n    if (fd.pos != curPos + paramLength) {\n        throw new Error(\"Parametes do not match\");\n    }\n\n    return c;\n}\n\n\nexport async function readMPCParams(fd, curve, sections) {\n    await binFileUtils.startReadUniqueSection(fd, sections, 10);\n    const res = { contributions: []};\n    res.csHash = await fd.read(64);\n    const n = await fd.readULE32();\n    for (let i=0; i<n; i++) {\n        const c = await readContribution(fd, curve);\n        res.contributions.push(c);\n    }\n    await binFileUtils.endReadSection(fd);\n\n    return res;\n}\n\nasync function writeContribution(fd, curve, c) {\n    await writeG1(fd, curve, c.deltaAfter);\n    await writeG1(fd, curve, c.delta.g1_s);\n    await writeG1(fd, curve, c.delta.g1_sx);\n    await writeG2(fd, curve, c.delta.g2_spx);\n    await fd.write(c.transcript);\n    await fd.writeULE32(c.type || 0);\n\n    const params = [];\n    if (c.name) {\n        params.push(1);      // Param Name\n        const nameData = new TextEncoder(\"utf-8\").encode(c.name.substring(0,64));\n        params.push(nameData.byteLength);\n        for (let i=0; i<nameData.byteLength; i++) params.push(nameData[i]);\n    }\n    if (c.type == 1) {\n        params.push(2);      // Param numIterationsExp\n        params.push(c.numIterationsExp);\n\n        params.push(3);      // Beacon Hash\n        params.push(c.beaconHash.byteLength);\n        for (let i=0; i<c.beaconHash.byteLength; i++) params.push(c.beaconHash[i]);\n    }\n    if (params.length>0) {\n        const paramsBuff = new Uint8Array(params);\n        await fd.writeULE32(paramsBuff.byteLength);\n        await fd.write(paramsBuff);\n    } else {\n        await fd.writeULE32(0);\n    }\n\n}\n\nexport async function writeMPCParams(fd, curve, mpcParams) {\n    await binFileUtils.startWriteSection(fd, 10);\n    await fd.write(mpcParams.csHash);\n    await fd.writeULE32(mpcParams.contributions.length);\n    for (let i=0; i<mpcParams.contributions.length; i++) {\n        await writeContribution(fd, curve,mpcParams.contributions[i]);\n    }\n    await binFileUtils.endWriteSection(fd);\n}\n\nexport function hashG1(hasher, curve, p) {\n    const buff = new Uint8Array(curve.G1.F.n8*2);\n    curve.G1.toRprUncompressed(buff, 0, p);\n    hasher.update(buff);\n}\n\nexport function hashG2(hasher,curve, p) {\n    const buff = new Uint8Array(curve.G2.F.n8*2);\n    curve.G2.toRprUncompressed(buff, 0, p);\n    hasher.update(buff);\n}\n\nexport function hashPubKey(hasher, curve, c) {\n    hashG1(hasher, curve, c.deltaAfter);\n    hashG1(hasher, curve, c.delta.g1_s);\n    hashG1(hasher, curve, c.delta.g1_sx);\n    hashG2(hasher, curve, c.delta.g2_spx);\n    hasher.update(c.transcript);\n}\n\n", "\nimport * as _Scalar  from \"./src/scalar.js\";\nexport const Scalar=_Scalar;\n\nexport {default as PolField} from \"./src/polfield.js\";\nexport {default as F1Field} from \"./src/f1field.js\";\nexport {default as F2Field} from \"./src/f2field.js\";\nexport {default as F3Field} from \"./src/f3field.js\";\n\nexport {default as ZqField} from \"./src/f1field.js\";\n\nexport {default as EC} from \"./src/ec.js\";\n\nexport {default as buildBn128} from \"./src/bn128.js\";\nexport {default as buildBls12381} from \"./src/bls12381.js\";\n\nimport * as _utils from \"./src/utils.js\";\nexport const utils = _utils;\nexport {default as ChaCha} from \"./src/chacha.js\";\n\nexport {default as BigBuffer} from \"./src/bigbuffer.js\";\n\nexport {getCurveFromR, getCurveFromQ, getCurveFromName} from \"./src/curves.js\";\n\n", "\n/* global BigInt */\nconst hexLen = [ 0, 1, 2, 2, 3, 3, 3, 3, 4 ,4 ,4 ,4 ,4 ,4 ,4 ,4];\n\nexport function fromString(s, radix) {\n    if ((!radix)||(radix==10)) {\n        return BigInt(s);\n    } else if (radix==16) {\n        if (s.slice(0,2) == \"0x\") {\n            return BigInt(s);\n        } else {\n            return BigInt(\"0x\"+s);\n        }\n    }\n}\n\nexport const e = fromString;\n\nexport function fromArray(a, radix) {\n    let acc =BigInt(0);\n    radix = BigInt(radix);\n    for (let i=0; i<a.length; i++) {\n        acc = acc*radix + BigInt(a[i]);\n    }\n    return acc;\n}\n\nexport function bitLength(a) {\n    const aS =a.toString(16);\n    return (aS.length-1)*4 +hexLen[parseInt(aS[0], 16)];\n}\n\nexport function isNegative(a) {\n    return BigInt(a) < BigInt(0);\n}\n\nexport function isZero(a) {\n    return !a;\n}\n\nexport function shiftLeft(a, n) {\n    return BigInt(a) << BigInt(n);\n}\n\nexport function shiftRight(a, n) {\n    return BigInt(a) >> BigInt(n);\n}\n\nexport const shl = shiftLeft;\nexport const shr = shiftRight;\n\nexport function isOdd(a) {\n    return (BigInt(a) & BigInt(1)) == BigInt(1);\n}\n\n\nexport function naf(n) {\n    let E = BigInt(n);\n    const res = [];\n    while (E) {\n        if (E & BigInt(1)) {\n            const z = 2 - Number(E % BigInt(4));\n            res.push( z );\n            E = E - BigInt(z);\n        } else {\n            res.push( 0 );\n        }\n        E = E >> BigInt(1);\n    }\n    return res;\n}\n\n\nexport function bits(n) {\n    let E = BigInt(n);\n    const res = [];\n    while (E) {\n        if (E & BigInt(1)) {\n            res.push(1);\n        } else {\n            res.push( 0 );\n        }\n        E = E >> BigInt(1);\n    }\n    return res;\n}\n\nexport function toNumber(s) {\n    if (s>BigInt(Number.MAX_SAFE_INTEGER )) {\n        throw new Error(\"Number too big\");\n    }\n    return Number(s);\n}\n\nexport function toArray(s, radix) {\n    const res = [];\n    let rem = BigInt(s);\n    radix = BigInt(radix);\n    while (rem) {\n        res.unshift( Number(rem % radix));\n        rem = rem / radix;\n    }\n    return res;\n}\n\n\nexport function add(a, b) {\n    return BigInt(a) + BigInt(b);\n}\n\nexport function sub(a, b) {\n    return BigInt(a) - BigInt(b);\n}\n\nexport function neg(a) {\n    return -BigInt(a);\n}\n\nexport function mul(a, b) {\n    return BigInt(a) * BigInt(b);\n}\n\nexport function square(a) {\n    return BigInt(a) * BigInt(a);\n}\n\nexport function pow(a, b) {\n    return BigInt(a) ** BigInt(b);\n}\n\nexport function exp(a, b) {\n    return BigInt(a) ** BigInt(b);\n}\n\nexport function abs(a) {\n    return BigInt(a) >= 0 ? BigInt(a) : -BigInt(a);\n}\n\nexport function div(a, b) {\n    return BigInt(a) / BigInt(b);\n}\n\nexport function mod(a, b) {\n    return BigInt(a) % BigInt(b);\n}\n\nexport function eq(a, b) {\n    return BigInt(a) == BigInt(b);\n}\n\nexport function neq(a, b) {\n    return BigInt(a) != BigInt(b);\n}\n\nexport function lt(a, b) {\n    return BigInt(a) < BigInt(b);\n}\n\nexport function gt(a, b) {\n    return BigInt(a) > BigInt(b);\n}\n\nexport function leq(a, b) {\n    return BigInt(a) <= BigInt(b);\n}\n\nexport function geq(a, b) {\n    return BigInt(a) >= BigInt(b);\n}\n\nexport function band(a, b) {\n    return BigInt(a) & BigInt(b);\n}\n\nexport function bor(a, b) {\n    return BigInt(a) | BigInt(b);\n}\n\nexport function bxor(a, b) {\n    return BigInt(a) ^ BigInt(b);\n}\n\nexport function land(a, b) {\n    return BigInt(a) && BigInt(b);\n}\n\nexport function lor(a, b) {\n    return BigInt(a) || BigInt(b);\n}\n\nexport function lnot(a) {\n    return !BigInt(a);\n}\n\n// Returns a buffer with Little Endian Representation\nexport function toRprLE(buff, o, e, n8) {\n    const s = \"0000000\" + e.toString(16);\n    const v = new Uint32Array(buff.buffer, o, n8/4);\n    const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;\n    for (let i=0; i<l; i++) v[i] = parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16);\n    for (let i=l; i<v.length; i++) v[i] = 0;\n    for (let i=v.length*4; i<n8; i++) buff[i] = toNumber(band(shiftRight(e, i*8), 0xFF));\n}\n\n// Returns a buffer with Big Endian Representation\nexport function toRprBE(buff, o, e, n8) {\n    const s = \"0000000\" + e.toString(16);\n    const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n    const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;\n    for (let i=0; i<l; i++) v.setUint32(n8-i*4 -4, parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16), false);\n    for (let i=0; i<n8/4-l; i++) v[i] = 0;\n}\n\n// Pases a buffer with Little Endian Representation\nexport function fromRprLE(buff, o, n8) {\n    n8 = n8 || buff.byteLength;\n    o = o || 0;\n    const v = new Uint32Array(buff.buffer, o, n8/4);\n    const a = new Array(n8/4);\n    v.forEach( (ch,i) => a[a.length-i-1] = ch.toString(16).padStart(8,\"0\") );\n    return fromString(a.join(\"\"), 16);\n}\n\n// Pases a buffer with Big Endian Representation\nexport function fromRprBE(buff, o, n8) {\n    n8 = n8 || buff.byteLength;\n    o = o || 0;\n    const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n    const a = new Array(n8/4);\n    for (let i=0; i<n8/4; i++) {\n        a[i] = v.getUint32(i*4, false).toString(16).padStart(8, \"0\");\n    }\n    return fromString(a.join(\"\"), 16);\n}\n\nexport function toString(a, radix) {\n    return a.toString(radix);\n}\n\nexport function toLEBuff(a) {\n    const buff = new Uint8Array(Math.floor((bitLength(a) - 1) / 8) +1);\n    toRprLE(buff, 0, a, buff.byteLength);\n    return buff;\n}\n\nexport const zero = e(0);\nexport const one = e(1);\n\n\n\n\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nexport default class PolField {\n    constructor (F) {\n        this.F = F;\n\n        let rem = F.sqrt_t;\n        let s = F.sqrt_s;\n\n        const five = this.F.add(this.F.add(this.F.two, this.F.two), this.F.one);\n\n        this.w = new Array(s+1);\n        this.wi = new Array(s+1);\n        this.w[s] = this.F.pow(five, rem);\n        this.wi[s] = this.F.inv(this.w[s]);\n\n        let n=s-1;\n        while (n>=0) {\n            this.w[n] = this.F.square(this.w[n+1]);\n            this.wi[n] = this.F.square(this.wi[n+1]);\n            n--;\n        }\n\n\n        this.roots = [];\n/*        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n    */\n        this._setRoots(15);\n    }\n\n    _setRoots(n) {\n        if (n > this.F.sqrt_s) n = this.s;\n        for (let i=n; (i>=0) && (!this.roots[i]); i--) {\n            let r = this.F.one;\n            const nroots = 1 << i;\n            const rootsi = new Array(nroots);\n            for (let j=0; j<nroots; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n            this.roots[i] = rootsi;\n        }\n    }\n\n    add(a, b) {\n        const m = Math.max(a.length, b.length);\n        const res = new Array(m);\n        for (let i=0; i<m; i++) {\n            res[i] = this.F.add(a[i] || this.F.zero, b[i] || this.F.zero);\n        }\n        return this.reduce(res);\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        const m = Math.max(a.length, b.length);\n        const res = new Array(m);\n        for (let i=0; i<m; i++) {\n            res[i] = this.F.sub(a[i] || this.F.zero, b[i] || this.F.zero);\n        }\n        return this.reduce(res);\n    }\n\n    mulScalar(p, b) {\n        if (this.F.eq(b, this.F.zero)) return [];\n        if (this.F.eq(b, this.F.one)) return p;\n        const res = new Array(p.length);\n        for (let i=0; i<p.length; i++) {\n            res[i] = this.F.mul(p[i], b);\n        }\n        return res;\n    }\n\n\n\n    mul(a, b) {\n        if (a.length == 0) return [];\n        if (b.length == 0) return [];\n        if (a.length == 1) return this.mulScalar(b, a[0]);\n        if (b.length == 1) return this.mulScalar(a, b[0]);\n\n        if (b.length > a.length) {\n            [b, a] = [a, b];\n        }\n\n        if ((b.length <= 2) || (b.length < log2(a.length))) {\n            return this.mulNormal(a,b);\n        } else {\n            return this.mulFFT(a,b);\n        }\n    }\n\n    mulNormal(a, b) {\n        let res = [];\n        for (let i=0; i<b.length; i++) {\n            res = this.add(res, this.scaleX(this.mulScalar(a, b[i]), i) );\n        }\n        return res;\n    }\n\n    mulFFT(a,b) {\n        const longestN = Math.max(a.length, b.length);\n        const bitsResult = log2(longestN-1)+2;\n        this._setRoots(bitsResult);\n\n        const m = 1 << bitsResult;\n        const ea = this.extend(a,m);\n        const eb = this.extend(b,m);\n\n        const ta = __fft(this, ea, bitsResult, 0, 1, false);\n        const tb = __fft(this, eb, bitsResult, 0, 1, false);\n\n        const tres = new Array(m);\n\n        for (let i=0; i<m; i++) {\n            tres[i] = this.F.mul(ta[i], tb[i]);\n        }\n\n        const res = __fft(this, tres, bitsResult, 0, 1, true);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return this.reduce(resn);\n    }\n\n\n\n    square(a) {\n        return this.mul(a,a);\n    }\n\n    scaleX(p, n) {\n        if (n==0) {\n            return p;\n        } else if (n>0) {\n            const z = new Array(n).fill(this.F.zero);\n            return z.concat(p);\n        } else {\n            if (-n >= p.length) return [];\n            return p.slice(-n);\n        }\n    }\n\n    eval2(p, x) {\n        let v = this.F.zero;\n        let ix = this.F.one;\n        for (let i=0; i<p.length; i++) {\n            v = this.F.add(v, this.F.mul(p[i], ix));\n            ix = this.F.mul(ix, x);\n        }\n        return v;\n    }\n\n    eval(p,x) {\n        const F = this.F;\n        if (p.length == 0) return F.zero;\n        const m = this._next2Power(p.length);\n        const ep = this.extend(p, m);\n\n        return _eval(ep, x, 0, 1, m);\n\n        function _eval(p, x, offset, step, n) {\n            if (n==1) return p[offset];\n            const newX = F.square(x);\n            const res= F.add(\n                _eval(p, newX, offset, step << 1, n >> 1),\n                F.mul(\n                    x,\n                    _eval(p, newX, offset+step , step << 1, n >> 1)));\n            return res;\n        }\n    }\n\n    lagrange(points) {\n        let roots = [this.F.one];\n        for (let i=0; i<points.length; i++) {\n            roots = this.mul(roots, [this.F.neg(points[i][0]), this.F.one]);\n        }\n\n        let sum = [];\n        for (let i=0; i<points.length; i++) {\n            let mpol = this.ruffini(roots, points[i][0]);\n            const factor =\n                this.F.mul(\n                    this.F.inv(this.eval(mpol, points[i][0])),\n                    points[i][1]);\n            mpol = this.mulScalar(mpol, factor);\n            sum = this.add(sum, mpol);\n        }\n        return sum;\n    }\n\n\n    fft(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        const res = __fft(this, ep, bits, 0, 1);\n        return res;\n    }\n\n    fft2(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        __bitReverse(ep, bits);\n        const res = __fft2(this, ep, bits);\n        return res;\n    }\n\n\n    ifft(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        const res =  __fft(this, ep, bits, 0, 1);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n\n    }\n\n\n    ifft2(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        __bitReverse(ep, bits);\n        const res =  __fft2(this, ep, bits, 0, 1);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n\n    }\n\n    _fft(pall, bits, offset, step) {\n\n        const n = 1 << bits;\n        if (n==1) {\n            return [ pall[offset] ];\n        }\n\n        const ndiv2 = n >> 1;\n        const p1 = this._fft(pall, bits-1, offset, step*2);\n        const p2 = this._fft(pall, bits-1, offset+step, step*2);\n\n        const out = new Array(n);\n\n        let m= this.F.one;\n        for (let i=0; i<ndiv2; i++) {\n            out[i] = this.F.add(p1[i], this.F.mul(m, p2[i]));\n            out[i+ndiv2] = this.F.sub(p1[i], this.F.mul(m, p2[i]));\n            m = this.F.mul(m, this.w[bits]);\n        }\n\n        return out;\n    }\n\n    extend(p, e) {\n        if (e == p.length) return p;\n        const z = new Array(e-p.length).fill(this.F.zero);\n\n        return p.concat(z);\n    }\n\n    reduce(p) {\n        if (p.length == 0) return p;\n        if (! this.F.eq(p[p.length-1], this.F.zero) ) return p;\n        let i=p.length-1;\n        while( i>0 && this.F.eq(p[i], this.F.zero) ) i--;\n        return p.slice(0, i+1);\n    }\n\n    eq(a, b) {\n        const pa = this.reduce(a);\n        const pb = this.reduce(b);\n\n        if (pa.length != pb.length) return false;\n        for (let i=0; i<pb.length; i++) {\n            if (!this.F.eq(pa[i], pb[i])) return false;\n        }\n\n        return true;\n    }\n\n    ruffini(p, r) {\n        const res = new Array(p.length-1);\n        res[res.length-1] = p[p.length-1];\n        for (let i = res.length-2; i>=0; i--) {\n            res[i] = this.F.add(this.F.mul(res[i+1], r), p[i+1]);\n        }\n        return res;\n    }\n\n    _next2Power(v) {\n        v--;\n        v |= v >> 1;\n        v |= v >> 2;\n        v |= v >> 4;\n        v |= v >> 8;\n        v |= v >> 16;\n        v++;\n        return v;\n    }\n\n    toString(p) {\n        const ap = this.normalize(p);\n        let S = \"\";\n        for (let i=ap.length-1; i>=0; i--) {\n            if (!this.F.eq(p[i], this.F.zero)) {\n                if (S!=\"\") S += \" + \";\n                S = S + p[i].toString(10);\n                if (i>0) {\n                    S = S + \"x\";\n                    if (i>1) {\n                        S = S + \"^\" +i;\n                    }\n                }\n            }\n        }\n        return S;\n    }\n\n    normalize(p) {\n        const res  = new Array(p.length);\n        for (let i=0; i<p.length; i++) {\n            res[i] = this.F.normalize(p[i]);\n        }\n        return res;\n    }\n\n\n    _reciprocal(p, bits) {\n        const k = 1 << bits;\n        if (k==1) {\n            return [ this.F.inv(p[0]) ];\n        }\n        const np = this.scaleX(p, -k/2);\n        const q = this._reciprocal(np, bits-1);\n        const a = this.scaleX(this.double(q), 3*k/2-2);\n        const b = this.mul( this.square(q), p);\n\n        return this.scaleX(this.sub(a,b),   -(k-2));\n    }\n\n    // divides x^m / v\n    _div2(m, v) {\n        const kbits = log2(v.length-1)+1;\n        const k = 1 << kbits;\n\n        const scaleV = k - v.length;\n\n        // rec = x^(k - 2) / v* x^scaleV =>\n        // rec = x^(k-2-scaleV)/ v\n        //\n        // res = x^m/v = x^(m + (2*k-2 - scaleV) - (2*k-2 - scaleV)) /v =>\n        // res = rec * x^(m - (2*k-2 - scaleV)) =>\n        // res = rec * x^(m - 2*k + 2 + scaleV)\n\n        const rec = this._reciprocal(this.scaleX(v, scaleV), kbits);\n        const res = this.scaleX(rec, m - 2*k + 2 + scaleV);\n\n        return res;\n    }\n\n    div(_u, _v) {\n        if (_u.length < _v.length) return [];\n        const kbits = log2(_v.length-1)+1;\n        const k = 1 << kbits;\n\n        const u = this.scaleX(_u, k-_v.length);\n        const v = this.scaleX(_v, k-_v.length);\n\n        const n = v.length-1;\n        let m = u.length-1;\n\n        const s = this._reciprocal(v, kbits);\n        let t;\n        if (m>2*n) {\n            t = this.sub(this.scaleX([this.F.one], 2*n), this.mul(s, v));\n        }\n\n        let q = [];\n        let rem = u;\n        let us, ut;\n        let finish = false;\n\n        while (!finish) {\n            us = this.mul(rem, s);\n            q = this.add(q, this.scaleX(us, -2*n));\n\n            if ( m > 2*n ) {\n                ut = this.mul(rem, t);\n                rem = this.scaleX(ut, -2*n);\n                m = rem.length-1;\n            } else {\n                finish = true;\n            }\n        }\n\n        return q;\n    }\n\n\n    // returns the ith nth-root of one\n    oneRoot(n, i) {\n        let nbits = log2(n-1)+1;\n        let res = this.F.one;\n        let r = i;\n\n        if(i>=n) {\n            throw new Error(\"Given 'i' should be lower than 'n'\");\n        }\n        else if (1<<nbits !== n) {\n            throw new Error(`Internal errlr: ${n} should equal ${1<<nbits}`);\n        }\n\n        while (r>0) {\n            if (r & 1 == 1) {\n                res = this.F.mul(res, this.w[nbits]);\n            }\n            r = r >> 1;\n            nbits --;\n        }\n        return res;\n    }\n\n    computeVanishingPolinomial(bits, t) {\n        const m = 1 << bits;\n        return this.F.sub(this.F.pow(t, m), this.F.one);\n    }\n\n    evaluateLagrangePolynomials(bits, t) {\n        const m= 1 << bits;\n        const tm = this.F.pow(t, m);\n        const u= new Array(m).fill(this.F.zero);\n        this._setRoots(bits);\n        const omega = this.w[bits];\n\n        if (this.F.eq(tm, this.F.one)) {\n            for (let i = 0; i < m; i++) {\n                if (this.F.eq(this.roots[bits][0],t)) { // i.e., t equals omega^i\n                    u[i] = this.F.one;\n                    return u;\n                }\n            }\n        }\n\n        const z = this.F.sub(tm, this.F.one);\n        //        let l = this.F.mul(z,  this.F.pow(this.F.twoinv, m));\n        let l = this.F.mul(z,  this.F.inv(this.F.e(m)));\n        for (let i = 0; i < m; i++) {\n            u[i] = this.F.mul(l, this.F.inv(this.F.sub(t,this.roots[bits][i])));\n            l = this.F.mul(l, omega);\n        }\n\n        return u;\n    }\n\n    log2(V) {\n        return log2(V);\n    }\n}\n\nfunction log2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction __fft(PF, pall, bits, offset, step) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[offset] ];\n    } else if (n==2) {\n        return [\n            PF.F.add(pall[offset], pall[offset + step]),\n            PF.F.sub(pall[offset], pall[offset + step])];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft(PF, pall, bits-1, offset, step*2);\n    const p2 = __fft(PF, pall, bits-1, offset+step, step*2);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.F.add(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n        out[i+ndiv2] = PF.F.sub(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n    }\n\n    return out;\n}\n\n\nfunction __fft2(PF, pall, bits) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[0] ];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft2(PF, pall.slice(0, ndiv2), bits-1);\n    const p2 = __fft2(PF, pall.slice(ndiv2), bits-1);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.F.add(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n        out[i+ndiv2] = PF.F.sub(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n    }\n\n    return out;\n}\n\nconst _revTable = [];\nfor (let i=0; i<256; i++) {\n    _revTable[i] = _revSlow(i, 8);\n}\n\nfunction _revSlow(idx, bits) {\n    let res =0;\n    let a = idx;\n    for (let i=0; i<bits; i++) {\n        res <<= 1;\n        res = res | (a &1);\n        a >>=1;\n    }\n    return res;\n}\n\nfunction rev(idx, bits) {\n    return (\n        _revTable[idx >>> 24] |\n        (_revTable[(idx >>> 16) & 0xFF] << 8) |\n        (_revTable[(idx >>> 8) & 0xFF] << 16) |\n        (_revTable[idx & 0xFF] << 24)\n    ) >>> (32-bits);\n}\n\nfunction __bitReverse(p, bits) {\n    for (let k=0; k<p.length; k++) {\n        const r = rev(k, bits);\n        if (r>k) {\n            const tmp= p[k];\n            p[k] = p[r];\n            p[r] = tmp;\n        }\n    }\n\n}\n\n\n", "/* global BigInt */\nimport * as Scalar from \"./scalar.js\";\nimport * as futils from \"./futils.js\";\nimport buildSqrt from \"./fsqrt.js\";\nimport {getRandomBytes} from \"./random.js\";\nimport FFFT from \"./fft.js\";\n\nexport default class ZqField {\n    constructor(p) {\n        this.type=\"F1\";\n        this.one = BigInt(1);\n        this.zero = BigInt(0);\n        this.p = BigInt(p);\n        this.m = 1;\n        this.negone = this.p-this.one;\n        this.two = BigInt(2);\n        this.half = this.p >> this.one;\n        this.bitLength = Scalar.bitLength(this.p);\n        this.mask = (this.one << BigInt(this.bitLength)) - this.one;\n\n        this.n64 = Math.floor((this.bitLength - 1) / 64)+1;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n        this.R = this.e(this.one << BigInt(this.n64*64));\n        this.Ri = this.inv(this.R);\n\n        const e = this.negone >> this.one;\n        this.nqr = this.two;\n        let r = this.pow(this.nqr, e);\n        while (!this.eq(r, this.negone)) {\n            this.nqr = this.nqr + this.one;\n            r = this.pow(this.nqr, e);\n        }\n\n\n        this.s = 0;\n        this.t = this.negone;\n\n        while ((this.t & this.one) == this.zero) {\n            this.s = this.s + 1;\n            this.t = this.t >> this.one;\n        }\n\n        this.nqr_to_t = this.pow(this.nqr, this.t);\n\n        buildSqrt(this);\n\n        this.FFT = new FFFT(this, this, this.mul.bind(this));\n\n        this.fft = this.FFT.fft.bind(this.FFT);\n        this.ifft = this.FFT.ifft.bind(this.FFT);\n        this.w = this.FFT.w;\n        this.wi = this.FFT.wi; \n    \n        this.shift = this.square(this.nqr);\n        this.k = this.exp(this.nqr, 2**this.s);\n    }\n\n    e(a,b) {\n        let res;\n        if (!b) {\n            res = BigInt(a);\n        } else if (b==16) {\n            res = BigInt(\"0x\"+a);\n        }\n        if (res < 0) {\n            let nres = -res;\n            if (nres >= this.p) nres = nres % this.p;\n            return this.p - nres;\n        } else {\n            return (res>= this.p) ? res%this.p : res;\n        }\n\n    }\n\n    add(a, b) {\n        const res = a + b;\n        return res >= this.p ? res-this.p : res;\n    }\n\n    sub(a, b) {\n        return (a >= b) ? a-b : this.p-b+a;\n    }\n\n    neg(a) {\n        return a ? this.p-a : a;\n    }\n\n    mul(a, b) {\n        return (a*b)%this.p;\n    }\n\n    mulScalar(base, s) {\n        return (base * this.e(s)) % this.p;\n    }\n\n    square(a) {\n        return (a*a) % this.p;\n    }\n\n    eq(a, b) {\n        return a==b;\n    }\n\n    neq(a, b) {\n        return a!=b;\n    }\n\n    lt(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa < bb;\n    }\n\n    gt(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa > bb;\n    }\n\n    leq(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa <= bb;\n    }\n\n    geq(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa >= bb;\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    idiv(a, b) {\n        if (!b) throw new Error(\"Division by zero\");\n        return a / b;\n    }\n\n    inv(a) {\n        if (!a) throw new Error(\"Division by zero\");\n\n        let t = this.zero;\n        let r = this.p;\n        let newt = this.one;\n        let newr = a % this.p;\n        while (newr) {\n            let q = r/newr;\n            [t, newt] = [newt, t-q*newt];\n            [r, newr] = [newr, r-q*newr];\n        }\n        if (t<this.zero) t += this.p;\n        return t;\n    }\n\n    mod(a, b) {\n        return a % b;\n    }\n\n    pow(b, e) {\n        return futils.exp(this, b, e);\n    }\n\n    exp(b, e) {\n        return futils.exp(this, b, e);\n    }\n\n    band(a, b) {\n        const res =  ((a & b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bor(a, b) {\n        const res =  ((a | b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bxor(a, b) {\n        const res =  ((a ^ b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bnot(a) {\n        const res = a ^ this.mask;\n        return res >= this.p ? res-this.p : res;\n    }\n\n    shl(a, b) {\n        if (Number(b) < this.bitLength) {\n            const res = (a << b) & this.mask;\n            return res >= this.p ? res-this.p : res;\n        } else {\n            const nb = this.p - b;\n            if (Number(nb) < this.bitLength) {\n                return a >> nb;\n            } else {\n                return this.zero;\n            }\n        }\n    }\n\n    shr(a, b) {\n        if (Number(b) < this.bitLength) {\n            return a >> b;\n        } else {\n            const nb = this.p - b;\n            if (Number(nb) < this.bitLength) {\n                const res = (a << nb) & this.mask;\n                return res >= this.p ? res-this.p : res;\n            } else {\n                return 0;\n            }\n        }\n    }\n\n    land(a, b) {\n        return (a && b) ? this.one : this.zero;\n    }\n\n    lor(a, b) {\n        return (a || b) ? this.one : this.zero;\n    }\n\n    lnot(a) {\n        return (a) ? this.zero : this.one;\n    }\n\n    sqrt_old(n) {\n\n        if (n == this.zero) return this.zero;\n\n        // Test that have solution\n        const res = this.pow(n, this.negone >> this.one);\n        if ( res != this.one ) return null;\n\n        let m = this.s;\n        let c = this.nqr_to_t;\n        let t = this.pow(n, this.t);\n        let r = this.pow(n, this.add(this.t, this.one) >> this.one );\n\n        while ( t != this.one ) {\n            let sq = this.square(t);\n            let i = 1;\n            while (sq != this.one ) {\n                i++;\n                sq = this.square(sq);\n            }\n\n            // b = c ^ m-i-1\n            let b = c;\n            for (let j=0; j< m-i-1; j ++) b = this.square(b);\n\n            m = i;\n            c = this.square(b);\n            t = this.mul(t, c);\n            r = this.mul(r, b);\n        }\n\n        if (r > (this.p >> this.one)) {\n            r = this.neg(r);\n        }\n\n        return r;\n    }\n\n    normalize(a, b) {\n        a = BigInt(a,b);\n        if (a < 0) {\n            let na = -a;\n            if (na >= this.p) na = na % this.p;\n            return this.p - na;\n        } else {\n            return (a>= this.p) ? a%this.p : a;\n        }\n    }\n\n    random() {\n        const nBytes = (this.bitLength*2 / 8);\n        let res =this.zero;\n        for (let i=0; i<nBytes; i++) {\n            res = (res << BigInt(8)) + BigInt(getRandomBytes(1)[0]);\n        }\n        return res % this.p;\n    }\n\n    toString(a, base) {\n        base = base || 10;\n        let vs;\n        if ((a > this.half)&&(base == 10)) {\n            const v = this.p-a;\n            vs = \"-\"+v.toString(base);\n        } else {\n            vs = a.toString(base);\n        }\n        return vs;\n    }\n\n    isZero(a) {\n        return a == this.zero;\n    }\n\n    fromRng(rng) {\n        let v;\n        do {\n            v=this.zero;\n            for (let i=0; i<this.n64; i++) {\n                v += rng.nextU64() << BigInt(64 *i);\n            }\n            v &= this.mask;\n        } while (v >= this.p);\n        v = (v * this.Ri) % this.p;   // Convert from montgomery\n        return v;\n    }\n\n    fft(a) {\n        return this.FFT.fft(a);\n    }\n\n    ifft(a) {\n        return this.FFT.ifft(a);\n    }\n\n    // Returns a buffer with Little Endian Representation\n    toRprLE(buff, o, e) {\n        Scalar.toRprLE(buff, o, e, this.n64*8);\n    }\n\n    // Returns a buffer with Big Endian Representation\n    toRprBE(buff, o, e) {\n        Scalar.toRprBE(buff, o, e, this.n64*8);\n    }\n\n    // Returns a buffer with Big Endian Montgomery Representation\n    toRprBEM(buff, o, e) {\n        return this.toRprBE(buff, o, this.mul(this.R, e));\n    }\n\n    toRprLEM(buff, o, e) {\n        return this.toRprLE(buff, o, this.mul(this.R, e));\n    }\n\n\n    // Pases a buffer with Little Endian Representation\n    fromRprLE(buff, o) {\n        return Scalar.fromRprLE(buff, o, this.n8);\n    }\n\n    // Pases a buffer with Big Endian Representation\n    fromRprBE(buff, o) {\n        return Scalar.fromRprBE(buff, o, this.n8);\n    }\n\n    fromRprLEM(buff, o) {\n        return this.mul(this.fromRprLE(buff, o), this.Ri);\n    }\n\n    fromRprBEM(buff, o) {\n        return this.mul(this.fromRprBE(buff, o), this.Ri);\n    }\n\n    toObject(a) {\n        return a;\n    }\n}", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as Scalar from \"./scalar.js\";\n\n\nexport function mulScalar(F, base, e) {\n    let res;\n\n    if (Scalar.isZero(e)) return F.zero;\n\n    const n = Scalar.naf(e);\n\n    if (n[n.length-1] == 1) {\n        res = base;\n    } else if (n[n.length-1] == -1) {\n        res = F.neg(base);\n    } else {\n        throw new Error(\"invlaud NAF\");\n    }\n\n    for (let i=n.length-2; i>=0; i--) {\n\n        res = F.double(res);\n\n        if (n[i] == 1) {\n            res = F.add(res, base);\n        } else if (n[i] == -1) {\n            res = F.sub(res, base);\n        }\n    }\n\n    return res;\n}\n\n\n/*\nexports.mulScalar = (F, base, e) =>{\n    let res = F.zero;\n    let rem = bigInt(e);\n    let exp = base;\n\n    while (! rem.eq(bigInt.zero)) {\n        if (rem.and(bigInt.one).eq(bigInt.one)) {\n            res = F.add(res, exp);\n        }\n        exp = F.double(exp);\n        rem = rem.shiftRight(1);\n    }\n\n    return res;\n};\n*/\n\n\nexport function exp(F, base, e) {\n\n    if (Scalar.isZero(e)) return F.one;\n\n    const n = Scalar.bits(e);\n\n    if (n.length==0) return F.one;\n\n    let res = base;\n\n    for (let i=n.length-2; i>=0; i--) {\n\n        res = F.square(res);\n\n        if (n[i]) {\n            res = F.mul(res, base);\n        }\n    }\n\n    return res;\n}\n\n\n", "import * as Scalar from \"./scalar.js\";\n// Check here: https://eprint.iacr.org/2012/685.pdf\n\nexport default function buildSqrt (F) {\n    if ((F.m % 2) == 1) {\n        if (Scalar.eq(Scalar.mod(F.p, 4), 1 )) {\n            if (Scalar.eq(Scalar.mod(F.p, 8), 1 )) {\n                if (Scalar.eq(Scalar.mod(F.p, 16), 1 )) {\n                    // alg7_muller(F);\n                    alg5_tonelliShanks(F);\n                } else if (Scalar.eq(Scalar.mod(F.p, 16), 9 )) {\n                    alg4_kong(F);\n                } else {\n                    throw new Error(\"Field withot sqrt\");\n                }\n            } else if (Scalar.eq(Scalar.mod(F.p, 8), 5 )) {\n                alg3_atkin(F);\n            } else {\n                throw new Error(\"Field withot sqrt\");\n            }\n        } else if (Scalar.eq(Scalar.mod(F.p, 4), 3 )) {\n            alg2_shanks(F);\n        }\n    } else {\n        const pm2mod4 = Scalar.mod(Scalar.pow(F.p, F.m/2), 4);\n        if (pm2mod4 == 1) {\n            alg10_adj(F);\n        } else if (pm2mod4 == 3) {\n            alg9_adj(F);\n        } else {\n            alg8_complex(F);\n        }\n\n    }\n}\n\n\nfunction alg5_tonelliShanks(F) {\n    F.sqrt_q = Scalar.pow(F.p, F.m);\n\n    F.sqrt_s = 0;\n    F.sqrt_t = Scalar.sub(F.sqrt_q, 1);\n\n    while (!Scalar.isOdd(F.sqrt_t)) {\n        F.sqrt_s = F.sqrt_s + 1;\n        F.sqrt_t = Scalar.div(F.sqrt_t, 2);\n    }\n\n    let c0 = F.one;\n\n    while (F.eq(c0, F.one)) {\n        const c = F.random();\n        F.sqrt_z = F.pow(c, F.sqrt_t);\n        c0 = F.pow(F.sqrt_z, 2 ** (F.sqrt_s-1) );\n    }\n\n    F.sqrt_tm1d2 = Scalar.div(Scalar.sub(F.sqrt_t, 1),2);\n\n    F.sqrt = function(a) {\n        const F=this;\n        if (F.isZero(a)) return F.zero;\n        let w = F.pow(a, F.sqrt_tm1d2);\n        const a0 = F.pow( F.mul(F.square(w), a), 2 ** (F.sqrt_s-1) );\n        if (F.eq(a0, F.negone)) return null;\n\n        let v = F.sqrt_s;\n        let x = F.mul(a, w);\n        let b = F.mul(x, w);\n        let z = F.sqrt_z;\n        while (!F.eq(b, F.one)) {\n            let b2k = F.square(b);\n            let k=1;\n            while (!F.eq(b2k, F.one)) {\n                b2k = F.square(b2k);\n                k++;\n            }\n\n            w = z;\n            for (let i=0; i<v-k-1; i++) {\n                w = F.square(w);\n            }\n            z = F.square(w);\n            b = F.mul(b, z);\n            x = F.mul(x, w);\n            v = k;\n        }\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\nfunction alg4_kong(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 4 not implemented\");\n    };\n}\n\nfunction alg3_atkin(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 3 not implemented\");\n    };\n}\n\nfunction alg2_shanks(F) {\n\n    F.sqrt_q = Scalar.pow(F.p, F.m);\n    F.sqrt_e1 = Scalar.div( Scalar.sub(F.sqrt_q, 3) , 4);\n\n    F.sqrt = function(a) {\n        if (this.isZero(a)) return this.zero;\n\n        // Test that have solution\n        const a1 = this.pow(a, this.sqrt_e1);\n\n        const a0 = this.mul(this.square(a1), a);\n\n        if ( this.eq(a0, this.negone) ) return null;\n\n        const x = this.mul(a1, a);\n\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\nfunction alg10_adj(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 10 not implemented\");\n    };\n}\n\nfunction alg9_adj(F) {\n    F.sqrt_q = Scalar.pow(F.p, F.m/2);\n    F.sqrt_e34 = Scalar.div( Scalar.sub(F.sqrt_q, 3) , 4);\n    F.sqrt_e12 = Scalar.div( Scalar.sub(F.sqrt_q, 1) , 2);\n\n    F.frobenius = function(n, x) {\n        if ((n%2) == 1) {\n            return F.conjugate(x);\n        } else {\n            return x;\n        }\n    };\n\n    F.sqrt = function(a) {\n        const F = this;\n        const a1 = F.pow(a, F.sqrt_e34);\n        const alfa = F.mul(F.square(a1), a);\n        const a0 = F.mul(F.frobenius(1, alfa), alfa);\n        if (F.eq(a0, F.negone)) return null;\n        const x0 = F.mul(a1, a);\n        let x;\n        if (F.eq(alfa, F.negone)) {\n            x = F.mul(x0, [F.F.zero, F.F.one]);\n        } else {\n            const b = F.pow(F.add(F.one, alfa), F.sqrt_e12);\n            x = F.mul(b, x0);\n        }\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\n\nfunction alg8_complex(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 8 not implemented\");\n    };\n}\n", "import ChaCha from \"./chacha.js\";\nimport crypto from \"crypto\";\n\nexport function getRandomBytes(n) {\n    let array = new Uint8Array(n);\n    if (process.browser) { // Browser\n        if (typeof globalThis.crypto !== \"undefined\") { // Supported\n            globalThis.crypto.getRandomValues(array);\n        } else { // fallback\n            for (let i=0; i<n; i++) {\n                array[i] = (Math.random()*4294967296)>>>0;\n            }\n        }\n    }\n    else { // NodeJS\n        crypto.randomFillSync(array);\n    }\n    return array;\n}\n\nexport function getRandomSeed() {\n    const arr = getRandomBytes(32);\n    const arrV = new Uint32Array(arr.buffer);\n    const seed = [];\n    for (let i=0; i<8; i++) {\n        seed.push(arrV[i]);\n    }\n    return seed;\n}\n\nlet threadRng = null;\n\nexport function getThreadRng() {\n    if (threadRng) return threadRng;\n    threadRng = new ChaCha(getRandomSeed());\n    return threadRng;\n}\n", "\n\nimport * as Scalar from \"./scalar.js\";\n\n\nfunction quarterRound(st, a, b, c, d) {\n\n    st[a] = (st[a] + st[b]) >>> 0;\n    st[d] = (st[d] ^ st[a]) >>> 0;\n    st[d] = ((st[d] << 16) | ((st[d]>>>16) & 0xFFFF)) >>> 0;\n\n    st[c] = (st[c] + st[d]) >>> 0;\n    st[b] = (st[b] ^ st[c]) >>> 0;\n    st[b] = ((st[b] << 12) | ((st[b]>>>20) & 0xFFF)) >>> 0;\n\n    st[a] = (st[a] + st[b]) >>> 0;\n    st[d] = (st[d] ^ st[a]) >>> 0;\n    st[d] = ((st[d] << 8) | ((st[d]>>>24) & 0xFF)) >>> 0;\n\n    st[c] = (st[c] + st[d]) >>> 0;\n    st[b] = (st[b] ^ st[c]) >>> 0;\n    st[b] = ((st[b] << 7) | ((st[b]>>>25) & 0x7F)) >>> 0;\n}\n\nfunction doubleRound(st) {\n    quarterRound(st, 0, 4, 8,12);\n    quarterRound(st, 1, 5, 9,13);\n    quarterRound(st, 2, 6,10,14);\n    quarterRound(st, 3, 7,11,15);\n\n    quarterRound(st, 0, 5,10,15);\n    quarterRound(st, 1, 6,11,12);\n    quarterRound(st, 2, 7, 8,13);\n    quarterRound(st, 3, 4, 9,14);\n}\n\nexport default class ChaCha {\n\n    constructor(seed) {\n        seed = seed || [0,0,0,0,0,0,0,0];\n        this.state = [\n            0x61707865,\n            0x3320646E,\n            0x79622D32,\n            0x6B206574,\n            seed[0],\n            seed[1],\n            seed[2],\n            seed[3],\n            seed[4],\n            seed[5],\n            seed[6],\n            seed[7],\n            0,\n            0,\n            0,\n            0\n        ];\n        this.idx = 16;\n        this.buff = new Array(16);\n    }\n\n    nextU32() {\n        if (this.idx == 16) this.update();\n        return this.buff[this.idx++];\n    }\n\n    nextU64() {\n        return Scalar.add(Scalar.mul(this.nextU32(), 0x100000000), this.nextU32());\n    }\n\n    nextBool() {\n        return (this.nextU32() & 1) == 1;\n    }\n\n    update() {\n        // Copy the state\n        for (let i=0; i<16; i++) this.buff[i] = this.state[i];\n\n        // Apply the rounds\n        for (let i=0; i<10; i++) doubleRound(this.buff);\n\n        // Add to the initial\n        for (let i=0; i<16; i++) this.buff[i] = (this.buff[i] + this.state[i]) >>> 0;\n\n        this.idx = 0;\n\n        this.state[12] = (this.state[12] + 1) >>> 0;\n        if (this.state[12] != 0) return;\n        this.state[13] = (this.state[13] + 1) >>> 0;\n        if (this.state[13] != 0) return;\n        this.state[14] = (this.state[14] + 1) >>> 0;\n        if (this.state[14] != 0) return;\n        this.state[15] = (this.state[15] + 1) >>> 0;\n    }\n}\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nexport default class FFT {\n    constructor (G, F, opMulGF) {\n        this.F = F;\n        this.G = G;\n        this.opMulGF = opMulGF;\n\n        let rem = F.sqrt_t || F.t;\n        let s = F.sqrt_s || F.s;\n\n        let nqr = F.one;\n        while (F.eq(F.pow(nqr, F.half), F.one)) nqr = F.add(nqr, F.one);\n\n        this.w = new Array(s+1);\n        this.wi = new Array(s+1);\n        this.w[s] = this.F.pow(nqr, rem);\n        this.wi[s] = this.F.inv(this.w[s]);\n\n        let n=s-1;\n        while (n>=0) {\n            this.w[n] = this.F.square(this.w[n+1]);\n            this.wi[n] = this.F.square(this.wi[n+1]);\n            n--;\n        }\n\n\n        this.roots = [];\n        /*\n        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n        */\n        this._setRoots(Math.min(s, 15));\n    }\n\n    _setRoots(n) {\n        for (let i=n; (i>=0) && (!this.roots[i]); i--) {\n            let r = this.F.one;\n            const nroots = 1 << i;\n            const rootsi = new Array(nroots);\n            for (let j=0; j<nroots; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots[i] = rootsi;\n        }\n    }\n\n    fft(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        if (p.length != m) {\n            throw new Error(\"Size must be multiple of 2\");\n        }\n        const res = __fft(this, p, bits, 0, 1);\n        return res;\n    }\n\n    ifft(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        if (p.length != m) {\n            throw new Error(\"Size must be multiple of 2\");\n        }\n        const res =  __fft(this, p, bits, 0, 1);\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.opMulGF(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n    }\n\n\n}\n\nfunction log2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction __fft(PF, pall, bits, offset, step) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[offset] ];\n    } else if (n==2) {\n        return [\n            PF.G.add(pall[offset], pall[offset + step]),\n            PF.G.sub(pall[offset], pall[offset + step])];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft(PF, pall, bits-1, offset, step*2);\n    const p2 = __fft(PF, pall, bits-1, offset+step, step*2);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.G.add(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n        out[i+ndiv2] = PF.G.sub(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n    }\n\n    return out;\n}\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fUtils from \"./futils.js\";\nimport buildSqrt from \"./fsqrt.js\";\n\nexport default class F2Field {\n    constructor(F, nonResidue) {\n        this.type=\"F2\";\n        this.F = F;\n        this.zero = [this.F.zero, this.F.zero];\n        this.one = [this.F.one, this.F.zero];\n        this.negone = this.neg(this.one);\n        this.nonResidue = nonResidue;\n        this.m = F.m*2;\n        this.p = F.p;\n        this.n64 = F.n64*2;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n\n        buildSqrt(this);\n    }\n\n    _mulByNonResidue(a) {\n        return this.F.mul(this.nonResidue, a);\n    }\n\n    copy(a) {\n        return [this.F.copy(a[0]), this.F.copy(a[1])];\n    }\n\n    add(a, b) {\n        return [\n            this.F.add(a[0], b[0]),\n            this.F.add(a[1], b[1])\n        ];\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        return [\n            this.F.sub(a[0], b[0]),\n            this.F.sub(a[1], b[1])\n        ];\n    }\n\n    neg(a) {\n        return this.sub(this.zero, a);\n    }\n\n    conjugate(a) {\n        return [\n            a[0],\n            this.F.neg(a[1])\n        ];\n    }\n\n    mul(a, b) {\n        const aA = this.F.mul(a[0] , b[0]);\n        const bB = this.F.mul(a[1] , b[1]);\n\n        return [\n            this.F.add( aA , this._mulByNonResidue(bB)),\n            this.F.sub(\n                this.F.mul(\n                    this.F.add(a[0], a[1]),\n                    this.F.add(b[0], b[1])),\n                this.F.add(aA, bB))];\n    }\n\n    inv(a) {\n        const t0 = this.F.square(a[0]);\n        const t1 = this.F.square(a[1]);\n        const t2 = this.F.sub(t0, this._mulByNonResidue(t1));\n        const t3 = this.F.inv(t2);\n        return [\n            this.F.mul(a[0], t3),\n            this.F.neg(this.F.mul( a[1], t3)) ];\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    square(a) {\n        const ab = this.F.mul(a[0] , a[1]);\n\n        /*\n        [\n            (a + b) * (a + non_residue * b) - ab - non_residue * ab,\n            ab + ab\n        ];\n        */\n\n        return [\n            this.F.sub(\n                this.F.mul(\n                    this.F.add(a[0], a[1]) ,\n                    this.F.add(\n                        a[0] ,\n                        this._mulByNonResidue(a[1]))),\n                this.F.add(\n                    ab,\n                    this._mulByNonResidue(ab))),\n            this.F.add(ab, ab)\n        ];\n    }\n\n    isZero(a) {\n        return this.F.isZero(a[0]) && this.F.isZero(a[1]);\n    }\n\n    eq(a, b) {\n        return this.F.eq(a[0], b[0]) && this.F.eq(a[1], b[1]);\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    pow(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    exp(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    toString(a) {\n        return `[ ${this.F.toString(a[0])} , ${this.F.toString(a[1])} ]`;\n    }\n\n    fromRng(rng) {\n        const c0 = this.F.fromRng(rng);\n        const c1 = this.F.fromRng(rng);\n        return [c0, c1];\n    }\n\n    gt(a, b) {\n        if (this.F.gt(a[0], b[0])) return true;\n        if (this.F.gt(b[0], a[0])) return false;\n        if (this.F.gt(a[1], b[1])) return true;\n        return false;\n    }\n\n    geq(a, b) {\n        return this.gt(a, b) || this.eq(a, b);\n    }\n\n    lt(a, b) {\n        return !this.geq(a,b);\n    }\n\n    leq(a, b) {\n        return !this.gt(a,b);\n    }\n\n    neq(a, b) {\n        return !this.eq(a,b);\n    }\n\n    random() {\n        return [this.F.random(), this.F.random()];\n    }\n\n\n    toRprLE(buff, o, e) {\n        this.F.toRprLE(buff, o, e[0]);\n        this.F.toRprLE(buff, o+this.F.n8, e[1]);\n    }\n\n    toRprBE(buff, o, e) {\n        this.F.toRprBE(buff, o, e[1]);\n        this.F.toRprBE(buff, o+this.F.n8, e[0]);\n    }\n\n    toRprLEM(buff, o, e) {\n        this.F.toRprLEM(buff, o, e[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, e[1]);\n    }\n\n\n    toRprBEM(buff, o, e) {\n        this.F.toRprBEM(buff, o, e[1]);\n        this.F.toRprBEM(buff, o+this.F.n8, e[0]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLE(buff, o);\n        const c1 = this.F.fromRprLE(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const c1 = this.F.fromRprBE(buff, o);\n        const c0 = this.F.fromRprBE(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLEM(buff, o);\n        const c1 = this.F.fromRprLEM(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const c1 = this.F.fromRprBEM(buff, o);\n        const c0 = this.F.fromRprBEM(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    toObject(a) {\n        return a;\n    }\n\n}\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fUtils from \"./futils.js\";\n\nexport default class F3Field {\n    constructor(F, nonResidue) {\n        this.type=\"F3\";\n        this.F = F;\n        this.zero = [this.F.zero, this.F.zero, this.F.zero];\n        this.one = [this.F.one, this.F.zero, this.F.zero];\n        this.negone = this.neg(this.one);\n        this.nonResidue = nonResidue;\n        this.m = F.m*3;\n        this.p = F.p;\n        this.n64 = F.n64*3;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n    }\n\n    _mulByNonResidue(a) {\n        return this.F.mul(this.nonResidue, a);\n    }\n\n    copy(a) {\n        return [this.F.copy(a[0]), this.F.copy(a[1]), this.F.copy(a[2])];\n    }\n\n    add(a, b) {\n        return [\n            this.F.add(a[0], b[0]),\n            this.F.add(a[1], b[1]),\n            this.F.add(a[2], b[2])\n        ];\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        return [\n            this.F.sub(a[0], b[0]),\n            this.F.sub(a[1], b[1]),\n            this.F.sub(a[2], b[2])\n        ];\n    }\n\n    neg(a) {\n        return this.sub(this.zero, a);\n    }\n\n    mul(a, b) {\n\n        const aA = this.F.mul(a[0] , b[0]);\n        const bB = this.F.mul(a[1] , b[1]);\n        const cC = this.F.mul(a[2] , b[2]);\n\n        return [\n            this.F.add(\n                aA,\n                this._mulByNonResidue(\n                    this.F.sub(\n                        this.F.mul(\n                            this.F.add(a[1], a[2]),\n                            this.F.add(b[1], b[2])),\n                        this.F.add(bB, cC)))),    // aA + non_residue*((b+c)*(B+C)-bB-cC),\n\n            this.F.add(\n                this.F.sub(\n                    this.F.mul(\n                        this.F.add(a[0], a[1]),\n                        this.F.add(b[0], b[1])),\n                    this.F.add(aA, bB)),\n                this._mulByNonResidue( cC)),   // (a+b)*(A+B)-aA-bB+non_residue*cC\n\n            this.F.add(\n                this.F.sub(\n                    this.F.mul(\n                        this.F.add(a[0], a[2]),\n                        this.F.add(b[0], b[2])),\n                    this.F.add(aA, cC)),\n                bB)];                           // (a+c)*(A+C)-aA+bB-cC)\n    }\n\n    inv(a) {\n        const t0 = this.F.square(a[0]);             // t0 = a^2 ;\n        const t1 = this.F.square(a[1]);             // t1 = b^2 ;\n        const t2 = this.F.square(a[2]);             // t2 = c^2;\n        const t3 = this.F.mul(a[0],a[1]);           // t3 = ab\n        const t4 = this.F.mul(a[0],a[2]);           // t4 = ac\n        const t5 = this.F.mul(a[1],a[2]);           // t5 = bc;\n        // c0 = t0 - non_residue * t5;\n        const c0 = this.F.sub(t0, this._mulByNonResidue(t5));\n        // c1 = non_residue * t2 - t3;\n        const c1 = this.F.sub(this._mulByNonResidue(t2), t3);\n        const c2 = this.F.sub(t1, t4);              // c2 = t1-t4\n\n        // t6 = (a * c0 + non_residue * (c * c1 + b * c2)).inv();\n        const t6 =\n            this.F.inv(\n                this.F.add(\n                    this.F.mul(a[0], c0),\n                    this._mulByNonResidue(\n                        this.F.add(\n                            this.F.mul(a[2], c1),\n                            this.F.mul(a[1], c2)))));\n\n        return [\n            this.F.mul(t6, c0),         // t6*c0\n            this.F.mul(t6, c1),         // t6*c1\n            this.F.mul(t6, c2)];        // t6*c2\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    square(a) {\n        const s0 = this.F.square(a[0]);                   // s0 = a^2\n        const ab = this.F.mul(a[0], a[1]);                // ab = a*b\n        const s1 = this.F.add(ab, ab);                    // s1 = 2ab;\n        const s2 = this.F.square(\n            this.F.add(this.F.sub(a[0],a[1]), a[2]));     // s2 = (a - b + c)^2;\n        const bc = this.F.mul(a[1],a[2]);                 // bc = b*c\n        const s3 = this.F.add(bc, bc);                    // s3 = 2*bc\n        const s4 = this.F.square(a[2]);                   // s4 = c^2\n\n\n        return [\n            this.F.add(\n                s0,\n                this._mulByNonResidue(s3)),           // s0 + non_residue * s3,\n            this.F.add(\n                s1,\n                this._mulByNonResidue(s4)),           // s1 + non_residue * s4,\n            this.F.sub(\n                this.F.add( this.F.add(s1, s2) , s3 ),\n                this.F.add(s0, s4))];                      // s1 + s2 + s3 - s0 - s4\n    }\n\n    isZero(a) {\n        return this.F.isZero(a[0]) && this.F.isZero(a[1]) && this.F.isZero(a[2]);\n    }\n\n    eq(a, b) {\n        return this.F.eq(a[0], b[0]) && this.F.eq(a[1], b[1]) && this.F.eq(a[2], b[2]);\n    }\n\n    affine(a) {\n        return [this.F.affine(a[0]), this.F.affine(a[1]), this.F.affine(a[2])];\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    pow(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    exp(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    toString(a) {\n        return `[ ${this.F.toString(a[0])} , ${this.F.toString(a[1])}, ${this.F.toString(a[2])} ]`;\n    }\n\n    fromRng(rng) {\n        const c0 = this.F.fromRng(rng);\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        return [c0, c1, c2];\n    }\n\n    gt(a, b) {\n        if (this.F.gt(a[0], b[0])) return true;\n        if (this.F.gt(b[0], a[0])) return false;\n        if (this.F.gt(a[1], b[1])) return true;\n        if (this.F.gt(b[1], a[1])) return false;\n        if (this.F.gt(a[2], b[2])) return true;\n        return false;\n    }\n\n\n    geq(a, b) {\n        return this.gt(a, b) || this.eq(a, b);\n    }\n\n    lt(a, b) {\n        return !this.geq(a,b);\n    }\n\n    leq(a, b) {\n        return !this.gt(a,b);\n    }\n\n    neq(a, b) {\n        return !this.eq(a,b);\n    }\n\n    random() {\n        return [this.F.random(), this.F.random(), this.F.random()];\n    }\n\n\n    toRprLE(buff, o, e) {\n        this.F.toRprLE(buff, o, e[0]);\n        this.F.toRprLE(buff, o+this.F.n8, e[1]);\n        this.F.toRprLE(buff, o+this.F.n8*2, e[2]);\n    }\n\n    toRprBE(buff, o, e) {\n        this.F.toRprBE(buff, o, e[2]);\n        this.F.toRprBE(buff, o+this.F.n8, e[1]);\n        this.F.toRprBE(buff, o+this.F.n8*2, e[0]);\n    }\n\n    toRprLEM(buff, o, e) {\n        this.F.toRprLEM(buff, o, e[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, e[1]);\n        this.F.toRprLEM(buff, o+this.F.n8*2, e[2]);\n    }\n\n\n    toRprBEM(buff, o, e) {\n        this.F.toRprBEM(buff, o, e[2]);\n        this.F.toRprBEM(buff, o+this.F.n8, e[1]);\n        this.F.toRprBEM(buff, o+this.F.n8*2, e[0]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLE(buff, o);\n        const c1 = this.F.fromRprLE(buff, o+this.n8);\n        const c2 = this.F.fromRprLE(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const c2 = this.F.fromRprBE(buff, o);\n        const c1 = this.F.fromRprBE(buff, o+this.n8);\n        const c0 = this.F.fromRprBE(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLEM(buff, o);\n        const c1 = this.F.fromRprLEM(buff, o+this.n8);\n        const c2 = this.F.fromRprLEM(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const c2 = this.F.fromRprBEM(buff, o);\n        const c1 = this.F.fromRprBEM(buff, o+this.n8);\n        const c0 = this.F.fromRprBEM(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    toObject(a) {\n        return a;\n    }\n}\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\n\nimport * as fUtils from \"./futils.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nfunction isGreatest(F, a) {\n    if (Array.isArray(a)) {\n        for (let i=a.length-1; i>=0; i--) {\n            if (!F.F.isZero(a[i])) {\n                return isGreatest(F.F, a[i]);\n            }\n        }\n        return 0;\n    } else {\n        const na = F.neg(a);\n        return Scalar.gt(a, na);\n    }\n}\n\n\nexport default class EC {\n\n    constructor(F, g) {\n        this.F = F;\n        this.g = g;\n        if (this.g.length == 2) this.g[2] = this.F.one;\n        this.zero = [this.F.zero, this.F.one, this.F.zero];\n    }\n\n    add(p1, p2) {\n\n        const F = this.F;\n\n        if (this.eq(p1, this.zero)) return p2;\n        if (this.eq(p2, this.zero)) return p1;\n\n        const res = new Array(3);\n\n        const Z1Z1 = F.square( p1[2] );\n        const Z2Z2 = F.square( p2[2] );\n\n        const U1 = F.mul( p1[0] , Z2Z2 );     // U1 = X1  * Z2Z2\n        const U2 = F.mul( p2[0] , Z1Z1 );     // U2 = X2  * Z1Z1\n\n        const Z1_cubed = F.mul( p1[2] , Z1Z1);\n        const Z2_cubed = F.mul( p2[2] , Z2Z2);\n\n        const S1 = F.mul( p1[1] , Z2_cubed);  // S1 = Y1 * Z2 * Z2Z2\n        const S2 = F.mul( p2[1] , Z1_cubed);  // S2 = Y2 * Z1 * Z1Z1\n\n        if (F.eq(U1,U2) && F.eq(S1,S2)) {\n            return this.double(p1);\n        }\n\n        const H = F.sub( U2 , U1 );                    // H = U2-U1\n\n        const S2_minus_S1 = F.sub( S2 , S1 );\n\n        const I = F.square( F.add(H,H) );         // I = (2 * H)^2\n        const J = F.mul( H , I );                      // J = H * I\n\n        const r = F.add( S2_minus_S1 , S2_minus_S1 );  // r = 2 * (S2-S1)\n        const V = F.mul( U1 , I );                     // V = U1 * I\n\n        res[0] =\n            F.sub(\n                F.sub( F.square(r) , J ),\n                F.add( V , V ));                       // X3 = r^2 - J - 2 * V\n\n        const S1_J = F.mul( S1 , J );\n\n        res[1] =\n            F.sub(\n                F.mul( r , F.sub(V,res[0])),\n                F.add( S1_J,S1_J ));                   // Y3 = r * (V-X3)-2 S1 J\n\n        res[2] =\n            F.mul(\n                H,\n                F.sub(\n                    F.square( F.add(p1[2],p2[2]) ),\n                    F.add( Z1Z1 , Z2Z2 )));            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2) * H\n\n        return res;\n    }\n\n    neg(p) {\n        return [p[0], this.F.neg(p[1]), p[2]];\n    }\n\n    sub(a, b) {\n        return this.add(a, this.neg(b));\n    }\n\n    double(p) {\n        const F = this.F;\n\n        const res = new Array(3);\n\n        if (this.eq(p, this.zero)) return p;\n\n        const A = F.square( p[0] );                    // A = X1^2\n        const B = F.square( p[1] );                    // B = Y1^2\n        const C = F.square( B );                       // C = B^2\n\n        let D =\n            F.sub(\n                F.square( F.add(p[0] , B )),\n                F.add( A , C));\n        D = F.add(D,D);                    // D = 2 * ((X1 + B)^2 - A - C)\n\n        const E = F.add( F.add(A,A), A);          // E = 3 * A\n        const FF =F.square( E );                       // F = E^2\n\n        res[0] = F.sub( FF , F.add(D,D) );         // X3 = F - 2 D\n\n        let eightC = F.add( C , C );\n        eightC = F.add( eightC , eightC );\n        eightC = F.add( eightC , eightC );\n\n        res[1] =\n            F.sub(\n                F.mul(\n                    E,\n                    F.sub( D, res[0] )),\n                eightC);                                    // Y3 = E * (D - X3) - 8 * C\n\n        const Y1Z1 = F.mul( p[1] , p[2] );\n        res[2] = F.add( Y1Z1 , Y1Z1 );                 // Z3 = 2 * Y1 * Z1\n\n        return res;\n    }\n\n    timesScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    affine(p) {\n        const F = this.F;\n        if (this.isZero(p)) {\n            return this.zero;\n        } else if (F.eq(p[2], F.one)) {\n            return p;\n        } else {\n            const Z_inv = F.inv(p[2]);\n            const Z2_inv = F.square(Z_inv);\n            const Z3_inv = F.mul(Z2_inv, Z_inv);\n\n            const res = new Array(3);\n            res[0] = F.mul(p[0],Z2_inv);\n            res[1] = F.mul(p[1],Z3_inv);\n            res[2] = F.one;\n\n            return res;\n        }\n    }\n\n    multiAffine(arr) {\n        const keys = Object.keys(arr);\n        const F = this.F;\n        const accMul = new Array(keys.length+1);\n        accMul[0] = F.one;\n        for (let i = 0; i< keys.length; i++) {\n            if (F.eq(arr[keys[i]][2], F.zero)) {\n                accMul[i+1] = accMul[i];\n            } else {\n                accMul[i+1] = F.mul(accMul[i], arr[keys[i]][2]);\n            }\n        }\n\n        accMul[keys.length] = F.inv(accMul[keys.length]);\n\n        for (let i = keys.length-1; i>=0; i--) {\n            if (F.eq(arr[keys[i]][2], F.zero)) {\n                accMul[i] = accMul[i+1];\n                arr[keys[i]] = this.zero;\n            } else {\n                const Z_inv = F.mul(accMul[i], accMul[i+1]);\n                accMul[i] = F.mul(arr[keys[i]][2], accMul[i+1]);\n\n                const Z2_inv = F.square(Z_inv);\n                const Z3_inv = F.mul(Z2_inv, Z_inv);\n\n                arr[keys[i]][0] = F.mul(arr[keys[i]][0],Z2_inv);\n                arr[keys[i]][1] = F.mul(arr[keys[i]][1],Z3_inv);\n                arr[keys[i]][2] = F.one;\n            }\n        }\n\n    }\n\n    eq(p1, p2) {\n        const F = this.F;\n\n        if (this.F.eq(p1[2], this.F.zero)) return this.F.eq(p2[2], this.F.zero);\n        if (this.F.eq(p2[2], this.F.zero)) return false;\n\n        const Z1Z1 = F.square( p1[2] );\n        const Z2Z2 = F.square( p2[2] );\n\n        const U1 = F.mul( p1[0] , Z2Z2 );\n        const U2 = F.mul( p2[0] , Z1Z1 );\n\n        const Z1_cubed = F.mul( p1[2] , Z1Z1);\n        const Z2_cubed = F.mul( p2[2] , Z2Z2);\n\n        const S1 = F.mul( p1[1] , Z2_cubed);\n        const S2 = F.mul( p2[1] , Z1_cubed);\n\n        return (F.eq(U1,U2) && F.eq(S1,S2));\n    }\n\n    isZero(p) {\n        return this.F.isZero(p[2]);\n    }\n\n    toString(p) {\n        const cp = this.affine(p);\n        return `[ ${this.F.toString(cp[0])} , ${this.F.toString(cp[1])} ]`;\n    }\n\n    fromRng(rng) {\n        const F = this.F;\n        let P = [];\n        let greatest;\n        do {\n            P[0] = F.fromRng(rng);\n            greatest = rng.nextBool();\n            const x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n            P[1] = F.sqrt(x3b);\n        } while ((P[1] == null)||(F.isZero[P]));\n\n        const s = isGreatest(F, P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n        P[2] = F.one;\n\n        if (this.cofactor) {\n            P = this.mulScalar(P, this.cofactor);\n        }\n\n        P = this.affine(P);\n\n        return P;\n\n    }\n\n    toRprLE(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLE(buff, o, p[0]);\n        this.F.toRprLE(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprBE(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprBE(buff, o, p[0]);\n        this.F.toRprBE(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprLEM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLEM(buff, o, p[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprLEJM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLEM(buff, o, p[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, p[1]);\n        this.F.toRprLEM(buff, o+2*this.F.n8, p[2]);\n    }\n\n\n    toRprBEM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprBEM(buff, o, p[0]);\n        this.F.toRprBEM(buff, o+this.F.n8, p[1]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLE(buff, o);\n        const y = this.F.fromRprLE(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprBE(buff, o);\n        const y = this.F.fromRprBE(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLEM(buff, o);\n        const y = this.F.fromRprLEM(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprLEJM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLEM(buff, o);\n        const y = this.F.fromRprLEM(buff, o+this.F.n8);\n        const z = this.F.fromRprLEM(buff, o+this.F.n8*2);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, z];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprBEM(buff, o);\n        const y = this.F.fromRprBEM(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprCompressed(buff, o) {\n        const F = this.F;\n        const v = new Uint8Array(buff.buffer, o, F.n8);\n        if (v[0] & 0x40) return this.zero;\n        const P = new Array(3);\n\n        const greatest = ((v[0] & 0x80) != 0);\n        v[0] = v[0] & 0x7F;\n        P[0] = F.fromRprBE(buff, o);\n        if (greatest) v[0] = v[0] | 0x80;  // set back again the old value\n\n        const x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n        P[1] = F.sqrt(x3b);\n\n        if (P[1] === null) {\n            throw new Error(\"Invalid Point!\");\n        }\n\n        const s = isGreatest(F, P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n        P[2] = F.one;\n\n        return P;\n    }\n\n    toRprCompressed(buff, o, p) {\n        p = this.affine(p);\n        const v = new Uint8Array(buff.buffer, o, this.F.n8);\n        if (this.isZero(p)) {\n            v.fill(0);\n            v[0] = 0x40;\n            return;\n        }\n        this.F.toRprBE(buff, o, p[0]);\n\n        if (isGreatest(this.F, p[1])) {\n            v[0] = v[0] | 0x80;\n        }\n    }\n\n\n    fromRprUncompressed(buff, o) {\n        if (buff[0] & 0x40) return this.zero;\n\n        return this.fromRprBE(buff, o);\n    }\n\n    toRprUncompressed(buff, o, p) {\n        this.toRprBE(buff, o, p);\n\n        if (this.isZero(p)) {\n            buff[o] = buff[o] | 0x40;\n        }\n    }\n\n\n}\n\n\n", "import { buildBn128 as buildBn128wasm } from \"wasmcurves\";\nimport buildEngine from \"./engine.js\";\nimport * as Scalar from \"./scalar.js\";\nimport { ModuleBuilder } from \"wasmbuilder\";\n\nglobalThis.curve_bn128 = null;\n\nexport default async function buildBn128(singleThread, plugins) {\n\n    const moduleBuilder = new ModuleBuilder();\n    moduleBuilder.setMemory(25);\n    buildBn128wasm(moduleBuilder);\n\n    if (plugins) plugins(moduleBuilder);\n\n    const bn128wasm = {};\n\n    bn128wasm.code = moduleBuilder.build();\n    bn128wasm.pq = moduleBuilder.modules.f1m.pq;\n    bn128wasm.pr = moduleBuilder.modules.frm.pq;\n    bn128wasm.pG1gen = moduleBuilder.modules.bn128.pG1gen;\n    bn128wasm.pG1zero = moduleBuilder.modules.bn128.pG1zero;\n    bn128wasm.pG1b = moduleBuilder.modules.bn128.pG1b;\n    bn128wasm.pG2gen = moduleBuilder.modules.bn128.pG2gen;\n    bn128wasm.pG2zero = moduleBuilder.modules.bn128.pG2zero;\n    bn128wasm.pG2b = moduleBuilder.modules.bn128.pG2b;\n    bn128wasm.pOneT = moduleBuilder.modules.bn128.pOneT;\n    bn128wasm.prePSize = moduleBuilder.modules.bn128.prePSize;\n    bn128wasm.preQSize = moduleBuilder.modules.bn128.preQSize;\n    bn128wasm.n8q = 32;\n    bn128wasm.n8r = 32;\n    bn128wasm.q = moduleBuilder.modules.bn128.q;\n    bn128wasm.r = moduleBuilder.modules.bn128.r;\n\n    if ((!singleThread) && (globalThis.curve_bn128)) return globalThis.curve_bn128;\n    const params = {\n        name: \"bn128\",\n        wasm: bn128wasm,\n        q: Scalar.e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\"),\n        r: Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\"),\n        n8q: 32,\n        n8r: 32,\n        cofactorG2: Scalar.e(\"30644e72e131a029b85045b68181585e06ceecda572a2489345f2299c0f9fa8d\", 16),\n        singleThread: singleThread ? true : false\n    };\n\n    const curve = await buildEngine(params);\n    curve.terminate = async function () {\n        if (!params.singleThread) {\n            globalThis.curve_bn128 = null;\n            await this.tm.terminate();\n        }\n    };\n\n    if (!singleThread) {\n        globalThis.curve_bn128 = curve;\n    }\n\n    return curve;\n}\n\n", "import WasmField1 from \"./wasm_field1.js\";\nimport WasmField2 from \"./wasm_field2.js\";\nimport WasmField3 from \"./wasm_field3.js\";\nimport WasmCurve from \"./wasm_curve.js\";\nimport buildThreadManager from \"./threadman.js\";\nimport * as Scalar from \"./scalar.js\";\nimport buildBatchApplyKey from \"./engine_applykey.js\";\nimport buildPairing from \"./engine_pairing.js\";\nimport buildMultiExp from \"./engine_multiexp.js\";\nimport buildFFT from \"./engine_fft.js\";\n\nexport default async function buildEngine(params) {\n\n    const tm = await buildThreadManager(params.wasm, params.singleThread);\n\n\n    const curve = {};\n\n    curve.q = Scalar.e(params.wasm.q.toString());\n    curve.r = Scalar.e(params.wasm.r.toString());\n    curve.name = params.name;\n    curve.tm = tm;\n    curve.prePSize = params.wasm.prePSize;\n    curve.preQSize = params.wasm.preQSize;\n    curve.Fr = new WasmField1(tm, \"frm\", params.n8r, params.r);\n    curve.F1 = new WasmField1(tm, \"f1m\", params.n8q, params.q);\n    curve.F2 = new WasmField2(tm, \"f2m\", curve.F1);\n    curve.G1 = new WasmCurve(tm, \"g1m\", curve.F1, params.wasm.pG1gen, params.wasm.pG1b, params.cofactorG1);\n    curve.G2 = new WasmCurve(tm, \"g2m\", curve.F2, params.wasm.pG2gen, params.wasm.pG2b, params.cofactorG2);\n    curve.F6 = new WasmField3(tm, \"f6m\", curve.F2);\n    curve.F12 = new WasmField2(tm, \"ftm\", curve.F6);\n\n    curve.Gt = curve.F12;\n\n    buildBatchApplyKey(curve, \"G1\");\n    buildBatchApplyKey(curve, \"G2\");\n    buildBatchApplyKey(curve, \"Fr\");\n\n    buildMultiExp(curve, \"G1\");\n    buildMultiExp(curve, \"G2\");\n\n    buildFFT(curve, \"G1\");\n    buildFFT(curve, \"G2\");\n    buildFFT(curve, \"Fr\");\n\n    buildPairing(curve);\n\n    curve.array2buffer = function(arr, sG) {\n        const buff = new Uint8Array(sG*arr.length);\n\n        for (let i=0; i<arr.length; i++) {\n            buff.set(arr[i], i*sG);\n        }\n\n        return buff;\n    };\n\n    curve.buffer2array = function(buff , sG) {\n        const n= buff.byteLength / sG;\n        const arr = new Array(n);\n        for (let i=0; i<n; i++) {\n            arr[i] = buff.slice(i*sG, i*sG+sG);\n        }\n        return arr;\n    };\n\n    return curve;\n}\n\n\n", "import * as Scalar from \"./scalar.js\";\nimport * as utils from \"./utils.js\";\nimport { getThreadRng } from \"./random.js\";\nimport buildBatchConvert from \"./engine_batchconvert.js\";\nimport BigBuffer from \"./bigbuffer.js\";\n\n\nexport default class WasmField1 {\n\n    constructor(tm, prefix, n8, p) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.p = p;\n        this.n8 = n8;\n        this.type = \"F1\";\n        this.m = 1;\n\n        this.half = Scalar.shiftRight(p, Scalar.one);\n        this.bitLength = Scalar.bitLength(p);\n        this.mask = Scalar.sub(Scalar.shiftLeft(Scalar.one, this.bitLength), Scalar.one);\n\n        this.pOp1 = tm.alloc(n8);\n        this.pOp2 = tm.alloc(n8);\n        this.pOp3 = tm.alloc(n8);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = this.tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = this.tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n        this.n64 = Math.floor(n8/8);\n        this.n32 = Math.floor(n8/4);\n\n        if(this.n64*8 != this.n8) {\n            throw new Error(\"n8 must be a multiple of 8\");\n        }\n\n        this.half = Scalar.shiftRight(this.p, Scalar.one);\n        this.nqr = this.two;\n        let r = this.exp(this.nqr, this.half);\n        while (!this.eq(r, this.negone)) {\n            this.nqr = this.add(this.nqr, this.one);\n            r = this.exp(this.nqr, this.half);\n        }\n\n        this.shift = this.mul(this.nqr, this.nqr);\n        this.shiftInv = this.inv(this.shift);\n\n        this.s = 0;\n        let t = Scalar.sub(this.p, Scalar.one);\n\n        while ( !Scalar.isOdd(t) ) {\n            this.s = this.s + 1;\n            t = Scalar.shiftRight(t, Scalar.one);\n        }\n\n        this.w = [];\n        this.w[this.s] = this.exp(this.nqr, t);\n\n        for (let i= this.s-1; i>=0; i--) {\n            this.w[i] = this.square(this.w[i+1]);\n        }\n\n        if (!this.eq(this.w[0], this.one)) {\n            throw new Error(\"Error calculating roots of unity\");\n        }\n\n        this.batchToMontgomery = buildBatchConvert(tm, prefix + \"_batchToMontgomery\", this.n8, this.n8);\n        this.batchFromMontgomery = buildBatchConvert(tm, prefix + \"_batchFromMontgomery\", this.n8, this.n8);\n    }\n\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        let ra = Scalar.e(a, b);\n        if (Scalar.isNegative(ra)) {\n            ra = Scalar.neg(ra);\n            if (Scalar.gt(ra, this.p)) {\n                ra = Scalar.mod(ra, this.p);\n            }\n            ra = Scalar.sub(this.p, ra);\n        } else {\n            if (Scalar.gt(ra, this.p)) {\n                ra = Scalar.mod(ra, this.p);\n            }\n        }\n        const buff = utils.leInt2Buff(ra, this.n8);\n        return this.toMontgomery(buff);\n    }\n\n    toString(a, radix) {\n        const an = this.fromMontgomery(a);\n        const s = Scalar.fromRprLE(an, 0);\n        return Scalar.toString(s, radix);\n    }\n\n    fromRng(rng) {\n        let v;\n        const buff = new Uint8Array(this.n8);\n        do {\n            v = Scalar.zero;\n            for (let i=0; i<this.n64; i++) {\n                v = Scalar.add(v,  Scalar.shiftLeft(rng.nextU64(), 64*i));\n            }\n            v = Scalar.band(v, this.mask);\n        } while (Scalar.geq(v, this.p));\n        Scalar.toRprLE(buff, 0, v, this.n8);\n        return buff;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const an = this.fromMontgomery(a);\n        return Scalar.fromRprLE(an, 0);\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.n8);\n        Scalar.toRprLE(buff, 0, a, this.n8);\n        return this.toMontgomery(buff);\n    }\n\n    toRprLE(buff, offset, a) {\n        buff.set(this.fromMontgomery(a), offset);\n    }\n\n    toRprBE(buff, offset, a) {\n        const buff2 = this.fromMontgomery(a);\n        for (let i=0; i<this.n8/2; i++) {\n            const aux = buff2[i];\n            buff2[i] = buff2[this.n8-1-i];\n            buff2[this.n8-1-i] = aux;\n        }\n        buff.set(buff2, offset);\n    }\n\n    fromRprLE(buff, offset) {\n        offset = offset || 0;\n        const res = buff.slice(offset, offset + this.n8);\n        return this.toMontgomery(res);\n    }\n\n    async batchInverse(buffIn) {\n        let returnArray = false;\n        const sIn = this.n8;\n        const sOut = this.n8;\n\n        if (Array.isArray(buffIn)) {\n            buffIn = utils.array2buffer(buffIn, sIn );\n            returnArray = true;\n        } else {\n            buffIn = buffIn.slice(0, buffIn.byteLength);\n        }\n\n        const nPoints = Math.floor(buffIn.byteLength / sIn);\n        if ( nPoints * sIn !== buffIn.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const pointsPerChunk = Math.floor(nPoints/this.tm.concurrency);\n        const opPromises = [];\n        for (let i=0; i<this.tm.concurrency; i++) {\n            let n;\n            if (i< this.tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff:buffChunk},\n                {cmd: \"ALLOC\", var: 1, len:sOut * n},\n                {cmd: \"CALL\", fnName: this.prefix + \"_batchInverse\", params: [\n                    {var: 0},\n                    {val: sIn},\n                    {val: n},\n                    {var: 1},\n                    {val: sOut},\n                ]},\n                {cmd: \"GET\", out: 0, var: 1, len:sOut * n},\n            ];\n            opPromises.push(\n                this.tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buffIn instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        if (returnArray) {\n            return utils.buffer2array(fullBuffOut, sOut);\n        } else {\n            return fullBuffOut;\n        }\n\n    }\n\n}\n\n\n", "/* global BigInt */\nimport * as Scalar from \"./scalar.js\";\n\nexport function stringifyBigInts(o) {\n    if (typeof o == \"bigint\" || o.eq !== undefined) {\n        return o.toString(10);\n    } else if (o instanceof Uint8Array) {\n        return Scalar.fromRprLE(o, 0);\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyBigInts);\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = stringifyBigInts(o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function unstringifyBigInts(o) {\n    if (typeof o == \"string\" && /^[0-9]+$/.test(o)) {\n        return BigInt(o);\n    } else if (typeof o == \"string\" && /^0x[0-9a-fA-F]+$/.test(o)) {\n        return BigInt(o);\n    } else if (Array.isArray(o)) {\n        return o.map(unstringifyBigInts);\n    } else if (typeof o == \"object\") {\n        if (o === null) return null;\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = unstringifyBigInts(o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function beBuff2int(buff) {\n    let res = BigInt(0);\n    let i = buff.length;\n    let offset = 0;\n    const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n    while (i > 0) {\n        if (i >= 4) {\n            i -= 4;\n            res += BigInt(buffV.getUint32(i)) << BigInt(offset * 8);\n            offset += 4;\n        } else if (i >= 2) {\n            i -= 2;\n            res += BigInt(buffV.getUint16(i)) << BigInt(offset * 8);\n            offset += 2;\n        } else {\n            i -= 1;\n            res += BigInt(buffV.getUint8(i)) << BigInt(offset * 8);\n            offset += 1;\n        }\n    }\n    return res;\n}\n\nexport function beInt2Buff(n, len) {\n    let r = n;\n    const buff = new Uint8Array(len);\n    const buffV = new DataView(buff.buffer);\n    let o = len;\n    while (o > 0) {\n        if (o - 4 >= 0) {\n            o -= 4;\n            buffV.setUint32(o, Number(r & BigInt(0xffffffff)));\n            r = r >> BigInt(32);\n        } else if (o - 2 >= 0) {\n            o -= 2;\n            buffV.setUint16(o, Number(r & BigInt(0xffff)));\n            r = r >> BigInt(16);\n        } else {\n            o -= 1;\n            buffV.setUint8(o, Number(r & BigInt(0xff)));\n            r = r >> BigInt(8);\n        }\n    }\n    if (r) {\n        throw new Error(\"Number does not fit in this length\");\n    }\n    return buff;\n}\n\nexport function leBuff2int(buff) {\n    let res = BigInt(0);\n    let i = 0;\n    const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n    while (i < buff.length) {\n        if (i + 4 <= buff.length) {\n            res += BigInt(buffV.getUint32(i, true)) << BigInt(i * 8);\n            i += 4;\n        } else if (i + 4 <= buff.length) {\n            res += BigInt(buffV.getUint16(i, true)) << BigInt(i * 8);\n            i += 2;\n        } else {\n            res += BigInt(buffV.getUint8(i, true)) << BigInt(i * 8);\n            i += 1;\n        }\n    }\n    return res;\n}\n\nexport function leInt2Buff(n, len) {\n    let r = n;\n    if (typeof len === \"undefined\") {\n        len = Math.floor((Scalar.bitLength(n) - 1) / 8) + 1;\n        if (len == 0) len = 1;\n    }\n    const buff = new Uint8Array(len);\n    const buffV = new DataView(buff.buffer);\n    let o = 0;\n    while (o < len) {\n        if (o + 4 <= len) {\n            buffV.setUint32(o, Number(r & BigInt(0xffffffff)), true);\n            o += 4;\n            r = r >> BigInt(32);\n        } else if (o + 2 <= len) {\n            buffV.setUint16(Number(o, r & BigInt(0xffff)), true);\n            o += 2;\n            r = r >> BigInt(16);\n        } else {\n            buffV.setUint8(Number(o, r & BigInt(0xff)), true);\n            o += 1;\n            r = r >> BigInt(8);\n        }\n    }\n    if (r) {\n        throw new Error(\"Number does not fit in this length\");\n    }\n    return buff;\n}\n\nexport function stringifyFElements(F, o) {\n    if (typeof o == \"bigint\" || o.eq !== undefined) {\n        return o.toString(10);\n    } else if (o instanceof Uint8Array) {\n        return F.toString(F.e(o));\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyFElements.bind(this, F));\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = stringifyFElements(F, o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function unstringifyFElements(F, o) {\n    if (typeof o == \"string\" && /^[0-9]+$/.test(o)) {\n        return F.e(o);\n    } else if (typeof o == \"string\" && /^0x[0-9a-fA-F]+$/.test(o)) {\n        return F.e(o);\n    } else if (Array.isArray(o)) {\n        return o.map(unstringifyFElements.bind(this, F));\n    } else if (typeof o == \"object\") {\n        if (o === null) return null;\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = unstringifyFElements(F, o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nconst _revTable = [];\nfor (let i = 0; i < 256; i++) {\n    _revTable[i] = _revSlow(i, 8);\n}\n\nfunction _revSlow(idx, bits) {\n    let res = 0;\n    let a = idx;\n    for (let i = 0; i < bits; i++) {\n        res <<= 1;\n        res = res | (a & 1);\n        a >>= 1;\n    }\n    return res;\n}\n\nexport function bitReverse(idx, bits) {\n    return (\n        (_revTable[idx >>> 24] |\n        (_revTable[(idx >>> 16) & 0xff] << 8) |\n        (_revTable[(idx >>> 8) & 0xff] << 16) |\n        (_revTable[idx & 0xff] << 24)) >>>\n        (32 - bits)\n    );\n}\n\nexport function log2(V) {\n    return (\n        ((V & 0xffff0000) !== 0 ? ((V &= 0xffff0000), 16) : 0) |\n        ((V & 0xff00ff00) !== 0 ? ((V &= 0xff00ff00), 8) : 0) |\n        ((V & 0xf0f0f0f0) !== 0 ? ((V &= 0xf0f0f0f0), 4) : 0) |\n        ((V & 0xcccccccc) !== 0 ? ((V &= 0xcccccccc), 2) : 0) |\n        ((V & 0xaaaaaaaa) !== 0)\n    );\n}\n\nexport function buffReverseBits(buff, eSize) {\n    const n = buff.byteLength / eSize;\n    const bits = log2(n);\n    if (n != 1 << bits) {\n        throw new Error(\"Invalid number of pointers\");\n    }\n    for (let i = 0; i < n; i++) {\n        const r = bitReverse(i, bits);\n        if (i > r) {\n            const tmp = buff.slice(i * eSize, (i + 1) * eSize);\n            buff.set(buff.slice(r * eSize, (r + 1) * eSize), i * eSize);\n            buff.set(tmp, r * eSize);\n        }\n    }\n}\n\nexport function array2buffer(arr, sG) {\n    const buff = new Uint8Array(sG * arr.length);\n\n    for (let i = 0; i < arr.length; i++) {\n        buff.set(arr[i], i * sG);\n    }\n\n    return buff;\n}\n\nexport function buffer2array(buff, sG) {\n    const n = buff.byteLength / sG;\n    const arr = new Array(n);\n    for (let i = 0; i < n; i++) {\n        arr[i] = buff.slice(i * sG, i * sG + sG);\n    }\n    return arr;\n}\n", "import BigBuffer from \"./bigbuffer.js\";\n\nexport default function buildBatchConvert(tm, fnName, sIn, sOut) {\n    return async function batchConvert(buffIn) {\n        const nPoints = Math.floor(buffIn.byteLength / sIn);\n        if ( nPoints * sIn !== buffIn.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const pointsPerChunk = Math.floor(nPoints/tm.concurrency);\n        const opPromises = [];\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff:buffChunk},\n                {cmd: \"ALLOC\", var: 1, len:sOut * n},\n                {cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {val: n},\n                    {var: 1}\n                ]},\n                {cmd: \"GET\", out: 0, var: 1, len:sOut * n},\n            ];\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buffIn instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n}\n", "\nconst PAGE_SIZE = 1<<30;\n\nexport default class BigBuffer {\n\n    constructor(size) {\n        this.buffers = [];\n        this.byteLength = size;\n        for (let i=0; i<size; i+= PAGE_SIZE) {\n            const n = Math.min(size-i, PAGE_SIZE);\n            this.buffers.push(new Uint8Array(n));\n        }\n\n    }\n\n    slice(fr, to) {\n        if ( to === undefined ) to = this.byteLength;\n        if ( fr === undefined ) fr = 0;\n        const len = to-fr;\n\n        const firstPage = Math.floor(fr / PAGE_SIZE);\n        const lastPage = Math.floor((fr+len-1) / PAGE_SIZE);\n\n        if ((firstPage == lastPage)||(len==0))\n            return this.buffers[firstPage].slice(fr%PAGE_SIZE, fr%PAGE_SIZE + len);\n\n        let buff;\n\n        let p = firstPage;\n        let o = fr % PAGE_SIZE;\n        // Remaining bytes to read\n        let r = len;\n        while (r>0) {\n            // bytes to copy from this page\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset+o, l);\n            if (l == len) return srcView.slice();\n            if (!buff) {\n                if (len <= PAGE_SIZE) {\n                    buff = new Uint8Array(len);\n                } else {\n                    buff = new BigBuffer(len);\n                }\n            }\n            buff.set(srcView, len-r);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n        return buff;\n    }\n\n    set(buff, offset) {\n        if (offset === undefined) offset = 0;\n\n        const len = buff.byteLength;\n\n        if (len==0) return;\n\n        const firstPage = Math.floor(offset / PAGE_SIZE);\n        const lastPage = Math.floor((offset+len-1) / PAGE_SIZE);\n\n        if (firstPage == lastPage) {\n            if ((buff instanceof BigBuffer)&&(buff.buffers.length==1)) {\n                return this.buffers[firstPage].set(buff.buffers[0], offset % PAGE_SIZE);\n            } else {\n                return this.buffers[firstPage].set(buff, offset % PAGE_SIZE);\n            }\n\n        }\n\n\n        let p = firstPage;\n        let o = offset % PAGE_SIZE;\n        let r = len;\n        while (r>0) {\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = buff.slice( len -r, len -r+l);\n            const dstView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset + o, l);\n            dstView.set(srcView);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n    }\n}\n", "import { getThreadRng } from \"./random.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nexport default class WasmField2 {\n\n    constructor(tm, prefix, F) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.F = F;\n        this.type = \"F2\";\n        this.m = F.m * 2;\n        this.n8 = this.F.n8*2;\n        this.n32 = this.F.n32*2;\n        this.n64 = this.F.n64*2;\n\n        this.pOp1 = tm.alloc(F.n8*2);\n        this.pOp2 = tm.alloc(F.n8*2);\n        this.pOp3 = tm.alloc(F.n8*2);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    mul1(a,b) {\n        return this.op2(\"_mul1\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        if ((Array.isArray(a)) && (a.length == 2)) {\n            const c1 = this.F.e(a[0], b);\n            const c2 = this.F.e(a[1], b);\n            const res = new Uint8Array(this.F.n8*2);\n            res.set(c1);\n            res.set(c2, this.F.n8*2);\n            return res;\n        } else {\n            throw new Error(\"invalid F2\");\n        }\n    }\n\n    toString(a, radix) {\n        const s1 = this.F.toString(a.slice(0, this.F.n8), radix);\n        const s2 = this.F.toString(a.slice(this.F.n8), radix);\n        return `[${s1}, ${s2}]`;\n    }\n\n    fromRng(rng) {\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        const res = new Uint8Array(this.F.n8*2);\n        res.set(c1);\n        res.set(c2, this.F.n8);\n        return res;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const c1 = this.F.toObject(a.slice(0, this.F.n8));\n        const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        return [c1, c2];\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.F.n8*2);\n        const b1 = this.F.fromObject(a[0]);\n        const b2 = this.F.fromObject(a[1]);\n        buff.set(b1);\n        buff.set(b2, this.F.n8);\n        return buff;\n    }\n\n    c1(a) {\n        return a.slice(0, this.F.n8);\n    }\n\n    c2(a) {\n        return a.slice(this.F.n8);\n    }\n\n}\n\n", "\n\nimport { getThreadRng } from \"./random.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nexport default class WasmField3 {\n\n    constructor(tm, prefix, F) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.F = F;\n        this.type = \"F3\";\n        this.m = F.m * 3;\n        this.n8 = this.F.n8*3;\n        this.n32 = this.F.n32*3;\n        this.n64 = this.F.n64*3;\n\n        this.pOp1 = tm.alloc(F.n8*3);\n        this.pOp2 = tm.alloc(F.n8*3);\n        this.pOp3 = tm.alloc(F.n8*3);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.getBuff(this.pOp3, this.n8);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        if ((Array.isArray(a)) && (a.length == 3)) {\n            const c1 = this.F.e(a[0], b);\n            const c2 = this.F.e(a[1], b);\n            const c3 = this.F.e(a[2], b);\n            const res = new Uint8Array(this.F.n8*3);\n            res.set(c1);\n            res.set(c2, this.F.n8);\n            res.set(c3, this.F.n8*2);\n            return res;\n        } else {\n            throw new Error(\"invalid F3\");\n        }\n    }\n\n    toString(a, radix) {\n        const s1 = this.F.toString(a.slice(0, this.F.n8), radix);\n        const s2 = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);\n        const s3 = this.F.toString(a.slice(this.F.n8*2), radix);\n        return `[${s1}, ${s2}, ${s3}]`;\n    }\n\n    fromRng(rng) {\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        const c3 = this.F.fromRng(rng);\n        const res = new Uint8Array(this.F.n8*3);\n        res.set(c1);\n        res.set(c2, this.F.n8);\n        res.set(c3, this.F.n8*2);\n        return res;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const c1 = this.F.toObject(a.slice(0, this.F.n8));\n        const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        const c3 = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));\n        return [c1, c2, c3];\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.F.n8*3);\n        const b1 = this.F.fromObject(a[0]);\n        const b2 = this.F.fromObject(a[1]);\n        const b3 = this.F.fromObject(a[2]);\n        buff.set(b1);\n        buff.set(b2, this.F.n8);\n        buff.set(b3, this.F.n8*2);\n        return buff;\n    }\n\n    c1(a) {\n        return a.slice(0, this.F.n8);\n    }\n\n    c2(a) {\n        return a.slice(this.F.n8, this.F.n8*2);\n    }\n\n    c3(a) {\n        return a.slice(this.F.n8*2);\n    }\n\n}\n\n\n", "\n\nimport * as Scalar from \"./scalar.js\";\nimport buildBatchConvert from \"./engine_batchconvert.js\";\n\nexport default class WasmCurve {\n\n    constructor(tm, prefix, F, pGen, pGb, cofactor) {\n        this.tm = tm;\n        this.prefix = prefix;\n        this.F = F;\n\n        this.pOp1 = tm.alloc(F.n8*3);\n        this.pOp2 = tm.alloc(F.n8*3);\n        this.pOp3 = tm.alloc(F.n8*3);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = this.tm.getBuff(this.pOp1, F.n8*3);\n        this.tm.instance.exports[prefix + \"_zeroAffine\"](this.pOp1);\n        this.zeroAffine = this.tm.getBuff(this.pOp1, F.n8*2);\n        this.one = this.tm.getBuff(pGen, F.n8*3);\n        this.g = this.one;\n        this.oneAffine = this.tm.getBuff(pGen, F.n8*2);\n        this.gAffine = this.oneAffine;\n        this.b = this.tm.getBuff(pGb, F.n8);\n\n        if (cofactor) {\n            this.cofactor = Scalar.toLEBuff(cofactor);\n        }\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n        this.batchLEMtoC = buildBatchConvert(tm, prefix + \"_batchLEMtoC\", F.n8*2, F.n8);\n        this.batchLEMtoU = buildBatchConvert(tm, prefix + \"_batchLEMtoU\", F.n8*2, F.n8*2);\n        this.batchCtoLEM = buildBatchConvert(tm, prefix + \"_batchCtoLEM\", F.n8, F.n8*2);\n        this.batchUtoLEM = buildBatchConvert(tm, prefix + \"_batchUtoLEM\", F.n8*2, F.n8*2);\n        this.batchToJacobian = buildBatchConvert(tm, prefix + \"_batchToJacobian\", F.n8*2, F.n8*3);\n        this.batchToAffine = buildBatchConvert(tm, prefix + \"_batchToAffine\", F.n8*3, F.n8*2);\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    op2bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    op1Affine(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*2);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_add\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_addMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_addMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_addAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    sub(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_sub\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_subMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_subMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_subAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    neg(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1(\"_neg\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1Affine(\"_negAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    double(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1(\"_double\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1(\"_doubleAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    isZero(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1Bool(\"_isZero\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1Bool(\"_isZeroAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    timesScalar(a, s) {\n        if (!(s instanceof Uint8Array)) {\n            s = Scalar.toLEBuff(Scalar.e(s));\n        }\n        let fnName;\n        if (a.byteLength == this.F.n8*3) {\n            fnName = this.prefix + \"_timesScalar\";\n        } else if (a.byteLength == this.F.n8*2) {\n            fnName = this.prefix + \"_timesScalarAffine\";\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, s);\n        this.tm.instance.exports[fnName](this.pOp1, this.pOp2, s.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    timesFr(a, s) {\n        let fnName;\n        if (a.byteLength == this.F.n8*3) {\n            fnName = this.prefix + \"_timesFr\";\n        } else if (a.byteLength == this.F.n8*2) {\n            fnName = this.prefix + \"_timesFrAffine\";\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, s);\n        this.tm.instance.exports[fnName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    eq(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2bool(\"_eq\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2bool(\"_eqMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2bool(\"_eqMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2bool(\"_eqAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toAffine(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1Affine(\"_toAffine\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return a;\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toJacobian(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return a;\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1(\"_toJacobian\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toRprUncompressed(arr, offset, a) {\n        this.tm.setBuff(this.pOp1, a);\n        if (a.byteLength == this.F.n8*3) {\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n        } else if (a.byteLength != this.F.n8*2) {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.instance.exports[this.prefix + \"_LEMtoU\"](this.pOp1, this.pOp1);\n        const res = this.tm.getBuff(this.pOp1, this.F.n8*2);\n        arr.set(res, offset);\n    }\n\n    fromRprUncompressed(arr, offset) {\n        const buff = arr.slice(offset, offset + this.F.n8*2);\n        this.tm.setBuff(this.pOp1, buff);\n        this.tm.instance.exports[this.prefix + \"_UtoLEM\"](this.pOp1, this.pOp1);\n        return this.tm.getBuff(this.pOp1, this.F.n8*2);\n    }\n\n    toRprCompressed(arr, offset, a) {\n        this.tm.setBuff(this.pOp1, a);\n        if (a.byteLength == this.F.n8*3) {\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n        } else if (a.byteLength != this.F.n8*2) {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.instance.exports[this.prefix + \"_LEMtoC\"](this.pOp1, this.pOp1);\n        const res = this.tm.getBuff(this.pOp1, this.F.n8);\n        arr.set(res, offset);\n    }\n\n    fromRprCompressed(arr, offset) {\n        const buff = arr.slice(offset, offset + this.F.n8);\n        this.tm.setBuff(this.pOp1, buff);\n        this.tm.instance.exports[this.prefix + \"_CtoLEM\"](this.pOp1, this.pOp2);\n        return this.tm.getBuff(this.pOp2, this.F.n8*2);\n    }\n\n    toUncompressed(a) {\n        const buff = new Uint8Array(this.F.n8*2);\n        this.toRprUncompressed(buff, 0, a);\n        return buff;\n    }\n\n    toRprLEM(arr, offset, a) {\n        if (a.byteLength == this.F.n8*2) {\n            arr.set(a, offset);\n            return;\n        } else if (a.byteLength == this.F.n8*3) {\n            this.tm.setBuff(this.pOp1, a);\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n            const res = this.tm.getBuff(this.pOp1, this.F.n8*2);\n            arr.set(res, offset);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    fromRprLEM(arr, offset) {\n        offset = offset || 0;\n        return arr.slice(offset, offset+this.F.n8*2);\n    }\n\n    toString(a, radix) {\n        if (a.byteLength == this.F.n8*3) {\n            const x = this.F.toString(a.slice(0, this.F.n8), radix);\n            const y = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);\n            const z = this.F.toString(a.slice(this.F.n8*2), radix);\n            return `[ ${x}, ${y}, ${z} ]`;\n        } else if (a.byteLength == this.F.n8*2) {\n            const x = this.F.toString(a.slice(0, this.F.n8), radix);\n            const y = this.F.toString(a.slice(this.F.n8), radix);\n            return `[ ${x}, ${y} ]`;\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    isValid(a) {\n        if (this.isZero(a)) return true;\n        const F = this.F;\n        const aa = this.toAffine(a);\n        const x = aa.slice(0, this.F.n8);\n        const y = aa.slice(this.F.n8, this.F.n8*2);\n        const x3b = F.add(F.mul(F.square(x),x), this.b);\n        const y2 = F.square(y);\n        return F.eq(x3b, y2);\n    }\n\n    fromRng(rng) {\n        const F = this.F;\n        let P = [];\n        let greatest;\n        let x3b;\n        do {\n            P[0] = F.fromRng(rng);\n            greatest = rng.nextBool();\n            x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n        } while (!F.isSquare(x3b));\n\n        P[1] = F.sqrt(x3b);\n\n        const s = F.isNegative(P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n\n        let Pbuff = new Uint8Array(this.F.n8*2);\n        Pbuff.set(P[0]);\n        Pbuff.set(P[1], this.F.n8);\n\n        if (this.cofactor) {\n            Pbuff = this.timesScalar(Pbuff, this.cofactor);\n        }\n\n        return Pbuff;\n    }\n\n\n\n    toObject(a) {\n        if (this.isZero(a)) {\n            return [\n                this.F.toObject(this.F.zero),\n                this.F.toObject(this.F.one),\n                this.F.toObject(this.F.zero),\n            ];\n        }\n        const x = this.F.toObject(a.slice(0, this.F.n8));\n        const y = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        let z;\n        if (a.byteLength == this.F.n8*3) {\n            z = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));\n        } else {\n            z = this.F.toObject(this.F.one);\n        }\n        return [x, y, z];\n    }\n\n    fromObject(a) {\n        const x = this.F.fromObject(a[0]);\n        const y = this.F.fromObject(a[1]);\n        let z;\n        if (a.length==3) {\n            z = this.F.fromObject(a[2]);\n        } else {\n            z = this.F.one;\n        }\n        if (this.F.isZero(z, this.F.one)) {\n            return this.zeroAffine;\n        } else if (this.F.eq(z, this.F.one)) {\n            const buff = new Uint8Array(this.F.n8*2);\n            buff.set(x);\n            buff.set(y, this.F.n8);\n            return buff;\n        } else {\n            const buff = new Uint8Array(this.F.n8*3);\n            buff.set(x);\n            buff.set(y, this.F.n8);\n            buff.set(z, this.F.n8*2);\n            return buff;\n        }\n    }\n\n    e(a) {\n        if (a instanceof Uint8Array) return a;\n        return this.fromObject(a);\n    }\n\n    x(a) {\n        const tmp = this.toAffine(a);\n        return tmp.slice(0, this.F.n8);\n    }\n\n    y(a) {\n        const tmp = this.toAffine(a);\n        return tmp.slice(this.F.n8);\n    }\n\n}\n\n\n", "/* global navigator, WebAssembly */\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// const MEM_SIZE = 1000;  // Memory size in 64K Pakes (512Mb)\nconst MEM_SIZE = 25;  // Memory size in 64K Pakes (1600Kb)\n\n\nimport thread from \"./threadman_thread.js\";\nimport os from \"os\";\nimport Worker from \"web-worker\";\n\nclass Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject)=> {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction stringToBase64(str) {\n    if (process.browser) {\n        return globalThis.btoa(str);\n    } else {\n        return Buffer.from(str).toString(\"base64\");\n    }\n}\n\nconst threadSource = stringToBase64(\"(\" + thread.toString() + \")(self)\");\nconst workerSource = \"data:application/javascript;base64,\" + threadSource;\n\n\n\nexport default async function buildThreadManager(wasm, singleThread) {\n    const tm = new ThreadManager();\n\n    tm.memory = new WebAssembly.Memory({initial:MEM_SIZE});\n    tm.u8 = new Uint8Array(tm.memory.buffer);\n    tm.u32 = new Uint32Array(tm.memory.buffer);\n\n    const wasmModule = await WebAssembly.compile(wasm.code);\n\n    tm.instance = await WebAssembly.instantiate(wasmModule, {\n        env: {\n            \"memory\": tm.memory\n        }\n    });\n\n    tm.singleThread = singleThread;\n    tm.initalPFree = tm.u32[0];   // Save the Pointer to free space.\n    tm.pq = wasm.pq;\n    tm.pr = wasm.pr;\n    tm.pG1gen = wasm.pG1gen;\n    tm.pG1zero = wasm.pG1zero;\n    tm.pG2gen = wasm.pG2gen;\n    tm.pG2zero = wasm.pG2zero;\n    tm.pOneT = wasm.pOneT;\n\n    //    tm.pTmp0 = tm.alloc(curve.G2.F.n8*3);\n    //    tm.pTmp1 = tm.alloc(curve.G2.F.n8*3);\n\n\n    if (singleThread) {\n        tm.code = wasm.code;\n        tm.taskManager = thread();\n        await tm.taskManager([{\n            cmd: \"INIT\",\n            init: MEM_SIZE,\n            code: tm.code.slice()\n        }]);\n        tm.concurrency  = 1;\n    } else {\n        tm.workers = [];\n        tm.pendingDeferreds = [];\n        tm.working = [];\n\n        let concurrency;\n\n        if ((typeof(navigator) === \"object\") && navigator.hardwareConcurrency) {\n            concurrency = navigator.hardwareConcurrency;\n        } else {\n            concurrency = os.cpus().length;\n        }\n\n        if(concurrency == 0){\n            concurrency = 2;\n        }\n\n        // Limit to 64 threads for memory reasons.\n        if (concurrency>64) concurrency=64;\n        tm.concurrency = concurrency;\n\n        for (let i = 0; i<concurrency; i++) {\n\n            tm.workers[i] = new Worker(workerSource);\n\n            tm.workers[i].addEventListener(\"message\", getOnMsg(i));\n\n            tm.working[i]=false;\n        }\n\n        const initPromises = [];\n        for (let i=0; i<tm.workers.length;i++) {\n            const copyCode = wasm.code.slice();\n            initPromises.push(tm.postAction(i, [{\n                cmd: \"INIT\",\n                init: MEM_SIZE,\n                code: copyCode\n            }], [copyCode.buffer]));\n        }\n\n        await Promise.all(initPromises);\n\n    }\n    return tm;\n\n    function getOnMsg(i) {\n        return function(e) {\n            let data;\n            if ((e)&&(e.data)) {\n                data = e.data;\n            } else {\n                data = e;\n            }\n\n            tm.working[i]=false;\n            tm.pendingDeferreds[i].resolve(data);\n            tm.processWorks();\n        };\n    }\n\n}\n\nclass ThreadManager {\n    constructor() {\n        this.actionQueue = [];\n        this.oldPFree = 0;\n    }\n\n    startSyncOp() {\n        if (this.oldPFree != 0) throw new Error(\"Sync operation in progress\");\n        this.oldPFree = this.u32[0];\n    }\n\n    endSyncOp() {\n        if (this.oldPFree == 0) throw new Error(\"No sync operation in progress\");\n        this.u32[0] = this.oldPFree;\n        this.oldPFree = 0;\n    }\n\n    postAction(workerId, e, transfers, _deferred) {\n        if (this.working[workerId]) {\n            throw new Error(\"Posting a job t a working worker\");\n        }\n        this.working[workerId] = true;\n\n        this.pendingDeferreds[workerId] = _deferred ? _deferred : new Deferred();\n        this.workers[workerId].postMessage(e, transfers);\n\n        return this.pendingDeferreds[workerId].promise;\n    }\n\n    processWorks() {\n        for (let i=0; (i<this.workers.length)&&(this.actionQueue.length > 0); i++) {\n            if (this.working[i] == false) {\n                const work = this.actionQueue.shift();\n                this.postAction(i, work.data, work.transfers, work.deferred);\n            }\n        }\n    }\n\n    queueAction(actionData, transfers) {\n        const d = new Deferred();\n\n        if (this.singleThread) {\n            const res = this.taskManager(actionData);\n            d.resolve(res);\n        } else {\n            this.actionQueue.push({\n                data: actionData,\n                transfers: transfers,\n                deferred: d\n            });\n            this.processWorks();\n        }\n        return d.promise;\n    }\n\n    resetMemory() {\n        this.u32[0] = this.initalPFree;\n    }\n\n    allocBuff(buff) {\n        const pointer = this.alloc(buff.byteLength);\n        this.setBuff(pointer, buff);\n        return pointer;\n    }\n\n    getBuff(pointer, length) {\n        return this.u8.slice(pointer, pointer+ length);\n    }\n\n    setBuff(pointer, buffer) {\n        this.u8.set(new Uint8Array(buffer), pointer);\n    }\n\n    alloc(length) {\n        while (this.u32[0] & 3) this.u32[0]++;  // Return always aligned pointers\n        const res = this.u32[0];\n        this.u32[0] += length;\n        return res;\n    }\n\n    async terminate() {\n        for (let i=0; i<this.workers.length; i++) {\n            this.workers[i].postMessage([{cmd: \"TERMINATE\"}]);\n        }\n        await sleep(200);\n    }\n\n}\n", "/* global WebAssembly */\n\nexport default function thread(self) {\n    const MAXMEM = 32767;\n    let instance;\n    let memory;\n\n    if (self) {\n        self.onmessage = function(e) {\n            let data;\n            if (e.data) {\n                data = e.data;\n            } else {\n                data = e;\n            }\n\n            if (data[0].cmd == \"INIT\") {\n                init(data[0]).then(function() {\n                    self.postMessage(data.result);\n                });\n            } else if (data[0].cmd == \"TERMINATE\") {\n                self.close();\n            } else {\n                const res = runTask(data);\n                self.postMessage(res);\n            }\n        };\n    }\n\n    async function init(data) {\n        const code = new Uint8Array(data.code);\n        const wasmModule = await WebAssembly.compile(code);\n        memory = new WebAssembly.Memory({initial:data.init, maximum: MAXMEM});\n\n        instance = await WebAssembly.instantiate(wasmModule, {\n            env: {\n                \"memory\": memory\n            }\n        });\n    }\n\n\n\n    function alloc(length) {\n        const u32 = new Uint32Array(memory.buffer, 0, 1);\n        while (u32[0] & 3) u32[0]++;  // Return always aligned pointers\n        const res = u32[0];\n        u32[0] += length;\n        if (u32[0] + length > memory.buffer.byteLength) {\n            const currentPages = memory.buffer.byteLength / 0x10000;\n            let requiredPages = Math.floor((u32[0] + length) / 0x10000)+1;\n            if (requiredPages>MAXMEM) requiredPages=MAXMEM;\n            memory.grow(requiredPages-currentPages);\n        }\n        return res;\n    }\n\n    function allocBuffer(buffer) {\n        const p = alloc(buffer.byteLength);\n        setBuffer(p, buffer);\n        return p;\n    }\n\n    function getBuffer(pointer, length) {\n        const u8 = new Uint8Array(memory.buffer);\n        return new Uint8Array(u8.buffer, u8.byteOffset + pointer, length);\n    }\n\n    function setBuffer(pointer, buffer) {\n        const u8 = new Uint8Array(memory.buffer);\n        u8.set(new Uint8Array(buffer), pointer);\n    }\n\n    function runTask(task) {\n        if (task[0].cmd == \"INIT\") {\n            return init(task[0]);\n        }\n        const ctx = {\n            vars: [],\n            out: []\n        };\n        const u32a = new Uint32Array(memory.buffer, 0, 1);\n        const oldAlloc = u32a[0];\n        for (let i=0; i<task.length; i++) {\n            switch (task[i].cmd) {\n            case \"ALLOCSET\":\n                ctx.vars[task[i].var] = allocBuffer(task[i].buff);\n                break;\n            case \"ALLOC\":\n                ctx.vars[task[i].var] = alloc(task[i].len);\n                break;\n            case \"SET\":\n                setBuffer(ctx.vars[task[i].var], task[i].buff);\n                break;\n            case \"CALL\": {\n                const params = [];\n                for (let j=0; j<task[i].params.length; j++) {\n                    const p = task[i].params[j];\n                    if (typeof p.var !== \"undefined\") {\n                        params.push(ctx.vars[p.var] + (p.offset || 0));\n                    } else if (typeof p.val != \"undefined\") {\n                        params.push(p.val);\n                    }\n                }\n                instance.exports[task[i].fnName](...params);\n                break;\n            }\n            case \"GET\":\n                ctx.out[task[i].out] = getBuffer(ctx.vars[task[i].var], task[i].len).slice();\n                break;\n            default:\n                throw new Error(\"Invalid cmd\");\n            }\n        }\n        const u32b = new Uint32Array(memory.buffer, 0, 1);\n        u32b[0] = oldAlloc;\n        return ctx.out;\n    }\n\n\n    return runTask;\n}\n", "import BigBuffer from \"./bigbuffer.js\";\n\nexport default function buildBatchApplyKey(curve, groupName) {\n    const G = curve[groupName];\n    const Fr = curve.Fr;\n    const tm = curve.tm;\n\n    curve[groupName].batchApplyKey = async function(buff, first, inc, inType, outType) {\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n        let fnName, fnAffine;\n        let sGin, sGmid, sGout;\n        if (groupName == \"G1\") {\n            if (inType == \"jacobian\") {\n                sGin = G.F.n8*3;\n                fnName = \"g1m_batchApplyKey\";\n            } else {\n                sGin = G.F.n8*2;\n                fnName = \"g1m_batchApplyKeyMixed\";\n            }\n            sGmid = G.F.n8*3;\n            if (outType == \"jacobian\") {\n                sGout = G.F.n8*3;\n            } else {\n                fnAffine = \"g1m_batchToAffine\";\n                sGout = G.F.n8*2;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"jacobian\") {\n                sGin = G.F.n8*3;\n                fnName = \"g2m_batchApplyKey\";\n            } else {\n                sGin = G.F.n8*2;\n                fnName = \"g2m_batchApplyKeyMixed\";\n            }\n            sGmid = G.F.n8*3;\n            if (outType == \"jacobian\") {\n                sGout = G.F.n8*3;\n            } else {\n                fnAffine = \"g2m_batchToAffine\";\n                sGout = G.F.n8*2;\n            }\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_batchApplyKey\";\n            sGin = G.n8;\n            sGmid = G.n8;\n            sGout = G.n8;\n        } else {\n            throw new Error(\"Invalid group: \" + groupName);\n        }\n        const nPoints = Math.floor(buff.byteLength / sGin);\n        const pointsPerChunk = Math.floor(nPoints/tm.concurrency);\n        const opPromises = [];\n        inc = Fr.e(inc);\n        let t = Fr.e(first);\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const task = [];\n\n            task.push({\n                cmd: \"ALLOCSET\",\n                var: 0,\n                buff: buff.slice(i*pointsPerChunk*sGin, i*pointsPerChunk*sGin + n*sGin)\n            });\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: t});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: inc});\n            task.push({cmd: \"ALLOC\", var: 3, len: n*Math.max(sGmid, sGout)});\n            task.push({\n                cmd: \"CALL\",\n                fnName: fnName,\n                params: [\n                    {var: 0},\n                    {val: n},\n                    {var: 1},\n                    {var: 2},\n                    {var:3}\n                ]\n            });\n            if (fnAffine) {\n                task.push({\n                    cmd: \"CALL\",\n                    fnName: fnAffine,\n                    params: [\n                        {var: 3},\n                        {val: n},\n                        {var: 3},\n                    ]\n                });\n            }\n            task.push({cmd: \"GET\", out: 0, var: 3, len: n*sGout});\n\n            opPromises.push(tm.queueAction(task));\n            t = Fr.mul(t, Fr.exp(inc, n));\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let outBuff;\n        if (buff instanceof BigBuffer) {\n            outBuff = new BigBuffer(nPoints*sGout);\n        } else {\n            outBuff = new Uint8Array(nPoints*sGout);\n        }\n\n        let p=0;\n        for (let i=0; i<result.length; i++) {\n            outBuff.set(result[i][0], p);\n            p += result[i][0].byteLength;\n        }\n\n        return outBuff;\n    };\n}\n", "\nexport default function buildPairing(curve) {\n    const tm = curve.tm;\n    curve.pairing = function pairing(a, b) {\n\n        tm.startSyncOp();\n        const pA = tm.allocBuff(curve.G1.toJacobian(a));\n        const pB = tm.allocBuff(curve.G2.toJacobian(b));\n        const pRes = tm.alloc(curve.Gt.n8);\n        tm.instance.exports[curve.name + \"_pairing\"](pA, pB, pRes);\n\n        const res = tm.getBuff(pRes, curve.Gt.n8);\n\n        tm.endSyncOp();\n        return res;\n    };\n\n    curve.pairingEq = async function pairingEq() {\n        let  buffCt;\n        let nEqs;\n        if ((arguments.length % 2) == 1) {\n            buffCt = arguments[arguments.length-1];\n            nEqs = (arguments.length -1) /2;\n        } else {\n            buffCt = curve.Gt.one;\n            nEqs = arguments.length /2;\n        }\n\n        const opPromises = [];\n        for (let i=0; i<nEqs; i++) {\n\n            const task = [];\n\n            const g1Buff = curve.G1.toJacobian(arguments[i*2]);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: g1Buff});\n            task.push({cmd: \"ALLOC\", var: 1, len: curve.prePSize});\n\n            const g2Buff = curve.G2.toJacobian(arguments[i*2 +1]);\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: g2Buff});\n            task.push({cmd: \"ALLOC\", var: 3, len: curve.preQSize});\n\n            task.push({cmd: \"ALLOC\", var: 4, len: curve.Gt.n8});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_prepareG1\", params: [\n                {var: 0},\n                {var: 1}\n            ]});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_prepareG2\", params: [\n                {var: 2},\n                {var: 3}\n            ]});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_millerLoop\", params: [\n                {var: 1},\n                {var: 3},\n                {var: 4}\n            ]});\n\n            task.push({cmd: \"GET\", out: 0, var: 4, len: curve.Gt.n8});\n\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        tm.startSyncOp();\n        const pRes = tm.alloc(curve.Gt.n8);\n        tm.instance.exports.ftm_one(pRes);\n\n        for (let i=0; i<result.length; i++) {\n            const pMR = tm.allocBuff(result[i][0]);\n            tm.instance.exports.ftm_mul(pRes, pMR, pRes);\n        }\n        tm.instance.exports[curve.name + \"_finalExponentiation\"](pRes, pRes);\n\n        const pCt = tm.allocBuff(buffCt);\n\n        const r = !!tm.instance.exports.ftm_eq(pRes, pCt);\n\n        tm.endSyncOp();\n\n        return r;\n    };\n\n    curve.prepareG1 = function(p) {\n        this.tm.startSyncOp();\n        const pP = this.tm.allocBuff(p);\n        const pPrepP = this.tm.alloc(this.prePSize);\n        this.tm.instance.exports[this.name + \"_prepareG1\"](pP, pPrepP);\n        const res = this.tm.getBuff(pPrepP, this.prePSize);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.prepareG2 = function(q) {\n        this.tm.startSyncOp();\n        const pQ = this.tm.allocBuff(q);\n        const pPrepQ = this.tm.alloc(this.preQSize);\n        this.tm.instance.exports[this.name + \"_prepareG2\"](pQ, pPrepQ);\n        const res = this.tm.getBuff(pPrepQ, this.preQSize);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.millerLoop = function(preP, preQ) {\n        this.tm.startSyncOp();\n        const pPreP = this.tm.allocBuff(preP);\n        const pPreQ = this.tm.allocBuff(preQ);\n        const pRes = this.tm.alloc(this.Gt.n8);\n        this.tm.instance.exports[this.name + \"_millerLoop\"](pPreP, pPreQ, pRes);\n        const res = this.tm.getBuff(pRes, this.Gt.n8);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.finalExponentiation = function(a) {\n        this.tm.startSyncOp();\n        const pA = this.tm.allocBuff(a);\n        const pRes = this.tm.alloc(this.Gt.n8);\n        this.tm.instance.exports[this.name + \"_finalExponentiation\"](pA, pRes);\n        const res = this.tm.getBuff(pRes, this.Gt.n8);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n}\n", "import { log2 } from \"./utils.js\";\n\nconst pTSizes = [\n    1 ,  1,  1,  1,    2,  3,  4,  5,\n    6 ,  7,  7,  8,    9, 10, 11, 12,\n    13, 13, 14, 15,   16, 16, 17, 17,\n    17, 17, 17, 17,   17, 17, 17, 17\n];\n\nexport default function buildMultiexp(curve, groupName) {\n    const G = curve[groupName];\n    const tm = G.tm;\n    async function _multiExpChunk(buffBases, buffScalars, inType, logger, logText) {\n        if ( ! (buffBases instanceof Uint8Array) ) {\n            if (logger) logger.error(`${logText} _multiExpChunk buffBases is not Uint8Array`);\n            throw new Error(`${logText} _multiExpChunk buffBases is not Uint8Array`);\n        }\n        if ( ! (buffScalars instanceof Uint8Array) ) {\n            if (logger) logger.error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);\n            throw new Error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);\n        }\n        inType = inType || \"affine\";\n\n        let sGIn;\n        let fnName;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                fnName = \"g1m_multiexpAffine_chunk\";\n                sGIn = G.F.n8*2;\n            } else {\n                fnName = \"g1m_multiexp_chunk\";\n                sGIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                fnName = \"g2m_multiexpAffine_chunk\";\n                sGIn = G.F.n8*2;\n            } else {\n                fnName = \"g2m_multiexp_chunk\";\n                sGIn = G.F.n8*3;\n            }\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n        const nPoints = Math.floor(buffBases.byteLength / sGIn);\n\n        if (nPoints == 0) return G.zero;\n        const sScalar = Math.floor(buffScalars.byteLength / nPoints);\n        if( sScalar * nPoints != buffScalars.byteLength) {\n            throw new Error(\"Scalar size does not match\");\n        }\n\n        const bitChunkSize = pTSizes[log2(nPoints)];\n        const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff: buffBases},\n                {cmd: \"ALLOCSET\", var: 1, buff: buffScalars},\n                {cmd: \"ALLOC\", var: 2, len: G.F.n8*3},\n                {cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {var: 1},\n                    {val: sScalar},\n                    {val: nPoints},\n                    {val: i*bitChunkSize},\n                    {val: Math.min(sScalar*8 - i*bitChunkSize, bitChunkSize)},\n                    {var: 2}\n                ]},\n                {cmd: \"GET\", out: 0, var: 2, len: G.F.n8*3}\n            ];\n            opPromises.push(\n                G.tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let res = G.zero;\n        for (let i=result.length-1; i>=0; i--) {\n            if (!G.isZero(res)) {\n                for (let j=0; j<bitChunkSize; j++) res = G.double(res);\n            }\n            res = G.add(res, result[i][0]);\n        }\n\n        return res;\n    }\n\n    async function _multiExp(buffBases, buffScalars, inType, logger, logText) {\n        const MAX_CHUNK_SIZE = 1 << 22;\n        const MIN_CHUNK_SIZE = 1 << 10;\n        let sGIn;\n\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sGIn = G.F.n8*2;\n            } else {\n                sGIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sGIn = G.F.n8*2;\n            } else {\n                sGIn = G.F.n8*3;\n            }\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buffBases.byteLength / sGIn);\n        const sScalar = Math.floor(buffScalars.byteLength / nPoints);\n        if( sScalar * nPoints != buffScalars.byteLength) {\n            throw new Error(\"Scalar size does not match\");\n        }\n\n        const bitChunkSize = pTSizes[log2(nPoints)];\n        const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;\n\n        let chunkSize;\n        chunkSize = Math.floor(nPoints / (tm.concurrency /nChunks));\n        if (chunkSize>MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;\n        if (chunkSize<MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;\n\n        const opPromises = [];\n        for (let i=0; i<nPoints; i += chunkSize) {\n            if (logger) logger.debug(`Multiexp start: ${logText}: ${i}/${nPoints}`);\n            const n= Math.min(nPoints - i, chunkSize);\n            const buffBasesChunk = buffBases.slice(i*sGIn, (i+n)*sGIn);\n            const buffScalarsChunk = buffScalars.slice(i*sScalar, (i+n)*sScalar);\n            opPromises.push(_multiExpChunk(buffBasesChunk, buffScalarsChunk, inType, logger, logText).then( (r) => {\n                if (logger) logger.debug(`Multiexp end: ${logText}: ${i}/${nPoints}`);\n                return r;\n            }));\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let res = G.zero;\n        for (let i=result.length-1; i>=0; i--) {\n            res = G.add(res, result[i]);\n        }\n\n        return res;\n    }\n\n    G.multiExp = async function multiExpAffine(buffBases, buffScalars, logger, logText) {\n        return await _multiExp(buffBases, buffScalars, \"jacobian\", logger, logText);\n    };\n    G.multiExpAffine = async function multiExpAffine(buffBases, buffScalars, logger, logText) {\n        return await _multiExp(buffBases, buffScalars, \"affine\", logger, logText);\n    };\n}\n", "import {log2, buffReverseBits, array2buffer, buffer2array} from \"./utils.js\";\nimport BigBuffer from \"./bigbuffer.js\";\n\n\nexport default function buildFFT(curve, groupName) {\n    const G = curve[groupName];\n    const Fr = curve.Fr;\n    const tm = G.tm;\n    async function _fft(buff, inverse, inType, outType, logger, loggerTxt) {\n\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n        const MAX_BITS_THREAD = 14;\n\n        let sIn, sMid, sOut, fnIn2Mid, fnMid2Out, fnFFTMix, fnFFTJoin, fnFFTFinal;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g1m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            if (inverse) {\n                fnFFTFinal = \"g1m_fftFinal\";\n            }\n            fnFFTJoin = \"g1m_fftJoin\";\n            fnFFTMix = \"g1m_fftMix\";\n\n            if (outType == \"affine\") {\n                sOut = G.F.n8*2;\n                fnMid2Out = \"g1m_batchToAffine\";\n            } else {\n                sOut = G.F.n8*3;\n            }\n\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g2m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            if (inverse) {\n                fnFFTFinal = \"g2m_fftFinal\";\n            }\n            fnFFTJoin = \"g2m_fftJoin\";\n            fnFFTMix = \"g2m_fftMix\";\n            if (outType == \"affine\") {\n                sOut = G.F.n8*2;\n                fnMid2Out = \"g2m_batchToAffine\";\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = G.n8;\n            sMid = G.n8;\n            sOut = G.n8;\n            if (inverse) {\n                fnFFTFinal = \"frm_fftFinal\";\n            }\n            fnFFTMix = \"frm_fftMix\";\n            fnFFTJoin = \"frm_fftJoin\";\n        }\n\n\n        let returnArray = false;\n        if (Array.isArray(buff)) {\n            buff = array2buffer(buff, sIn);\n            returnArray = true;\n        } else {\n            buff = buff.slice(0, buff.byteLength);\n        }\n\n        const nPoints = buff.byteLength / sIn;\n        const bits = log2(nPoints);\n\n        if  ((1 << bits) != nPoints) {\n            throw new Error(\"fft must be multiple of 2\" );\n        }\n\n        if (bits == Fr.s +1) {\n            let buffOut;\n\n            if (inverse) {\n                buffOut =  await _fftExtInv(buff, inType, outType, logger, loggerTxt);\n            } else {\n                buffOut =  await _fftExt(buff, inType, outType, logger, loggerTxt);\n            }\n\n            if (returnArray) {\n                return buffer2array(buffOut, sOut);\n            } else {\n                return buffOut;\n            }\n        }\n\n        let inv;\n        if (inverse) {\n            inv = Fr.inv(Fr.e(nPoints));\n        }\n\n        let buffOut;\n\n        buffReverseBits(buff, sIn);\n\n        let chunks;\n        let pointsInChunk = Math.min(1 << MAX_BITS_THREAD, nPoints);\n        let nChunks = nPoints / pointsInChunk;\n\n        while ((nChunks < tm.concurrency)&&(pointsInChunk>=16)) {\n            nChunks *= 2;\n            pointsInChunk /= 2;\n        }\n\n        const l2Chunk = log2(pointsInChunk);\n\n        const promises = [];\n        for (let i = 0; i< nChunks; i++) {\n            if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix start: ${i}/${nChunks}`);\n            const task = [];\n            task.push({cmd: \"ALLOC\", var: 0, len: sMid*pointsInChunk});\n            const buffChunk = buff.slice( (pointsInChunk * i)*sIn, (pointsInChunk * (i+1))*sIn);\n            task.push({cmd: \"SET\", var: 0, buff: buffChunk});\n            if (fnIn2Mid) {\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n            }\n            for (let j=1; j<=l2Chunk;j++) {\n                task.push({cmd: \"CALL\", fnName:fnFFTMix, params: [{var:0}, {val: pointsInChunk}, {val: j}]});\n            }\n\n            if (l2Chunk==bits) {\n                if (fnFFTFinal) {\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: inv});\n                    task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                        {var: 0},\n                        {val: pointsInChunk},\n                        {var: 1},\n                    ]});\n                }\n                if (fnMid2Out) {\n                    task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n                }\n                task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sOut});\n            } else {\n                task.push({cmd: \"GET\", out:0, var: 0, len: sMid*pointsInChunk});\n            }\n            promises.push(tm.queueAction(task).then( (r) => {\n                if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix end: ${i}/${nChunks}`);\n                return r;\n            }));\n        }\n\n        chunks = await Promise.all(promises);\n        for (let i = 0; i< nChunks; i++) chunks[i] = chunks[i][0];\n\n        for (let i = l2Chunk+1;   i<=bits; i++) {\n            if (logger) logger.debug(`${loggerTxt}: fft  ${bits}  join: ${i}/${bits}`);\n            const nGroups = 1 << (bits - i);\n            const nChunksPerGroup = nChunks / nGroups;\n            const opPromises = [];\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const first = Fr.exp( Fr.w[i], k*pointsInChunk);\n                    const inc = Fr.w[i];\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n\n                    const task = [];\n                    task.push({cmd: \"ALLOCSET\", var: 0, buff: chunks[o1]});\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: chunks[o2]});\n                    task.push({cmd: \"ALLOCSET\", var: 2, buff: first});\n                    task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n                    task.push({cmd: \"CALL\", fnName: fnFFTJoin,  params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: pointsInChunk},\n                        {var: 2},\n                        {var: 3}\n                    ]});\n                    if (i==bits) {\n                        if (fnFFTFinal) {\n                            task.push({cmd: \"ALLOCSET\", var: 4, buff: inv});\n                            task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                                {var: 0},\n                                {val: pointsInChunk},\n                                {var: 4},\n                            ]});\n                            task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                                {var: 1},\n                                {val: pointsInChunk},\n                                {var: 4},\n                            ]});\n                        }\n                        if (fnMid2Out) {\n                            task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n                            task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:1}, {val: pointsInChunk}, {var: 1}]});\n                        }\n                        task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sOut});\n                        task.push({cmd: \"GET\", out: 1, var: 1, len: pointsInChunk*sOut});\n                    } else {\n                        task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sMid});\n                        task.push({cmd: \"GET\", out: 1, var: 1, len: pointsInChunk*sMid});\n                    }\n                    opPromises.push(tm.queueAction(task).then( (r) => {\n                        if (logger) logger.debug(`${loggerTxt}: fft ${bits} join  ${i}/${bits}  ${j+1}/${nGroups} ${k}/${nChunksPerGroup/2}`);\n                        return r;\n                    }));\n                }\n            }\n\n            const res = await Promise.all(opPromises);\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n                    const resChunk = res.shift();\n                    chunks[o1] = resChunk[0];\n                    chunks[o2] = resChunk[1];\n                }\n            }\n        }\n\n        if (buff instanceof BigBuffer) {\n            buffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            buffOut = new Uint8Array(nPoints*sOut);\n        }\n        if (inverse) {\n            buffOut.set(chunks[0].slice((pointsInChunk-1)*sOut));\n            let p= sOut;\n            for (let i=nChunks-1; i>0; i--) {\n                buffOut.set(chunks[i], p);\n                p += pointsInChunk*sOut;\n                delete chunks[i];  // Liberate mem\n            }\n            buffOut.set(chunks[0].slice(0, (pointsInChunk-1)*sOut), p);\n            delete chunks[0];\n        } else {\n            for (let i=0; i<nChunks; i++) {\n                buffOut.set(chunks[i], pointsInChunk*sOut*i);\n                delete chunks[i];\n            }\n        }\n\n        if (returnArray) {\n            return buffer2array(buffOut, sOut);\n        } else {\n            return buffOut;\n        }\n    }\n\n    async function _fftExt(buff, inType, outType, logger, loggerTxt) {\n        let b1, b2;\n        b1 = buff.slice( 0 , buff.byteLength/2);\n        b2 = buff.slice( buff.byteLength/2, buff.byteLength);\n\n        const promises = [];\n\n        [b1, b2] = await _fftJoinExt(b1, b2, \"fftJoinExt\", Fr.one, Fr.shift, inType, \"jacobian\", logger, loggerTxt);\n\n        promises.push( _fft(b1, false, \"jacobian\", outType, logger, loggerTxt));\n        promises.push( _fft(b2, false, \"jacobian\", outType, logger, loggerTxt));\n\n        const res1 = await Promise.all(promises);\n\n        let buffOut;\n        if (res1[0].byteLength > (1<<28)) {\n            buffOut = new BigBuffer(res1[0].byteLength*2);\n        } else {\n            buffOut = new Uint8Array(res1[0].byteLength*2);\n        }\n\n        buffOut.set(res1[0]);\n        buffOut.set(res1[1], res1[0].byteLength);\n\n        return buffOut;\n    }\n\n    async function _fftExtInv(buff, inType, outType, logger, loggerTxt) {\n        let b1, b2;\n        b1 = buff.slice( 0 , buff.byteLength/2);\n        b2 = buff.slice( buff.byteLength/2, buff.byteLength);\n\n        const promises = [];\n\n        promises.push( _fft(b1, true, inType, \"jacobian\", logger, loggerTxt));\n        promises.push( _fft(b2, true, inType, \"jacobian\", logger, loggerTxt));\n\n        [b1, b2] = await Promise.all(promises);\n\n        const res1 = await _fftJoinExt(b1, b2, \"fftJoinExtInv\", Fr.one, Fr.shiftInv, \"jacobian\", outType, logger, loggerTxt);\n\n        let buffOut;\n        if (res1[0].byteLength > (1<<28)) {\n            buffOut = new BigBuffer(res1[0].byteLength*2);\n        } else {\n            buffOut = new Uint8Array(res1[0].byteLength*2);\n        }\n\n        buffOut.set(res1[0]);\n        buffOut.set(res1[1], res1[0].byteLength);\n\n        return buffOut;\n    }\n\n\n    async function _fftJoinExt(buff1, buff2, fn, first, inc, inType, outType, logger, loggerTxt) {\n        const MAX_CHUNK_SIZE = 1<<16;\n        const MIN_CHUNK_SIZE = 1<<4;\n\n        let fnName;\n        let fnIn2Mid, fnMid2Out;\n        let sOut, sIn, sMid;\n\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g1m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            fnName = \"g1m_\"+fn;\n            if (outType == \"affine\") {\n                fnMid2Out = \"g1m_batchToAffine\";\n                sOut = G.F.n8*2;\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g2m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            fnName = \"g2m_\"+fn;\n            sMid = G.F.n8*3;\n            if (outType == \"affine\") {\n                fnMid2Out = \"g2m_batchToAffine\";\n                sOut = G.F.n8*2;\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = Fr.n8;\n            sOut = Fr.n8;\n            sMid = Fr.n8;\n            fnName = \"frm_\" + fn;\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        if (buff1.byteLength != buff2.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const nPoints = Math.floor(buff1.byteLength / sIn);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        let chunkSize = Math.floor(nPoints /tm.concurrency);\n        if (chunkSize < MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;\n        if (chunkSize > MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;\n\n        const opPromises = [];\n\n        for (let i=0; i<nPoints; i += chunkSize) {\n            if (logger) logger.debug(`${loggerTxt}: fftJoinExt Start: ${i}/${nPoints}`);\n            const n= Math.min(nPoints - i, chunkSize);\n\n            const firstChunk = Fr.mul(first, Fr.exp( inc, i));\n            const task = [];\n\n            const b1 = buff1.slice(i*sIn, (i+n)*sIn);\n            const b2 = buff2.slice(i*sIn, (i+n)*sIn);\n\n            task.push({cmd: \"ALLOC\", var: 0, len: sMid*n});\n            task.push({cmd: \"SET\", var: 0, buff: b1});\n            task.push({cmd: \"ALLOC\", var: 1, len: sMid*n});\n            task.push({cmd: \"SET\", var: 1, buff: b2});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: firstChunk});\n            task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n            if (fnIn2Mid) {\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:0}, {val: n}, {var: 0}]});\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:1}, {val: n}, {var: 1}]});\n            }\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {var: 1},\n                {val: n},\n                {var: 2},\n                {var: 3},\n                {val: Fr.s},\n            ]});\n            if (fnMid2Out) {\n                task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: n}, {var: 0}]});\n                task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:1}, {val: n}, {var: 1}]});\n            }\n            task.push({cmd: \"GET\", out: 0, var: 0, len: n*sOut});\n            task.push({cmd: \"GET\", out: 1, var: 1, len: n*sOut});\n            opPromises.push(\n                tm.queueAction(task).then( (r) => {\n                    if (logger) logger.debug(`${loggerTxt}: fftJoinExt End: ${i}/${nPoints}`);\n                    return r;\n                })\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut1;\n        let fullBuffOut2;\n        if (nPoints * sOut > 1<<28) {\n            fullBuffOut1 = new BigBuffer(nPoints*sOut);\n            fullBuffOut2 = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut1 = new Uint8Array(nPoints*sOut);\n            fullBuffOut2 = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut1.set(result[i][0], p);\n            fullBuffOut2.set(result[i][1], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return [fullBuffOut1, fullBuffOut2];\n    }\n\n\n    G.fft = async function(buff, inType, outType, logger, loggerTxt) {\n        return await _fft(buff, false, inType, outType, logger, loggerTxt);\n    };\n\n    G.ifft = async function(buff, inType, outType, logger, loggerTxt) {\n        return await _fft(buff, true, inType, outType, logger, loggerTxt);\n    };\n\n    G.lagrangeEvaluations = async function (buff, inType, outType, logger, loggerTxt) {\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n\n        let sIn;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n            } else {\n                sIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n            } else {\n                sIn = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = Fr.n8;\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = buff.byteLength /sIn;\n        const bits = log2(nPoints);\n\n        if ((2 ** bits)*sIn != buff.byteLength) {\n            if (logger) logger.error(\"lagrangeEvaluations iinvalid input size\");\n            throw new Error(\"lagrangeEvaluations invalid Input size\");\n        }\n\n        if (bits <= Fr.s) {\n            return await G.ifft(buff, inType, outType, logger, loggerTxt);\n        }\n\n        if (bits > Fr.s+1) {\n            if (logger) logger.error(\"lagrangeEvaluations input too big\");\n            throw new Error(\"lagrangeEvaluations input too big\");\n        }\n\n        let t0 = buff.slice(0, buff.byteLength/2);\n        let t1 = buff.slice(buff.byteLength/2, buff.byteLength);\n\n\n        const shiftToSmallM = Fr.exp(Fr.shift, nPoints/2);\n        const sConst = Fr.inv( Fr.sub(Fr.one, shiftToSmallM));\n\n        [t0, t1] = await _fftJoinExt(t0, t1, \"prepareLagrangeEvaluation\", sConst, Fr.shiftInv, inType, \"jacobian\", logger, loggerTxt + \" prep\");\n\n        const promises = [];\n\n        promises.push( _fft(t0, true, \"jacobian\", outType, logger, loggerTxt + \" t0\"));\n        promises.push( _fft(t1, true, \"jacobian\", outType, logger, loggerTxt + \" t1\"));\n\n        [t0, t1] = await Promise.all(promises);\n\n        let buffOut;\n        if (t0.byteLength > (1<<28)) {\n            buffOut = new BigBuffer(t0.byteLength*2);\n        } else {\n            buffOut = new Uint8Array(t0.byteLength*2);\n        }\n\n        buffOut.set(t0);\n        buffOut.set(t1, t0.byteLength);\n\n        return buffOut;\n    };\n\n    G.fftMix = async function fftMix(buff) {\n        const sG = G.F.n8*3;\n        let fnName, fnFFTJoin;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftMix\";\n            fnFFTJoin = \"g1m_fftJoin\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftMix\";\n            fnFFTJoin = \"g2m_fftJoin\";\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_fftMix\";\n            fnFFTJoin = \"frm_fftJoin\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buff.byteLength / sG);\n        const power = log2(nPoints);\n\n        let nChunks = 1 << log2(tm.concurrency);\n\n        if (nPoints <= nChunks*2) nChunks = 1;\n\n        const pointsPerChunk = nPoints / nChunks;\n\n        const powerChunk = log2(pointsPerChunk);\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [];\n            const b = buff.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b});\n            for (let j=1; j<=powerChunk; j++) {\n                task.push({cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {val: pointsPerChunk},\n                    {val: j}\n                ]});\n            }\n            task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        const chunks = [];\n        for (let i=0; i<result.length; i++) chunks[i] = result[i][0];\n\n\n        for (let i = powerChunk+1; i<=power; i++) {\n            const nGroups = 1 << (power - i);\n            const nChunksPerGroup = nChunks / nGroups;\n            const opPromises = [];\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const first = Fr.exp( Fr.w[i], k*pointsPerChunk);\n                    const inc = Fr.w[i];\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n\n                    const task = [];\n                    task.push({cmd: \"ALLOCSET\", var: 0, buff: chunks[o1]});\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: chunks[o2]});\n                    task.push({cmd: \"ALLOCSET\", var: 2, buff: first});\n                    task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n                    task.push({cmd: \"CALL\", fnName: fnFFTJoin,  params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: pointsPerChunk},\n                        {var: 2},\n                        {var: 3}\n                    ]});\n                    task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n                    task.push({cmd: \"GET\", out: 1, var: 1, len: pointsPerChunk*sG});\n                    opPromises.push(tm.queueAction(task));\n                }\n            }\n\n            const res = await Promise.all(opPromises);\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n                    const resChunk = res.shift();\n                    chunks[o1] = resChunk[0];\n                    chunks[o2] = resChunk[1];\n                }\n            }\n        }\n\n        let fullBuffOut;\n        if (buff instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sG);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sG);\n        }\n        let p =0;\n        for (let i=0; i<nChunks; i++) {\n            fullBuffOut.set(chunks[i], p);\n            p+=chunks[i].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n\n    G.fftJoin = async function fftJoin(buff1, buff2, first, inc) {\n        const sG = G.F.n8*3;\n        let fnName;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftJoin\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftJoin\";\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_fftJoin\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        if (buff1.byteLength != buff2.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const nPoints = Math.floor(buff1.byteLength / sG);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        let nChunks = 1 << log2(tm.concurrency);\n        if (nPoints <= nChunks*2) nChunks = 1;\n\n        const pointsPerChunk = nPoints / nChunks;\n\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [];\n\n            const firstChunk = Fr.mul(first, Fr.exp(inc, i*pointsPerChunk));\n            const b1 = buff1.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            const b2 = buff2.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b1});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: b2});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: firstChunk});\n            task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {var: 1},\n                {val: pointsPerChunk},\n                {var: 2},\n                {var: 3}\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n            task.push({cmd: \"GET\", out: 1, var: 1, len: pointsPerChunk*sG});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut1;\n        let fullBuffOut2;\n        if (buff1 instanceof BigBuffer) {\n            fullBuffOut1 = new BigBuffer(nPoints*sG);\n            fullBuffOut2 = new BigBuffer(nPoints*sG);\n        } else {\n            fullBuffOut1 = new Uint8Array(nPoints*sG);\n            fullBuffOut2 = new Uint8Array(nPoints*sG);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut1.set(result[i][0], p);\n            fullBuffOut2.set(result[i][1], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return [fullBuffOut1, fullBuffOut2];\n    };\n\n\n\n    G.fftFinal =  async function fftFinal(buff, factor) {\n        const sG = G.F.n8*3;\n        const sGout = G.F.n8*2;\n        let fnName, fnToAffine;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftFinal\";\n            fnToAffine = \"g1m_batchToAffine\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftFinal\";\n            fnToAffine = \"g2m_batchToAffine\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buff.byteLength / sG);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        const pointsPerChunk = Math.floor(nPoints / tm.concurrency);\n\n        const opPromises = [];\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n            const task = [];\n            const b = buff.slice((i* pointsPerChunk)*sG, (i*pointsPerChunk+n)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: factor});\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {val: n},\n                {var: 1},\n            ]});\n            task.push({cmd: \"CALL\", fnName: fnToAffine, params: [\n                {var: 0},\n                {val: n},\n                {var: 0},\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 0, len: n*sGout});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buff instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sGout);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sGout);\n        }\n\n        let p =0;\n        for (let i=result.length-1; i>=0; i--) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n}\n", "import { buildBls12381 as buildBls12381wasm } from \"wasmcurves\";\nimport buildEngine from \"./engine.js\";\nimport * as Scalar from \"./scalar.js\";\nimport { ModuleBuilder } from \"wasmbuilder\";\n\nglobalThis.curve_bls12381 = null;\n\nexport default async function buildBls12381(singleThread, plugins) {\n\n    const moduleBuilder = new ModuleBuilder();\n    moduleBuilder.setMemory(25);\n    buildBls12381wasm(moduleBuilder);\n\n    if (plugins) plugins(moduleBuilder);\n\n    const bls12381wasm = {};\n\n    bls12381wasm.code = moduleBuilder.build();\n    bls12381wasm.pq = moduleBuilder.modules.f1m.pq;\n    bls12381wasm.pr = moduleBuilder.modules.frm.pq;\n    bls12381wasm.pG1gen = moduleBuilder.modules.bls12381.pG1gen;\n    bls12381wasm.pG1zero = moduleBuilder.modules.bls12381.pG1zero;\n    bls12381wasm.pG1b = moduleBuilder.modules.bls12381.pG1b;\n    bls12381wasm.pG2gen = moduleBuilder.modules.bls12381.pG2gen;\n    bls12381wasm.pG2zero = moduleBuilder.modules.bls12381.pG2zero;\n    bls12381wasm.pG2b = moduleBuilder.modules.bls12381.pG2b;\n    bls12381wasm.pOneT = moduleBuilder.modules.bls12381.pOneT;\n    bls12381wasm.prePSize = moduleBuilder.modules.bls12381.prePSize;\n    bls12381wasm.preQSize = moduleBuilder.modules.bls12381.preQSize;\n    bls12381wasm.n8q = 48;\n    bls12381wasm.n8r = 32;\n    bls12381wasm.q = moduleBuilder.modules.bls12381.q;\n    bls12381wasm.r = moduleBuilder.modules.bls12381.r;\n\n\n    if ((!singleThread) && (globalThis.curve_bls12381)) return globalThis.curve_bls12381;\n    const params = {\n        name: \"bls12381\",\n        wasm: bls12381wasm,\n        q: Scalar.e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16),\n        r: Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16),\n        n8q: 48,\n        n8r: 32,\n        cofactorG1: Scalar.e(\"0x396c8c005555e1568c00aaab0000aaab\", 16),\n        cofactorG2: Scalar.e(\"0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5\", 16),\n        singleThread: singleThread ? true : false\n    };\n\n    const curve = await buildEngine(params);\n    curve.terminate = async function () {\n        if (!params.singleThread) {\n            globalThis.curve_bls12381 = null;\n            await this.tm.terminate();\n        }\n    };\n\n    if (!singleThread) {\n        globalThis.curve_bls12381 = curve;\n    }\n\n    return curve;\n}\n\n", "import * as Scalar from \"./scalar.js\";\nimport {default as buildBn128} from \"./bn128.js\";\nimport {default as buildBls12381} from \"./bls12381.js\";\n\nconst bls12381r = Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16);\nconst bn128r = Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\");\n\nconst bls12381q = Scalar.e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16);\nconst bn128q = Scalar.e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\");\n\nexport async function getCurveFromR(r, singleThread, plugins) {\n    let curve;\n    if (Scalar.eq(r, bn128r)) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if (Scalar.eq(r, bls12381r)) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(r)}`);\n    }\n    return curve;\n}\n\nexport async function getCurveFromQ(q, singleThread, plugins) {\n    let curve;\n    if (Scalar.eq(q, bn128q)) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if (Scalar.eq(q, bls12381q)) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(q, 16)}`);\n    }\n    return curve;\n}\n\nexport async function getCurveFromName(name, singleThread, plugins) {\n    let curve;\n    const normName = normalizeName(name);\n    if ([\"BN128\", \"BN254\", \"ALTBN128\"].indexOf(normName) >= 0) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if ([\"BLS12381\"].indexOf(normName) >= 0) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${name}`);\n    }\n    return curve;\n\n    function normalizeName(n) {\n        return n.toUpperCase().match(/[A-Za-z0-9]+/g).join(\"\");\n    }\n\n}\n", "import { Scalar, buildBn128, buildBls12381} from \"ffjavascript\";\n\nconst bls12381r = Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16);\nconst bn128r = Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\");\n\nconst bls12381q = Scalar.e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16);\nconst bn128q = Scalar.e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\");\n\nexport async function getCurveFromR(r) {\n    let curve;\n    if (Scalar.eq(r, bn128r)) {\n        curve = await buildBn128();\n    } else if (Scalar.eq(r, bls12381r)) {\n        curve = await buildBls12381();\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(r)}`);\n    }\n    return curve;\n}\n\nexport async function getCurveFromQ(q) {\n    let curve;\n    if (Scalar.eq(q, bn128q)) {\n        curve = await buildBn128();\n    } else if (Scalar.eq(q, bls12381q)) {\n        curve = await buildBls12381();\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(q)}`);\n    }\n    return curve;\n}\n\nexport async function getCurveFromName(name) {\n    let curve;\n    const normName = normalizeName(name);\n    if ([\"BN128\", \"BN254\", \"ALTBN128\"].indexOf(normName) >= 0) {\n        curve = await buildBn128();\n    } else if ([\"BLS12381\"].indexOf(normName) >= 0) {\n        curve = await buildBls12381();\n    } else {\n        throw new Error(`Curve not supported: ${name}`);\n    }\n    return curve;\n\n    function normalizeName(n) {\n        return n.toUpperCase().match(/[A-Za-z0-9]+/g).join(\"\");\n    }\n\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/* global window */\nimport Blake2b from \"blake2b-wasm\";\nimport readline from \"readline\";\nimport { ChaCha } from \"ffjavascript\";\nimport crypto from \"crypto\";\n\nconst _revTable = [];\nfor (let i=0; i<256; i++) {\n    _revTable[i] = _revSlow(i, 8);\n}\n\nfunction _revSlow(idx, bits) {\n    let res =0;\n    let a = idx;\n    for (let i=0; i<bits; i++) {\n        res <<= 1;\n        res = res | (a &1);\n        a >>=1;\n    }\n    return res;\n}\n\nexport function bitReverse(idx, bits) {\n    return (\n        _revTable[idx >>> 24] |\n        (_revTable[(idx >>> 16) & 0xFF] << 8) |\n        (_revTable[(idx >>> 8) & 0xFF] << 16) |\n        (_revTable[idx & 0xFF] << 24)\n    ) >>> (32-bits);\n}\n\n\nexport function log2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nexport function formatHash(b, title) {\n    const a = new DataView(b.buffer, b.byteOffset, b.byteLength);\n    let S = \"\";\n    for (let i=0; i<4; i++) {\n        if (i>0) S += \"\\n\";\n        S += \"\\t\\t\";\n        for (let j=0; j<4; j++) {\n            if (j>0) S += \" \";\n            S += a.getUint32(i*16+j*4).toString(16).padStart(8, \"0\");\n        }\n    }\n    if (title) S = title + \"\\n\" + S;\n    return S;\n}\n\nexport function hashIsEqual(h1, h2) {\n    if (h1.byteLength != h2.byteLength) return false;\n    var dv1 = new Int8Array(h1);\n    var dv2 = new Int8Array(h2);\n    for (var i = 0 ; i != h1.byteLength ; i++)\n    {\n        if (dv1[i] != dv2[i]) return false;\n    }\n    return true;\n}\n\nexport function cloneHasher(h) {\n    const ph = h.getPartialHash();\n    const res = Blake2b(64);\n    res.setPartialHash(ph);\n    return res;\n}\n\nexport async function sameRatio(curve, g1s, g1sx, g2s, g2sx) {\n    if (curve.G1.isZero(g1s)) return false;\n    if (curve.G1.isZero(g1sx)) return false;\n    if (curve.G2.isZero(g2s)) return false;\n    if (curve.G2.isZero(g2sx)) return false;\n    // return curve.F12.eq(curve.pairing(g1s, g2sx), curve.pairing(g1sx, g2s));\n    const res = await curve.pairingEq(g1s, g2sx, curve.G1.neg(g1sx), g2s);\n    return res;\n}\n\n\nexport function askEntropy() {\n    if (process.browser) {\n        return window.prompt(\"Enter a random text. (Entropy): \", \"\");\n    } else {\n        const rl = readline.createInterface({\n            input: process.stdin,\n            output: process.stdout\n        });\n\n        return new Promise((resolve) => {\n            rl.question(\"Enter a random text. (Entropy): \", (input) => resolve(input) );\n        });\n    }\n}\n\nexport async function getRandomRng(entropy) {\n    // Generate a random Rng\n    while (!entropy) {\n        entropy = await askEntropy();\n    }\n    const hasher = Blake2b(64);\n    hasher.update(crypto.randomBytes(64));\n    const enc = new TextEncoder(); // always utf-8\n    hasher.update(enc.encode(entropy));\n    const hash = Buffer.from(hasher.digest());\n\n    const seed = [];\n    for (let i=0;i<8;i++) {\n        seed[i] = hash.readUInt32BE(i*4);\n    }\n    const rng = new ChaCha(seed);\n    return rng;\n}\n\nexport function rngFromBeaconParams(beaconHash, numIterationsExp) {\n    let nIterationsInner;\n    let nIterationsOuter;\n    if (numIterationsExp<32) {\n        nIterationsInner = (1 << numIterationsExp) >>> 0;\n        nIterationsOuter = 1;\n    } else {\n        nIterationsInner = 0x100000000;\n        nIterationsOuter = (1 << (numIterationsExp-32)) >>> 0;\n    }\n\n    let curHash = beaconHash;\n    for (let i=0; i<nIterationsOuter; i++) {\n        for (let j=0; j<nIterationsInner; j++) {\n            curHash = crypto.createHash(\"sha256\").update(curHash).digest();\n        }\n    }\n\n    const curHashV = new DataView(curHash.buffer, curHash.byteOffset, curHash.byteLength);\n    const seed = [];\n    for (let i=0; i<8; i++) {\n        seed[i] = curHashV.getUint32(i*4, false);\n    }\n\n    const rng = new ChaCha(seed);\n\n    return rng;\n}\n\nexport function hex2ByteArray(s) {\n    if (s instanceof Uint8Array) return s;\n    if (s.slice(0,2) == \"0x\") s= s.slice(2);\n    return new Uint8Array(s.match(/[\\da-f]{2}/gi).map(function (h) {\n        return parseInt(h, 16);\n    }));\n}\n\nexport function byteArray2hex(byteArray) {\n    return Array.prototype.map.call(byteArray, function(byte) {\n        return (\"0\" + (byte & 0xFF).toString(16)).slice(-2);\n    }).join(\"\");\n}\n\nexport function stringifyBigIntsWithField(Fr, o) {\n    if (o instanceof Uint8Array)  {\n        return Fr.toString(o);\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyBigIntsWithField.bind(null, Fr));\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach( (k) => {\n            res[k] = stringifyBigIntsWithField(Fr, o[k]);\n        });\n        return res;\n    } else if ((typeof(o) == \"bigint\") || o.eq !== undefined)  {\n        return o.toString(10);\n    } else {\n        return o;\n    }\n}", "export default {};\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { Scalar } from \"ffjavascript\";\n\nimport * as binFileUtils from \"@iden3/binfileutils\";\n\n\nexport async function write(fd, witness, prime) {\n\n    await binFileUtils.startWriteSection(fd, 1);\n    const n8 = (Math.floor( (Scalar.bitLength(prime) - 1) / 64) +1)*8;\n    await fd.writeULE32(n8);\n    await binFileUtils.writeBigInt(fd, prime, n8);\n    await fd.writeULE32(witness.length);\n    await binFileUtils.endWriteSection(fd);\n\n    await binFileUtils.startWriteSection(fd, 2);\n    for (let i=0; i<witness.length; i++) {\n        await binFileUtils.writeBigInt(fd, witness[i], n8);\n    }\n    await binFileUtils.endWriteSection(fd, 2);\n\n\n}\n\nexport async function writeBin(fd, witnessBin, prime) {\n\n    await binFileUtils.startWriteSection(fd, 1);\n    const n8 = (Math.floor( (Scalar.bitLength(prime) - 1) / 64) +1)*8;\n    await fd.writeULE32(n8);\n    await binFileUtils.writeBigInt(fd, prime, n8);\n    if (witnessBin.byteLength % n8 != 0) {\n        throw new Error(\"Invalid witness length\");\n    }\n    await fd.writeULE32(witnessBin.byteLength / n8);\n    await binFileUtils.endWriteSection(fd);\n\n\n    await binFileUtils.startWriteSection(fd, 2);\n    await fd.write(witnessBin);\n    await binFileUtils.endWriteSection(fd);\n\n}\n\nexport async function readHeader(fd, sections) {\n\n    await binFileUtils.startReadUniqueSection(fd, sections, 1);\n    const n8 = await fd.readULE32();\n    const q = await binFileUtils.readBigInt(fd, n8);\n    const nWitness = await fd.readULE32();\n    await binFileUtils.endReadSection(fd);\n\n    return {n8, q, nWitness};\n\n}\n\nexport async function read(fileName) {\n\n    const {fd, sections} = await binFileUtils.readBinFile(fileName, \"wtns\", 2);\n\n    const {n8, nWitness} = await readHeader(fd, sections);\n\n    await binFileUtils.startReadUniqueSection(fd, sections, 2);\n    const res = [];\n    for (let i=0; i<nWitness; i++) {\n        const v = await binFileUtils.readBigInt(fd, n8);\n        res.push(v);\n    }\n    await binFileUtils.endReadSection(fd);\n\n    await fd.close();\n\n    return res;\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fastFile from \"fastfile\";\nimport { WitnessCalculatorBuilder } from \"circom_runtime\";\nimport * as wtnsUtils from \"./wtns_utils.js\";\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport {  utils }   from \"ffjavascript\";\nconst { unstringifyBigInts} = utils;\n\nexport default async function wtnsCalculate(_input, wasmFileName, wtnsFileName, options) {\n    const input = unstringifyBigInts(_input);\n\n    const fdWasm = await fastFile.readExisting(wasmFileName);\n    const wasm = await fdWasm.read(fdWasm.totalSize);\n    await fdWasm.close();\n\n    const wc = await WitnessCalculatorBuilder(wasm);\n    if (wc.circom_version() == 1) {\n        const w = await wc.calculateBinWitness(input);\n\n        const fdWtns = await binFileUtils.createBinFile(wtnsFileName, \"wtns\", 2, 2);\n\n        await wtnsUtils.writeBin(fdWtns, w, wc.prime);\n        await fdWtns.close();\n    } else {\n        const fdWtns = await fastFile.createOverride(wtnsFileName);\n\n        const w = await wc.calculateWTNSBin(input);\n\n        await fdWtns.write(w);\n        await fdWtns.close();\n    }\n}\n", "export { default as WitnessCalculatorBuilder } from \"./js/witness_calculator.js\";\n", "/* globals WebAssembly */\n/*\n\nCopyright 2020 0KIMS association.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nimport { flatArray, fnvHash, toArray32 } from \"./utils.js\";\nimport { Scalar, F1Field } from \"ffjavascript\";\n\nexport default async function builder(code, options) {\n\n    options = options || {};\n\n    let memorySize = 32767;\n    let memory;\n    let memoryAllocated = false;\n    while (!memoryAllocated){\n        try{\n            memory = new WebAssembly.Memory({initial:memorySize});\n            memoryAllocated = true;\n        } catch(err){\n            if(memorySize === 1){\n                throw err;\n            }\n            console.warn(\"Could not allocate \" + memorySize * 1024 * 64 + \" bytes. This may cause severe instability. Trying with \" + memorySize * 1024 * 64 / 2 + \" bytes\");\n            memorySize = Math.floor(memorySize/2);\n        }\n    }\n\n    const wasmModule = await WebAssembly.compile(code);\n\n    let wc;\n\n    let errStr = \"\";\n    let msgStr = \"\";\n\n    // Only circom 2 implements version lookup through exports in the WASM\n    // We default to `1` and update if we see the `getVersion` export (major version)\n    // These are updated after the instance is instantiated, assuming the functions are available\n    let majorVersion = 1;\n    // After Circom 2.0.7, Blaine added exported functions for getting minor and patch versions\n    let minorVersion = 0;\n    // If we can't lookup the patch version, assume the lowest\n    let patchVersion = 0;\n\n    const instance = await WebAssembly.instantiate(wasmModule, {\n        env: {\n            \"memory\": memory\n        },\n        runtime: {\n            exceptionHandler: function(code) {\n                let err;\n                if (code == 1) {\n                    err = \"Signal not found. \";\n                } else if (code == 2) {\n                    err = \"Too many signals set. \";\n                } else if (code == 3) {\n                    err = \"Signal already set. \";\n                } else if (code == 4) {\n                    err = \"Assert Failed. \";\n                } else if (code == 5) {\n                    err = \"Not enough memory. \";\n                } else if (code == 6) {\n                    err = \"Input signal array access exceeds the size. \";\n                } else {\n                    err = \"Unknown error. \";\n                }\n                console.error(\"ERROR: \", code, errStr);\n                throw new Error(err + errStr);\n            },\n            // A new way of logging messages was added in Circom 2.0.7 that requires 2 new imports\n            // `printErrorMessage` and `writeBufferMessage`.\n            printErrorMessage: function() {\n                errStr += getMessage() + \"\\n\";\n            },\n            writeBufferMessage: function() {\n                const msg = getMessage();\n                // Any calls to `log()` will always end with a `\\n`, so that's when we print and reset\n                if (msg === \"\\n\") {\n                    console.log(msgStr);\n                    msgStr = \"\";\n                } else {\n                    // If we've buffered other content, put a space in between the items\n                    if (msgStr !== \"\") {\n                        msgStr += \" \"\n                    }\n                    // Then append the message to the message we are creating\n                    msgStr += msg;\n                }\n            },\n            showSharedRWMemory: function() {\n                const shared_rw_memory_size = instance.exports.getFieldNumLen32();\n                const arr = new Uint32Array(shared_rw_memory_size);\n                for (let j=0; j<shared_rw_memory_size; j++) {\n                    arr[shared_rw_memory_size-1-j] = instance.exports.readSharedRWMemory(j);\n                }\n\n                // In circom 2.0.7, they changed the log() function to allow strings and changed the\n                // output API. This smoothes over the breaking change.\n                if (majorVersion >= 2 && (minorVersion >= 1 || patchVersion >= 7)) {\n                    // If we've buffered other content, put a space in between the items\n                    if (msgStr !== \"\") {\n                        msgStr += \" \"\n                    }\n                    // Then append the value to the message we are creating\n                    const msg = (Scalar.fromArray(arr, 0x100000000).toString());\n                    msgStr += msg;\n                } else {\n                    console.log(Scalar.fromArray(arr, 0x100000000));\n                }\n            },\n            error: function(code, pstr, a,b,c,d) {\n                let errStr;\n                if (code == 7) {\n                    errStr=p2str(pstr) + \" \" + wc.getFr(b).toString() + \" != \" + wc.getFr(c).toString() + \" \" +p2str(d);\n                } else if (code == 9) {\n                    errStr=p2str(pstr) + \" \" + wc.getFr(b).toString() + \" \" +p2str(c);\n                } else if ((code == 5)&&(options.sym)) {\n                    errStr=p2str(pstr)+ \" \" + options.sym.labelIdx2Name[c];\n                } else {\n                    errStr=p2str(pstr)+ \" \" + a + \" \" + b + \" \" + c + \" \" + d;\n                }\n                console.log(\"ERROR: \", code, errStr);\n                throw new Error(errStr);\n            },\n            log: function(a) {\n                console.log(wc.getFr(a).toString());\n            },\n            logGetSignal: function(signal, pVal) {\n                if (options.logGetSignal) {\n                    options.logGetSignal(signal, wc.getFr(pVal) );\n                }\n            },\n            logSetSignal: function(signal, pVal) {\n                if (options.logSetSignal) {\n                    options.logSetSignal(signal, wc.getFr(pVal) );\n                }\n            },\n            logStartComponent: function(cIdx) {\n                if (options.logStartComponent) {\n                    options.logStartComponent(cIdx);\n                }\n            },\n            logFinishComponent: function(cIdx) {\n                if (options.logFinishComponent) {\n                    options.logFinishComponent(cIdx);\n                }\n            }\n        }\n    });\n\n    if (typeof instance.exports.getVersion == 'function') {\n        majorVersion = instance.exports.getVersion();\n    }\n    if (typeof instance.exports.getMinorVersion == 'function') {\n        minorVersion = instance.exports.getMinorVersion();\n    }\n    if (typeof instance.exports.getPatchVersion == 'function') {\n        patchVersion = instance.exports.getPatchVersion();\n    }\n\n    const sanityCheck =\n        options &&\n        (\n            options.sanityCheck ||\n            options.logGetSignal ||\n            options.logSetSignal ||\n            options.logStartComponent ||\n            options.logFinishComponent\n        );\n\n    // We explicitly check for major version 2 in case there's a circom v3 in the future\n    if (majorVersion === 2) {\n        wc = new WitnessCalculatorCircom2(instance, sanityCheck);\n    } else {\n        // TODO: Maybe we want to check for the explicit version 1 before choosing this?\n        wc = new WitnessCalculatorCircom1(memory, instance, sanityCheck);\n    }\n    return wc;\n\n    function getMessage() {\n        var message = \"\";\n        var c = instance.exports.getMessageChar();\n        while ( c != 0 ) {\n            message += String.fromCharCode(c);\n            c = instance.exports.getMessageChar();\n        }\n        return message;\n    }\n\n    function p2str(p) {\n        const i8 = new Uint8Array(memory.buffer);\n\n        const bytes = [];\n\n        for (let i=0; i8[p+i]>0; i++)  bytes.push(i8[p+i]);\n\n        return String.fromCharCode.apply(null, bytes);\n    }\n};\n\nclass WitnessCalculatorCircom1 {\n    constructor(memory, instance, sanityCheck) {\n        this.memory = memory;\n        this.i32 = new Uint32Array(memory.buffer);\n        this.instance = instance;\n\n        this.n32 = (this.instance.exports.getFrLen() >> 2) - 2;\n        const pRawPrime = this.instance.exports.getPRawPrime();\n\n        const arr = new Array(this.n32);\n        for (let i=0; i<this.n32; i++) {\n            arr[this.n32-1-i] = this.i32[(pRawPrime >> 2) + i];\n        }\n\n        this.prime = Scalar.fromArray(arr, 0x100000000);\n\n        this.Fr = new F1Field(this.prime);\n\n        this.mask32 = Scalar.fromString(\"FFFFFFFF\", 16);\n        this.NVars = this.instance.exports.getNVars();\n        this.n64 = Math.floor((this.Fr.bitLength - 1) / 64)+1;\n        this.R = this.Fr.e( Scalar.shiftLeft(1 , this.n64*64));\n        this.RInv = this.Fr.inv(this.R);\n        this.sanityCheck = sanityCheck;\n    }\n\n    circom_version() {\n        return 1;\n    }\n\n    async _doCalculateWitness(input, sanityCheck) {\n        this.instance.exports.init((this.sanityCheck || sanityCheck) ? 1 : 0);\n        const pSigOffset = this.allocInt();\n        const pFr = this.allocFr();\n        const keys = Object.keys(input);\n        keys.forEach( (k) => {\n            const h = fnvHash(k);\n            const hMSB = parseInt(h.slice(0,8), 16);\n            const hLSB = parseInt(h.slice(8,16), 16);\n            try {\n                this.instance.exports.getSignalOffset32(pSigOffset, 0, hMSB, hLSB);\n            } catch (err) {\n                throw new Error(`Signal ${k} is not an input of the circuit.`);\n            }\n            const sigOffset = this.getInt(pSigOffset);\n            const fArr = flatArray(input[k]);\n            for (let i=0; i<fArr.length; i++) {\n                this.setFr(pFr, fArr[i]);\n                this.instance.exports.setSignal(0, 0, sigOffset + i, pFr);\n            }\n        });\n    }\n\n    async calculateWitness(input, sanityCheck) {\n        const self = this;\n\n        const old0 = self.i32[0];\n        const w = [];\n\n        await self._doCalculateWitness(input, sanityCheck);\n\n        for (let i=0; i<self.NVars; i++) {\n            const pWitness = self.instance.exports.getPWitness(i);\n            w.push(self.getFr(pWitness));\n        }\n\n        self.i32[0] = old0;\n        return w;\n    }\n\n    async calculateBinWitness(input, sanityCheck) {\n        const self = this;\n\n        const old0 = self.i32[0];\n\n        await self._doCalculateWitness(input, sanityCheck);\n\n        const pWitnessBuffer = self.instance.exports.getWitnessBuffer();\n\n        self.i32[0] = old0;\n\n        const buff = self.memory.buffer.slice(pWitnessBuffer, pWitnessBuffer + (self.NVars * self.n64 * 8));\n        return new Uint8Array(buff);\n    }\n\n    allocInt() {\n        const p = this.i32[0];\n        this.i32[0] = p+8;\n        return p;\n    }\n\n    allocFr() {\n        const p = this.i32[0];\n        this.i32[0] = p+this.n32*4 + 8;\n        return p;\n    }\n\n    getInt(p) {\n        return this.i32[p>>2];\n    }\n\n    setInt(p, v) {\n        this.i32[p>>2] = v;\n    }\n\n    getFr(p) {\n        const self = this;\n        const idx = (p>>2);\n\n        if (self.i32[idx + 1] & 0x80000000) {\n            const arr = new Array(self.n32);\n            for (let i=0; i<self.n32; i++) {\n                arr[self.n32-1-i] = self.i32[idx+2+i];\n            }\n            const res = self.Fr.e(Scalar.fromArray(arr, 0x100000000));\n            if (self.i32[idx + 1] & 0x40000000) {\n                return fromMontgomery(res);\n            } else {\n                return res;\n            }\n\n        } else {\n            if (self.i32[idx] & 0x80000000) {\n                return self.Fr.e( self.i32[idx] - 0x100000000);\n            } else {\n                return self.Fr.e(self.i32[idx]);\n            }\n        }\n\n        function fromMontgomery(n) {\n            return self.Fr.mul(self.RInv, n);\n        }\n\n    }\n\n\n    setFr(p, v) {\n        const self = this;\n\n        v = self.Fr.e(v);\n\n        const minShort = self.Fr.neg(self.Fr.e(\"80000000\", 16));\n        const maxShort = self.Fr.e(\"7FFFFFFF\", 16);\n\n        if (  (self.Fr.geq(v, minShort))\n            &&(self.Fr.leq(v, maxShort)))\n        {\n            let a;\n            if (self.Fr.geq(v, self.Fr.zero)) {\n                a = Scalar.toNumber(v);\n            } else {\n                a = Scalar.toNumber( self.Fr.sub(v, minShort));\n                a = a - 0x80000000;\n                a = 0x100000000 + a;\n            }\n            self.i32[(p >> 2)] = a;\n            self.i32[(p >> 2) + 1] = 0;\n            return;\n        }\n\n        self.i32[(p >> 2)] = 0;\n        self.i32[(p >> 2) + 1] = 0x80000000;\n        const arr = Scalar.toArray(v, 0x100000000);\n        for (let i=0; i<self.n32; i++) {\n            const idx = arr.length-1-i;\n\n            if ( idx >=0) {\n                self.i32[(p >> 2) + 2 + i] = arr[idx];\n            } else {\n                self.i32[(p >> 2) + 2 + i] = 0;\n            }\n        }\n    }\n}\n\nclass WitnessCalculatorCircom2 {\n    constructor(instance, sanityCheck) {\n        this.instance = instance;\n\n        this.version = this.instance.exports.getVersion();\n        this.n32 = this.instance.exports.getFieldNumLen32();\n\n        this.instance.exports.getRawPrime();\n        const arr = new Array(this.n32);\n        for (let i=0; i<this.n32; i++) {\n            arr[this.n32-1-i] = this.instance.exports.readSharedRWMemory(i);\n        }\n        this.prime = Scalar.fromArray(arr, 0x100000000);\n\n        this.witnessSize = this.instance.exports.getWitnessSize();\n\n        this.sanityCheck = sanityCheck;\n    }\n\n    circom_version() {\n        return this.instance.exports.getVersion();\n    }\n\n    async _doCalculateWitness(input, sanityCheck) {\n        //input is assumed to be a map from signals to arrays of bigints\n        this.instance.exports.init((this.sanityCheck || sanityCheck) ? 1 : 0);\n        const keys = Object.keys(input);\n        var input_counter = 0;\n        keys.forEach( (k) => {\n            const h = fnvHash(k);\n            const hMSB = parseInt(h.slice(0,8), 16);\n            const hLSB = parseInt(h.slice(8,16), 16);\n            const fArr = flatArray(input[k]);\n            for (let i=0; i<fArr.length; i++) {\n        const arrFr = toArray32(fArr[i],this.n32)\n        for (let j=0; j<this.n32; j++) {\n            this.instance.exports.writeSharedRWMemory(j,arrFr[this.n32-1-j]);\n        }\n        try {\n                    this.instance.exports.setInputSignal(hMSB, hLSB,i);\n            input_counter++;\n        } catch (err) {\n            // console.log(`After adding signal ${i} of ${k}`)\n                    throw new Error(err);\n        }\n            }\n\n        });\n        if (input_counter < this.instance.exports.getInputSize()) {\n            throw new Error(`Not all inputs have been set. Only ${input_counter} out of ${this.instance.exports.getInputSize()}`);\n        }\n    }\n\n    async calculateWitness(input, sanityCheck) {\n        const w = [];\n\n        await this._doCalculateWitness(input, sanityCheck);\n\n        for (let i=0; i<this.witnessSize; i++) {\n            this.instance.exports.getWitness(i);\n        const arr = new Uint32Array(this.n32);\n            for (let j=0; j<this.n32; j++) {\n            arr[this.n32-1-j] = this.instance.exports.readSharedRWMemory(j);\n            }\n            w.push(Scalar.fromArray(arr, 0x100000000));\n        }\n\n        return w;\n    }\n\n    async calculateWTNSBin(input, sanityCheck) {\n        const buff32 = new Uint32Array(this.witnessSize*this.n32+this.n32+11);\n        const buff = new  Uint8Array( buff32.buffer);\n        await this._doCalculateWitness(input, sanityCheck);\n\n        //\"wtns\"\n        buff[0] = \"w\".charCodeAt(0)\n        buff[1] = \"t\".charCodeAt(0)\n        buff[2] = \"n\".charCodeAt(0)\n        buff[3] = \"s\".charCodeAt(0)\n\n        //version 2\n        buff32[1] = 2;\n\n        //number of sections: 2\n        buff32[2] = 2;\n\n        //id section 1\n        buff32[3] = 1;\n\n        const n8 = this.n32*4;\n        //id section 1 length in 64bytes\n        const idSection1length = 8 + n8;\n        const idSection1lengthHex = idSection1length.toString(16);\n            buff32[4] = parseInt(idSection1lengthHex.slice(0,8), 16);\n            buff32[5] = parseInt(idSection1lengthHex.slice(8,16), 16);\n\n        //this.n32\n        buff32[6] = n8;\n\n        //prime number\n        this.instance.exports.getRawPrime();\n\n        var pos = 7;\n        for (let j=0; j<this.n32; j++) {\n            buff32[pos+j] = this.instance.exports.readSharedRWMemory(j);\n        }\n        pos += this.n32;\n\n        // witness size\n        buff32[pos] = this.witnessSize;\n        pos++;\n\n        //id section 2\n        buff32[pos] = 2;\n        pos++;\n\n        // section 2 length\n        const idSection2length = n8*this.witnessSize;\n        const idSection2lengthHex = idSection2length.toString(16);\n        buff32[pos] = parseInt(idSection2lengthHex.slice(0,8), 16);\n        buff32[pos+1] = parseInt(idSection2lengthHex.slice(8,16), 16);\n\n        pos += 2;\n        for (let i=0; i<this.witnessSize; i++) {\n            this.instance.exports.getWitness(i);\n            for (let j=0; j<this.n32; j++) {\n                buff32[pos+j] = this.instance.exports.readSharedRWMemory(j);\n            }\n            pos += this.n32;\n        }\n\n        return buff;\n    }\n\n}\n", "/*\n\nCopyright 2020 0KIMS association.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n*/\n\nexport function flatArray(a) {\n    var res = [];\n    fillArray(res, a);\n    return res;\n\n    function fillArray(res, a) {\n        if (Array.isArray(a)) {\n            for (let i=0; i<a.length; i++) {\n                fillArray(res, a[i]);\n            }\n        } else {\n            res.push(a);\n        }\n    }\n}\n\nexport function fnvHash(str) {\n    const uint64_max = BigInt(2) ** BigInt(64);\n    let hash = BigInt(\"0xCBF29CE484222325\");\n    for (var i = 0; i < str.length; i++) {\n    hash ^= BigInt(str[i].charCodeAt());\n    hash *= BigInt(0x100000001B3);\n    hash %= uint64_max;\n    }\n    let shash = hash.toString(16);\n    let n = 16 - shash.length;\n    shash = '0'.repeat(n).concat(shash);\n    return shash;\n}\n\n// Note that this pads zeros\nexport function toArray32(s,size) {\n    const res = []; //new Uint32Array(size); //has no unshift\n    let rem = BigInt(s);\n    const radix = BigInt(0x100000000);\n    while (rem) {\n        res.unshift( Number(rem % radix));\n        rem = rem / radix;\n    }\n    if (size) {\n    var i = size - res.length;\n    while (i>0) {\n        res.unshift(0);\n        i--;\n    }\n    }\n    return res;\n}\n", "\nimport * as _Scalar  from \"./src/scalar.js\";\nexport const Scalar=_Scalar;\n\nexport {default as PolField} from \"./src/polfield.js\";\nexport {default as F1Field} from \"./src/f1field.js\";\nexport {default as F2Field} from \"./src/f2field.js\";\nexport {default as F3Field} from \"./src/f3field.js\";\n\nexport {default as ZqField} from \"./src/f1field.js\";\n\nexport {default as EC} from \"./src/ec.js\";\n\nexport {default as buildBn128} from \"./src/bn128.js\";\nexport {default as buildBls12381} from \"./src/bls12381.js\";\n\nimport * as _utils from \"./src/utils.js\";\nexport const utils = _utils;\nexport {default as ChaCha} from \"./src/chacha.js\";\n\nexport {default as BigBuffer} from \"./src/bigbuffer.js\";\n\nexport {getCurveFromR, getCurveFromQ, getCurveFromName} from \"./src/curves.js\";\n\n", "\n/* global BigInt */\nconst hexLen = [ 0, 1, 2, 2, 3, 3, 3, 3, 4 ,4 ,4 ,4 ,4 ,4 ,4 ,4];\n\nexport function fromString(s, radix) {\n    if ((!radix)||(radix==10)) {\n        return BigInt(s);\n    } else if (radix==16) {\n        if (s.slice(0,2) == \"0x\") {\n            return BigInt(s);\n        } else {\n            return BigInt(\"0x\"+s);\n        }\n    }\n}\n\nexport const e = fromString;\n\nexport function fromArray(a, radix) {\n    let acc =BigInt(0);\n    radix = BigInt(radix);\n    for (let i=0; i<a.length; i++) {\n        acc = acc*radix + BigInt(a[i]);\n    }\n    return acc;\n}\n\nexport function bitLength(a) {\n    const aS =a.toString(16);\n    return (aS.length-1)*4 +hexLen[parseInt(aS[0], 16)];\n}\n\nexport function isNegative(a) {\n    return BigInt(a) < BigInt(0);\n}\n\nexport function isZero(a) {\n    return !a;\n}\n\nexport function shiftLeft(a, n) {\n    return BigInt(a) << BigInt(n);\n}\n\nexport function shiftRight(a, n) {\n    return BigInt(a) >> BigInt(n);\n}\n\nexport const shl = shiftLeft;\nexport const shr = shiftRight;\n\nexport function isOdd(a) {\n    return (BigInt(a) & BigInt(1)) == BigInt(1);\n}\n\n\nexport function naf(n) {\n    let E = BigInt(n);\n    const res = [];\n    while (E) {\n        if (E & BigInt(1)) {\n            const z = 2 - Number(E % BigInt(4));\n            res.push( z );\n            E = E - BigInt(z);\n        } else {\n            res.push( 0 );\n        }\n        E = E >> BigInt(1);\n    }\n    return res;\n}\n\n\nexport function bits(n) {\n    let E = BigInt(n);\n    const res = [];\n    while (E) {\n        if (E & BigInt(1)) {\n            res.push(1);\n        } else {\n            res.push( 0 );\n        }\n        E = E >> BigInt(1);\n    }\n    return res;\n}\n\nexport function toNumber(s) {\n    if (s>BigInt(Number.MAX_SAFE_INTEGER )) {\n        throw new Error(\"Number too big\");\n    }\n    return Number(s);\n}\n\nexport function toArray(s, radix) {\n    const res = [];\n    let rem = BigInt(s);\n    radix = BigInt(radix);\n    while (rem) {\n        res.unshift( Number(rem % radix));\n        rem = rem / radix;\n    }\n    return res;\n}\n\n\nexport function add(a, b) {\n    return BigInt(a) + BigInt(b);\n}\n\nexport function sub(a, b) {\n    return BigInt(a) - BigInt(b);\n}\n\nexport function neg(a) {\n    return -BigInt(a);\n}\n\nexport function mul(a, b) {\n    return BigInt(a) * BigInt(b);\n}\n\nexport function square(a) {\n    return BigInt(a) * BigInt(a);\n}\n\nexport function pow(a, b) {\n    return BigInt(a) ** BigInt(b);\n}\n\nexport function exp(a, b) {\n    return BigInt(a) ** BigInt(b);\n}\n\nexport function abs(a) {\n    return BigInt(a) >= 0 ? BigInt(a) : -BigInt(a);\n}\n\nexport function div(a, b) {\n    return BigInt(a) / BigInt(b);\n}\n\nexport function mod(a, b) {\n    return BigInt(a) % BigInt(b);\n}\n\nexport function eq(a, b) {\n    return BigInt(a) == BigInt(b);\n}\n\nexport function neq(a, b) {\n    return BigInt(a) != BigInt(b);\n}\n\nexport function lt(a, b) {\n    return BigInt(a) < BigInt(b);\n}\n\nexport function gt(a, b) {\n    return BigInt(a) > BigInt(b);\n}\n\nexport function leq(a, b) {\n    return BigInt(a) <= BigInt(b);\n}\n\nexport function geq(a, b) {\n    return BigInt(a) >= BigInt(b);\n}\n\nexport function band(a, b) {\n    return BigInt(a) & BigInt(b);\n}\n\nexport function bor(a, b) {\n    return BigInt(a) | BigInt(b);\n}\n\nexport function bxor(a, b) {\n    return BigInt(a) ^ BigInt(b);\n}\n\nexport function land(a, b) {\n    return BigInt(a) && BigInt(b);\n}\n\nexport function lor(a, b) {\n    return BigInt(a) || BigInt(b);\n}\n\nexport function lnot(a) {\n    return !BigInt(a);\n}\n\n// Returns a buffer with Little Endian Representation\nexport function toRprLE(buff, o, e, n8) {\n    const s = \"0000000\" + e.toString(16);\n    const v = new Uint32Array(buff.buffer, o, n8/4);\n    const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;\n    for (let i=0; i<l; i++) v[i] = parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16);\n    for (let i=l; i<v.length; i++) v[i] = 0;\n    for (let i=v.length*4; i<n8; i++) buff[i] = toNumber(band(shiftRight(e, i*8), 0xFF));\n}\n\n// Returns a buffer with Big Endian Representation\nexport function toRprBE(buff, o, e, n8) {\n    const s = \"0000000\" + e.toString(16);\n    const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n    const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;\n    for (let i=0; i<l; i++) v.setUint32(n8-i*4 -4, parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16), false);\n    for (let i=0; i<n8/4-l; i++) v[i] = 0;\n}\n\n// Pases a buffer with Little Endian Representation\nexport function fromRprLE(buff, o, n8) {\n    n8 = n8 || buff.byteLength;\n    o = o || 0;\n    const v = new Uint32Array(buff.buffer, o, n8/4);\n    const a = new Array(n8/4);\n    v.forEach( (ch,i) => a[a.length-i-1] = ch.toString(16).padStart(8,\"0\") );\n    return fromString(a.join(\"\"), 16);\n}\n\n// Pases a buffer with Big Endian Representation\nexport function fromRprBE(buff, o, n8) {\n    n8 = n8 || buff.byteLength;\n    o = o || 0;\n    const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n    const a = new Array(n8/4);\n    for (let i=0; i<n8/4; i++) {\n        a[i] = v.getUint32(i*4, false).toString(16).padStart(8, \"0\");\n    }\n    return fromString(a.join(\"\"), 16);\n}\n\nexport function toString(a, radix) {\n    return a.toString(radix);\n}\n\nexport function toLEBuff(a) {\n    const buff = new Uint8Array(Math.floor((bitLength(a) - 1) / 8) +1);\n    toRprLE(buff, 0, a, buff.byteLength);\n    return buff;\n}\n\nexport const zero = e(0);\nexport const one = e(1);\n\n\n\n\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nexport default class PolField {\n    constructor (F) {\n        this.F = F;\n\n        let rem = F.sqrt_t;\n        let s = F.sqrt_s;\n\n        const five = this.F.add(this.F.add(this.F.two, this.F.two), this.F.one);\n\n        this.w = new Array(s+1);\n        this.wi = new Array(s+1);\n        this.w[s] = this.F.pow(five, rem);\n        this.wi[s] = this.F.inv(this.w[s]);\n\n        let n=s-1;\n        while (n>=0) {\n            this.w[n] = this.F.square(this.w[n+1]);\n            this.wi[n] = this.F.square(this.wi[n+1]);\n            n--;\n        }\n\n\n        this.roots = [];\n/*        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n    */\n        this._setRoots(15);\n    }\n\n    _setRoots(n) {\n        if (n > this.F.sqrt_s) n = this.s;\n        for (let i=n; (i>=0) && (!this.roots[i]); i--) {\n            let r = this.F.one;\n            const nroots = 1 << i;\n            const rootsi = new Array(nroots);\n            for (let j=0; j<nroots; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n            this.roots[i] = rootsi;\n        }\n    }\n\n    add(a, b) {\n        const m = Math.max(a.length, b.length);\n        const res = new Array(m);\n        for (let i=0; i<m; i++) {\n            res[i] = this.F.add(a[i] || this.F.zero, b[i] || this.F.zero);\n        }\n        return this.reduce(res);\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        const m = Math.max(a.length, b.length);\n        const res = new Array(m);\n        for (let i=0; i<m; i++) {\n            res[i] = this.F.sub(a[i] || this.F.zero, b[i] || this.F.zero);\n        }\n        return this.reduce(res);\n    }\n\n    mulScalar(p, b) {\n        if (this.F.eq(b, this.F.zero)) return [];\n        if (this.F.eq(b, this.F.one)) return p;\n        const res = new Array(p.length);\n        for (let i=0; i<p.length; i++) {\n            res[i] = this.F.mul(p[i], b);\n        }\n        return res;\n    }\n\n\n\n    mul(a, b) {\n        if (a.length == 0) return [];\n        if (b.length == 0) return [];\n        if (a.length == 1) return this.mulScalar(b, a[0]);\n        if (b.length == 1) return this.mulScalar(a, b[0]);\n\n        if (b.length > a.length) {\n            [b, a] = [a, b];\n        }\n\n        if ((b.length <= 2) || (b.length < log2(a.length))) {\n            return this.mulNormal(a,b);\n        } else {\n            return this.mulFFT(a,b);\n        }\n    }\n\n    mulNormal(a, b) {\n        let res = [];\n        for (let i=0; i<b.length; i++) {\n            res = this.add(res, this.scaleX(this.mulScalar(a, b[i]), i) );\n        }\n        return res;\n    }\n\n    mulFFT(a,b) {\n        const longestN = Math.max(a.length, b.length);\n        const bitsResult = log2(longestN-1)+2;\n        this._setRoots(bitsResult);\n\n        const m = 1 << bitsResult;\n        const ea = this.extend(a,m);\n        const eb = this.extend(b,m);\n\n        const ta = __fft(this, ea, bitsResult, 0, 1, false);\n        const tb = __fft(this, eb, bitsResult, 0, 1, false);\n\n        const tres = new Array(m);\n\n        for (let i=0; i<m; i++) {\n            tres[i] = this.F.mul(ta[i], tb[i]);\n        }\n\n        const res = __fft(this, tres, bitsResult, 0, 1, true);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return this.reduce(resn);\n    }\n\n\n\n    square(a) {\n        return this.mul(a,a);\n    }\n\n    scaleX(p, n) {\n        if (n==0) {\n            return p;\n        } else if (n>0) {\n            const z = new Array(n).fill(this.F.zero);\n            return z.concat(p);\n        } else {\n            if (-n >= p.length) return [];\n            return p.slice(-n);\n        }\n    }\n\n    eval2(p, x) {\n        let v = this.F.zero;\n        let ix = this.F.one;\n        for (let i=0; i<p.length; i++) {\n            v = this.F.add(v, this.F.mul(p[i], ix));\n            ix = this.F.mul(ix, x);\n        }\n        return v;\n    }\n\n    eval(p,x) {\n        const F = this.F;\n        if (p.length == 0) return F.zero;\n        const m = this._next2Power(p.length);\n        const ep = this.extend(p, m);\n\n        return _eval(ep, x, 0, 1, m);\n\n        function _eval(p, x, offset, step, n) {\n            if (n==1) return p[offset];\n            const newX = F.square(x);\n            const res= F.add(\n                _eval(p, newX, offset, step << 1, n >> 1),\n                F.mul(\n                    x,\n                    _eval(p, newX, offset+step , step << 1, n >> 1)));\n            return res;\n        }\n    }\n\n    lagrange(points) {\n        let roots = [this.F.one];\n        for (let i=0; i<points.length; i++) {\n            roots = this.mul(roots, [this.F.neg(points[i][0]), this.F.one]);\n        }\n\n        let sum = [];\n        for (let i=0; i<points.length; i++) {\n            let mpol = this.ruffini(roots, points[i][0]);\n            const factor =\n                this.F.mul(\n                    this.F.inv(this.eval(mpol, points[i][0])),\n                    points[i][1]);\n            mpol = this.mulScalar(mpol, factor);\n            sum = this.add(sum, mpol);\n        }\n        return sum;\n    }\n\n\n    fft(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        const res = __fft(this, ep, bits, 0, 1);\n        return res;\n    }\n\n    fft2(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        __bitReverse(ep, bits);\n        const res = __fft2(this, ep, bits);\n        return res;\n    }\n\n\n    ifft(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        const res =  __fft(this, ep, bits, 0, 1);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n\n    }\n\n\n    ifft2(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        __bitReverse(ep, bits);\n        const res =  __fft2(this, ep, bits, 0, 1);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n\n    }\n\n    _fft(pall, bits, offset, step) {\n\n        const n = 1 << bits;\n        if (n==1) {\n            return [ pall[offset] ];\n        }\n\n        const ndiv2 = n >> 1;\n        const p1 = this._fft(pall, bits-1, offset, step*2);\n        const p2 = this._fft(pall, bits-1, offset+step, step*2);\n\n        const out = new Array(n);\n\n        let m= this.F.one;\n        for (let i=0; i<ndiv2; i++) {\n            out[i] = this.F.add(p1[i], this.F.mul(m, p2[i]));\n            out[i+ndiv2] = this.F.sub(p1[i], this.F.mul(m, p2[i]));\n            m = this.F.mul(m, this.w[bits]);\n        }\n\n        return out;\n    }\n\n    extend(p, e) {\n        if (e == p.length) return p;\n        const z = new Array(e-p.length).fill(this.F.zero);\n\n        return p.concat(z);\n    }\n\n    reduce(p) {\n        if (p.length == 0) return p;\n        if (! this.F.eq(p[p.length-1], this.F.zero) ) return p;\n        let i=p.length-1;\n        while( i>0 && this.F.eq(p[i], this.F.zero) ) i--;\n        return p.slice(0, i+1);\n    }\n\n    eq(a, b) {\n        const pa = this.reduce(a);\n        const pb = this.reduce(b);\n\n        if (pa.length != pb.length) return false;\n        for (let i=0; i<pb.length; i++) {\n            if (!this.F.eq(pa[i], pb[i])) return false;\n        }\n\n        return true;\n    }\n\n    ruffini(p, r) {\n        const res = new Array(p.length-1);\n        res[res.length-1] = p[p.length-1];\n        for (let i = res.length-2; i>=0; i--) {\n            res[i] = this.F.add(this.F.mul(res[i+1], r), p[i+1]);\n        }\n        return res;\n    }\n\n    _next2Power(v) {\n        v--;\n        v |= v >> 1;\n        v |= v >> 2;\n        v |= v >> 4;\n        v |= v >> 8;\n        v |= v >> 16;\n        v++;\n        return v;\n    }\n\n    toString(p) {\n        const ap = this.normalize(p);\n        let S = \"\";\n        for (let i=ap.length-1; i>=0; i--) {\n            if (!this.F.eq(p[i], this.F.zero)) {\n                if (S!=\"\") S += \" + \";\n                S = S + p[i].toString(10);\n                if (i>0) {\n                    S = S + \"x\";\n                    if (i>1) {\n                        S = S + \"^\" +i;\n                    }\n                }\n            }\n        }\n        return S;\n    }\n\n    normalize(p) {\n        const res  = new Array(p.length);\n        for (let i=0; i<p.length; i++) {\n            res[i] = this.F.normalize(p[i]);\n        }\n        return res;\n    }\n\n\n    _reciprocal(p, bits) {\n        const k = 1 << bits;\n        if (k==1) {\n            return [ this.F.inv(p[0]) ];\n        }\n        const np = this.scaleX(p, -k/2);\n        const q = this._reciprocal(np, bits-1);\n        const a = this.scaleX(this.double(q), 3*k/2-2);\n        const b = this.mul( this.square(q), p);\n\n        return this.scaleX(this.sub(a,b),   -(k-2));\n    }\n\n    // divides x^m / v\n    _div2(m, v) {\n        const kbits = log2(v.length-1)+1;\n        const k = 1 << kbits;\n\n        const scaleV = k - v.length;\n\n        // rec = x^(k - 2) / v* x^scaleV =>\n        // rec = x^(k-2-scaleV)/ v\n        //\n        // res = x^m/v = x^(m + (2*k-2 - scaleV) - (2*k-2 - scaleV)) /v =>\n        // res = rec * x^(m - (2*k-2 - scaleV)) =>\n        // res = rec * x^(m - 2*k + 2 + scaleV)\n\n        const rec = this._reciprocal(this.scaleX(v, scaleV), kbits);\n        const res = this.scaleX(rec, m - 2*k + 2 + scaleV);\n\n        return res;\n    }\n\n    div(_u, _v) {\n        if (_u.length < _v.length) return [];\n        const kbits = log2(_v.length-1)+1;\n        const k = 1 << kbits;\n\n        const u = this.scaleX(_u, k-_v.length);\n        const v = this.scaleX(_v, k-_v.length);\n\n        const n = v.length-1;\n        let m = u.length-1;\n\n        const s = this._reciprocal(v, kbits);\n        let t;\n        if (m>2*n) {\n            t = this.sub(this.scaleX([this.F.one], 2*n), this.mul(s, v));\n        }\n\n        let q = [];\n        let rem = u;\n        let us, ut;\n        let finish = false;\n\n        while (!finish) {\n            us = this.mul(rem, s);\n            q = this.add(q, this.scaleX(us, -2*n));\n\n            if ( m > 2*n ) {\n                ut = this.mul(rem, t);\n                rem = this.scaleX(ut, -2*n);\n                m = rem.length-1;\n            } else {\n                finish = true;\n            }\n        }\n\n        return q;\n    }\n\n\n    // returns the ith nth-root of one\n    oneRoot(n, i) {\n        let nbits = log2(n-1)+1;\n        let res = this.F.one;\n        let r = i;\n\n        if(i>=n) {\n            throw new Error(\"Given 'i' should be lower than 'n'\");\n        }\n        else if (1<<nbits !== n) {\n            throw new Error(`Internal errlr: ${n} should equal ${1<<nbits}`);\n        }\n\n        while (r>0) {\n            if (r & 1 == 1) {\n                res = this.F.mul(res, this.w[nbits]);\n            }\n            r = r >> 1;\n            nbits --;\n        }\n        return res;\n    }\n\n    computeVanishingPolinomial(bits, t) {\n        const m = 1 << bits;\n        return this.F.sub(this.F.pow(t, m), this.F.one);\n    }\n\n    evaluateLagrangePolynomials(bits, t) {\n        const m= 1 << bits;\n        const tm = this.F.pow(t, m);\n        const u= new Array(m).fill(this.F.zero);\n        this._setRoots(bits);\n        const omega = this.w[bits];\n\n        if (this.F.eq(tm, this.F.one)) {\n            for (let i = 0; i < m; i++) {\n                if (this.F.eq(this.roots[bits][0],t)) { // i.e., t equals omega^i\n                    u[i] = this.F.one;\n                    return u;\n                }\n            }\n        }\n\n        const z = this.F.sub(tm, this.F.one);\n        //        let l = this.F.mul(z,  this.F.pow(this.F.twoinv, m));\n        let l = this.F.mul(z,  this.F.inv(this.F.e(m)));\n        for (let i = 0; i < m; i++) {\n            u[i] = this.F.mul(l, this.F.inv(this.F.sub(t,this.roots[bits][i])));\n            l = this.F.mul(l, omega);\n        }\n\n        return u;\n    }\n\n    log2(V) {\n        return log2(V);\n    }\n}\n\nfunction log2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction __fft(PF, pall, bits, offset, step) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[offset] ];\n    } else if (n==2) {\n        return [\n            PF.F.add(pall[offset], pall[offset + step]),\n            PF.F.sub(pall[offset], pall[offset + step])];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft(PF, pall, bits-1, offset, step*2);\n    const p2 = __fft(PF, pall, bits-1, offset+step, step*2);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.F.add(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n        out[i+ndiv2] = PF.F.sub(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n    }\n\n    return out;\n}\n\n\nfunction __fft2(PF, pall, bits) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[0] ];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft2(PF, pall.slice(0, ndiv2), bits-1);\n    const p2 = __fft2(PF, pall.slice(ndiv2), bits-1);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.F.add(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n        out[i+ndiv2] = PF.F.sub(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n    }\n\n    return out;\n}\n\nconst _revTable = [];\nfor (let i=0; i<256; i++) {\n    _revTable[i] = _revSlow(i, 8);\n}\n\nfunction _revSlow(idx, bits) {\n    let res =0;\n    let a = idx;\n    for (let i=0; i<bits; i++) {\n        res <<= 1;\n        res = res | (a &1);\n        a >>=1;\n    }\n    return res;\n}\n\nfunction rev(idx, bits) {\n    return (\n        _revTable[idx >>> 24] |\n        (_revTable[(idx >>> 16) & 0xFF] << 8) |\n        (_revTable[(idx >>> 8) & 0xFF] << 16) |\n        (_revTable[idx & 0xFF] << 24)\n    ) >>> (32-bits);\n}\n\nfunction __bitReverse(p, bits) {\n    for (let k=0; k<p.length; k++) {\n        const r = rev(k, bits);\n        if (r>k) {\n            const tmp= p[k];\n            p[k] = p[r];\n            p[r] = tmp;\n        }\n    }\n\n}\n\n\n", "/* global BigInt */\nimport * as Scalar from \"./scalar.js\";\nimport * as futils from \"./futils.js\";\nimport buildSqrt from \"./fsqrt.js\";\nimport {getRandomBytes} from \"./random.js\";\nimport FFFT from \"./fft.js\";\n\nexport default class ZqField {\n    constructor(p) {\n        this.type=\"F1\";\n        this.one = BigInt(1);\n        this.zero = BigInt(0);\n        this.p = BigInt(p);\n        this.m = 1;\n        this.negone = this.p-this.one;\n        this.two = BigInt(2);\n        this.half = this.p >> this.one;\n        this.bitLength = Scalar.bitLength(this.p);\n        this.mask = (this.one << BigInt(this.bitLength)) - this.one;\n\n        this.n64 = Math.floor((this.bitLength - 1) / 64)+1;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n        this.R = this.e(this.one << BigInt(this.n64*64));\n        this.Ri = this.inv(this.R);\n\n        const e = this.negone >> this.one;\n        this.nqr = this.two;\n        let r = this.pow(this.nqr, e);\n        while (!this.eq(r, this.negone)) {\n            this.nqr = this.nqr + this.one;\n            r = this.pow(this.nqr, e);\n        }\n\n\n        this.s = 0;\n        this.t = this.negone;\n\n        while ((this.t & this.one) == this.zero) {\n            this.s = this.s + 1;\n            this.t = this.t >> this.one;\n        }\n\n        this.nqr_to_t = this.pow(this.nqr, this.t);\n\n        buildSqrt(this);\n\n        this.FFT = new FFFT(this, this, this.mul.bind(this));\n\n        this.fft = this.FFT.fft.bind(this.FFT);\n        this.ifft = this.FFT.ifft.bind(this.FFT);\n        this.w = this.FFT.w;\n        this.wi = this.FFT.wi; \n    \n        this.shift = this.square(this.nqr);\n        this.k = this.exp(this.nqr, 2**this.s);\n    }\n\n    e(a,b) {\n        let res;\n        if (!b) {\n            res = BigInt(a);\n        } else if (b==16) {\n            res = BigInt(\"0x\"+a);\n        }\n        if (res < 0) {\n            let nres = -res;\n            if (nres >= this.p) nres = nres % this.p;\n            return this.p - nres;\n        } else {\n            return (res>= this.p) ? res%this.p : res;\n        }\n\n    }\n\n    add(a, b) {\n        const res = a + b;\n        return res >= this.p ? res-this.p : res;\n    }\n\n    sub(a, b) {\n        return (a >= b) ? a-b : this.p-b+a;\n    }\n\n    neg(a) {\n        return a ? this.p-a : a;\n    }\n\n    mul(a, b) {\n        return (a*b)%this.p;\n    }\n\n    mulScalar(base, s) {\n        return (base * this.e(s)) % this.p;\n    }\n\n    square(a) {\n        return (a*a) % this.p;\n    }\n\n    eq(a, b) {\n        return a==b;\n    }\n\n    neq(a, b) {\n        return a!=b;\n    }\n\n    lt(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa < bb;\n    }\n\n    gt(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa > bb;\n    }\n\n    leq(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa <= bb;\n    }\n\n    geq(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa >= bb;\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    idiv(a, b) {\n        if (!b) throw new Error(\"Division by zero\");\n        return a / b;\n    }\n\n    inv(a) {\n        if (!a) throw new Error(\"Division by zero\");\n\n        let t = this.zero;\n        let r = this.p;\n        let newt = this.one;\n        let newr = a % this.p;\n        while (newr) {\n            let q = r/newr;\n            [t, newt] = [newt, t-q*newt];\n            [r, newr] = [newr, r-q*newr];\n        }\n        if (t<this.zero) t += this.p;\n        return t;\n    }\n\n    mod(a, b) {\n        return a % b;\n    }\n\n    pow(b, e) {\n        return futils.exp(this, b, e);\n    }\n\n    exp(b, e) {\n        return futils.exp(this, b, e);\n    }\n\n    band(a, b) {\n        const res =  ((a & b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bor(a, b) {\n        const res =  ((a | b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bxor(a, b) {\n        const res =  ((a ^ b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bnot(a) {\n        const res = a ^ this.mask;\n        return res >= this.p ? res-this.p : res;\n    }\n\n    shl(a, b) {\n        if (Number(b) < this.bitLength) {\n            const res = (a << b) & this.mask;\n            return res >= this.p ? res-this.p : res;\n        } else {\n            const nb = this.p - b;\n            if (Number(nb) < this.bitLength) {\n                return a >> nb;\n            } else {\n                return this.zero;\n            }\n        }\n    }\n\n    shr(a, b) {\n        if (Number(b) < this.bitLength) {\n            return a >> b;\n        } else {\n            const nb = this.p - b;\n            if (Number(nb) < this.bitLength) {\n                const res = (a << nb) & this.mask;\n                return res >= this.p ? res-this.p : res;\n            } else {\n                return 0;\n            }\n        }\n    }\n\n    land(a, b) {\n        return (a && b) ? this.one : this.zero;\n    }\n\n    lor(a, b) {\n        return (a || b) ? this.one : this.zero;\n    }\n\n    lnot(a) {\n        return (a) ? this.zero : this.one;\n    }\n\n    sqrt_old(n) {\n\n        if (n == this.zero) return this.zero;\n\n        // Test that have solution\n        const res = this.pow(n, this.negone >> this.one);\n        if ( res != this.one ) return null;\n\n        let m = this.s;\n        let c = this.nqr_to_t;\n        let t = this.pow(n, this.t);\n        let r = this.pow(n, this.add(this.t, this.one) >> this.one );\n\n        while ( t != this.one ) {\n            let sq = this.square(t);\n            let i = 1;\n            while (sq != this.one ) {\n                i++;\n                sq = this.square(sq);\n            }\n\n            // b = c ^ m-i-1\n            let b = c;\n            for (let j=0; j< m-i-1; j ++) b = this.square(b);\n\n            m = i;\n            c = this.square(b);\n            t = this.mul(t, c);\n            r = this.mul(r, b);\n        }\n\n        if (r > (this.p >> this.one)) {\n            r = this.neg(r);\n        }\n\n        return r;\n    }\n\n    normalize(a, b) {\n        a = BigInt(a,b);\n        if (a < 0) {\n            let na = -a;\n            if (na >= this.p) na = na % this.p;\n            return this.p - na;\n        } else {\n            return (a>= this.p) ? a%this.p : a;\n        }\n    }\n\n    random() {\n        const nBytes = (this.bitLength*2 / 8);\n        let res =this.zero;\n        for (let i=0; i<nBytes; i++) {\n            res = (res << BigInt(8)) + BigInt(getRandomBytes(1)[0]);\n        }\n        return res % this.p;\n    }\n\n    toString(a, base) {\n        base = base || 10;\n        let vs;\n        if ((a > this.half)&&(base == 10)) {\n            const v = this.p-a;\n            vs = \"-\"+v.toString(base);\n        } else {\n            vs = a.toString(base);\n        }\n        return vs;\n    }\n\n    isZero(a) {\n        return a == this.zero;\n    }\n\n    fromRng(rng) {\n        let v;\n        do {\n            v=this.zero;\n            for (let i=0; i<this.n64; i++) {\n                v += rng.nextU64() << BigInt(64 *i);\n            }\n            v &= this.mask;\n        } while (v >= this.p);\n        v = (v * this.Ri) % this.p;   // Convert from montgomery\n        return v;\n    }\n\n    fft(a) {\n        return this.FFT.fft(a);\n    }\n\n    ifft(a) {\n        return this.FFT.ifft(a);\n    }\n\n    // Returns a buffer with Little Endian Representation\n    toRprLE(buff, o, e) {\n        Scalar.toRprLE(buff, o, e, this.n64*8);\n    }\n\n    // Returns a buffer with Big Endian Representation\n    toRprBE(buff, o, e) {\n        Scalar.toRprBE(buff, o, e, this.n64*8);\n    }\n\n    // Returns a buffer with Big Endian Montgomery Representation\n    toRprBEM(buff, o, e) {\n        return this.toRprBE(buff, o, this.mul(this.R, e));\n    }\n\n    toRprLEM(buff, o, e) {\n        return this.toRprLE(buff, o, this.mul(this.R, e));\n    }\n\n\n    // Pases a buffer with Little Endian Representation\n    fromRprLE(buff, o) {\n        return Scalar.fromRprLE(buff, o, this.n8);\n    }\n\n    // Pases a buffer with Big Endian Representation\n    fromRprBE(buff, o) {\n        return Scalar.fromRprBE(buff, o, this.n8);\n    }\n\n    fromRprLEM(buff, o) {\n        return this.mul(this.fromRprLE(buff, o), this.Ri);\n    }\n\n    fromRprBEM(buff, o) {\n        return this.mul(this.fromRprBE(buff, o), this.Ri);\n    }\n\n    toObject(a) {\n        return a;\n    }\n}", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as Scalar from \"./scalar.js\";\n\n\nexport function mulScalar(F, base, e) {\n    let res;\n\n    if (Scalar.isZero(e)) return F.zero;\n\n    const n = Scalar.naf(e);\n\n    if (n[n.length-1] == 1) {\n        res = base;\n    } else if (n[n.length-1] == -1) {\n        res = F.neg(base);\n    } else {\n        throw new Error(\"invlaud NAF\");\n    }\n\n    for (let i=n.length-2; i>=0; i--) {\n\n        res = F.double(res);\n\n        if (n[i] == 1) {\n            res = F.add(res, base);\n        } else if (n[i] == -1) {\n            res = F.sub(res, base);\n        }\n    }\n\n    return res;\n}\n\n\n/*\nexports.mulScalar = (F, base, e) =>{\n    let res = F.zero;\n    let rem = bigInt(e);\n    let exp = base;\n\n    while (! rem.eq(bigInt.zero)) {\n        if (rem.and(bigInt.one).eq(bigInt.one)) {\n            res = F.add(res, exp);\n        }\n        exp = F.double(exp);\n        rem = rem.shiftRight(1);\n    }\n\n    return res;\n};\n*/\n\n\nexport function exp(F, base, e) {\n\n    if (Scalar.isZero(e)) return F.one;\n\n    const n = Scalar.bits(e);\n\n    if (n.length==0) return F.one;\n\n    let res = base;\n\n    for (let i=n.length-2; i>=0; i--) {\n\n        res = F.square(res);\n\n        if (n[i]) {\n            res = F.mul(res, base);\n        }\n    }\n\n    return res;\n}\n\n\n", "import * as Scalar from \"./scalar.js\";\n// Check here: https://eprint.iacr.org/2012/685.pdf\n\nexport default function buildSqrt (F) {\n    if ((F.m % 2) == 1) {\n        if (Scalar.eq(Scalar.mod(F.p, 4), 1 )) {\n            if (Scalar.eq(Scalar.mod(F.p, 8), 1 )) {\n                if (Scalar.eq(Scalar.mod(F.p, 16), 1 )) {\n                    // alg7_muller(F);\n                    alg5_tonelliShanks(F);\n                } else if (Scalar.eq(Scalar.mod(F.p, 16), 9 )) {\n                    alg4_kong(F);\n                } else {\n                    throw new Error(\"Field withot sqrt\");\n                }\n            } else if (Scalar.eq(Scalar.mod(F.p, 8), 5 )) {\n                alg3_atkin(F);\n            } else {\n                throw new Error(\"Field withot sqrt\");\n            }\n        } else if (Scalar.eq(Scalar.mod(F.p, 4), 3 )) {\n            alg2_shanks(F);\n        }\n    } else {\n        const pm2mod4 = Scalar.mod(Scalar.pow(F.p, F.m/2), 4);\n        if (pm2mod4 == 1) {\n            alg10_adj(F);\n        } else if (pm2mod4 == 3) {\n            alg9_adj(F);\n        } else {\n            alg8_complex(F);\n        }\n\n    }\n}\n\n\nfunction alg5_tonelliShanks(F) {\n    F.sqrt_q = Scalar.pow(F.p, F.m);\n\n    F.sqrt_s = 0;\n    F.sqrt_t = Scalar.sub(F.sqrt_q, 1);\n\n    while (!Scalar.isOdd(F.sqrt_t)) {\n        F.sqrt_s = F.sqrt_s + 1;\n        F.sqrt_t = Scalar.div(F.sqrt_t, 2);\n    }\n\n    let c0 = F.one;\n\n    while (F.eq(c0, F.one)) {\n        const c = F.random();\n        F.sqrt_z = F.pow(c, F.sqrt_t);\n        c0 = F.pow(F.sqrt_z, 2 ** (F.sqrt_s-1) );\n    }\n\n    F.sqrt_tm1d2 = Scalar.div(Scalar.sub(F.sqrt_t, 1),2);\n\n    F.sqrt = function(a) {\n        const F=this;\n        if (F.isZero(a)) return F.zero;\n        let w = F.pow(a, F.sqrt_tm1d2);\n        const a0 = F.pow( F.mul(F.square(w), a), 2 ** (F.sqrt_s-1) );\n        if (F.eq(a0, F.negone)) return null;\n\n        let v = F.sqrt_s;\n        let x = F.mul(a, w);\n        let b = F.mul(x, w);\n        let z = F.sqrt_z;\n        while (!F.eq(b, F.one)) {\n            let b2k = F.square(b);\n            let k=1;\n            while (!F.eq(b2k, F.one)) {\n                b2k = F.square(b2k);\n                k++;\n            }\n\n            w = z;\n            for (let i=0; i<v-k-1; i++) {\n                w = F.square(w);\n            }\n            z = F.square(w);\n            b = F.mul(b, z);\n            x = F.mul(x, w);\n            v = k;\n        }\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\nfunction alg4_kong(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 4 not implemented\");\n    };\n}\n\nfunction alg3_atkin(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 3 not implemented\");\n    };\n}\n\nfunction alg2_shanks(F) {\n\n    F.sqrt_q = Scalar.pow(F.p, F.m);\n    F.sqrt_e1 = Scalar.div( Scalar.sub(F.sqrt_q, 3) , 4);\n\n    F.sqrt = function(a) {\n        if (this.isZero(a)) return this.zero;\n\n        // Test that have solution\n        const a1 = this.pow(a, this.sqrt_e1);\n\n        const a0 = this.mul(this.square(a1), a);\n\n        if ( this.eq(a0, this.negone) ) return null;\n\n        const x = this.mul(a1, a);\n\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\nfunction alg10_adj(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 10 not implemented\");\n    };\n}\n\nfunction alg9_adj(F) {\n    F.sqrt_q = Scalar.pow(F.p, F.m/2);\n    F.sqrt_e34 = Scalar.div( Scalar.sub(F.sqrt_q, 3) , 4);\n    F.sqrt_e12 = Scalar.div( Scalar.sub(F.sqrt_q, 1) , 2);\n\n    F.frobenius = function(n, x) {\n        if ((n%2) == 1) {\n            return F.conjugate(x);\n        } else {\n            return x;\n        }\n    };\n\n    F.sqrt = function(a) {\n        const F = this;\n        const a1 = F.pow(a, F.sqrt_e34);\n        const alfa = F.mul(F.square(a1), a);\n        const a0 = F.mul(F.frobenius(1, alfa), alfa);\n        if (F.eq(a0, F.negone)) return null;\n        const x0 = F.mul(a1, a);\n        let x;\n        if (F.eq(alfa, F.negone)) {\n            x = F.mul(x0, [F.F.zero, F.F.one]);\n        } else {\n            const b = F.pow(F.add(F.one, alfa), F.sqrt_e12);\n            x = F.mul(b, x0);\n        }\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\n\nfunction alg8_complex(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 8 not implemented\");\n    };\n}\n", "import ChaCha from \"./chacha.js\";\nimport crypto from \"crypto\";\n\nexport function getRandomBytes(n) {\n    let array = new Uint8Array(n);\n    if (process.browser) { // Browser\n        if (typeof globalThis.crypto !== \"undefined\") { // Supported\n            globalThis.crypto.getRandomValues(array);\n        } else { // fallback\n            for (let i=0; i<n; i++) {\n                array[i] = (Math.random()*4294967296)>>>0;\n            }\n        }\n    }\n    else { // NodeJS\n        crypto.randomFillSync(array);\n    }\n    return array;\n}\n\nexport function getRandomSeed() {\n    const arr = getRandomBytes(32);\n    const arrV = new Uint32Array(arr.buffer);\n    const seed = [];\n    for (let i=0; i<8; i++) {\n        seed.push(arrV[i]);\n    }\n    return seed;\n}\n\nlet threadRng = null;\n\nexport function getThreadRng() {\n    if (threadRng) return threadRng;\n    threadRng = new ChaCha(getRandomSeed());\n    return threadRng;\n}\n", "\n\nimport * as Scalar from \"./scalar.js\";\n\n\nfunction quarterRound(st, a, b, c, d) {\n\n    st[a] = (st[a] + st[b]) >>> 0;\n    st[d] = (st[d] ^ st[a]) >>> 0;\n    st[d] = ((st[d] << 16) | ((st[d]>>>16) & 0xFFFF)) >>> 0;\n\n    st[c] = (st[c] + st[d]) >>> 0;\n    st[b] = (st[b] ^ st[c]) >>> 0;\n    st[b] = ((st[b] << 12) | ((st[b]>>>20) & 0xFFF)) >>> 0;\n\n    st[a] = (st[a] + st[b]) >>> 0;\n    st[d] = (st[d] ^ st[a]) >>> 0;\n    st[d] = ((st[d] << 8) | ((st[d]>>>24) & 0xFF)) >>> 0;\n\n    st[c] = (st[c] + st[d]) >>> 0;\n    st[b] = (st[b] ^ st[c]) >>> 0;\n    st[b] = ((st[b] << 7) | ((st[b]>>>25) & 0x7F)) >>> 0;\n}\n\nfunction doubleRound(st) {\n    quarterRound(st, 0, 4, 8,12);\n    quarterRound(st, 1, 5, 9,13);\n    quarterRound(st, 2, 6,10,14);\n    quarterRound(st, 3, 7,11,15);\n\n    quarterRound(st, 0, 5,10,15);\n    quarterRound(st, 1, 6,11,12);\n    quarterRound(st, 2, 7, 8,13);\n    quarterRound(st, 3, 4, 9,14);\n}\n\nexport default class ChaCha {\n\n    constructor(seed) {\n        seed = seed || [0,0,0,0,0,0,0,0];\n        this.state = [\n            0x61707865,\n            0x3320646E,\n            0x79622D32,\n            0x6B206574,\n            seed[0],\n            seed[1],\n            seed[2],\n            seed[3],\n            seed[4],\n            seed[5],\n            seed[6],\n            seed[7],\n            0,\n            0,\n            0,\n            0\n        ];\n        this.idx = 16;\n        this.buff = new Array(16);\n    }\n\n    nextU32() {\n        if (this.idx == 16) this.update();\n        return this.buff[this.idx++];\n    }\n\n    nextU64() {\n        return Scalar.add(Scalar.mul(this.nextU32(), 0x100000000), this.nextU32());\n    }\n\n    nextBool() {\n        return (this.nextU32() & 1) == 1;\n    }\n\n    update() {\n        // Copy the state\n        for (let i=0; i<16; i++) this.buff[i] = this.state[i];\n\n        // Apply the rounds\n        for (let i=0; i<10; i++) doubleRound(this.buff);\n\n        // Add to the initial\n        for (let i=0; i<16; i++) this.buff[i] = (this.buff[i] + this.state[i]) >>> 0;\n\n        this.idx = 0;\n\n        this.state[12] = (this.state[12] + 1) >>> 0;\n        if (this.state[12] != 0) return;\n        this.state[13] = (this.state[13] + 1) >>> 0;\n        if (this.state[13] != 0) return;\n        this.state[14] = (this.state[14] + 1) >>> 0;\n        if (this.state[14] != 0) return;\n        this.state[15] = (this.state[15] + 1) >>> 0;\n    }\n}\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nexport default class FFT {\n    constructor (G, F, opMulGF) {\n        this.F = F;\n        this.G = G;\n        this.opMulGF = opMulGF;\n\n        let rem = F.sqrt_t || F.t;\n        let s = F.sqrt_s || F.s;\n\n        let nqr = F.one;\n        while (F.eq(F.pow(nqr, F.half), F.one)) nqr = F.add(nqr, F.one);\n\n        this.w = new Array(s+1);\n        this.wi = new Array(s+1);\n        this.w[s] = this.F.pow(nqr, rem);\n        this.wi[s] = this.F.inv(this.w[s]);\n\n        let n=s-1;\n        while (n>=0) {\n            this.w[n] = this.F.square(this.w[n+1]);\n            this.wi[n] = this.F.square(this.wi[n+1]);\n            n--;\n        }\n\n\n        this.roots = [];\n        /*\n        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n        */\n        this._setRoots(Math.min(s, 15));\n    }\n\n    _setRoots(n) {\n        for (let i=n; (i>=0) && (!this.roots[i]); i--) {\n            let r = this.F.one;\n            const nroots = 1 << i;\n            const rootsi = new Array(nroots);\n            for (let j=0; j<nroots; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots[i] = rootsi;\n        }\n    }\n\n    fft(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        if (p.length != m) {\n            throw new Error(\"Size must be multiple of 2\");\n        }\n        const res = __fft(this, p, bits, 0, 1);\n        return res;\n    }\n\n    ifft(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        if (p.length != m) {\n            throw new Error(\"Size must be multiple of 2\");\n        }\n        const res =  __fft(this, p, bits, 0, 1);\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.opMulGF(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n    }\n\n\n}\n\nfunction log2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction __fft(PF, pall, bits, offset, step) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[offset] ];\n    } else if (n==2) {\n        return [\n            PF.G.add(pall[offset], pall[offset + step]),\n            PF.G.sub(pall[offset], pall[offset + step])];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft(PF, pall, bits-1, offset, step*2);\n    const p2 = __fft(PF, pall, bits-1, offset+step, step*2);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.G.add(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n        out[i+ndiv2] = PF.G.sub(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n    }\n\n    return out;\n}\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fUtils from \"./futils.js\";\nimport buildSqrt from \"./fsqrt.js\";\n\nexport default class F2Field {\n    constructor(F, nonResidue) {\n        this.type=\"F2\";\n        this.F = F;\n        this.zero = [this.F.zero, this.F.zero];\n        this.one = [this.F.one, this.F.zero];\n        this.negone = this.neg(this.one);\n        this.nonResidue = nonResidue;\n        this.m = F.m*2;\n        this.p = F.p;\n        this.n64 = F.n64*2;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n\n        buildSqrt(this);\n    }\n\n    _mulByNonResidue(a) {\n        return this.F.mul(this.nonResidue, a);\n    }\n\n    copy(a) {\n        return [this.F.copy(a[0]), this.F.copy(a[1])];\n    }\n\n    add(a, b) {\n        return [\n            this.F.add(a[0], b[0]),\n            this.F.add(a[1], b[1])\n        ];\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        return [\n            this.F.sub(a[0], b[0]),\n            this.F.sub(a[1], b[1])\n        ];\n    }\n\n    neg(a) {\n        return this.sub(this.zero, a);\n    }\n\n    conjugate(a) {\n        return [\n            a[0],\n            this.F.neg(a[1])\n        ];\n    }\n\n    mul(a, b) {\n        const aA = this.F.mul(a[0] , b[0]);\n        const bB = this.F.mul(a[1] , b[1]);\n\n        return [\n            this.F.add( aA , this._mulByNonResidue(bB)),\n            this.F.sub(\n                this.F.mul(\n                    this.F.add(a[0], a[1]),\n                    this.F.add(b[0], b[1])),\n                this.F.add(aA, bB))];\n    }\n\n    inv(a) {\n        const t0 = this.F.square(a[0]);\n        const t1 = this.F.square(a[1]);\n        const t2 = this.F.sub(t0, this._mulByNonResidue(t1));\n        const t3 = this.F.inv(t2);\n        return [\n            this.F.mul(a[0], t3),\n            this.F.neg(this.F.mul( a[1], t3)) ];\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    square(a) {\n        const ab = this.F.mul(a[0] , a[1]);\n\n        /*\n        [\n            (a + b) * (a + non_residue * b) - ab - non_residue * ab,\n            ab + ab\n        ];\n        */\n\n        return [\n            this.F.sub(\n                this.F.mul(\n                    this.F.add(a[0], a[1]) ,\n                    this.F.add(\n                        a[0] ,\n                        this._mulByNonResidue(a[1]))),\n                this.F.add(\n                    ab,\n                    this._mulByNonResidue(ab))),\n            this.F.add(ab, ab)\n        ];\n    }\n\n    isZero(a) {\n        return this.F.isZero(a[0]) && this.F.isZero(a[1]);\n    }\n\n    eq(a, b) {\n        return this.F.eq(a[0], b[0]) && this.F.eq(a[1], b[1]);\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    pow(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    exp(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    toString(a) {\n        return `[ ${this.F.toString(a[0])} , ${this.F.toString(a[1])} ]`;\n    }\n\n    fromRng(rng) {\n        const c0 = this.F.fromRng(rng);\n        const c1 = this.F.fromRng(rng);\n        return [c0, c1];\n    }\n\n    gt(a, b) {\n        if (this.F.gt(a[0], b[0])) return true;\n        if (this.F.gt(b[0], a[0])) return false;\n        if (this.F.gt(a[1], b[1])) return true;\n        return false;\n    }\n\n    geq(a, b) {\n        return this.gt(a, b) || this.eq(a, b);\n    }\n\n    lt(a, b) {\n        return !this.geq(a,b);\n    }\n\n    leq(a, b) {\n        return !this.gt(a,b);\n    }\n\n    neq(a, b) {\n        return !this.eq(a,b);\n    }\n\n    random() {\n        return [this.F.random(), this.F.random()];\n    }\n\n\n    toRprLE(buff, o, e) {\n        this.F.toRprLE(buff, o, e[0]);\n        this.F.toRprLE(buff, o+this.F.n8, e[1]);\n    }\n\n    toRprBE(buff, o, e) {\n        this.F.toRprBE(buff, o, e[1]);\n        this.F.toRprBE(buff, o+this.F.n8, e[0]);\n    }\n\n    toRprLEM(buff, o, e) {\n        this.F.toRprLEM(buff, o, e[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, e[1]);\n    }\n\n\n    toRprBEM(buff, o, e) {\n        this.F.toRprBEM(buff, o, e[1]);\n        this.F.toRprBEM(buff, o+this.F.n8, e[0]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLE(buff, o);\n        const c1 = this.F.fromRprLE(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const c1 = this.F.fromRprBE(buff, o);\n        const c0 = this.F.fromRprBE(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLEM(buff, o);\n        const c1 = this.F.fromRprLEM(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const c1 = this.F.fromRprBEM(buff, o);\n        const c0 = this.F.fromRprBEM(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    toObject(a) {\n        return a;\n    }\n\n}\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fUtils from \"./futils.js\";\n\nexport default class F3Field {\n    constructor(F, nonResidue) {\n        this.type=\"F3\";\n        this.F = F;\n        this.zero = [this.F.zero, this.F.zero, this.F.zero];\n        this.one = [this.F.one, this.F.zero, this.F.zero];\n        this.negone = this.neg(this.one);\n        this.nonResidue = nonResidue;\n        this.m = F.m*3;\n        this.p = F.p;\n        this.n64 = F.n64*3;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n    }\n\n    _mulByNonResidue(a) {\n        return this.F.mul(this.nonResidue, a);\n    }\n\n    copy(a) {\n        return [this.F.copy(a[0]), this.F.copy(a[1]), this.F.copy(a[2])];\n    }\n\n    add(a, b) {\n        return [\n            this.F.add(a[0], b[0]),\n            this.F.add(a[1], b[1]),\n            this.F.add(a[2], b[2])\n        ];\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        return [\n            this.F.sub(a[0], b[0]),\n            this.F.sub(a[1], b[1]),\n            this.F.sub(a[2], b[2])\n        ];\n    }\n\n    neg(a) {\n        return this.sub(this.zero, a);\n    }\n\n    mul(a, b) {\n\n        const aA = this.F.mul(a[0] , b[0]);\n        const bB = this.F.mul(a[1] , b[1]);\n        const cC = this.F.mul(a[2] , b[2]);\n\n        return [\n            this.F.add(\n                aA,\n                this._mulByNonResidue(\n                    this.F.sub(\n                        this.F.mul(\n                            this.F.add(a[1], a[2]),\n                            this.F.add(b[1], b[2])),\n                        this.F.add(bB, cC)))),    // aA + non_residue*((b+c)*(B+C)-bB-cC),\n\n            this.F.add(\n                this.F.sub(\n                    this.F.mul(\n                        this.F.add(a[0], a[1]),\n                        this.F.add(b[0], b[1])),\n                    this.F.add(aA, bB)),\n                this._mulByNonResidue( cC)),   // (a+b)*(A+B)-aA-bB+non_residue*cC\n\n            this.F.add(\n                this.F.sub(\n                    this.F.mul(\n                        this.F.add(a[0], a[2]),\n                        this.F.add(b[0], b[2])),\n                    this.F.add(aA, cC)),\n                bB)];                           // (a+c)*(A+C)-aA+bB-cC)\n    }\n\n    inv(a) {\n        const t0 = this.F.square(a[0]);             // t0 = a^2 ;\n        const t1 = this.F.square(a[1]);             // t1 = b^2 ;\n        const t2 = this.F.square(a[2]);             // t2 = c^2;\n        const t3 = this.F.mul(a[0],a[1]);           // t3 = ab\n        const t4 = this.F.mul(a[0],a[2]);           // t4 = ac\n        const t5 = this.F.mul(a[1],a[2]);           // t5 = bc;\n        // c0 = t0 - non_residue * t5;\n        const c0 = this.F.sub(t0, this._mulByNonResidue(t5));\n        // c1 = non_residue * t2 - t3;\n        const c1 = this.F.sub(this._mulByNonResidue(t2), t3);\n        const c2 = this.F.sub(t1, t4);              // c2 = t1-t4\n\n        // t6 = (a * c0 + non_residue * (c * c1 + b * c2)).inv();\n        const t6 =\n            this.F.inv(\n                this.F.add(\n                    this.F.mul(a[0], c0),\n                    this._mulByNonResidue(\n                        this.F.add(\n                            this.F.mul(a[2], c1),\n                            this.F.mul(a[1], c2)))));\n\n        return [\n            this.F.mul(t6, c0),         // t6*c0\n            this.F.mul(t6, c1),         // t6*c1\n            this.F.mul(t6, c2)];        // t6*c2\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    square(a) {\n        const s0 = this.F.square(a[0]);                   // s0 = a^2\n        const ab = this.F.mul(a[0], a[1]);                // ab = a*b\n        const s1 = this.F.add(ab, ab);                    // s1 = 2ab;\n        const s2 = this.F.square(\n            this.F.add(this.F.sub(a[0],a[1]), a[2]));     // s2 = (a - b + c)^2;\n        const bc = this.F.mul(a[1],a[2]);                 // bc = b*c\n        const s3 = this.F.add(bc, bc);                    // s3 = 2*bc\n        const s4 = this.F.square(a[2]);                   // s4 = c^2\n\n\n        return [\n            this.F.add(\n                s0,\n                this._mulByNonResidue(s3)),           // s0 + non_residue * s3,\n            this.F.add(\n                s1,\n                this._mulByNonResidue(s4)),           // s1 + non_residue * s4,\n            this.F.sub(\n                this.F.add( this.F.add(s1, s2) , s3 ),\n                this.F.add(s0, s4))];                      // s1 + s2 + s3 - s0 - s4\n    }\n\n    isZero(a) {\n        return this.F.isZero(a[0]) && this.F.isZero(a[1]) && this.F.isZero(a[2]);\n    }\n\n    eq(a, b) {\n        return this.F.eq(a[0], b[0]) && this.F.eq(a[1], b[1]) && this.F.eq(a[2], b[2]);\n    }\n\n    affine(a) {\n        return [this.F.affine(a[0]), this.F.affine(a[1]), this.F.affine(a[2])];\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    pow(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    exp(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    toString(a) {\n        return `[ ${this.F.toString(a[0])} , ${this.F.toString(a[1])}, ${this.F.toString(a[2])} ]`;\n    }\n\n    fromRng(rng) {\n        const c0 = this.F.fromRng(rng);\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        return [c0, c1, c2];\n    }\n\n    gt(a, b) {\n        if (this.F.gt(a[0], b[0])) return true;\n        if (this.F.gt(b[0], a[0])) return false;\n        if (this.F.gt(a[1], b[1])) return true;\n        if (this.F.gt(b[1], a[1])) return false;\n        if (this.F.gt(a[2], b[2])) return true;\n        return false;\n    }\n\n\n    geq(a, b) {\n        return this.gt(a, b) || this.eq(a, b);\n    }\n\n    lt(a, b) {\n        return !this.geq(a,b);\n    }\n\n    leq(a, b) {\n        return !this.gt(a,b);\n    }\n\n    neq(a, b) {\n        return !this.eq(a,b);\n    }\n\n    random() {\n        return [this.F.random(), this.F.random(), this.F.random()];\n    }\n\n\n    toRprLE(buff, o, e) {\n        this.F.toRprLE(buff, o, e[0]);\n        this.F.toRprLE(buff, o+this.F.n8, e[1]);\n        this.F.toRprLE(buff, o+this.F.n8*2, e[2]);\n    }\n\n    toRprBE(buff, o, e) {\n        this.F.toRprBE(buff, o, e[2]);\n        this.F.toRprBE(buff, o+this.F.n8, e[1]);\n        this.F.toRprBE(buff, o+this.F.n8*2, e[0]);\n    }\n\n    toRprLEM(buff, o, e) {\n        this.F.toRprLEM(buff, o, e[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, e[1]);\n        this.F.toRprLEM(buff, o+this.F.n8*2, e[2]);\n    }\n\n\n    toRprBEM(buff, o, e) {\n        this.F.toRprBEM(buff, o, e[2]);\n        this.F.toRprBEM(buff, o+this.F.n8, e[1]);\n        this.F.toRprBEM(buff, o+this.F.n8*2, e[0]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLE(buff, o);\n        const c1 = this.F.fromRprLE(buff, o+this.n8);\n        const c2 = this.F.fromRprLE(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const c2 = this.F.fromRprBE(buff, o);\n        const c1 = this.F.fromRprBE(buff, o+this.n8);\n        const c0 = this.F.fromRprBE(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLEM(buff, o);\n        const c1 = this.F.fromRprLEM(buff, o+this.n8);\n        const c2 = this.F.fromRprLEM(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const c2 = this.F.fromRprBEM(buff, o);\n        const c1 = this.F.fromRprBEM(buff, o+this.n8);\n        const c0 = this.F.fromRprBEM(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    toObject(a) {\n        return a;\n    }\n}\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\n\nimport * as fUtils from \"./futils.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nfunction isGreatest(F, a) {\n    if (Array.isArray(a)) {\n        for (let i=a.length-1; i>=0; i--) {\n            if (!F.F.isZero(a[i])) {\n                return isGreatest(F.F, a[i]);\n            }\n        }\n        return 0;\n    } else {\n        const na = F.neg(a);\n        return Scalar.gt(a, na);\n    }\n}\n\n\nexport default class EC {\n\n    constructor(F, g) {\n        this.F = F;\n        this.g = g;\n        if (this.g.length == 2) this.g[2] = this.F.one;\n        this.zero = [this.F.zero, this.F.one, this.F.zero];\n    }\n\n    add(p1, p2) {\n\n        const F = this.F;\n\n        if (this.eq(p1, this.zero)) return p2;\n        if (this.eq(p2, this.zero)) return p1;\n\n        const res = new Array(3);\n\n        const Z1Z1 = F.square( p1[2] );\n        const Z2Z2 = F.square( p2[2] );\n\n        const U1 = F.mul( p1[0] , Z2Z2 );     // U1 = X1  * Z2Z2\n        const U2 = F.mul( p2[0] , Z1Z1 );     // U2 = X2  * Z1Z1\n\n        const Z1_cubed = F.mul( p1[2] , Z1Z1);\n        const Z2_cubed = F.mul( p2[2] , Z2Z2);\n\n        const S1 = F.mul( p1[1] , Z2_cubed);  // S1 = Y1 * Z2 * Z2Z2\n        const S2 = F.mul( p2[1] , Z1_cubed);  // S2 = Y2 * Z1 * Z1Z1\n\n        if (F.eq(U1,U2) && F.eq(S1,S2)) {\n            return this.double(p1);\n        }\n\n        const H = F.sub( U2 , U1 );                    // H = U2-U1\n\n        const S2_minus_S1 = F.sub( S2 , S1 );\n\n        const I = F.square( F.add(H,H) );         // I = (2 * H)^2\n        const J = F.mul( H , I );                      // J = H * I\n\n        const r = F.add( S2_minus_S1 , S2_minus_S1 );  // r = 2 * (S2-S1)\n        const V = F.mul( U1 , I );                     // V = U1 * I\n\n        res[0] =\n            F.sub(\n                F.sub( F.square(r) , J ),\n                F.add( V , V ));                       // X3 = r^2 - J - 2 * V\n\n        const S1_J = F.mul( S1 , J );\n\n        res[1] =\n            F.sub(\n                F.mul( r , F.sub(V,res[0])),\n                F.add( S1_J,S1_J ));                   // Y3 = r * (V-X3)-2 S1 J\n\n        res[2] =\n            F.mul(\n                H,\n                F.sub(\n                    F.square( F.add(p1[2],p2[2]) ),\n                    F.add( Z1Z1 , Z2Z2 )));            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2) * H\n\n        return res;\n    }\n\n    neg(p) {\n        return [p[0], this.F.neg(p[1]), p[2]];\n    }\n\n    sub(a, b) {\n        return this.add(a, this.neg(b));\n    }\n\n    double(p) {\n        const F = this.F;\n\n        const res = new Array(3);\n\n        if (this.eq(p, this.zero)) return p;\n\n        const A = F.square( p[0] );                    // A = X1^2\n        const B = F.square( p[1] );                    // B = Y1^2\n        const C = F.square( B );                       // C = B^2\n\n        let D =\n            F.sub(\n                F.square( F.add(p[0] , B )),\n                F.add( A , C));\n        D = F.add(D,D);                    // D = 2 * ((X1 + B)^2 - A - C)\n\n        const E = F.add( F.add(A,A), A);          // E = 3 * A\n        const FF =F.square( E );                       // F = E^2\n\n        res[0] = F.sub( FF , F.add(D,D) );         // X3 = F - 2 D\n\n        let eightC = F.add( C , C );\n        eightC = F.add( eightC , eightC );\n        eightC = F.add( eightC , eightC );\n\n        res[1] =\n            F.sub(\n                F.mul(\n                    E,\n                    F.sub( D, res[0] )),\n                eightC);                                    // Y3 = E * (D - X3) - 8 * C\n\n        const Y1Z1 = F.mul( p[1] , p[2] );\n        res[2] = F.add( Y1Z1 , Y1Z1 );                 // Z3 = 2 * Y1 * Z1\n\n        return res;\n    }\n\n    timesScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    affine(p) {\n        const F = this.F;\n        if (this.isZero(p)) {\n            return this.zero;\n        } else if (F.eq(p[2], F.one)) {\n            return p;\n        } else {\n            const Z_inv = F.inv(p[2]);\n            const Z2_inv = F.square(Z_inv);\n            const Z3_inv = F.mul(Z2_inv, Z_inv);\n\n            const res = new Array(3);\n            res[0] = F.mul(p[0],Z2_inv);\n            res[1] = F.mul(p[1],Z3_inv);\n            res[2] = F.one;\n\n            return res;\n        }\n    }\n\n    multiAffine(arr) {\n        const keys = Object.keys(arr);\n        const F = this.F;\n        const accMul = new Array(keys.length+1);\n        accMul[0] = F.one;\n        for (let i = 0; i< keys.length; i++) {\n            if (F.eq(arr[keys[i]][2], F.zero)) {\n                accMul[i+1] = accMul[i];\n            } else {\n                accMul[i+1] = F.mul(accMul[i], arr[keys[i]][2]);\n            }\n        }\n\n        accMul[keys.length] = F.inv(accMul[keys.length]);\n\n        for (let i = keys.length-1; i>=0; i--) {\n            if (F.eq(arr[keys[i]][2], F.zero)) {\n                accMul[i] = accMul[i+1];\n                arr[keys[i]] = this.zero;\n            } else {\n                const Z_inv = F.mul(accMul[i], accMul[i+1]);\n                accMul[i] = F.mul(arr[keys[i]][2], accMul[i+1]);\n\n                const Z2_inv = F.square(Z_inv);\n                const Z3_inv = F.mul(Z2_inv, Z_inv);\n\n                arr[keys[i]][0] = F.mul(arr[keys[i]][0],Z2_inv);\n                arr[keys[i]][1] = F.mul(arr[keys[i]][1],Z3_inv);\n                arr[keys[i]][2] = F.one;\n            }\n        }\n\n    }\n\n    eq(p1, p2) {\n        const F = this.F;\n\n        if (this.F.eq(p1[2], this.F.zero)) return this.F.eq(p2[2], this.F.zero);\n        if (this.F.eq(p2[2], this.F.zero)) return false;\n\n        const Z1Z1 = F.square( p1[2] );\n        const Z2Z2 = F.square( p2[2] );\n\n        const U1 = F.mul( p1[0] , Z2Z2 );\n        const U2 = F.mul( p2[0] , Z1Z1 );\n\n        const Z1_cubed = F.mul( p1[2] , Z1Z1);\n        const Z2_cubed = F.mul( p2[2] , Z2Z2);\n\n        const S1 = F.mul( p1[1] , Z2_cubed);\n        const S2 = F.mul( p2[1] , Z1_cubed);\n\n        return (F.eq(U1,U2) && F.eq(S1,S2));\n    }\n\n    isZero(p) {\n        return this.F.isZero(p[2]);\n    }\n\n    toString(p) {\n        const cp = this.affine(p);\n        return `[ ${this.F.toString(cp[0])} , ${this.F.toString(cp[1])} ]`;\n    }\n\n    fromRng(rng) {\n        const F = this.F;\n        let P = [];\n        let greatest;\n        do {\n            P[0] = F.fromRng(rng);\n            greatest = rng.nextBool();\n            const x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n            P[1] = F.sqrt(x3b);\n        } while ((P[1] == null)||(F.isZero[P]));\n\n        const s = isGreatest(F, P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n        P[2] = F.one;\n\n        if (this.cofactor) {\n            P = this.mulScalar(P, this.cofactor);\n        }\n\n        P = this.affine(P);\n\n        return P;\n\n    }\n\n    toRprLE(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLE(buff, o, p[0]);\n        this.F.toRprLE(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprBE(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprBE(buff, o, p[0]);\n        this.F.toRprBE(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprLEM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLEM(buff, o, p[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprLEJM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLEM(buff, o, p[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, p[1]);\n        this.F.toRprLEM(buff, o+2*this.F.n8, p[2]);\n    }\n\n\n    toRprBEM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprBEM(buff, o, p[0]);\n        this.F.toRprBEM(buff, o+this.F.n8, p[1]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLE(buff, o);\n        const y = this.F.fromRprLE(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprBE(buff, o);\n        const y = this.F.fromRprBE(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLEM(buff, o);\n        const y = this.F.fromRprLEM(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprLEJM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLEM(buff, o);\n        const y = this.F.fromRprLEM(buff, o+this.F.n8);\n        const z = this.F.fromRprLEM(buff, o+this.F.n8*2);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, z];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprBEM(buff, o);\n        const y = this.F.fromRprBEM(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprCompressed(buff, o) {\n        const F = this.F;\n        const v = new Uint8Array(buff.buffer, o, F.n8);\n        if (v[0] & 0x40) return this.zero;\n        const P = new Array(3);\n\n        const greatest = ((v[0] & 0x80) != 0);\n        v[0] = v[0] & 0x7F;\n        P[0] = F.fromRprBE(buff, o);\n        if (greatest) v[0] = v[0] | 0x80;  // set back again the old value\n\n        const x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n        P[1] = F.sqrt(x3b);\n\n        if (P[1] === null) {\n            throw new Error(\"Invalid Point!\");\n        }\n\n        const s = isGreatest(F, P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n        P[2] = F.one;\n\n        return P;\n    }\n\n    toRprCompressed(buff, o, p) {\n        p = this.affine(p);\n        const v = new Uint8Array(buff.buffer, o, this.F.n8);\n        if (this.isZero(p)) {\n            v.fill(0);\n            v[0] = 0x40;\n            return;\n        }\n        this.F.toRprBE(buff, o, p[0]);\n\n        if (isGreatest(this.F, p[1])) {\n            v[0] = v[0] | 0x80;\n        }\n    }\n\n\n    fromRprUncompressed(buff, o) {\n        if (buff[0] & 0x40) return this.zero;\n\n        return this.fromRprBE(buff, o);\n    }\n\n    toRprUncompressed(buff, o, p) {\n        this.toRprBE(buff, o, p);\n\n        if (this.isZero(p)) {\n            buff[o] = buff[o] | 0x40;\n        }\n    }\n\n\n}\n\n\n", "import { buildBn128 as buildBn128wasm } from \"wasmcurves\";\nimport buildEngine from \"./engine.js\";\nimport * as Scalar from \"./scalar.js\";\nimport { ModuleBuilder } from \"wasmbuilder\";\n\nglobalThis.curve_bn128 = null;\n\nexport default async function buildBn128(singleThread, plugins) {\n\n    const moduleBuilder = new ModuleBuilder();\n    moduleBuilder.setMemory(25);\n    buildBn128wasm(moduleBuilder);\n\n    if (plugins) plugins(moduleBuilder);\n\n    const bn128wasm = {};\n\n    bn128wasm.code = moduleBuilder.build();\n    bn128wasm.pq = moduleBuilder.modules.f1m.pq;\n    bn128wasm.pr = moduleBuilder.modules.frm.pq;\n    bn128wasm.pG1gen = moduleBuilder.modules.bn128.pG1gen;\n    bn128wasm.pG1zero = moduleBuilder.modules.bn128.pG1zero;\n    bn128wasm.pG1b = moduleBuilder.modules.bn128.pG1b;\n    bn128wasm.pG2gen = moduleBuilder.modules.bn128.pG2gen;\n    bn128wasm.pG2zero = moduleBuilder.modules.bn128.pG2zero;\n    bn128wasm.pG2b = moduleBuilder.modules.bn128.pG2b;\n    bn128wasm.pOneT = moduleBuilder.modules.bn128.pOneT;\n    bn128wasm.prePSize = moduleBuilder.modules.bn128.prePSize;\n    bn128wasm.preQSize = moduleBuilder.modules.bn128.preQSize;\n    bn128wasm.n8q = 32;\n    bn128wasm.n8r = 32;\n    bn128wasm.q = moduleBuilder.modules.bn128.q;\n    bn128wasm.r = moduleBuilder.modules.bn128.r;\n\n    if ((!singleThread) && (globalThis.curve_bn128)) return globalThis.curve_bn128;\n    const params = {\n        name: \"bn128\",\n        wasm: bn128wasm,\n        q: Scalar.e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\"),\n        r: Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\"),\n        n8q: 32,\n        n8r: 32,\n        cofactorG2: Scalar.e(\"30644e72e131a029b85045b68181585e06ceecda572a2489345f2299c0f9fa8d\", 16),\n        singleThread: singleThread ? true : false\n    };\n\n    const curve = await buildEngine(params);\n    curve.terminate = async function () {\n        if (!params.singleThread) {\n            globalThis.curve_bn128 = null;\n            await this.tm.terminate();\n        }\n    };\n\n    if (!singleThread) {\n        globalThis.curve_bn128 = curve;\n    }\n\n    return curve;\n}\n\n", "import WasmField1 from \"./wasm_field1.js\";\nimport WasmField2 from \"./wasm_field2.js\";\nimport WasmField3 from \"./wasm_field3.js\";\nimport WasmCurve from \"./wasm_curve.js\";\nimport buildThreadManager from \"./threadman.js\";\nimport * as Scalar from \"./scalar.js\";\nimport buildBatchApplyKey from \"./engine_applykey.js\";\nimport buildPairing from \"./engine_pairing.js\";\nimport buildMultiExp from \"./engine_multiexp.js\";\nimport buildFFT from \"./engine_fft.js\";\n\nexport default async function buildEngine(params) {\n\n    const tm = await buildThreadManager(params.wasm, params.singleThread);\n\n\n    const curve = {};\n\n    curve.q = Scalar.e(params.wasm.q.toString());\n    curve.r = Scalar.e(params.wasm.r.toString());\n    curve.name = params.name;\n    curve.tm = tm;\n    curve.prePSize = params.wasm.prePSize;\n    curve.preQSize = params.wasm.preQSize;\n    curve.Fr = new WasmField1(tm, \"frm\", params.n8r, params.r);\n    curve.F1 = new WasmField1(tm, \"f1m\", params.n8q, params.q);\n    curve.F2 = new WasmField2(tm, \"f2m\", curve.F1);\n    curve.G1 = new WasmCurve(tm, \"g1m\", curve.F1, params.wasm.pG1gen, params.wasm.pG1b, params.cofactorG1);\n    curve.G2 = new WasmCurve(tm, \"g2m\", curve.F2, params.wasm.pG2gen, params.wasm.pG2b, params.cofactorG2);\n    curve.F6 = new WasmField3(tm, \"f6m\", curve.F2);\n    curve.F12 = new WasmField2(tm, \"ftm\", curve.F6);\n\n    curve.Gt = curve.F12;\n\n    buildBatchApplyKey(curve, \"G1\");\n    buildBatchApplyKey(curve, \"G2\");\n    buildBatchApplyKey(curve, \"Fr\");\n\n    buildMultiExp(curve, \"G1\");\n    buildMultiExp(curve, \"G2\");\n\n    buildFFT(curve, \"G1\");\n    buildFFT(curve, \"G2\");\n    buildFFT(curve, \"Fr\");\n\n    buildPairing(curve);\n\n    curve.array2buffer = function(arr, sG) {\n        const buff = new Uint8Array(sG*arr.length);\n\n        for (let i=0; i<arr.length; i++) {\n            buff.set(arr[i], i*sG);\n        }\n\n        return buff;\n    };\n\n    curve.buffer2array = function(buff , sG) {\n        const n= buff.byteLength / sG;\n        const arr = new Array(n);\n        for (let i=0; i<n; i++) {\n            arr[i] = buff.slice(i*sG, i*sG+sG);\n        }\n        return arr;\n    };\n\n    return curve;\n}\n\n\n", "import * as Scalar from \"./scalar.js\";\nimport * as utils from \"./utils.js\";\nimport { getThreadRng } from \"./random.js\";\nimport buildBatchConvert from \"./engine_batchconvert.js\";\nimport BigBuffer from \"./bigbuffer.js\";\n\n\nexport default class WasmField1 {\n\n    constructor(tm, prefix, n8, p) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.p = p;\n        this.n8 = n8;\n        this.type = \"F1\";\n        this.m = 1;\n\n        this.half = Scalar.shiftRight(p, Scalar.one);\n        this.bitLength = Scalar.bitLength(p);\n        this.mask = Scalar.sub(Scalar.shiftLeft(Scalar.one, this.bitLength), Scalar.one);\n\n        this.pOp1 = tm.alloc(n8);\n        this.pOp2 = tm.alloc(n8);\n        this.pOp3 = tm.alloc(n8);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = this.tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = this.tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n        this.n64 = Math.floor(n8/8);\n        this.n32 = Math.floor(n8/4);\n\n        if(this.n64*8 != this.n8) {\n            throw new Error(\"n8 must be a multiple of 8\");\n        }\n\n        this.half = Scalar.shiftRight(this.p, Scalar.one);\n        this.nqr = this.two;\n        let r = this.exp(this.nqr, this.half);\n        while (!this.eq(r, this.negone)) {\n            this.nqr = this.add(this.nqr, this.one);\n            r = this.exp(this.nqr, this.half);\n        }\n\n        this.shift = this.mul(this.nqr, this.nqr);\n        this.shiftInv = this.inv(this.shift);\n\n        this.s = 0;\n        let t = Scalar.sub(this.p, Scalar.one);\n\n        while ( !Scalar.isOdd(t) ) {\n            this.s = this.s + 1;\n            t = Scalar.shiftRight(t, Scalar.one);\n        }\n\n        this.w = [];\n        this.w[this.s] = this.exp(this.nqr, t);\n\n        for (let i= this.s-1; i>=0; i--) {\n            this.w[i] = this.square(this.w[i+1]);\n        }\n\n        if (!this.eq(this.w[0], this.one)) {\n            throw new Error(\"Error calculating roots of unity\");\n        }\n\n        this.batchToMontgomery = buildBatchConvert(tm, prefix + \"_batchToMontgomery\", this.n8, this.n8);\n        this.batchFromMontgomery = buildBatchConvert(tm, prefix + \"_batchFromMontgomery\", this.n8, this.n8);\n    }\n\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        let ra = Scalar.e(a, b);\n        if (Scalar.isNegative(ra)) {\n            ra = Scalar.neg(ra);\n            if (Scalar.gt(ra, this.p)) {\n                ra = Scalar.mod(ra, this.p);\n            }\n            ra = Scalar.sub(this.p, ra);\n        } else {\n            if (Scalar.gt(ra, this.p)) {\n                ra = Scalar.mod(ra, this.p);\n            }\n        }\n        const buff = utils.leInt2Buff(ra, this.n8);\n        return this.toMontgomery(buff);\n    }\n\n    toString(a, radix) {\n        const an = this.fromMontgomery(a);\n        const s = Scalar.fromRprLE(an, 0);\n        return Scalar.toString(s, radix);\n    }\n\n    fromRng(rng) {\n        let v;\n        const buff = new Uint8Array(this.n8);\n        do {\n            v = Scalar.zero;\n            for (let i=0; i<this.n64; i++) {\n                v = Scalar.add(v,  Scalar.shiftLeft(rng.nextU64(), 64*i));\n            }\n            v = Scalar.band(v, this.mask);\n        } while (Scalar.geq(v, this.p));\n        Scalar.toRprLE(buff, 0, v, this.n8);\n        return buff;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const an = this.fromMontgomery(a);\n        return Scalar.fromRprLE(an, 0);\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.n8);\n        Scalar.toRprLE(buff, 0, a, this.n8);\n        return this.toMontgomery(buff);\n    }\n\n    toRprLE(buff, offset, a) {\n        buff.set(this.fromMontgomery(a), offset);\n    }\n\n    toRprBE(buff, offset, a) {\n        const buff2 = this.fromMontgomery(a);\n        for (let i=0; i<this.n8/2; i++) {\n            const aux = buff2[i];\n            buff2[i] = buff2[this.n8-1-i];\n            buff2[this.n8-1-i] = aux;\n        }\n        buff.set(buff2, offset);\n    }\n\n    fromRprLE(buff, offset) {\n        offset = offset || 0;\n        const res = buff.slice(offset, offset + this.n8);\n        return this.toMontgomery(res);\n    }\n\n    async batchInverse(buffIn) {\n        let returnArray = false;\n        const sIn = this.n8;\n        const sOut = this.n8;\n\n        if (Array.isArray(buffIn)) {\n            buffIn = utils.array2buffer(buffIn, sIn );\n            returnArray = true;\n        } else {\n            buffIn = buffIn.slice(0, buffIn.byteLength);\n        }\n\n        const nPoints = Math.floor(buffIn.byteLength / sIn);\n        if ( nPoints * sIn !== buffIn.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const pointsPerChunk = Math.floor(nPoints/this.tm.concurrency);\n        const opPromises = [];\n        for (let i=0; i<this.tm.concurrency; i++) {\n            let n;\n            if (i< this.tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff:buffChunk},\n                {cmd: \"ALLOC\", var: 1, len:sOut * n},\n                {cmd: \"CALL\", fnName: this.prefix + \"_batchInverse\", params: [\n                    {var: 0},\n                    {val: sIn},\n                    {val: n},\n                    {var: 1},\n                    {val: sOut},\n                ]},\n                {cmd: \"GET\", out: 0, var: 1, len:sOut * n},\n            ];\n            opPromises.push(\n                this.tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buffIn instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        if (returnArray) {\n            return utils.buffer2array(fullBuffOut, sOut);\n        } else {\n            return fullBuffOut;\n        }\n\n    }\n\n}\n\n\n", "/* global BigInt */\nimport * as Scalar from \"./scalar.js\";\n\nexport function stringifyBigInts(o) {\n    if (typeof o == \"bigint\" || o.eq !== undefined) {\n        return o.toString(10);\n    } else if (o instanceof Uint8Array) {\n        return Scalar.fromRprLE(o, 0);\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyBigInts);\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = stringifyBigInts(o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function unstringifyBigInts(o) {\n    if (typeof o == \"string\" && /^[0-9]+$/.test(o)) {\n        return BigInt(o);\n    } else if (typeof o == \"string\" && /^0x[0-9a-fA-F]+$/.test(o)) {\n        return BigInt(o);\n    } else if (Array.isArray(o)) {\n        return o.map(unstringifyBigInts);\n    } else if (typeof o == \"object\") {\n        if (o === null) return null;\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = unstringifyBigInts(o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function beBuff2int(buff) {\n    let res = BigInt(0);\n    let i = buff.length;\n    let offset = 0;\n    const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n    while (i > 0) {\n        if (i >= 4) {\n            i -= 4;\n            res += BigInt(buffV.getUint32(i)) << BigInt(offset * 8);\n            offset += 4;\n        } else if (i >= 2) {\n            i -= 2;\n            res += BigInt(buffV.getUint16(i)) << BigInt(offset * 8);\n            offset += 2;\n        } else {\n            i -= 1;\n            res += BigInt(buffV.getUint8(i)) << BigInt(offset * 8);\n            offset += 1;\n        }\n    }\n    return res;\n}\n\nexport function beInt2Buff(n, len) {\n    let r = n;\n    const buff = new Uint8Array(len);\n    const buffV = new DataView(buff.buffer);\n    let o = len;\n    while (o > 0) {\n        if (o - 4 >= 0) {\n            o -= 4;\n            buffV.setUint32(o, Number(r & BigInt(0xffffffff)));\n            r = r >> BigInt(32);\n        } else if (o - 2 >= 0) {\n            o -= 2;\n            buffV.setUint16(o, Number(r & BigInt(0xffff)));\n            r = r >> BigInt(16);\n        } else {\n            o -= 1;\n            buffV.setUint8(o, Number(r & BigInt(0xff)));\n            r = r >> BigInt(8);\n        }\n    }\n    if (r) {\n        throw new Error(\"Number does not fit in this length\");\n    }\n    return buff;\n}\n\nexport function leBuff2int(buff) {\n    let res = BigInt(0);\n    let i = 0;\n    const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n    while (i < buff.length) {\n        if (i + 4 <= buff.length) {\n            res += BigInt(buffV.getUint32(i, true)) << BigInt(i * 8);\n            i += 4;\n        } else if (i + 4 <= buff.length) {\n            res += BigInt(buffV.getUint16(i, true)) << BigInt(i * 8);\n            i += 2;\n        } else {\n            res += BigInt(buffV.getUint8(i, true)) << BigInt(i * 8);\n            i += 1;\n        }\n    }\n    return res;\n}\n\nexport function leInt2Buff(n, len) {\n    let r = n;\n    if (typeof len === \"undefined\") {\n        len = Math.floor((Scalar.bitLength(n) - 1) / 8) + 1;\n        if (len == 0) len = 1;\n    }\n    const buff = new Uint8Array(len);\n    const buffV = new DataView(buff.buffer);\n    let o = 0;\n    while (o < len) {\n        if (o + 4 <= len) {\n            buffV.setUint32(o, Number(r & BigInt(0xffffffff)), true);\n            o += 4;\n            r = r >> BigInt(32);\n        } else if (o + 2 <= len) {\n            buffV.setUint16(Number(o, r & BigInt(0xffff)), true);\n            o += 2;\n            r = r >> BigInt(16);\n        } else {\n            buffV.setUint8(Number(o, r & BigInt(0xff)), true);\n            o += 1;\n            r = r >> BigInt(8);\n        }\n    }\n    if (r) {\n        throw new Error(\"Number does not fit in this length\");\n    }\n    return buff;\n}\n\nexport function stringifyFElements(F, o) {\n    if (typeof o == \"bigint\" || o.eq !== undefined) {\n        return o.toString(10);\n    } else if (o instanceof Uint8Array) {\n        return F.toString(F.e(o));\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyFElements.bind(this, F));\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = stringifyFElements(F, o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function unstringifyFElements(F, o) {\n    if (typeof o == \"string\" && /^[0-9]+$/.test(o)) {\n        return F.e(o);\n    } else if (typeof o == \"string\" && /^0x[0-9a-fA-F]+$/.test(o)) {\n        return F.e(o);\n    } else if (Array.isArray(o)) {\n        return o.map(unstringifyFElements.bind(this, F));\n    } else if (typeof o == \"object\") {\n        if (o === null) return null;\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = unstringifyFElements(F, o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nconst _revTable = [];\nfor (let i = 0; i < 256; i++) {\n    _revTable[i] = _revSlow(i, 8);\n}\n\nfunction _revSlow(idx, bits) {\n    let res = 0;\n    let a = idx;\n    for (let i = 0; i < bits; i++) {\n        res <<= 1;\n        res = res | (a & 1);\n        a >>= 1;\n    }\n    return res;\n}\n\nexport function bitReverse(idx, bits) {\n    return (\n        (_revTable[idx >>> 24] |\n        (_revTable[(idx >>> 16) & 0xff] << 8) |\n        (_revTable[(idx >>> 8) & 0xff] << 16) |\n        (_revTable[idx & 0xff] << 24)) >>>\n        (32 - bits)\n    );\n}\n\nexport function log2(V) {\n    return (\n        ((V & 0xffff0000) !== 0 ? ((V &= 0xffff0000), 16) : 0) |\n        ((V & 0xff00ff00) !== 0 ? ((V &= 0xff00ff00), 8) : 0) |\n        ((V & 0xf0f0f0f0) !== 0 ? ((V &= 0xf0f0f0f0), 4) : 0) |\n        ((V & 0xcccccccc) !== 0 ? ((V &= 0xcccccccc), 2) : 0) |\n        ((V & 0xaaaaaaaa) !== 0)\n    );\n}\n\nexport function buffReverseBits(buff, eSize) {\n    const n = buff.byteLength / eSize;\n    const bits = log2(n);\n    if (n != 1 << bits) {\n        throw new Error(\"Invalid number of pointers\");\n    }\n    for (let i = 0; i < n; i++) {\n        const r = bitReverse(i, bits);\n        if (i > r) {\n            const tmp = buff.slice(i * eSize, (i + 1) * eSize);\n            buff.set(buff.slice(r * eSize, (r + 1) * eSize), i * eSize);\n            buff.set(tmp, r * eSize);\n        }\n    }\n}\n\nexport function array2buffer(arr, sG) {\n    const buff = new Uint8Array(sG * arr.length);\n\n    for (let i = 0; i < arr.length; i++) {\n        buff.set(arr[i], i * sG);\n    }\n\n    return buff;\n}\n\nexport function buffer2array(buff, sG) {\n    const n = buff.byteLength / sG;\n    const arr = new Array(n);\n    for (let i = 0; i < n; i++) {\n        arr[i] = buff.slice(i * sG, i * sG + sG);\n    }\n    return arr;\n}\n", "import BigBuffer from \"./bigbuffer.js\";\n\nexport default function buildBatchConvert(tm, fnName, sIn, sOut) {\n    return async function batchConvert(buffIn) {\n        const nPoints = Math.floor(buffIn.byteLength / sIn);\n        if ( nPoints * sIn !== buffIn.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const pointsPerChunk = Math.floor(nPoints/tm.concurrency);\n        const opPromises = [];\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff:buffChunk},\n                {cmd: \"ALLOC\", var: 1, len:sOut * n},\n                {cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {val: n},\n                    {var: 1}\n                ]},\n                {cmd: \"GET\", out: 0, var: 1, len:sOut * n},\n            ];\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buffIn instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n}\n", "\nconst PAGE_SIZE = 1<<30;\n\nexport default class BigBuffer {\n\n    constructor(size) {\n        this.buffers = [];\n        this.byteLength = size;\n        for (let i=0; i<size; i+= PAGE_SIZE) {\n            const n = Math.min(size-i, PAGE_SIZE);\n            this.buffers.push(new Uint8Array(n));\n        }\n\n    }\n\n    slice(fr, to) {\n        if ( to === undefined ) to = this.byteLength;\n        if ( fr === undefined ) fr = 0;\n        const len = to-fr;\n\n        const firstPage = Math.floor(fr / PAGE_SIZE);\n        const lastPage = Math.floor((fr+len-1) / PAGE_SIZE);\n\n        if ((firstPage == lastPage)||(len==0))\n            return this.buffers[firstPage].slice(fr%PAGE_SIZE, fr%PAGE_SIZE + len);\n\n        let buff;\n\n        let p = firstPage;\n        let o = fr % PAGE_SIZE;\n        // Remaining bytes to read\n        let r = len;\n        while (r>0) {\n            // bytes to copy from this page\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset+o, l);\n            if (l == len) return srcView.slice();\n            if (!buff) {\n                if (len <= PAGE_SIZE) {\n                    buff = new Uint8Array(len);\n                } else {\n                    buff = new BigBuffer(len);\n                }\n            }\n            buff.set(srcView, len-r);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n        return buff;\n    }\n\n    set(buff, offset) {\n        if (offset === undefined) offset = 0;\n\n        const len = buff.byteLength;\n\n        if (len==0) return;\n\n        const firstPage = Math.floor(offset / PAGE_SIZE);\n        const lastPage = Math.floor((offset+len-1) / PAGE_SIZE);\n\n        if (firstPage == lastPage) {\n            if ((buff instanceof BigBuffer)&&(buff.buffers.length==1)) {\n                return this.buffers[firstPage].set(buff.buffers[0], offset % PAGE_SIZE);\n            } else {\n                return this.buffers[firstPage].set(buff, offset % PAGE_SIZE);\n            }\n\n        }\n\n\n        let p = firstPage;\n        let o = offset % PAGE_SIZE;\n        let r = len;\n        while (r>0) {\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = buff.slice( len -r, len -r+l);\n            const dstView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset + o, l);\n            dstView.set(srcView);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n    }\n}\n", "import { getThreadRng } from \"./random.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nexport default class WasmField2 {\n\n    constructor(tm, prefix, F) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.F = F;\n        this.type = \"F2\";\n        this.m = F.m * 2;\n        this.n8 = this.F.n8*2;\n        this.n32 = this.F.n32*2;\n        this.n64 = this.F.n64*2;\n\n        this.pOp1 = tm.alloc(F.n8*2);\n        this.pOp2 = tm.alloc(F.n8*2);\n        this.pOp3 = tm.alloc(F.n8*2);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    mul1(a,b) {\n        return this.op2(\"_mul1\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        if ((Array.isArray(a)) && (a.length == 2)) {\n            const c1 = this.F.e(a[0], b);\n            const c2 = this.F.e(a[1], b);\n            const res = new Uint8Array(this.F.n8*2);\n            res.set(c1);\n            res.set(c2, this.F.n8*2);\n            return res;\n        } else {\n            throw new Error(\"invalid F2\");\n        }\n    }\n\n    toString(a, radix) {\n        const s1 = this.F.toString(a.slice(0, this.F.n8), radix);\n        const s2 = this.F.toString(a.slice(this.F.n8), radix);\n        return `[${s1}, ${s2}]`;\n    }\n\n    fromRng(rng) {\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        const res = new Uint8Array(this.F.n8*2);\n        res.set(c1);\n        res.set(c2, this.F.n8);\n        return res;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const c1 = this.F.toObject(a.slice(0, this.F.n8));\n        const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        return [c1, c2];\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.F.n8*2);\n        const b1 = this.F.fromObject(a[0]);\n        const b2 = this.F.fromObject(a[1]);\n        buff.set(b1);\n        buff.set(b2, this.F.n8);\n        return buff;\n    }\n\n    c1(a) {\n        return a.slice(0, this.F.n8);\n    }\n\n    c2(a) {\n        return a.slice(this.F.n8);\n    }\n\n}\n\n", "\n\nimport { getThreadRng } from \"./random.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nexport default class WasmField3 {\n\n    constructor(tm, prefix, F) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.F = F;\n        this.type = \"F3\";\n        this.m = F.m * 3;\n        this.n8 = this.F.n8*3;\n        this.n32 = this.F.n32*3;\n        this.n64 = this.F.n64*3;\n\n        this.pOp1 = tm.alloc(F.n8*3);\n        this.pOp2 = tm.alloc(F.n8*3);\n        this.pOp3 = tm.alloc(F.n8*3);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.getBuff(this.pOp3, this.n8);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        if ((Array.isArray(a)) && (a.length == 3)) {\n            const c1 = this.F.e(a[0], b);\n            const c2 = this.F.e(a[1], b);\n            const c3 = this.F.e(a[2], b);\n            const res = new Uint8Array(this.F.n8*3);\n            res.set(c1);\n            res.set(c2, this.F.n8);\n            res.set(c3, this.F.n8*2);\n            return res;\n        } else {\n            throw new Error(\"invalid F3\");\n        }\n    }\n\n    toString(a, radix) {\n        const s1 = this.F.toString(a.slice(0, this.F.n8), radix);\n        const s2 = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);\n        const s3 = this.F.toString(a.slice(this.F.n8*2), radix);\n        return `[${s1}, ${s2}, ${s3}]`;\n    }\n\n    fromRng(rng) {\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        const c3 = this.F.fromRng(rng);\n        const res = new Uint8Array(this.F.n8*3);\n        res.set(c1);\n        res.set(c2, this.F.n8);\n        res.set(c3, this.F.n8*2);\n        return res;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const c1 = this.F.toObject(a.slice(0, this.F.n8));\n        const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        const c3 = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));\n        return [c1, c2, c3];\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.F.n8*3);\n        const b1 = this.F.fromObject(a[0]);\n        const b2 = this.F.fromObject(a[1]);\n        const b3 = this.F.fromObject(a[2]);\n        buff.set(b1);\n        buff.set(b2, this.F.n8);\n        buff.set(b3, this.F.n8*2);\n        return buff;\n    }\n\n    c1(a) {\n        return a.slice(0, this.F.n8);\n    }\n\n    c2(a) {\n        return a.slice(this.F.n8, this.F.n8*2);\n    }\n\n    c3(a) {\n        return a.slice(this.F.n8*2);\n    }\n\n}\n\n\n", "\n\nimport * as Scalar from \"./scalar.js\";\nimport buildBatchConvert from \"./engine_batchconvert.js\";\n\nexport default class WasmCurve {\n\n    constructor(tm, prefix, F, pGen, pGb, cofactor) {\n        this.tm = tm;\n        this.prefix = prefix;\n        this.F = F;\n\n        this.pOp1 = tm.alloc(F.n8*3);\n        this.pOp2 = tm.alloc(F.n8*3);\n        this.pOp3 = tm.alloc(F.n8*3);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = this.tm.getBuff(this.pOp1, F.n8*3);\n        this.tm.instance.exports[prefix + \"_zeroAffine\"](this.pOp1);\n        this.zeroAffine = this.tm.getBuff(this.pOp1, F.n8*2);\n        this.one = this.tm.getBuff(pGen, F.n8*3);\n        this.g = this.one;\n        this.oneAffine = this.tm.getBuff(pGen, F.n8*2);\n        this.gAffine = this.oneAffine;\n        this.b = this.tm.getBuff(pGb, F.n8);\n\n        if (cofactor) {\n            this.cofactor = Scalar.toLEBuff(cofactor);\n        }\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n        this.batchLEMtoC = buildBatchConvert(tm, prefix + \"_batchLEMtoC\", F.n8*2, F.n8);\n        this.batchLEMtoU = buildBatchConvert(tm, prefix + \"_batchLEMtoU\", F.n8*2, F.n8*2);\n        this.batchCtoLEM = buildBatchConvert(tm, prefix + \"_batchCtoLEM\", F.n8, F.n8*2);\n        this.batchUtoLEM = buildBatchConvert(tm, prefix + \"_batchUtoLEM\", F.n8*2, F.n8*2);\n        this.batchToJacobian = buildBatchConvert(tm, prefix + \"_batchToJacobian\", F.n8*2, F.n8*3);\n        this.batchToAffine = buildBatchConvert(tm, prefix + \"_batchToAffine\", F.n8*3, F.n8*2);\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    op2bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    op1Affine(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*2);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_add\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_addMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_addMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_addAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    sub(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_sub\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_subMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_subMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_subAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    neg(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1(\"_neg\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1Affine(\"_negAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    double(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1(\"_double\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1(\"_doubleAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    isZero(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1Bool(\"_isZero\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1Bool(\"_isZeroAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    timesScalar(a, s) {\n        if (!(s instanceof Uint8Array)) {\n            s = Scalar.toLEBuff(Scalar.e(s));\n        }\n        let fnName;\n        if (a.byteLength == this.F.n8*3) {\n            fnName = this.prefix + \"_timesScalar\";\n        } else if (a.byteLength == this.F.n8*2) {\n            fnName = this.prefix + \"_timesScalarAffine\";\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, s);\n        this.tm.instance.exports[fnName](this.pOp1, this.pOp2, s.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    timesFr(a, s) {\n        let fnName;\n        if (a.byteLength == this.F.n8*3) {\n            fnName = this.prefix + \"_timesFr\";\n        } else if (a.byteLength == this.F.n8*2) {\n            fnName = this.prefix + \"_timesFrAffine\";\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, s);\n        this.tm.instance.exports[fnName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    eq(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2bool(\"_eq\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2bool(\"_eqMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2bool(\"_eqMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2bool(\"_eqAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toAffine(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1Affine(\"_toAffine\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return a;\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toJacobian(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return a;\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1(\"_toJacobian\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toRprUncompressed(arr, offset, a) {\n        this.tm.setBuff(this.pOp1, a);\n        if (a.byteLength == this.F.n8*3) {\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n        } else if (a.byteLength != this.F.n8*2) {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.instance.exports[this.prefix + \"_LEMtoU\"](this.pOp1, this.pOp1);\n        const res = this.tm.getBuff(this.pOp1, this.F.n8*2);\n        arr.set(res, offset);\n    }\n\n    fromRprUncompressed(arr, offset) {\n        const buff = arr.slice(offset, offset + this.F.n8*2);\n        this.tm.setBuff(this.pOp1, buff);\n        this.tm.instance.exports[this.prefix + \"_UtoLEM\"](this.pOp1, this.pOp1);\n        return this.tm.getBuff(this.pOp1, this.F.n8*2);\n    }\n\n    toRprCompressed(arr, offset, a) {\n        this.tm.setBuff(this.pOp1, a);\n        if (a.byteLength == this.F.n8*3) {\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n        } else if (a.byteLength != this.F.n8*2) {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.instance.exports[this.prefix + \"_LEMtoC\"](this.pOp1, this.pOp1);\n        const res = this.tm.getBuff(this.pOp1, this.F.n8);\n        arr.set(res, offset);\n    }\n\n    fromRprCompressed(arr, offset) {\n        const buff = arr.slice(offset, offset + this.F.n8);\n        this.tm.setBuff(this.pOp1, buff);\n        this.tm.instance.exports[this.prefix + \"_CtoLEM\"](this.pOp1, this.pOp2);\n        return this.tm.getBuff(this.pOp2, this.F.n8*2);\n    }\n\n    toUncompressed(a) {\n        const buff = new Uint8Array(this.F.n8*2);\n        this.toRprUncompressed(buff, 0, a);\n        return buff;\n    }\n\n    toRprLEM(arr, offset, a) {\n        if (a.byteLength == this.F.n8*2) {\n            arr.set(a, offset);\n            return;\n        } else if (a.byteLength == this.F.n8*3) {\n            this.tm.setBuff(this.pOp1, a);\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n            const res = this.tm.getBuff(this.pOp1, this.F.n8*2);\n            arr.set(res, offset);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    fromRprLEM(arr, offset) {\n        offset = offset || 0;\n        return arr.slice(offset, offset+this.F.n8*2);\n    }\n\n    toString(a, radix) {\n        if (a.byteLength == this.F.n8*3) {\n            const x = this.F.toString(a.slice(0, this.F.n8), radix);\n            const y = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);\n            const z = this.F.toString(a.slice(this.F.n8*2), radix);\n            return `[ ${x}, ${y}, ${z} ]`;\n        } else if (a.byteLength == this.F.n8*2) {\n            const x = this.F.toString(a.slice(0, this.F.n8), radix);\n            const y = this.F.toString(a.slice(this.F.n8), radix);\n            return `[ ${x}, ${y} ]`;\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    isValid(a) {\n        if (this.isZero(a)) return true;\n        const F = this.F;\n        const aa = this.toAffine(a);\n        const x = aa.slice(0, this.F.n8);\n        const y = aa.slice(this.F.n8, this.F.n8*2);\n        const x3b = F.add(F.mul(F.square(x),x), this.b);\n        const y2 = F.square(y);\n        return F.eq(x3b, y2);\n    }\n\n    fromRng(rng) {\n        const F = this.F;\n        let P = [];\n        let greatest;\n        let x3b;\n        do {\n            P[0] = F.fromRng(rng);\n            greatest = rng.nextBool();\n            x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n        } while (!F.isSquare(x3b));\n\n        P[1] = F.sqrt(x3b);\n\n        const s = F.isNegative(P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n\n        let Pbuff = new Uint8Array(this.F.n8*2);\n        Pbuff.set(P[0]);\n        Pbuff.set(P[1], this.F.n8);\n\n        if (this.cofactor) {\n            Pbuff = this.timesScalar(Pbuff, this.cofactor);\n        }\n\n        return Pbuff;\n    }\n\n\n\n    toObject(a) {\n        if (this.isZero(a)) {\n            return [\n                this.F.toObject(this.F.zero),\n                this.F.toObject(this.F.one),\n                this.F.toObject(this.F.zero),\n            ];\n        }\n        const x = this.F.toObject(a.slice(0, this.F.n8));\n        const y = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        let z;\n        if (a.byteLength == this.F.n8*3) {\n            z = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));\n        } else {\n            z = this.F.toObject(this.F.one);\n        }\n        return [x, y, z];\n    }\n\n    fromObject(a) {\n        const x = this.F.fromObject(a[0]);\n        const y = this.F.fromObject(a[1]);\n        let z;\n        if (a.length==3) {\n            z = this.F.fromObject(a[2]);\n        } else {\n            z = this.F.one;\n        }\n        if (this.F.isZero(z, this.F.one)) {\n            return this.zeroAffine;\n        } else if (this.F.eq(z, this.F.one)) {\n            const buff = new Uint8Array(this.F.n8*2);\n            buff.set(x);\n            buff.set(y, this.F.n8);\n            return buff;\n        } else {\n            const buff = new Uint8Array(this.F.n8*3);\n            buff.set(x);\n            buff.set(y, this.F.n8);\n            buff.set(z, this.F.n8*2);\n            return buff;\n        }\n    }\n\n    e(a) {\n        if (a instanceof Uint8Array) return a;\n        return this.fromObject(a);\n    }\n\n    x(a) {\n        const tmp = this.toAffine(a);\n        return tmp.slice(0, this.F.n8);\n    }\n\n    y(a) {\n        const tmp = this.toAffine(a);\n        return tmp.slice(this.F.n8);\n    }\n\n}\n\n\n", "/* global navigator, WebAssembly */\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// const MEM_SIZE = 1000;  // Memory size in 64K Pakes (512Mb)\nconst MEM_SIZE = 25;  // Memory size in 64K Pakes (1600Kb)\n\n\nimport thread from \"./threadman_thread.js\";\nimport os from \"os\";\nimport Worker from \"web-worker\";\n\nclass Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject)=> {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction stringToBase64(str) {\n    if (process.browser) {\n        return globalThis.btoa(str);\n    } else {\n        return Buffer.from(str).toString(\"base64\");\n    }\n}\n\nconst threadSource = stringToBase64(\"(\" + thread.toString() + \")(self)\");\nconst workerSource = \"data:application/javascript;base64,\" + threadSource;\n\n\n\nexport default async function buildThreadManager(wasm, singleThread) {\n    const tm = new ThreadManager();\n\n    tm.memory = new WebAssembly.Memory({initial:MEM_SIZE});\n    tm.u8 = new Uint8Array(tm.memory.buffer);\n    tm.u32 = new Uint32Array(tm.memory.buffer);\n\n    const wasmModule = await WebAssembly.compile(wasm.code);\n\n    tm.instance = await WebAssembly.instantiate(wasmModule, {\n        env: {\n            \"memory\": tm.memory\n        }\n    });\n\n    tm.singleThread = singleThread;\n    tm.initalPFree = tm.u32[0];   // Save the Pointer to free space.\n    tm.pq = wasm.pq;\n    tm.pr = wasm.pr;\n    tm.pG1gen = wasm.pG1gen;\n    tm.pG1zero = wasm.pG1zero;\n    tm.pG2gen = wasm.pG2gen;\n    tm.pG2zero = wasm.pG2zero;\n    tm.pOneT = wasm.pOneT;\n\n    //    tm.pTmp0 = tm.alloc(curve.G2.F.n8*3);\n    //    tm.pTmp1 = tm.alloc(curve.G2.F.n8*3);\n\n\n    if (singleThread) {\n        tm.code = wasm.code;\n        tm.taskManager = thread();\n        await tm.taskManager([{\n            cmd: \"INIT\",\n            init: MEM_SIZE,\n            code: tm.code.slice()\n        }]);\n        tm.concurrency  = 1;\n    } else {\n        tm.workers = [];\n        tm.pendingDeferreds = [];\n        tm.working = [];\n\n        let concurrency;\n\n        if ((typeof(navigator) === \"object\") && navigator.hardwareConcurrency) {\n            concurrency = navigator.hardwareConcurrency;\n        } else {\n            concurrency = os.cpus().length;\n        }\n\n        if(concurrency == 0){\n            concurrency = 2;\n        }\n\n        // Limit to 64 threads for memory reasons.\n        if (concurrency>64) concurrency=64;\n        tm.concurrency = concurrency;\n\n        for (let i = 0; i<concurrency; i++) {\n\n            tm.workers[i] = new Worker(workerSource);\n\n            tm.workers[i].addEventListener(\"message\", getOnMsg(i));\n\n            tm.working[i]=false;\n        }\n\n        const initPromises = [];\n        for (let i=0; i<tm.workers.length;i++) {\n            const copyCode = wasm.code.slice();\n            initPromises.push(tm.postAction(i, [{\n                cmd: \"INIT\",\n                init: MEM_SIZE,\n                code: copyCode\n            }], [copyCode.buffer]));\n        }\n\n        await Promise.all(initPromises);\n\n    }\n    return tm;\n\n    function getOnMsg(i) {\n        return function(e) {\n            let data;\n            if ((e)&&(e.data)) {\n                data = e.data;\n            } else {\n                data = e;\n            }\n\n            tm.working[i]=false;\n            tm.pendingDeferreds[i].resolve(data);\n            tm.processWorks();\n        };\n    }\n\n}\n\nclass ThreadManager {\n    constructor() {\n        this.actionQueue = [];\n        this.oldPFree = 0;\n    }\n\n    startSyncOp() {\n        if (this.oldPFree != 0) throw new Error(\"Sync operation in progress\");\n        this.oldPFree = this.u32[0];\n    }\n\n    endSyncOp() {\n        if (this.oldPFree == 0) throw new Error(\"No sync operation in progress\");\n        this.u32[0] = this.oldPFree;\n        this.oldPFree = 0;\n    }\n\n    postAction(workerId, e, transfers, _deferred) {\n        if (this.working[workerId]) {\n            throw new Error(\"Posting a job t a working worker\");\n        }\n        this.working[workerId] = true;\n\n        this.pendingDeferreds[workerId] = _deferred ? _deferred : new Deferred();\n        this.workers[workerId].postMessage(e, transfers);\n\n        return this.pendingDeferreds[workerId].promise;\n    }\n\n    processWorks() {\n        for (let i=0; (i<this.workers.length)&&(this.actionQueue.length > 0); i++) {\n            if (this.working[i] == false) {\n                const work = this.actionQueue.shift();\n                this.postAction(i, work.data, work.transfers, work.deferred);\n            }\n        }\n    }\n\n    queueAction(actionData, transfers) {\n        const d = new Deferred();\n\n        if (this.singleThread) {\n            const res = this.taskManager(actionData);\n            d.resolve(res);\n        } else {\n            this.actionQueue.push({\n                data: actionData,\n                transfers: transfers,\n                deferred: d\n            });\n            this.processWorks();\n        }\n        return d.promise;\n    }\n\n    resetMemory() {\n        this.u32[0] = this.initalPFree;\n    }\n\n    allocBuff(buff) {\n        const pointer = this.alloc(buff.byteLength);\n        this.setBuff(pointer, buff);\n        return pointer;\n    }\n\n    getBuff(pointer, length) {\n        return this.u8.slice(pointer, pointer+ length);\n    }\n\n    setBuff(pointer, buffer) {\n        this.u8.set(new Uint8Array(buffer), pointer);\n    }\n\n    alloc(length) {\n        while (this.u32[0] & 3) this.u32[0]++;  // Return always aligned pointers\n        const res = this.u32[0];\n        this.u32[0] += length;\n        return res;\n    }\n\n    async terminate() {\n        for (let i=0; i<this.workers.length; i++) {\n            this.workers[i].postMessage([{cmd: \"TERMINATE\"}]);\n        }\n        await sleep(200);\n    }\n\n}\n", "/* global WebAssembly */\n\nexport default function thread(self) {\n    const MAXMEM = 32767;\n    let instance;\n    let memory;\n\n    if (self) {\n        self.onmessage = function(e) {\n            let data;\n            if (e.data) {\n                data = e.data;\n            } else {\n                data = e;\n            }\n\n            if (data[0].cmd == \"INIT\") {\n                init(data[0]).then(function() {\n                    self.postMessage(data.result);\n                });\n            } else if (data[0].cmd == \"TERMINATE\") {\n                self.close();\n            } else {\n                const res = runTask(data);\n                self.postMessage(res);\n            }\n        };\n    }\n\n    async function init(data) {\n        const code = new Uint8Array(data.code);\n        const wasmModule = await WebAssembly.compile(code);\n        memory = new WebAssembly.Memory({initial:data.init, maximum: MAXMEM});\n\n        instance = await WebAssembly.instantiate(wasmModule, {\n            env: {\n                \"memory\": memory\n            }\n        });\n    }\n\n\n\n    function alloc(length) {\n        const u32 = new Uint32Array(memory.buffer, 0, 1);\n        while (u32[0] & 3) u32[0]++;  // Return always aligned pointers\n        const res = u32[0];\n        u32[0] += length;\n        if (u32[0] + length > memory.buffer.byteLength) {\n            const currentPages = memory.buffer.byteLength / 0x10000;\n            let requiredPages = Math.floor((u32[0] + length) / 0x10000)+1;\n            if (requiredPages>MAXMEM) requiredPages=MAXMEM;\n            memory.grow(requiredPages-currentPages);\n        }\n        return res;\n    }\n\n    function allocBuffer(buffer) {\n        const p = alloc(buffer.byteLength);\n        setBuffer(p, buffer);\n        return p;\n    }\n\n    function getBuffer(pointer, length) {\n        const u8 = new Uint8Array(memory.buffer);\n        return new Uint8Array(u8.buffer, u8.byteOffset + pointer, length);\n    }\n\n    function setBuffer(pointer, buffer) {\n        const u8 = new Uint8Array(memory.buffer);\n        u8.set(new Uint8Array(buffer), pointer);\n    }\n\n    function runTask(task) {\n        if (task[0].cmd == \"INIT\") {\n            return init(task[0]);\n        }\n        const ctx = {\n            vars: [],\n            out: []\n        };\n        const u32a = new Uint32Array(memory.buffer, 0, 1);\n        const oldAlloc = u32a[0];\n        for (let i=0; i<task.length; i++) {\n            switch (task[i].cmd) {\n            case \"ALLOCSET\":\n                ctx.vars[task[i].var] = allocBuffer(task[i].buff);\n                break;\n            case \"ALLOC\":\n                ctx.vars[task[i].var] = alloc(task[i].len);\n                break;\n            case \"SET\":\n                setBuffer(ctx.vars[task[i].var], task[i].buff);\n                break;\n            case \"CALL\": {\n                const params = [];\n                for (let j=0; j<task[i].params.length; j++) {\n                    const p = task[i].params[j];\n                    if (typeof p.var !== \"undefined\") {\n                        params.push(ctx.vars[p.var] + (p.offset || 0));\n                    } else if (typeof p.val != \"undefined\") {\n                        params.push(p.val);\n                    }\n                }\n                instance.exports[task[i].fnName](...params);\n                break;\n            }\n            case \"GET\":\n                ctx.out[task[i].out] = getBuffer(ctx.vars[task[i].var], task[i].len).slice();\n                break;\n            default:\n                throw new Error(\"Invalid cmd\");\n            }\n        }\n        const u32b = new Uint32Array(memory.buffer, 0, 1);\n        u32b[0] = oldAlloc;\n        return ctx.out;\n    }\n\n\n    return runTask;\n}\n", "import BigBuffer from \"./bigbuffer.js\";\n\nexport default function buildBatchApplyKey(curve, groupName) {\n    const G = curve[groupName];\n    const Fr = curve.Fr;\n    const tm = curve.tm;\n\n    curve[groupName].batchApplyKey = async function(buff, first, inc, inType, outType) {\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n        let fnName, fnAffine;\n        let sGin, sGmid, sGout;\n        if (groupName == \"G1\") {\n            if (inType == \"jacobian\") {\n                sGin = G.F.n8*3;\n                fnName = \"g1m_batchApplyKey\";\n            } else {\n                sGin = G.F.n8*2;\n                fnName = \"g1m_batchApplyKeyMixed\";\n            }\n            sGmid = G.F.n8*3;\n            if (outType == \"jacobian\") {\n                sGout = G.F.n8*3;\n            } else {\n                fnAffine = \"g1m_batchToAffine\";\n                sGout = G.F.n8*2;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"jacobian\") {\n                sGin = G.F.n8*3;\n                fnName = \"g2m_batchApplyKey\";\n            } else {\n                sGin = G.F.n8*2;\n                fnName = \"g2m_batchApplyKeyMixed\";\n            }\n            sGmid = G.F.n8*3;\n            if (outType == \"jacobian\") {\n                sGout = G.F.n8*3;\n            } else {\n                fnAffine = \"g2m_batchToAffine\";\n                sGout = G.F.n8*2;\n            }\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_batchApplyKey\";\n            sGin = G.n8;\n            sGmid = G.n8;\n            sGout = G.n8;\n        } else {\n            throw new Error(\"Invalid group: \" + groupName);\n        }\n        const nPoints = Math.floor(buff.byteLength / sGin);\n        const pointsPerChunk = Math.floor(nPoints/tm.concurrency);\n        const opPromises = [];\n        inc = Fr.e(inc);\n        let t = Fr.e(first);\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const task = [];\n\n            task.push({\n                cmd: \"ALLOCSET\",\n                var: 0,\n                buff: buff.slice(i*pointsPerChunk*sGin, i*pointsPerChunk*sGin + n*sGin)\n            });\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: t});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: inc});\n            task.push({cmd: \"ALLOC\", var: 3, len: n*Math.max(sGmid, sGout)});\n            task.push({\n                cmd: \"CALL\",\n                fnName: fnName,\n                params: [\n                    {var: 0},\n                    {val: n},\n                    {var: 1},\n                    {var: 2},\n                    {var:3}\n                ]\n            });\n            if (fnAffine) {\n                task.push({\n                    cmd: \"CALL\",\n                    fnName: fnAffine,\n                    params: [\n                        {var: 3},\n                        {val: n},\n                        {var: 3},\n                    ]\n                });\n            }\n            task.push({cmd: \"GET\", out: 0, var: 3, len: n*sGout});\n\n            opPromises.push(tm.queueAction(task));\n            t = Fr.mul(t, Fr.exp(inc, n));\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let outBuff;\n        if (buff instanceof BigBuffer) {\n            outBuff = new BigBuffer(nPoints*sGout);\n        } else {\n            outBuff = new Uint8Array(nPoints*sGout);\n        }\n\n        let p=0;\n        for (let i=0; i<result.length; i++) {\n            outBuff.set(result[i][0], p);\n            p += result[i][0].byteLength;\n        }\n\n        return outBuff;\n    };\n}\n", "\nexport default function buildPairing(curve) {\n    const tm = curve.tm;\n    curve.pairing = function pairing(a, b) {\n\n        tm.startSyncOp();\n        const pA = tm.allocBuff(curve.G1.toJacobian(a));\n        const pB = tm.allocBuff(curve.G2.toJacobian(b));\n        const pRes = tm.alloc(curve.Gt.n8);\n        tm.instance.exports[curve.name + \"_pairing\"](pA, pB, pRes);\n\n        const res = tm.getBuff(pRes, curve.Gt.n8);\n\n        tm.endSyncOp();\n        return res;\n    };\n\n    curve.pairingEq = async function pairingEq() {\n        let  buffCt;\n        let nEqs;\n        if ((arguments.length % 2) == 1) {\n            buffCt = arguments[arguments.length-1];\n            nEqs = (arguments.length -1) /2;\n        } else {\n            buffCt = curve.Gt.one;\n            nEqs = arguments.length /2;\n        }\n\n        const opPromises = [];\n        for (let i=0; i<nEqs; i++) {\n\n            const task = [];\n\n            const g1Buff = curve.G1.toJacobian(arguments[i*2]);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: g1Buff});\n            task.push({cmd: \"ALLOC\", var: 1, len: curve.prePSize});\n\n            const g2Buff = curve.G2.toJacobian(arguments[i*2 +1]);\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: g2Buff});\n            task.push({cmd: \"ALLOC\", var: 3, len: curve.preQSize});\n\n            task.push({cmd: \"ALLOC\", var: 4, len: curve.Gt.n8});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_prepareG1\", params: [\n                {var: 0},\n                {var: 1}\n            ]});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_prepareG2\", params: [\n                {var: 2},\n                {var: 3}\n            ]});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_millerLoop\", params: [\n                {var: 1},\n                {var: 3},\n                {var: 4}\n            ]});\n\n            task.push({cmd: \"GET\", out: 0, var: 4, len: curve.Gt.n8});\n\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        tm.startSyncOp();\n        const pRes = tm.alloc(curve.Gt.n8);\n        tm.instance.exports.ftm_one(pRes);\n\n        for (let i=0; i<result.length; i++) {\n            const pMR = tm.allocBuff(result[i][0]);\n            tm.instance.exports.ftm_mul(pRes, pMR, pRes);\n        }\n        tm.instance.exports[curve.name + \"_finalExponentiation\"](pRes, pRes);\n\n        const pCt = tm.allocBuff(buffCt);\n\n        const r = !!tm.instance.exports.ftm_eq(pRes, pCt);\n\n        tm.endSyncOp();\n\n        return r;\n    };\n\n    curve.prepareG1 = function(p) {\n        this.tm.startSyncOp();\n        const pP = this.tm.allocBuff(p);\n        const pPrepP = this.tm.alloc(this.prePSize);\n        this.tm.instance.exports[this.name + \"_prepareG1\"](pP, pPrepP);\n        const res = this.tm.getBuff(pPrepP, this.prePSize);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.prepareG2 = function(q) {\n        this.tm.startSyncOp();\n        const pQ = this.tm.allocBuff(q);\n        const pPrepQ = this.tm.alloc(this.preQSize);\n        this.tm.instance.exports[this.name + \"_prepareG2\"](pQ, pPrepQ);\n        const res = this.tm.getBuff(pPrepQ, this.preQSize);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.millerLoop = function(preP, preQ) {\n        this.tm.startSyncOp();\n        const pPreP = this.tm.allocBuff(preP);\n        const pPreQ = this.tm.allocBuff(preQ);\n        const pRes = this.tm.alloc(this.Gt.n8);\n        this.tm.instance.exports[this.name + \"_millerLoop\"](pPreP, pPreQ, pRes);\n        const res = this.tm.getBuff(pRes, this.Gt.n8);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.finalExponentiation = function(a) {\n        this.tm.startSyncOp();\n        const pA = this.tm.allocBuff(a);\n        const pRes = this.tm.alloc(this.Gt.n8);\n        this.tm.instance.exports[this.name + \"_finalExponentiation\"](pA, pRes);\n        const res = this.tm.getBuff(pRes, this.Gt.n8);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n}\n", "import { log2 } from \"./utils.js\";\n\nconst pTSizes = [\n    1 ,  1,  1,  1,    2,  3,  4,  5,\n    6 ,  7,  7,  8,    9, 10, 11, 12,\n    13, 13, 14, 15,   16, 16, 17, 17,\n    17, 17, 17, 17,   17, 17, 17, 17\n];\n\nexport default function buildMultiexp(curve, groupName) {\n    const G = curve[groupName];\n    const tm = G.tm;\n    async function _multiExpChunk(buffBases, buffScalars, inType, logger, logText) {\n        if ( ! (buffBases instanceof Uint8Array) ) {\n            if (logger) logger.error(`${logText} _multiExpChunk buffBases is not Uint8Array`);\n            throw new Error(`${logText} _multiExpChunk buffBases is not Uint8Array`);\n        }\n        if ( ! (buffScalars instanceof Uint8Array) ) {\n            if (logger) logger.error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);\n            throw new Error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);\n        }\n        inType = inType || \"affine\";\n\n        let sGIn;\n        let fnName;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                fnName = \"g1m_multiexpAffine_chunk\";\n                sGIn = G.F.n8*2;\n            } else {\n                fnName = \"g1m_multiexp_chunk\";\n                sGIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                fnName = \"g2m_multiexpAffine_chunk\";\n                sGIn = G.F.n8*2;\n            } else {\n                fnName = \"g2m_multiexp_chunk\";\n                sGIn = G.F.n8*3;\n            }\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n        const nPoints = Math.floor(buffBases.byteLength / sGIn);\n\n        if (nPoints == 0) return G.zero;\n        const sScalar = Math.floor(buffScalars.byteLength / nPoints);\n        if( sScalar * nPoints != buffScalars.byteLength) {\n            throw new Error(\"Scalar size does not match\");\n        }\n\n        const bitChunkSize = pTSizes[log2(nPoints)];\n        const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff: buffBases},\n                {cmd: \"ALLOCSET\", var: 1, buff: buffScalars},\n                {cmd: \"ALLOC\", var: 2, len: G.F.n8*3},\n                {cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {var: 1},\n                    {val: sScalar},\n                    {val: nPoints},\n                    {val: i*bitChunkSize},\n                    {val: Math.min(sScalar*8 - i*bitChunkSize, bitChunkSize)},\n                    {var: 2}\n                ]},\n                {cmd: \"GET\", out: 0, var: 2, len: G.F.n8*3}\n            ];\n            opPromises.push(\n                G.tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let res = G.zero;\n        for (let i=result.length-1; i>=0; i--) {\n            if (!G.isZero(res)) {\n                for (let j=0; j<bitChunkSize; j++) res = G.double(res);\n            }\n            res = G.add(res, result[i][0]);\n        }\n\n        return res;\n    }\n\n    async function _multiExp(buffBases, buffScalars, inType, logger, logText) {\n        const MAX_CHUNK_SIZE = 1 << 22;\n        const MIN_CHUNK_SIZE = 1 << 10;\n        let sGIn;\n\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sGIn = G.F.n8*2;\n            } else {\n                sGIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sGIn = G.F.n8*2;\n            } else {\n                sGIn = G.F.n8*3;\n            }\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buffBases.byteLength / sGIn);\n        const sScalar = Math.floor(buffScalars.byteLength / nPoints);\n        if( sScalar * nPoints != buffScalars.byteLength) {\n            throw new Error(\"Scalar size does not match\");\n        }\n\n        const bitChunkSize = pTSizes[log2(nPoints)];\n        const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;\n\n        let chunkSize;\n        chunkSize = Math.floor(nPoints / (tm.concurrency /nChunks));\n        if (chunkSize>MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;\n        if (chunkSize<MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;\n\n        const opPromises = [];\n        for (let i=0; i<nPoints; i += chunkSize) {\n            if (logger) logger.debug(`Multiexp start: ${logText}: ${i}/${nPoints}`);\n            const n= Math.min(nPoints - i, chunkSize);\n            const buffBasesChunk = buffBases.slice(i*sGIn, (i+n)*sGIn);\n            const buffScalarsChunk = buffScalars.slice(i*sScalar, (i+n)*sScalar);\n            opPromises.push(_multiExpChunk(buffBasesChunk, buffScalarsChunk, inType, logger, logText).then( (r) => {\n                if (logger) logger.debug(`Multiexp end: ${logText}: ${i}/${nPoints}`);\n                return r;\n            }));\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let res = G.zero;\n        for (let i=result.length-1; i>=0; i--) {\n            res = G.add(res, result[i]);\n        }\n\n        return res;\n    }\n\n    G.multiExp = async function multiExpAffine(buffBases, buffScalars, logger, logText) {\n        return await _multiExp(buffBases, buffScalars, \"jacobian\", logger, logText);\n    };\n    G.multiExpAffine = async function multiExpAffine(buffBases, buffScalars, logger, logText) {\n        return await _multiExp(buffBases, buffScalars, \"affine\", logger, logText);\n    };\n}\n", "import {log2, buffReverseBits, array2buffer, buffer2array} from \"./utils.js\";\nimport BigBuffer from \"./bigbuffer.js\";\n\n\nexport default function buildFFT(curve, groupName) {\n    const G = curve[groupName];\n    const Fr = curve.Fr;\n    const tm = G.tm;\n    async function _fft(buff, inverse, inType, outType, logger, loggerTxt) {\n\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n        const MAX_BITS_THREAD = 14;\n\n        let sIn, sMid, sOut, fnIn2Mid, fnMid2Out, fnFFTMix, fnFFTJoin, fnFFTFinal;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g1m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            if (inverse) {\n                fnFFTFinal = \"g1m_fftFinal\";\n            }\n            fnFFTJoin = \"g1m_fftJoin\";\n            fnFFTMix = \"g1m_fftMix\";\n\n            if (outType == \"affine\") {\n                sOut = G.F.n8*2;\n                fnMid2Out = \"g1m_batchToAffine\";\n            } else {\n                sOut = G.F.n8*3;\n            }\n\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g2m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            if (inverse) {\n                fnFFTFinal = \"g2m_fftFinal\";\n            }\n            fnFFTJoin = \"g2m_fftJoin\";\n            fnFFTMix = \"g2m_fftMix\";\n            if (outType == \"affine\") {\n                sOut = G.F.n8*2;\n                fnMid2Out = \"g2m_batchToAffine\";\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = G.n8;\n            sMid = G.n8;\n            sOut = G.n8;\n            if (inverse) {\n                fnFFTFinal = \"frm_fftFinal\";\n            }\n            fnFFTMix = \"frm_fftMix\";\n            fnFFTJoin = \"frm_fftJoin\";\n        }\n\n\n        let returnArray = false;\n        if (Array.isArray(buff)) {\n            buff = array2buffer(buff, sIn);\n            returnArray = true;\n        } else {\n            buff = buff.slice(0, buff.byteLength);\n        }\n\n        const nPoints = buff.byteLength / sIn;\n        const bits = log2(nPoints);\n\n        if  ((1 << bits) != nPoints) {\n            throw new Error(\"fft must be multiple of 2\" );\n        }\n\n        if (bits == Fr.s +1) {\n            let buffOut;\n\n            if (inverse) {\n                buffOut =  await _fftExtInv(buff, inType, outType, logger, loggerTxt);\n            } else {\n                buffOut =  await _fftExt(buff, inType, outType, logger, loggerTxt);\n            }\n\n            if (returnArray) {\n                return buffer2array(buffOut, sOut);\n            } else {\n                return buffOut;\n            }\n        }\n\n        let inv;\n        if (inverse) {\n            inv = Fr.inv(Fr.e(nPoints));\n        }\n\n        let buffOut;\n\n        buffReverseBits(buff, sIn);\n\n        let chunks;\n        let pointsInChunk = Math.min(1 << MAX_BITS_THREAD, nPoints);\n        let nChunks = nPoints / pointsInChunk;\n\n        while ((nChunks < tm.concurrency)&&(pointsInChunk>=16)) {\n            nChunks *= 2;\n            pointsInChunk /= 2;\n        }\n\n        const l2Chunk = log2(pointsInChunk);\n\n        const promises = [];\n        for (let i = 0; i< nChunks; i++) {\n            if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix start: ${i}/${nChunks}`);\n            const task = [];\n            task.push({cmd: \"ALLOC\", var: 0, len: sMid*pointsInChunk});\n            const buffChunk = buff.slice( (pointsInChunk * i)*sIn, (pointsInChunk * (i+1))*sIn);\n            task.push({cmd: \"SET\", var: 0, buff: buffChunk});\n            if (fnIn2Mid) {\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n            }\n            for (let j=1; j<=l2Chunk;j++) {\n                task.push({cmd: \"CALL\", fnName:fnFFTMix, params: [{var:0}, {val: pointsInChunk}, {val: j}]});\n            }\n\n            if (l2Chunk==bits) {\n                if (fnFFTFinal) {\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: inv});\n                    task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                        {var: 0},\n                        {val: pointsInChunk},\n                        {var: 1},\n                    ]});\n                }\n                if (fnMid2Out) {\n                    task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n                }\n                task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sOut});\n            } else {\n                task.push({cmd: \"GET\", out:0, var: 0, len: sMid*pointsInChunk});\n            }\n            promises.push(tm.queueAction(task).then( (r) => {\n                if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix end: ${i}/${nChunks}`);\n                return r;\n            }));\n        }\n\n        chunks = await Promise.all(promises);\n        for (let i = 0; i< nChunks; i++) chunks[i] = chunks[i][0];\n\n        for (let i = l2Chunk+1;   i<=bits; i++) {\n            if (logger) logger.debug(`${loggerTxt}: fft  ${bits}  join: ${i}/${bits}`);\n            const nGroups = 1 << (bits - i);\n            const nChunksPerGroup = nChunks / nGroups;\n            const opPromises = [];\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const first = Fr.exp( Fr.w[i], k*pointsInChunk);\n                    const inc = Fr.w[i];\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n\n                    const task = [];\n                    task.push({cmd: \"ALLOCSET\", var: 0, buff: chunks[o1]});\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: chunks[o2]});\n                    task.push({cmd: \"ALLOCSET\", var: 2, buff: first});\n                    task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n                    task.push({cmd: \"CALL\", fnName: fnFFTJoin,  params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: pointsInChunk},\n                        {var: 2},\n                        {var: 3}\n                    ]});\n                    if (i==bits) {\n                        if (fnFFTFinal) {\n                            task.push({cmd: \"ALLOCSET\", var: 4, buff: inv});\n                            task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                                {var: 0},\n                                {val: pointsInChunk},\n                                {var: 4},\n                            ]});\n                            task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                                {var: 1},\n                                {val: pointsInChunk},\n                                {var: 4},\n                            ]});\n                        }\n                        if (fnMid2Out) {\n                            task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n                            task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:1}, {val: pointsInChunk}, {var: 1}]});\n                        }\n                        task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sOut});\n                        task.push({cmd: \"GET\", out: 1, var: 1, len: pointsInChunk*sOut});\n                    } else {\n                        task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sMid});\n                        task.push({cmd: \"GET\", out: 1, var: 1, len: pointsInChunk*sMid});\n                    }\n                    opPromises.push(tm.queueAction(task).then( (r) => {\n                        if (logger) logger.debug(`${loggerTxt}: fft ${bits} join  ${i}/${bits}  ${j+1}/${nGroups} ${k}/${nChunksPerGroup/2}`);\n                        return r;\n                    }));\n                }\n            }\n\n            const res = await Promise.all(opPromises);\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n                    const resChunk = res.shift();\n                    chunks[o1] = resChunk[0];\n                    chunks[o2] = resChunk[1];\n                }\n            }\n        }\n\n        if (buff instanceof BigBuffer) {\n            buffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            buffOut = new Uint8Array(nPoints*sOut);\n        }\n        if (inverse) {\n            buffOut.set(chunks[0].slice((pointsInChunk-1)*sOut));\n            let p= sOut;\n            for (let i=nChunks-1; i>0; i--) {\n                buffOut.set(chunks[i], p);\n                p += pointsInChunk*sOut;\n                delete chunks[i];  // Liberate mem\n            }\n            buffOut.set(chunks[0].slice(0, (pointsInChunk-1)*sOut), p);\n            delete chunks[0];\n        } else {\n            for (let i=0; i<nChunks; i++) {\n                buffOut.set(chunks[i], pointsInChunk*sOut*i);\n                delete chunks[i];\n            }\n        }\n\n        if (returnArray) {\n            return buffer2array(buffOut, sOut);\n        } else {\n            return buffOut;\n        }\n    }\n\n    async function _fftExt(buff, inType, outType, logger, loggerTxt) {\n        let b1, b2;\n        b1 = buff.slice( 0 , buff.byteLength/2);\n        b2 = buff.slice( buff.byteLength/2, buff.byteLength);\n\n        const promises = [];\n\n        [b1, b2] = await _fftJoinExt(b1, b2, \"fftJoinExt\", Fr.one, Fr.shift, inType, \"jacobian\", logger, loggerTxt);\n\n        promises.push( _fft(b1, false, \"jacobian\", outType, logger, loggerTxt));\n        promises.push( _fft(b2, false, \"jacobian\", outType, logger, loggerTxt));\n\n        const res1 = await Promise.all(promises);\n\n        let buffOut;\n        if (res1[0].byteLength > (1<<28)) {\n            buffOut = new BigBuffer(res1[0].byteLength*2);\n        } else {\n            buffOut = new Uint8Array(res1[0].byteLength*2);\n        }\n\n        buffOut.set(res1[0]);\n        buffOut.set(res1[1], res1[0].byteLength);\n\n        return buffOut;\n    }\n\n    async function _fftExtInv(buff, inType, outType, logger, loggerTxt) {\n        let b1, b2;\n        b1 = buff.slice( 0 , buff.byteLength/2);\n        b2 = buff.slice( buff.byteLength/2, buff.byteLength);\n\n        const promises = [];\n\n        promises.push( _fft(b1, true, inType, \"jacobian\", logger, loggerTxt));\n        promises.push( _fft(b2, true, inType, \"jacobian\", logger, loggerTxt));\n\n        [b1, b2] = await Promise.all(promises);\n\n        const res1 = await _fftJoinExt(b1, b2, \"fftJoinExtInv\", Fr.one, Fr.shiftInv, \"jacobian\", outType, logger, loggerTxt);\n\n        let buffOut;\n        if (res1[0].byteLength > (1<<28)) {\n            buffOut = new BigBuffer(res1[0].byteLength*2);\n        } else {\n            buffOut = new Uint8Array(res1[0].byteLength*2);\n        }\n\n        buffOut.set(res1[0]);\n        buffOut.set(res1[1], res1[0].byteLength);\n\n        return buffOut;\n    }\n\n\n    async function _fftJoinExt(buff1, buff2, fn, first, inc, inType, outType, logger, loggerTxt) {\n        const MAX_CHUNK_SIZE = 1<<16;\n        const MIN_CHUNK_SIZE = 1<<4;\n\n        let fnName;\n        let fnIn2Mid, fnMid2Out;\n        let sOut, sIn, sMid;\n\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g1m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            fnName = \"g1m_\"+fn;\n            if (outType == \"affine\") {\n                fnMid2Out = \"g1m_batchToAffine\";\n                sOut = G.F.n8*2;\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g2m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            fnName = \"g2m_\"+fn;\n            sMid = G.F.n8*3;\n            if (outType == \"affine\") {\n                fnMid2Out = \"g2m_batchToAffine\";\n                sOut = G.F.n8*2;\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = Fr.n8;\n            sOut = Fr.n8;\n            sMid = Fr.n8;\n            fnName = \"frm_\" + fn;\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        if (buff1.byteLength != buff2.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const nPoints = Math.floor(buff1.byteLength / sIn);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        let chunkSize = Math.floor(nPoints /tm.concurrency);\n        if (chunkSize < MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;\n        if (chunkSize > MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;\n\n        const opPromises = [];\n\n        for (let i=0; i<nPoints; i += chunkSize) {\n            if (logger) logger.debug(`${loggerTxt}: fftJoinExt Start: ${i}/${nPoints}`);\n            const n= Math.min(nPoints - i, chunkSize);\n\n            const firstChunk = Fr.mul(first, Fr.exp( inc, i));\n            const task = [];\n\n            const b1 = buff1.slice(i*sIn, (i+n)*sIn);\n            const b2 = buff2.slice(i*sIn, (i+n)*sIn);\n\n            task.push({cmd: \"ALLOC\", var: 0, len: sMid*n});\n            task.push({cmd: \"SET\", var: 0, buff: b1});\n            task.push({cmd: \"ALLOC\", var: 1, len: sMid*n});\n            task.push({cmd: \"SET\", var: 1, buff: b2});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: firstChunk});\n            task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n            if (fnIn2Mid) {\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:0}, {val: n}, {var: 0}]});\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:1}, {val: n}, {var: 1}]});\n            }\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {var: 1},\n                {val: n},\n                {var: 2},\n                {var: 3},\n                {val: Fr.s},\n            ]});\n            if (fnMid2Out) {\n                task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: n}, {var: 0}]});\n                task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:1}, {val: n}, {var: 1}]});\n            }\n            task.push({cmd: \"GET\", out: 0, var: 0, len: n*sOut});\n            task.push({cmd: \"GET\", out: 1, var: 1, len: n*sOut});\n            opPromises.push(\n                tm.queueAction(task).then( (r) => {\n                    if (logger) logger.debug(`${loggerTxt}: fftJoinExt End: ${i}/${nPoints}`);\n                    return r;\n                })\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut1;\n        let fullBuffOut2;\n        if (nPoints * sOut > 1<<28) {\n            fullBuffOut1 = new BigBuffer(nPoints*sOut);\n            fullBuffOut2 = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut1 = new Uint8Array(nPoints*sOut);\n            fullBuffOut2 = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut1.set(result[i][0], p);\n            fullBuffOut2.set(result[i][1], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return [fullBuffOut1, fullBuffOut2];\n    }\n\n\n    G.fft = async function(buff, inType, outType, logger, loggerTxt) {\n        return await _fft(buff, false, inType, outType, logger, loggerTxt);\n    };\n\n    G.ifft = async function(buff, inType, outType, logger, loggerTxt) {\n        return await _fft(buff, true, inType, outType, logger, loggerTxt);\n    };\n\n    G.lagrangeEvaluations = async function (buff, inType, outType, logger, loggerTxt) {\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n\n        let sIn;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n            } else {\n                sIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n            } else {\n                sIn = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = Fr.n8;\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = buff.byteLength /sIn;\n        const bits = log2(nPoints);\n\n        if ((2 ** bits)*sIn != buff.byteLength) {\n            if (logger) logger.error(\"lagrangeEvaluations iinvalid input size\");\n            throw new Error(\"lagrangeEvaluations invalid Input size\");\n        }\n\n        if (bits <= Fr.s) {\n            return await G.ifft(buff, inType, outType, logger, loggerTxt);\n        }\n\n        if (bits > Fr.s+1) {\n            if (logger) logger.error(\"lagrangeEvaluations input too big\");\n            throw new Error(\"lagrangeEvaluations input too big\");\n        }\n\n        let t0 = buff.slice(0, buff.byteLength/2);\n        let t1 = buff.slice(buff.byteLength/2, buff.byteLength);\n\n\n        const shiftToSmallM = Fr.exp(Fr.shift, nPoints/2);\n        const sConst = Fr.inv( Fr.sub(Fr.one, shiftToSmallM));\n\n        [t0, t1] = await _fftJoinExt(t0, t1, \"prepareLagrangeEvaluation\", sConst, Fr.shiftInv, inType, \"jacobian\", logger, loggerTxt + \" prep\");\n\n        const promises = [];\n\n        promises.push( _fft(t0, true, \"jacobian\", outType, logger, loggerTxt + \" t0\"));\n        promises.push( _fft(t1, true, \"jacobian\", outType, logger, loggerTxt + \" t1\"));\n\n        [t0, t1] = await Promise.all(promises);\n\n        let buffOut;\n        if (t0.byteLength > (1<<28)) {\n            buffOut = new BigBuffer(t0.byteLength*2);\n        } else {\n            buffOut = new Uint8Array(t0.byteLength*2);\n        }\n\n        buffOut.set(t0);\n        buffOut.set(t1, t0.byteLength);\n\n        return buffOut;\n    };\n\n    G.fftMix = async function fftMix(buff) {\n        const sG = G.F.n8*3;\n        let fnName, fnFFTJoin;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftMix\";\n            fnFFTJoin = \"g1m_fftJoin\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftMix\";\n            fnFFTJoin = \"g2m_fftJoin\";\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_fftMix\";\n            fnFFTJoin = \"frm_fftJoin\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buff.byteLength / sG);\n        const power = log2(nPoints);\n\n        let nChunks = 1 << log2(tm.concurrency);\n\n        if (nPoints <= nChunks*2) nChunks = 1;\n\n        const pointsPerChunk = nPoints / nChunks;\n\n        const powerChunk = log2(pointsPerChunk);\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [];\n            const b = buff.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b});\n            for (let j=1; j<=powerChunk; j++) {\n                task.push({cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {val: pointsPerChunk},\n                    {val: j}\n                ]});\n            }\n            task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        const chunks = [];\n        for (let i=0; i<result.length; i++) chunks[i] = result[i][0];\n\n\n        for (let i = powerChunk+1; i<=power; i++) {\n            const nGroups = 1 << (power - i);\n            const nChunksPerGroup = nChunks / nGroups;\n            const opPromises = [];\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const first = Fr.exp( Fr.w[i], k*pointsPerChunk);\n                    const inc = Fr.w[i];\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n\n                    const task = [];\n                    task.push({cmd: \"ALLOCSET\", var: 0, buff: chunks[o1]});\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: chunks[o2]});\n                    task.push({cmd: \"ALLOCSET\", var: 2, buff: first});\n                    task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n                    task.push({cmd: \"CALL\", fnName: fnFFTJoin,  params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: pointsPerChunk},\n                        {var: 2},\n                        {var: 3}\n                    ]});\n                    task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n                    task.push({cmd: \"GET\", out: 1, var: 1, len: pointsPerChunk*sG});\n                    opPromises.push(tm.queueAction(task));\n                }\n            }\n\n            const res = await Promise.all(opPromises);\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n                    const resChunk = res.shift();\n                    chunks[o1] = resChunk[0];\n                    chunks[o2] = resChunk[1];\n                }\n            }\n        }\n\n        let fullBuffOut;\n        if (buff instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sG);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sG);\n        }\n        let p =0;\n        for (let i=0; i<nChunks; i++) {\n            fullBuffOut.set(chunks[i], p);\n            p+=chunks[i].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n\n    G.fftJoin = async function fftJoin(buff1, buff2, first, inc) {\n        const sG = G.F.n8*3;\n        let fnName;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftJoin\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftJoin\";\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_fftJoin\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        if (buff1.byteLength != buff2.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const nPoints = Math.floor(buff1.byteLength / sG);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        let nChunks = 1 << log2(tm.concurrency);\n        if (nPoints <= nChunks*2) nChunks = 1;\n\n        const pointsPerChunk = nPoints / nChunks;\n\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [];\n\n            const firstChunk = Fr.mul(first, Fr.exp(inc, i*pointsPerChunk));\n            const b1 = buff1.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            const b2 = buff2.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b1});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: b2});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: firstChunk});\n            task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {var: 1},\n                {val: pointsPerChunk},\n                {var: 2},\n                {var: 3}\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n            task.push({cmd: \"GET\", out: 1, var: 1, len: pointsPerChunk*sG});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut1;\n        let fullBuffOut2;\n        if (buff1 instanceof BigBuffer) {\n            fullBuffOut1 = new BigBuffer(nPoints*sG);\n            fullBuffOut2 = new BigBuffer(nPoints*sG);\n        } else {\n            fullBuffOut1 = new Uint8Array(nPoints*sG);\n            fullBuffOut2 = new Uint8Array(nPoints*sG);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut1.set(result[i][0], p);\n            fullBuffOut2.set(result[i][1], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return [fullBuffOut1, fullBuffOut2];\n    };\n\n\n\n    G.fftFinal =  async function fftFinal(buff, factor) {\n        const sG = G.F.n8*3;\n        const sGout = G.F.n8*2;\n        let fnName, fnToAffine;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftFinal\";\n            fnToAffine = \"g1m_batchToAffine\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftFinal\";\n            fnToAffine = \"g2m_batchToAffine\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buff.byteLength / sG);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        const pointsPerChunk = Math.floor(nPoints / tm.concurrency);\n\n        const opPromises = [];\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n            const task = [];\n            const b = buff.slice((i* pointsPerChunk)*sG, (i*pointsPerChunk+n)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: factor});\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {val: n},\n                {var: 1},\n            ]});\n            task.push({cmd: \"CALL\", fnName: fnToAffine, params: [\n                {var: 0},\n                {val: n},\n                {var: 0},\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 0, len: n*sGout});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buff instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sGout);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sGout);\n        }\n\n        let p =0;\n        for (let i=result.length-1; i>=0; i--) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n}\n", "import { buildBls12381 as buildBls12381wasm } from \"wasmcurves\";\nimport buildEngine from \"./engine.js\";\nimport * as Scalar from \"./scalar.js\";\nimport { ModuleBuilder } from \"wasmbuilder\";\n\nglobalThis.curve_bls12381 = null;\n\nexport default async function buildBls12381(singleThread, plugins) {\n\n    const moduleBuilder = new ModuleBuilder();\n    moduleBuilder.setMemory(25);\n    buildBls12381wasm(moduleBuilder);\n\n    if (plugins) plugins(moduleBuilder);\n\n    const bls12381wasm = {};\n\n    bls12381wasm.code = moduleBuilder.build();\n    bls12381wasm.pq = moduleBuilder.modules.f1m.pq;\n    bls12381wasm.pr = moduleBuilder.modules.frm.pq;\n    bls12381wasm.pG1gen = moduleBuilder.modules.bls12381.pG1gen;\n    bls12381wasm.pG1zero = moduleBuilder.modules.bls12381.pG1zero;\n    bls12381wasm.pG1b = moduleBuilder.modules.bls12381.pG1b;\n    bls12381wasm.pG2gen = moduleBuilder.modules.bls12381.pG2gen;\n    bls12381wasm.pG2zero = moduleBuilder.modules.bls12381.pG2zero;\n    bls12381wasm.pG2b = moduleBuilder.modules.bls12381.pG2b;\n    bls12381wasm.pOneT = moduleBuilder.modules.bls12381.pOneT;\n    bls12381wasm.prePSize = moduleBuilder.modules.bls12381.prePSize;\n    bls12381wasm.preQSize = moduleBuilder.modules.bls12381.preQSize;\n    bls12381wasm.n8q = 48;\n    bls12381wasm.n8r = 32;\n    bls12381wasm.q = moduleBuilder.modules.bls12381.q;\n    bls12381wasm.r = moduleBuilder.modules.bls12381.r;\n\n\n    if ((!singleThread) && (globalThis.curve_bls12381)) return globalThis.curve_bls12381;\n    const params = {\n        name: \"bls12381\",\n        wasm: bls12381wasm,\n        q: Scalar.e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16),\n        r: Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16),\n        n8q: 48,\n        n8r: 32,\n        cofactorG1: Scalar.e(\"0x396c8c005555e1568c00aaab0000aaab\", 16),\n        cofactorG2: Scalar.e(\"0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5\", 16),\n        singleThread: singleThread ? true : false\n    };\n\n    const curve = await buildEngine(params);\n    curve.terminate = async function () {\n        if (!params.singleThread) {\n            globalThis.curve_bls12381 = null;\n            await this.tm.terminate();\n        }\n    };\n\n    if (!singleThread) {\n        globalThis.curve_bls12381 = curve;\n    }\n\n    return curve;\n}\n\n", "import * as Scalar from \"./scalar.js\";\nimport {default as buildBn128} from \"./bn128.js\";\nimport {default as buildBls12381} from \"./bls12381.js\";\n\nconst bls12381r = Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16);\nconst bn128r = Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\");\n\nconst bls12381q = Scalar.e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16);\nconst bn128q = Scalar.e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\");\n\nexport async function getCurveFromR(r, singleThread, plugins) {\n    let curve;\n    if (Scalar.eq(r, bn128r)) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if (Scalar.eq(r, bls12381r)) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(r)}`);\n    }\n    return curve;\n}\n\nexport async function getCurveFromQ(q, singleThread, plugins) {\n    let curve;\n    if (Scalar.eq(q, bn128q)) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if (Scalar.eq(q, bls12381q)) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(q, 16)}`);\n    }\n    return curve;\n}\n\nexport async function getCurveFromName(name, singleThread, plugins) {\n    let curve;\n    const normName = normalizeName(name);\n    if ([\"BN128\", \"BN254\", \"ALTBN128\"].indexOf(normName) >= 0) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if ([\"BLS12381\"].indexOf(normName) >= 0) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${name}`);\n    }\n    return curve;\n\n    function normalizeName(n) {\n        return n.toUpperCase().match(/[A-Za-z0-9]+/g).join(\"\");\n    }\n\n}\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/* Implementation of this paper: https://eprint.iacr.org/2016/260.pdf */\nimport { Scalar } from \"ffjavascript\";\nimport * as curves from \"./curves.js\";\nimport {  utils }   from \"ffjavascript\";\nconst {unstringifyBigInts} = utils;\n\nexport default async function groth16Verify(_vk_verifier, _publicSignals, _proof, logger) {\n/*\n    let cpub = vk_verifier.IC[0];\n    for (let s= 0; s< vk_verifier.nPublic; s++) {\n        cpub  = G1.add( cpub, G1.timesScalar( vk_verifier.IC[s+1], publicSignals[s]));\n    }\n*/\n\n    const vk_verifier = unstringifyBigInts(_vk_verifier);\n    const proof = unstringifyBigInts(_proof);\n    const publicSignals = unstringifyBigInts(_publicSignals);\n\n    const curve = await curves.getCurveFromName(vk_verifier.curve);\n\n    const IC0 = curve.G1.fromObject(vk_verifier.IC[0]);\n    const IC = new Uint8Array(curve.G1.F.n8*2 * publicSignals.length);\n    const w = new Uint8Array(curve.Fr.n8 * publicSignals.length);\n\n    for (let i=0; i<publicSignals.length; i++) {\n        const buffP = curve.G1.fromObject(vk_verifier.IC[i+1]);\n        IC.set(buffP, i*curve.G1.F.n8*2);\n        Scalar.toRprLE(w, curve.Fr.n8*i, publicSignals[i], curve.Fr.n8);\n    }\n\n    let cpub = await curve.G1.multiExpAffine(IC, w);\n    cpub = curve.G1.add(cpub, IC0);\n\n    const pi_a = curve.G1.fromObject(proof.pi_a);\n    const pi_b = curve.G2.fromObject(proof.pi_b);\n    const pi_c = curve.G1.fromObject(proof.pi_c);\n\n    const vk_gamma_2 = curve.G2.fromObject(vk_verifier.vk_gamma_2);\n    const vk_delta_2 = curve.G2.fromObject(vk_verifier.vk_delta_2);\n    const vk_alpha_1 = curve.G1.fromObject(vk_verifier.vk_alpha_1);\n    const vk_beta_2 = curve.G2.fromObject(vk_verifier.vk_beta_2);\n\n    const res = await curve.pairingEq(\n        curve.G1.neg(pi_a) , pi_b,\n        cpub , vk_gamma_2,\n        pi_c , vk_delta_2,\n\n        vk_alpha_1, vk_beta_2\n    );\n\n    if (! res) {\n        if (logger) logger.error(\"Invalid proof\");\n        return false;\n    }\n\n    if (logger) logger.info(\"OK!\");\n    return true;\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\nimport {  utils }   from \"ffjavascript\";\nconst { unstringifyBigInts} = utils;\n\nfunction p256(n) {\n    let nstr = n.toString(16);\n    while (nstr.length < 64) nstr = \"0\"+nstr;\n    nstr = `\"0x${nstr}\"`;\n    return nstr;\n}\n\nexport default async function groth16ExportSolidityCallData(_proof, _pub) {\n    const proof = unstringifyBigInts(_proof);\n    const pub = unstringifyBigInts(_pub);\n\n    let inputs = \"\";\n    for (let i=0; i<pub.length; i++) {\n        if (inputs != \"\") inputs = inputs + \",\";\n        inputs = inputs + p256(pub[i]);\n    }\n\n    let S;\n    S=`[${p256(proof.pi_a[0])}, ${p256(proof.pi_a[1])}],` +\n        `[[${p256(proof.pi_b[0][1])}, ${p256(proof.pi_b[0][0])}],[${p256(proof.pi_b[1][1])}, ${p256(proof.pi_b[1][0])}]],` +\n        `[${p256(proof.pi_c[0])}, ${p256(proof.pi_c[1])}],` +\n        `[${inputs}]`;\n\n    return S;\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexport {default as newAccumulator} from \"./powersoftau_new.js\";\nexport {default as exportChallenge} from \"./powersoftau_export_challenge.js\";\nexport {default as importResponse} from \"./powersoftau_import.js\";\nexport {default as verify} from \"./powersoftau_verify.js\";\nexport {default as challengeContribute} from \"./powersoftau_challenge_contribute.js\";\nexport {default as beacon} from \"./powersoftau_beacon.js\";\nexport {default as contribute} from \"./powersoftau_contribute.js\";\nexport {default as preparePhase2} from \"./powersoftau_preparephase2.js\";\nexport {default as truncate} from \"./powersoftau_truncate.js\";\nexport {default as convert} from \"./powersoftau_convert.js\";\nexport {default as exportJson} from \"./powersoftau_export_json.js\";\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\nHeader(1)\n    n8\n    prime\n    power\ntauG1(2)\n    {(2 ** power)*2-1} [\n        G1, tau*G1, tau^2 * G1, ....\n    ]\ntauG2(3)\n    {2 ** power}[\n        G2, tau*G2, tau^2 * G2, ...\n    ]\nalphaTauG1(4)\n    {2 ** power}[\n        alpha*G1, alpha*tau*G1, alpha*tau^2*G1,....\n    ]\nbetaTauG1(5)\n    {2 ** power} []\n        beta*G1, beta*tau*G1, beta*tau^2*G1, ....\n    ]\nbetaG2(6)\n    {1}[\n        beta*G2\n    ]\ncontributions(7)\n    NContributions\n    {NContributions}[\n        tau*G1\n        tau*G2\n        alpha*G1\n        beta*G1\n        beta*G2\n        pubKey\n            tau_g1s\n            tau_g1sx\n            tau_g2spx\n            alpha_g1s\n            alpha_g1sx\n            alpha_g1spx\n            beta_g1s\n            beta_g1sx\n            beta_g1spx\n        partialHash (216 bytes) See https://github.com/mafintosh/blake2b-wasm/blob/23bee06945806309977af802bc374727542617c7/blake2b.wat#L9\n        hashNewChallenge\n    ]\n */\n\nimport * as ptauUtils from \"./powersoftau_utils.js\";\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport Blake2b from \"blake2b-wasm\";\nimport * as misc from \"./misc.js\";\n\nexport default async function newAccumulator(curve, power, fileName, logger) {\n\n    await Blake2b.ready();\n\n    const fd = await binFileUtils.createBinFile(fileName, \"ptau\", 1, 7);\n\n    await ptauUtils.writePTauHeader(fd, curve, power, 0);\n\n    const buffG1 = curve.G1.oneAffine;\n    const buffG2 = curve.G2.oneAffine;\n\n    // Write tauG1\n    ///////////\n    await binFileUtils.startWriteSection(fd, 2);\n    const nTauG1 = (2 ** power) * 2 -1;\n    for (let i=0; i< nTauG1; i++) {\n        await fd.write(buffG1);\n        if ((logger)&&((i%100000) == 0)&&i) logger.log(\"tauG1: \" + i);\n    }\n    await binFileUtils.endWriteSection(fd);\n\n    // Write tauG2\n    ///////////\n    await binFileUtils.startWriteSection(fd, 3);\n    const nTauG2 = (2 ** power);\n    for (let i=0; i< nTauG2; i++) {\n        await fd.write(buffG2);\n        if ((logger)&&((i%100000) == 0)&&i) logger.log(\"tauG2: \" + i);\n    }\n    await binFileUtils.endWriteSection(fd);\n\n    // Write alphaTauG1\n    ///////////\n    await binFileUtils.startWriteSection(fd, 4);\n    const nAlfaTauG1 = (2 ** power);\n    for (let i=0; i< nAlfaTauG1; i++) {\n        await fd.write(buffG1);\n        if ((logger)&&((i%100000) == 0)&&i) logger.log(\"alphaTauG1: \" + i);\n    }\n    await binFileUtils.endWriteSection(fd);\n\n    // Write betaTauG1\n    ///////////\n    await binFileUtils.startWriteSection(fd, 5);\n    const nBetaTauG1 = (2 ** power);\n    for (let i=0; i< nBetaTauG1; i++) {\n        await fd.write(buffG1);\n        if ((logger)&&((i%100000) == 0)&&i) logger.log(\"betaTauG1: \" + i);\n    }\n    await binFileUtils.endWriteSection(fd);\n\n    // Write betaG2\n    ///////////\n    await binFileUtils.startWriteSection(fd, 6);\n    await fd.write(buffG2);\n    await binFileUtils.endWriteSection(fd);\n\n    // Contributions\n    ///////////\n    await binFileUtils.startWriteSection(fd, 7);\n    await fd.writeULE32(0); // 0 Contributions\n    await binFileUtils.endWriteSection(fd);\n\n    await fd.close();\n\n    const firstChallengeHash = ptauUtils.calculateFirstChallengeHash(curve, power, logger);\n\n    if (logger) logger.debug(misc.formatHash(Blake2b(64).digest(), \"Blank Contribution Hash:\"));\n\n    if (logger) logger.info(misc.formatHash(firstChallengeHash, \"First Contribution Hash:\"));\n\n    return firstChallengeHash;\n\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { Scalar } from \"ffjavascript\";\nimport Blake2b from \"blake2b-wasm\";\nimport * as keyPair from \"./keypair.js\";\nimport * as misc from \"./misc.js\";\nimport { getCurveFromQ } from \"./curves.js\";\n\nexport async function writePTauHeader(fd, curve, power, ceremonyPower) {\n    // Write the header\n    ///////////\n\n    if (! ceremonyPower) ceremonyPower = power;\n    await fd.writeULE32(1); // Header type\n    const pHeaderSize = fd.pos;\n    await fd.writeULE64(0); // Temporally set to 0 length\n\n    await fd.writeULE32(curve.F1.n64*8);\n\n    const buff = new Uint8Array(curve.F1.n8);\n    Scalar.toRprLE(buff, 0, curve.q, curve.F1.n8);\n    await fd.write(buff);\n    await fd.writeULE32(power);                    // power\n    await fd.writeULE32(ceremonyPower);               // power\n\n    const headerSize = fd.pos - pHeaderSize - 8;\n\n    const oldPos = fd.pos;\n\n    await fd.writeULE64(headerSize, pHeaderSize);\n\n    fd.pos = oldPos;\n}\n\nexport async function readPTauHeader(fd, sections) {\n    if (!sections[1])  throw new Error(fd.fileName + \": File has no  header\");\n    if (sections[1].length>1) throw new Error(fd.fileName +\": File has more than one header\");\n\n    fd.pos = sections[1][0].p;\n    const n8 = await fd.readULE32();\n    const buff = await fd.read(n8);\n    const q = Scalar.fromRprLE(buff);\n\n    const curve = await getCurveFromQ(q);\n\n    if (curve.F1.n64*8 != n8) throw new Error(fd.fileName +\": Invalid size\");\n\n    const power = await fd.readULE32();\n    const ceremonyPower = await fd.readULE32();\n\n    if (fd.pos-sections[1][0].p != sections[1][0].size) throw new Error(\"Invalid PTau header size\");\n\n    return {curve, power, ceremonyPower};\n}\n\n\nexport async function readPtauPubKey(fd, curve, montgomery) {\n\n    const buff = await fd.read(curve.F1.n8*2*6 + curve.F2.n8*2*3);\n\n    return fromPtauPubKeyRpr(buff, 0, curve, montgomery);\n}\n\nexport function fromPtauPubKeyRpr(buff, pos, curve, montgomery) {\n\n    const key = {\n        tau: {},\n        alpha: {},\n        beta: {}\n    };\n\n    key.tau.g1_s = readG1();\n    key.tau.g1_sx = readG1();\n    key.alpha.g1_s = readG1();\n    key.alpha.g1_sx = readG1();\n    key.beta.g1_s = readG1();\n    key.beta.g1_sx = readG1();\n    key.tau.g2_spx = readG2();\n    key.alpha.g2_spx = readG2();\n    key.beta.g2_spx = readG2();\n\n    return key;\n\n    function readG1() {\n        let p;\n        if (montgomery) {\n            p = curve.G1.fromRprLEM( buff, pos );\n        } else {\n            p = curve.G1.fromRprUncompressed( buff, pos );\n        }\n        pos += curve.G1.F.n8*2;\n        return p;\n    }\n\n    function readG2() {\n        let p;\n        if (montgomery) {\n            p = curve.G2.fromRprLEM( buff, pos );\n        } else {\n            p = curve.G2.fromRprUncompressed( buff, pos );\n        }\n        pos += curve.G2.F.n8*2;\n        return p;\n    }\n}\n\nexport function toPtauPubKeyRpr(buff, pos, curve, key, montgomery) {\n\n    writeG1(key.tau.g1_s);\n    writeG1(key.tau.g1_sx);\n    writeG1(key.alpha.g1_s);\n    writeG1(key.alpha.g1_sx);\n    writeG1(key.beta.g1_s);\n    writeG1(key.beta.g1_sx);\n    writeG2(key.tau.g2_spx);\n    writeG2(key.alpha.g2_spx);\n    writeG2(key.beta.g2_spx);\n\n    async function writeG1(p) {\n        if (montgomery) {\n            curve.G1.toRprLEM(buff, pos, p);\n        } else {\n            curve.G1.toRprUncompressed(buff, pos, p);\n        }\n        pos += curve.F1.n8*2;\n    }\n\n    async function writeG2(p) {\n        if (montgomery) {\n            curve.G2.toRprLEM(buff, pos, p);\n        } else {\n            curve.G2.toRprUncompressed(buff, pos, p);\n        }\n        pos += curve.F2.n8*2;\n    }\n\n    return buff;\n}\n\nexport async function writePtauPubKey(fd, curve, key, montgomery) {\n    const buff = new Uint8Array(curve.F1.n8*2*6 + curve.F2.n8*2*3);\n    toPtauPubKeyRpr(buff, 0, curve, key, montgomery);\n    await fd.write(buff);\n}\n\nasync function readContribution(fd, curve) {\n    const c = {};\n\n    c.tauG1 = await readG1();\n    c.tauG2 = await readG2();\n    c.alphaG1 = await readG1();\n    c.betaG1 = await readG1();\n    c.betaG2 = await readG2();\n    c.key = await readPtauPubKey(fd, curve, true);\n    c.partialHash = await fd.read(216);\n    c.nextChallenge = await fd.read(64);\n    c.type = await fd.readULE32();\n\n    const buffV  = new Uint8Array(curve.G1.F.n8*2*6+curve.G2.F.n8*2*3);\n    toPtauPubKeyRpr(buffV, 0, curve, c.key, false);\n\n    const responseHasher = Blake2b(64);\n    responseHasher.setPartialHash(c.partialHash);\n    responseHasher.update(buffV);\n    c.responseHash = responseHasher.digest();\n\n    const paramLength = await fd.readULE32();\n    const curPos = fd.pos;\n    let lastType =0;\n    while (fd.pos-curPos < paramLength) {\n        const buffType = await readDV(1);\n        if (buffType[0]<= lastType) throw new Error(\"Parameters in the contribution must be sorted\");\n        lastType = buffType[0];\n        if (buffType[0]==1) {     // Name\n            const buffLen = await readDV(1);\n            const buffStr = await readDV(buffLen[0]);\n            c.name = new TextDecoder().decode(buffStr);\n        } else if (buffType[0]==2) {\n            const buffExp = await readDV(1);\n            c.numIterationsExp = buffExp[0];\n        } else if (buffType[0]==3) {\n            const buffLen = await readDV(1);\n            c.beaconHash = await readDV(buffLen[0]);\n        } else {\n            throw new Error(\"Parameter not recognized\");\n        }\n    }\n    if (fd.pos != curPos + paramLength) {\n        throw new Error(\"Parametes do not match\");\n    }\n\n    return c;\n\n    async function readG1() {\n        const pBuff = await fd.read(curve.G1.F.n8*2);\n        return curve.G1.fromRprLEM( pBuff );\n    }\n\n    async function readG2() {\n        const pBuff = await fd.read(curve.G2.F.n8*2);\n        return curve.G2.fromRprLEM( pBuff );\n    }\n\n    async function readDV(n) {\n        const b = await fd.read(n);\n        return new Uint8Array(b);\n    }\n}\n\nexport async function readContributions(fd, curve, sections) {\n    if (!sections[7])  throw new Error(fd.fileName + \": File has no  contributions\");\n    if (sections[7][0].length>1) throw new Error(fd.fileName +\": File has more than one contributions section\");\n\n    fd.pos = sections[7][0].p;\n    const nContributions = await fd.readULE32();\n    const contributions = [];\n    for (let i=0; i<nContributions; i++) {\n        const c = await readContribution(fd, curve);\n        c.id = i+1;\n        contributions.push(c);\n    }\n\n    if (fd.pos-sections[7][0].p != sections[7][0].size) throw new Error(\"Invalid contribution section size\");\n\n    return contributions;\n}\n\nasync function writeContribution(fd, curve, contribution) {\n\n    const buffG1 = new Uint8Array(curve.F1.n8*2);\n    const buffG2 = new Uint8Array(curve.F2.n8*2);\n    await writeG1(contribution.tauG1);\n    await writeG2(contribution.tauG2);\n    await writeG1(contribution.alphaG1);\n    await writeG1(contribution.betaG1);\n    await writeG2(contribution.betaG2);\n    await writePtauPubKey(fd, curve, contribution.key, true);\n    await fd.write(contribution.partialHash);\n    await fd.write(contribution.nextChallenge);\n    await fd.writeULE32(contribution.type || 0);\n\n    const params = [];\n    if (contribution.name) {\n        params.push(1);      // Param Name\n        const nameData = new TextEncoder(\"utf-8\").encode(contribution.name.substring(0,64));\n        params.push(nameData.byteLength);\n        for (let i=0; i<nameData.byteLength; i++) params.push(nameData[i]);\n    }\n    if (contribution.type == 1) {\n        params.push(2);      // Param numIterationsExp\n        params.push(contribution.numIterationsExp);\n\n        params.push(3);      // Beacon Hash\n        params.push(contribution.beaconHash.byteLength);\n        for (let i=0; i<contribution.beaconHash.byteLength; i++) params.push(contribution.beaconHash[i]);\n    }\n    if (params.length>0) {\n        const paramsBuff = new Uint8Array(params);\n        await fd.writeULE32(paramsBuff.byteLength);\n        await fd.write(paramsBuff);\n    } else {\n        await fd.writeULE32(0);\n    }\n\n\n    async function writeG1(p) {\n        curve.G1.toRprLEM(buffG1, 0, p);\n        await fd.write(buffG1);\n    }\n\n    async function writeG2(p) {\n        curve.G2.toRprLEM(buffG2, 0, p);\n        await fd.write(buffG2);\n    }\n\n}\n\nexport async function writeContributions(fd, curve, contributions) {\n\n    await fd.writeULE32(7); // Header type\n    const pContributionsSize = fd.pos;\n    await fd.writeULE64(0); // Temporally set to 0 length\n\n    await fd.writeULE32(contributions.length);\n    for (let i=0; i< contributions.length; i++) {\n        await writeContribution(fd, curve, contributions[i]);\n    }\n    const contributionsSize = fd.pos - pContributionsSize - 8;\n\n    const oldPos = fd.pos;\n\n    await fd.writeULE64(contributionsSize, pContributionsSize);\n    fd.pos = oldPos;\n}\n\nexport function calculateFirstChallengeHash(curve, power, logger) {\n    if (logger) logger.debug(\"Calculating First Challenge Hash\");\n\n    const hasher = new Blake2b(64);\n\n    const vG1 = new Uint8Array(curve.G1.F.n8*2);\n    const vG2 = new Uint8Array(curve.G2.F.n8*2);\n    curve.G1.toRprUncompressed(vG1, 0, curve.G1.g);\n    curve.G2.toRprUncompressed(vG2, 0, curve.G2.g);\n\n    hasher.update(Blake2b(64).digest());\n\n    let n;\n\n    n=(2 ** power)*2 -1;\n    if (logger) logger.debug(\"Calculate Initial Hash: tauG1\");\n    hashBlock(vG1, n);\n    n= 2 ** power;\n    if (logger) logger.debug(\"Calculate Initial Hash: tauG2\");\n    hashBlock(vG2, n);\n    if (logger) logger.debug(\"Calculate Initial Hash: alphaTauG1\");\n    hashBlock(vG1, n);\n    if (logger) logger.debug(\"Calculate Initial Hash: betaTauG1\");\n    hashBlock(vG1, n);\n    hasher.update(vG2);\n\n    return hasher.digest();\n\n    function hashBlock(buff, n) {\n        // this block size is a good compromise between speed and the maximum\n        // input size of the Blake2b update method (65,535,720 bytes).\n        const blockSize = 341000;\n        const nBlocks = Math.floor(n / blockSize);\n        const rem = n % blockSize;\n        const bigBuff = new Uint8Array(blockSize * buff.byteLength);\n        for (let i=0; i<blockSize; i++) {\n            bigBuff.set(buff, i*buff.byteLength);\n        }\n        for (let i=0; i<nBlocks; i++) {\n            hasher.update(bigBuff);\n            if (logger) logger.debug(\"Initial hash: \" +i*blockSize);\n        }\n        for (let i=0; i<rem; i++) {\n            hasher.update(buff);\n        }\n    }\n}\n\n\nexport function keyFromBeacon(curve, challengeHash, beaconHash, numIterationsExp) {\n\n    const rng = misc.rngFromBeaconParams(beaconHash, numIterationsExp);\n\n    const key = keyPair.createPTauKey(curve, challengeHash, rng);\n\n    return key;\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport blake2b from \"blake2b-wasm\";\n\nimport { ChaCha } from \"ffjavascript\";\n\nexport function hashToG2(curve, hash) {\n    const hashV = new DataView(hash.buffer, hash.byteOffset, hash.byteLength);\n    const seed = [];\n    for (let i=0; i<8; i++) {\n        seed[i] = hashV.getUint32(i*4);\n    }\n\n    const rng = new ChaCha(seed);\n\n    const g2_sp = curve.G2.fromRng(rng);\n\n    return g2_sp;\n}\n\nexport function getG2sp(curve, persinalization, challenge, g1s, g1sx) {\n\n    const h = blake2b(64);\n    const b1 = new Uint8Array([persinalization]);\n    h.update(b1);\n    h.update(challenge);\n    const b3 = curve.G1.toUncompressed(g1s);\n    h.update( b3);\n    const b4 = curve.G1.toUncompressed(g1sx);\n    h.update( b4);\n    const hash =h.digest();\n\n    return hashToG2(curve, hash);\n}\n\nfunction calculatePubKey(k, curve, personalization, challengeHash, rng ) {\n    k.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));\n    k.g1_sx = curve.G1.toAffine(curve.G1.timesFr(k.g1_s, k.prvKey));\n    k.g2_sp = curve.G2.toAffine(getG2sp(curve, personalization, challengeHash, k.g1_s, k.g1_sx));\n    k.g2_spx = curve.G2.toAffine(curve.G2.timesFr(k.g2_sp, k.prvKey));\n    return k;\n}\n\nexport function createPTauKey(curve, challengeHash, rng) {\n    const key = {\n        tau: {},\n        alpha: {},\n        beta: {}\n    };\n    key.tau.prvKey = curve.Fr.fromRng(rng);\n    key.alpha.prvKey = curve.Fr.fromRng(rng);\n    key.beta.prvKey = curve.Fr.fromRng(rng);\n    calculatePubKey(key.tau, curve, 0, challengeHash, rng);\n    calculatePubKey(key.alpha, curve, 1, challengeHash, rng);\n    calculatePubKey(key.beta, curve, 2, challengeHash, rng);\n    return key;\n}\n\nexport function createDeltaKey(curve, transcript, rng) {\n    const delta = {};\n    delta.prvKey = curve.Fr.fromRng(rng);\n    delta.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));\n    delta.g1_sx = curve.G1.toAffine(curve.G1.timesScalar(delta.g1_s, delta.prvKey));\n    delta.g2_sp = hashToG2(curve, transcript);\n    delta.g2_spx = curve.G2.toAffine(curve.G2.timesScalar(delta.g2_sp, delta.prvKey));\n    return delta;\n}\n", "// Format of the outpu\n//     Hash of the last contribution  64Bytes\n//     2^N * 2 -1  TauG1 points (uncompressed)\n//     2^N  TauG2 Points (uncompressed)\n//     2^N  AlphaTauG1 Points (uncompressed)\n//     2^N  BetaTauG1 Points (uncompressed)\n//     BetaG2 (uncompressed)\n\nimport * as fastFile from \"fastfile\";\nimport Blake2b from \"blake2b-wasm\";\nimport * as utils from \"./powersoftau_utils.js\";\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as misc from \"./misc.js\";\n\nexport default async function exportChallenge(pTauFilename, challengeFilename, logger) {\n    await Blake2b.ready();\n    const {fd: fdFrom, sections} = await binFileUtils.readBinFile(pTauFilename, \"ptau\", 1);\n\n    const {curve, power} = await utils.readPTauHeader(fdFrom, sections);\n\n    const contributions = await utils.readContributions(fdFrom, curve, sections);\n    let lastResponseHash, curChallengeHash;\n    if (contributions.length == 0) {\n        lastResponseHash = Blake2b(64).digest();\n        curChallengeHash = utils.calculateFirstChallengeHash(curve, power);\n    } else {\n        lastResponseHash = contributions[contributions.length-1].responseHash;\n        curChallengeHash = contributions[contributions.length-1].nextChallenge;\n    }\n\n    if (logger) logger.info(misc.formatHash(lastResponseHash, \"Last Response Hash: \"));\n\n    if (logger) logger.info(misc.formatHash(curChallengeHash, \"New Challenge Hash: \"));\n\n\n    const fdTo = await fastFile.createOverride(challengeFilename);\n\n    const toHash = Blake2b(64);\n    await fdTo.write(lastResponseHash);\n    toHash.update(lastResponseHash);\n\n    await exportSection(2, \"G1\", (2 ** power) * 2 -1, \"tauG1\");\n    await exportSection(3, \"G2\", (2 ** power)       , \"tauG2\");\n    await exportSection(4, \"G1\", (2 ** power)       , \"alphaTauG1\");\n    await exportSection(5, \"G1\", (2 ** power)       , \"betaTauG1\");\n    await exportSection(6, \"G2\", 1                  , \"betaG2\");\n\n    await fdFrom.close();\n    await fdTo.close();\n\n    const calcCurChallengeHash = toHash.digest();\n\n    if (!misc.hashIsEqual (curChallengeHash, calcCurChallengeHash)) {\n        if (logger) logger.info(misc.formatHash(calcCurChallengeHash, \"Calc Curret Challenge Hash: \"));\n\n        if (logger) logger.error(\"PTau file is corrupted. Calculated new challenge hash does not match with the eclared one\");\n        throw new Error(\"PTau file is corrupted. Calculated new challenge hash does not match with the eclared one\");\n    }\n\n    return curChallengeHash;\n\n    async function exportSection(sectionId, groupName, nPoints, sectionName) {\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        const nPointsChunk = Math.floor((1<<24)/sG);\n\n        await binFileUtils.startReadUniqueSection(fdFrom, sections, sectionId);\n        for (let i=0; i< nPoints; i+= nPointsChunk) {\n            if (logger) logger.debug(`Exporting ${sectionName}: ${i}/${nPoints}`);\n            const n = Math.min(nPoints-i, nPointsChunk);\n            let buff;\n            buff = await fdFrom.read(n*sG);\n            buff = await G.batchLEMtoU(buff);\n            await fdTo.write(buff);\n            toHash.update(buff);\n        }\n        await binFileUtils.endReadSection(fdFrom);\n    }\n\n\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fastFile from \"fastfile\";\nimport Blake2b from \"blake2b-wasm\";\nimport * as utils from \"./powersoftau_utils.js\";\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as misc from \"./misc.js\";\n\nexport default async function importResponse(oldPtauFilename, contributionFilename, newPTauFilename, name, importPoints, logger) {\n\n    await Blake2b.ready();\n\n    const noHash = new Uint8Array(64);\n    for (let i=0; i<64; i++) noHash[i] = 0xFF;\n\n    const {fd: fdOld, sections} = await binFileUtils.readBinFile(oldPtauFilename, \"ptau\", 1);\n    const {curve, power} = await utils.readPTauHeader(fdOld, sections);\n    const contributions = await utils.readContributions(fdOld, curve, sections);\n    const currentContribution = {};\n\n    if (name) currentContribution.name = name;\n\n    const sG1 = curve.F1.n8*2;\n    const scG1 = curve.F1.n8; // Compresed size\n    const sG2 = curve.F2.n8*2;\n    const scG2 = curve.F2.n8; // Compresed size\n\n    const fdResponse = await fastFile.readExisting(contributionFilename);\n\n    if  (fdResponse.totalSize !=\n        64 +                            // Old Hash\n        ((2 ** power)*2-1)*scG1 +\n        (2 ** power)*scG2 +\n        (2 ** power)*scG1 +\n        (2 ** power)*scG1 +\n        scG2 +\n        sG1*6 + sG2*3)\n        throw new Error(\"Size of the contribution is invalid\");\n\n    let lastChallengeHash;\n\n    if (contributions.length>0) {\n        lastChallengeHash = contributions[contributions.length-1].nextChallenge;\n    } else {\n        lastChallengeHash = utils.calculateFirstChallengeHash(curve, power, logger);\n    }\n\n    const fdNew = await binFileUtils.createBinFile(newPTauFilename, \"ptau\", 1, importPoints ? 7: 2);\n    await utils.writePTauHeader(fdNew, curve, power);\n\n    const contributionPreviousHash = await fdResponse.read(64);\n\n    if (misc.hashIsEqual(noHash,lastChallengeHash)) {\n        lastChallengeHash = contributionPreviousHash;\n        contributions[contributions.length-1].nextChallenge = lastChallengeHash;\n    }\n\n    if(!misc.hashIsEqual(contributionPreviousHash,lastChallengeHash))\n        throw new Error(\"Wrong contribution. this contribution is not based on the previus hash\");\n\n    const hasherResponse = new Blake2b(64);\n    hasherResponse.update(contributionPreviousHash);\n\n    const startSections = [];\n    let res;\n    res = await processSection(fdResponse, fdNew, \"G1\", 2, (2 ** power) * 2 -1, [1], \"tauG1\");\n    currentContribution.tauG1 = res[0];\n    res = await processSection(fdResponse, fdNew, \"G2\", 3, (2 ** power)       , [1], \"tauG2\");\n    currentContribution.tauG2 = res[0];\n    res = await processSection(fdResponse, fdNew, \"G1\", 4, (2 ** power)       , [0], \"alphaG1\");\n    currentContribution.alphaG1 = res[0];\n    res = await processSection(fdResponse, fdNew, \"G1\", 5, (2 ** power)       , [0], \"betaG1\");\n    currentContribution.betaG1 = res[0];\n    res = await processSection(fdResponse, fdNew, \"G2\", 6, 1                  , [0], \"betaG2\");\n    currentContribution.betaG2 = res[0];\n\n    currentContribution.partialHash = hasherResponse.getPartialHash();\n\n\n    const buffKey = await fdResponse.read(curve.F1.n8*2*6+curve.F2.n8*2*3);\n\n    currentContribution.key = utils.fromPtauPubKeyRpr(buffKey, 0, curve, false);\n\n    hasherResponse.update(new Uint8Array(buffKey));\n    const hashResponse = hasherResponse.digest();\n\n    if (logger) logger.info(misc.formatHash(hashResponse, \"Contribution Response Hash imported: \"));\n\n    if (importPoints) {\n        const nextChallengeHasher = new Blake2b(64);\n        nextChallengeHasher.update(hashResponse);\n\n        await hashSection(nextChallengeHasher, fdNew, \"G1\", 2, (2 ** power) * 2 -1, \"tauG1\", logger);\n        await hashSection(nextChallengeHasher, fdNew, \"G2\", 3, (2 ** power)       , \"tauG2\", logger);\n        await hashSection(nextChallengeHasher, fdNew, \"G1\", 4, (2 ** power)       , \"alphaTauG1\", logger);\n        await hashSection(nextChallengeHasher, fdNew, \"G1\", 5, (2 ** power)       , \"betaTauG1\", logger);\n        await hashSection(nextChallengeHasher, fdNew, \"G2\", 6, 1                  , \"betaG2\", logger);\n\n        currentContribution.nextChallenge = nextChallengeHasher.digest();\n\n        if (logger) logger.info(misc.formatHash(currentContribution.nextChallenge, \"Next Challenge Hash: \"));\n    } else {\n        currentContribution.nextChallenge = noHash;\n    }\n\n    contributions.push(currentContribution);\n\n    await utils.writeContributions(fdNew, curve, contributions);\n\n    await fdResponse.close();\n    await fdNew.close();\n    await fdOld.close();\n\n    return currentContribution.nextChallenge;\n\n    async function processSection(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName) {\n        if (importPoints) {\n            return await processSectionImportPoints(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName);\n        } else {\n            return await processSectionNoImportPoints(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName);\n        }\n    }\n\n    async function processSectionImportPoints(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName) {\n\n        const G = curve[groupName];\n        const scG = G.F.n8;\n        const sG = G.F.n8*2;\n\n        const singularPoints = [];\n\n        await binFileUtils.startWriteSection(fdTo, sectionId);\n        const nPointsChunk = Math.floor((1<<24)/sG);\n\n        startSections[sectionId] = fdTo.pos;\n\n        for (let i=0; i< nPoints; i += nPointsChunk) {\n            if (logger) logger.debug(`Importing ${sectionName}: ${i}/${nPoints}`);\n            const n = Math.min(nPoints-i, nPointsChunk);\n\n            const buffC = await fdFrom.read(n * scG);\n            hasherResponse.update(buffC);\n\n            const buffLEM = await G.batchCtoLEM(buffC);\n\n            await fdTo.write(buffLEM);\n            for (let j=0; j<singularPointIndexes.length; j++) {\n                const sp = singularPointIndexes[j];\n                if ((sp >=i) && (sp < i+n)) {\n                    const P = G.fromRprLEM(buffLEM, (sp-i)*sG);\n                    singularPoints.push(P);\n                }\n            }\n        }\n\n        await binFileUtils.endWriteSection(fdTo);\n\n        return singularPoints;\n    }\n\n\n    async function processSectionNoImportPoints(fdFrom, fdTo, groupName, sectionId, nPoints, singularPointIndexes, sectionName) {\n\n        const G = curve[groupName];\n        const scG = G.F.n8;\n\n        const singularPoints = [];\n\n        const nPointsChunk = Math.floor((1<<24)/scG);\n\n        for (let i=0; i< nPoints; i += nPointsChunk) {\n            if (logger) logger.debug(`Importing ${sectionName}: ${i}/${nPoints}`);\n            const n = Math.min(nPoints-i, nPointsChunk);\n\n            const buffC = await fdFrom.read(n * scG);\n            hasherResponse.update(buffC);\n\n            for (let j=0; j<singularPointIndexes.length; j++) {\n                const sp = singularPointIndexes[j];\n                if ((sp >=i) && (sp < i+n)) {\n                    const P = G.fromRprCompressed(buffC, (sp-i)*scG);\n                    singularPoints.push(P);\n                }\n            }\n        }\n\n        return singularPoints;\n    }\n\n\n    async function hashSection(nextChallengeHasher, fdTo, groupName, sectionId, nPoints, sectionName, logger) {\n\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        const nPointsChunk = Math.floor((1<<24)/sG);\n\n        const oldPos = fdTo.pos;\n        fdTo.pos = startSections[sectionId];\n\n        for (let i=0; i< nPoints; i += nPointsChunk) {\n            if (logger) logger.debug(`Hashing ${sectionName}: ${i}/${nPoints}`);\n            const n = Math.min(nPoints-i, nPointsChunk);\n\n            const buffLEM = await fdTo.read(n * sG);\n\n            const buffU = await G.batchLEMtoU(buffLEM);\n\n            nextChallengeHasher.update(buffU);\n        }\n\n        fdTo.pos = oldPos;\n    }\n\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport Blake2b from \"blake2b-wasm\";\nimport * as utils from \"./powersoftau_utils.js\";\nimport * as keyPair from \"./keypair.js\";\nimport crypto from \"crypto\";\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport { ChaCha, BigBuffer } from \"ffjavascript\";\nimport * as misc from \"./misc.js\";\nconst sameRatio = misc.sameRatio;\n\nasync function verifyContribution(curve, cur, prev, logger) {\n    let sr;\n    if (cur.type == 1) {    // Verify the beacon.\n        const beaconKey = utils.keyFromBeacon(curve, prev.nextChallenge, cur.beaconHash, cur.numIterationsExp);\n\n        if (!curve.G1.eq(cur.key.tau.g1_s, beaconKey.tau.g1_s)) {\n            if (logger) logger.error(`BEACON key (tauG1_s) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n        if (!curve.G1.eq(cur.key.tau.g1_sx, beaconKey.tau.g1_sx)) {\n            if (logger) logger.error(`BEACON key (tauG1_sx) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n        if (!curve.G2.eq(cur.key.tau.g2_spx, beaconKey.tau.g2_spx)) {\n            if (logger) logger.error(`BEACON key (tauG2_spx) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n\n        if (!curve.G1.eq(cur.key.alpha.g1_s, beaconKey.alpha.g1_s)) {\n            if (logger) logger.error(`BEACON key (alphaG1_s) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n        if (!curve.G1.eq(cur.key.alpha.g1_sx, beaconKey.alpha.g1_sx)) {\n            if (logger) logger.error(`BEACON key (alphaG1_sx) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n        if (!curve.G2.eq(cur.key.alpha.g2_spx, beaconKey.alpha.g2_spx)) {\n            if (logger) logger.error(`BEACON key (alphaG2_spx) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n\n        if (!curve.G1.eq(cur.key.beta.g1_s, beaconKey.beta.g1_s)) {\n            if (logger) logger.error(`BEACON key (betaG1_s) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n        if (!curve.G1.eq(cur.key.beta.g1_sx, beaconKey.beta.g1_sx)) {\n            if (logger) logger.error(`BEACON key (betaG1_sx) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n        if (!curve.G2.eq(cur.key.beta.g2_spx, beaconKey.beta.g2_spx)) {\n            if (logger) logger.error(`BEACON key (betaG2_spx) is not generated correctly in challenge #${cur.id}  ${cur.name || \"\"}` );\n            return false;\n        }\n    }\n\n    cur.key.tau.g2_sp = curve.G2.toAffine(keyPair.getG2sp(curve, 0, prev.nextChallenge, cur.key.tau.g1_s, cur.key.tau.g1_sx));\n    cur.key.alpha.g2_sp = curve.G2.toAffine(keyPair.getG2sp(curve, 1, prev.nextChallenge, cur.key.alpha.g1_s, cur.key.alpha.g1_sx));\n    cur.key.beta.g2_sp = curve.G2.toAffine(keyPair.getG2sp(curve, 2, prev.nextChallenge, cur.key.beta.g1_s, cur.key.beta.g1_sx));\n\n    sr = await sameRatio(curve, cur.key.tau.g1_s, cur.key.tau.g1_sx, cur.key.tau.g2_sp, cur.key.tau.g2_spx);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID key (tau) in challenge #\"+cur.id);\n        return false;\n    }\n\n    sr = await sameRatio(curve, cur.key.alpha.g1_s, cur.key.alpha.g1_sx, cur.key.alpha.g2_sp, cur.key.alpha.g2_spx);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID key (alpha) in challenge #\"+cur.id);\n        return false;\n    }\n\n    sr = await sameRatio(curve, cur.key.beta.g1_s, cur.key.beta.g1_sx, cur.key.beta.g2_sp, cur.key.beta.g2_spx);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID key (beta) in challenge #\"+cur.id);\n        return false;\n    }\n\n    sr = await sameRatio(curve, prev.tauG1, cur.tauG1, cur.key.tau.g2_sp, cur.key.tau.g2_spx);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID tau*G1. challenge #\"+cur.id+\" It does not follow the previous contribution\");\n        return false;\n    }\n\n    sr = await sameRatio(curve,  cur.key.tau.g1_s, cur.key.tau.g1_sx, prev.tauG2, cur.tauG2);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID tau*G2. challenge #\"+cur.id+\" It does not follow the previous contribution\");\n        return false;\n    }\n\n    sr = await sameRatio(curve, prev.alphaG1, cur.alphaG1, cur.key.alpha.g2_sp, cur.key.alpha.g2_spx);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID alpha*G1. challenge #\"+cur.id+\" It does not follow the previous contribution\");\n        return false;\n    }\n\n    sr = await sameRatio(curve, prev.betaG1, cur.betaG1, cur.key.beta.g2_sp, cur.key.beta.g2_spx);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID beta*G1. challenge #\"+cur.id+\" It does not follow the previous contribution\");\n        return false;\n    }\n\n    sr = await sameRatio(curve,  cur.key.beta.g1_s, cur.key.beta.g1_sx, prev.betaG2, cur.betaG2);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID beta*G2. challenge #\"+cur.id+\"It does not follow the previous contribution\");\n        return false;\n    }\n\n    if (logger) logger.info(\"Powers Of tau file OK!\");\n    return true;\n}\n\nexport default async function verify(tauFilename, logger) {\n    let sr;\n    await Blake2b.ready();\n\n    const {fd, sections} = await binFileUtils.readBinFile(tauFilename, \"ptau\", 1);\n    const {curve, power, ceremonyPower} = await utils.readPTauHeader(fd, sections);\n    const contrs = await utils.readContributions(fd, curve, sections);\n\n    if (logger) logger.debug(\"power: 2**\" + power);\n    // Verify Last contribution\n\n    if (logger) logger.debug(\"Computing initial contribution hash\");\n    const initialContribution = {\n        tauG1: curve.G1.g,\n        tauG2: curve.G2.g,\n        alphaG1: curve.G1.g,\n        betaG1: curve.G1.g,\n        betaG2: curve.G2.g,\n        nextChallenge: utils.calculateFirstChallengeHash(curve, ceremonyPower, logger),\n        responseHash: Blake2b(64).digest()\n    };\n\n    if (contrs.length == 0) {\n        if (logger) logger.error(\"This file has no contribution! It cannot be used in production\");\n        return false;\n    }\n\n    let prevContr;\n    if (contrs.length>1) {\n        prevContr = contrs[contrs.length-2];\n    } else {\n        prevContr = initialContribution;\n    }\n    const curContr = contrs[contrs.length-1];\n    if (logger) logger.debug(\"Validating contribution #\"+contrs[contrs.length-1].id);\n    const res = await verifyContribution(curve, curContr, prevContr, logger);\n    if (!res) return false;\n\n\n    const nextContributionHasher = Blake2b(64);\n    nextContributionHasher.update(curContr.responseHash);\n\n    // Verify powers and compute nextChallengeHash\n\n    // await test();\n\n    // Verify Section tau*G1\n    if (logger) logger.debug(\"Verifying powers in tau*G1 section\");\n    const rTau1 = await processSection(2, \"G1\", \"tauG1\", (2 ** power)*2-1, [0, 1], logger);\n    sr = await sameRatio(curve, rTau1.R1, rTau1.R2, curve.G2.g, curContr.tauG2);\n    if (sr !== true) {\n        if (logger) logger.error(\"tauG1 section. Powers do not match\");\n        return false;\n    }\n    if (!curve.G1.eq(curve.G1.g, rTau1.singularPoints[0])) {\n        if (logger) logger.error(\"First element of tau*G1 section must be the generator\");\n        return false;\n    }\n    if (!curve.G1.eq(curContr.tauG1, rTau1.singularPoints[1])) {\n        if (logger) logger.error(\"Second element of tau*G1 section does not match the one in the contribution section\");\n        return false;\n    }\n\n    // await test();\n\n    // Verify Section tau*G2\n    if (logger) logger.debug(\"Verifying powers in tau*G2 section\");\n    const rTau2 = await processSection(3, \"G2\", \"tauG2\", 2 ** power, [0, 1],  logger);\n    sr = await sameRatio(curve, curve.G1.g, curContr.tauG1, rTau2.R1, rTau2.R2);\n    if (sr !== true) {\n        if (logger) logger.error(\"tauG2 section. Powers do not match\");\n        return false;\n    }\n    if (!curve.G2.eq(curve.G2.g, rTau2.singularPoints[0])) {\n        if (logger) logger.error(\"First element of tau*G2 section must be the generator\");\n        return false;\n    }\n    if (!curve.G2.eq(curContr.tauG2, rTau2.singularPoints[1])) {\n        if (logger) logger.error(\"Second element of tau*G2 section does not match the one in the contribution section\");\n        return false;\n    }\n\n    // Verify Section alpha*tau*G1\n    if (logger) logger.debug(\"Verifying powers in alpha*tau*G1 section\");\n    const rAlphaTauG1 = await processSection(4, \"G1\", \"alphatauG1\", 2 ** power, [0], logger);\n    sr = await sameRatio(curve, rAlphaTauG1.R1, rAlphaTauG1.R2, curve.G2.g, curContr.tauG2);\n    if (sr !== true) {\n        if (logger) logger.error(\"alphaTauG1 section. Powers do not match\");\n        return false;\n    }\n    if (!curve.G1.eq(curContr.alphaG1, rAlphaTauG1.singularPoints[0])) {\n        if (logger) logger.error(\"First element of alpha*tau*G1 section (alpha*G1) does not match the one in the contribution section\");\n        return false;\n    }\n\n    // Verify Section beta*tau*G1\n    if (logger) logger.debug(\"Verifying powers in beta*tau*G1 section\");\n    const rBetaTauG1 = await processSection(5, \"G1\", \"betatauG1\", 2 ** power, [0], logger);\n    sr = await sameRatio(curve, rBetaTauG1.R1, rBetaTauG1.R2, curve.G2.g, curContr.tauG2);\n    if (sr !== true) {\n        if (logger) logger.error(\"betaTauG1 section. Powers do not match\");\n        return false;\n    }\n    if (!curve.G1.eq(curContr.betaG1, rBetaTauG1.singularPoints[0])) {\n        if (logger) logger.error(\"First element of beta*tau*G1 section (beta*G1) does not match the one in the contribution section\");\n        return false;\n    }\n\n    //Verify Beta G2\n    const betaG2 = await processSectionBetaG2(logger);\n    if (!curve.G2.eq(curContr.betaG2, betaG2)) {\n        if (logger) logger.error(\"betaG2 element in betaG2 section does not match the one in the contribution section\");\n        return false;\n    }\n\n\n    const nextContributionHash = nextContributionHasher.digest();\n\n    // Check the nextChallengeHash\n    if (power == ceremonyPower) {\n        if (!misc.hashIsEqual(nextContributionHash,curContr.nextChallenge)) {\n            if (logger) logger.error(\"Hash of the values does not match the next challenge of the last contributor in the contributions section\");\n            return false;\n        }\n    }\n\n    if (logger) logger.info(misc.formatHash(nextContributionHash, \"Next challenge hash: \"));\n\n    // Verify Previous contributions\n\n    printContribution(curContr, prevContr);\n    for (let i = contrs.length-2; i>=0; i--) {\n        const curContr = contrs[i];\n        const prevContr =  (i>0) ? contrs[i-1] : initialContribution;\n        const res = await verifyContribution(curve, curContr, prevContr, logger);\n        if (!res) return false;\n        printContribution(curContr, prevContr, logger);\n    }\n    if (logger) logger.info(\"-----------------------------------------------------\");\n\n    if ((!sections[12]) || (!sections[13]) || (!sections[14]) || (!sections[15])) {\n        if (logger) logger.warn(\n            \"this file does not contain phase2 precalculated values. Please run: \\n\" +\n            \"   snarkjs \\\"powersoftau preparephase2\\\" to prepare this file to be used in the phase2 ceremony.\"\n        );\n    } else {\n        let res;\n        res = await verifyLagrangeEvaluations(\"G1\", 2, 12, \"tauG1\", logger);\n        if (!res) return false;\n        res = await verifyLagrangeEvaluations(\"G2\", 3, 13, \"tauG2\", logger);\n        if (!res) return false;\n        res = await verifyLagrangeEvaluations(\"G1\", 4, 14, \"alphaTauG1\", logger);\n        if (!res) return false;\n        res = await verifyLagrangeEvaluations(\"G1\", 5, 15, \"betaTauG1\", logger);\n        if (!res) return false;\n    }\n\n    await fd.close();\n\n    if (logger) logger.info(\"Powers of Tau Ok!\");\n\n    return true;\n\n    function printContribution(curContr, prevContr) {\n        if (!logger) return;\n        logger.info(\"-----------------------------------------------------\");\n        logger.info(`Contribution #${curContr.id}: ${curContr.name ||\"\"}`);\n\n        logger.info(misc.formatHash(curContr.nextChallenge, \"Next Challenge: \"));\n\n        const buffV  = new Uint8Array(curve.G1.F.n8*2*6+curve.G2.F.n8*2*3);\n        utils.toPtauPubKeyRpr(buffV, 0, curve, curContr.key, false);\n\n        const responseHasher = Blake2b(64);\n        responseHasher.setPartialHash(curContr.partialHash);\n        responseHasher.update(buffV);\n        const responseHash = responseHasher.digest();\n\n        logger.info(misc.formatHash(responseHash, \"Response Hash:\"));\n\n        logger.info(misc.formatHash(prevContr.nextChallenge, \"Response Hash:\"));\n\n        if (curContr.type == 1) {\n            logger.info(`Beacon generator: ${misc.byteArray2hex(curContr.beaconHash)}`);\n            logger.info(`Beacon iterations Exp: ${curContr.numIterationsExp}`);\n        }\n\n    }\n\n    async function processSectionBetaG2(logger) {\n        const G = curve.G2;\n        const sG = G.F.n8*2;\n        const buffUv = new Uint8Array(sG);\n\n        if (!sections[6])  {\n            logger.error(\"File has no BetaG2 section\");\n            throw new Error(\"File has no BetaG2 section\");\n        }\n        if (sections[6].length>1) {\n            logger.error(\"File has no BetaG2 section\");\n            throw new Error(\"File has more than one GetaG2 section\");\n        }\n        fd.pos = sections[6][0].p;\n\n        const buff = await fd.read(sG);\n        const P = G.fromRprLEM(buff);\n\n        G.toRprUncompressed(buffUv, 0, P);\n        nextContributionHasher.update(buffUv);\n\n        return P;\n    }\n\n    async function processSection(idSection, groupName, sectionName, nPoints, singularPointIndexes, logger) {\n        const MAX_CHUNK_SIZE = 1<<16;\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        await binFileUtils.startReadUniqueSection(fd, sections, idSection);\n\n        const singularPoints = [];\n\n        let R1 = G.zero;\n        let R2 = G.zero;\n\n        let lastBase = G.zero;\n\n        for (let i=0; i<nPoints; i += MAX_CHUNK_SIZE) {\n            if (logger) logger.debug(`points relations: ${sectionName}: ${i}/${nPoints} `);\n            const n = Math.min(nPoints - i, MAX_CHUNK_SIZE);\n            const bases = await fd.read(n*sG);\n\n            const basesU = await G.batchLEMtoU(bases);\n            nextContributionHasher.update(basesU);\n\n            const scalars = new Uint8Array(4*(n-1));\n            crypto.randomFillSync(scalars);\n\n\n            if (i>0) {\n                const firstBase = G.fromRprLEM(bases, 0);\n                const r = crypto.randomBytes(4).readUInt32BE(0, true);\n\n                R1 = G.add(R1, G.timesScalar(lastBase, r));\n                R2 = G.add(R2, G.timesScalar(firstBase, r));\n            }\n\n            const r1 = await G.multiExpAffine(bases.slice(0, (n-1)*sG), scalars);\n            const r2 = await G.multiExpAffine(bases.slice(sG), scalars);\n\n            R1 = G.add(R1, r1);\n            R2 = G.add(R2, r2);\n\n            lastBase = G.fromRprLEM( bases, (n-1)*sG);\n\n            for (let j=0; j<singularPointIndexes.length; j++) {\n                const sp = singularPointIndexes[j];\n                if ((sp >=i) && (sp < i+n)) {\n                    const P = G.fromRprLEM(bases, (sp-i)*sG);\n                    singularPoints.push(P);\n                }\n            }\n\n        }\n        await binFileUtils.endReadSection(fd);\n\n        return {\n            R1: R1,\n            R2: R2,\n            singularPoints: singularPoints\n        };\n\n    }\n\n    async function verifyLagrangeEvaluations(gName, tauSection, lagrangeSection, sectionName, logger) {\n\n        if (logger) logger.debug(`Verifying phase2 calculated values ${sectionName}...`);\n        const G = curve[gName];\n        const sG = G.F.n8*2;\n\n        const seed= new Array(8);\n        for (let i=0; i<8; i++) {\n            seed[i] = crypto.randomBytes(4).readUInt32BE(0, true);\n        }\n\n        for (let p=0; p<= power; p ++) {\n            const res = await verifyPower(p);\n            if (!res) return false;\n        }\n\n        if (tauSection == 2) {\n            const res = await verifyPower(power+1);\n            if (!res) return false;\n        }\n\n        return true;\n\n        async function verifyPower(p) {\n            if (logger) logger.debug(`Power ${p}...`);\n            const n8r = curve.Fr.n8;\n            const nPoints = 2 ** p;\n            let buff_r = new Uint32Array(nPoints);\n            let buffG;\n\n            let rng = new ChaCha(seed);\n\n            if (logger) logger.debug(`Creating random numbers Powers${p}...`);\n            for (let i=0; i<nPoints; i++) {\n                if ((p == power+1)&&(i == nPoints-1)) {\n                    buff_r[i] = 0;\n                } else {\n                    buff_r[i] = rng.nextU32();\n                }\n            }\n\n            buff_r = new Uint8Array(buff_r.buffer, buff_r.byteOffset, buff_r.byteLength);\n\n            if (logger) logger.debug(`reading points Powers${p}...`);\n            await binFileUtils.startReadUniqueSection(fd, sections, tauSection);\n            buffG = new BigBuffer(nPoints*sG);\n            if (p == power+1) {\n                await fd.readToBuffer(buffG, 0, (nPoints-1)*sG);\n                buffG.set(curve.G1.zeroAffine, (nPoints-1)*sG);\n            } else {\n                await fd.readToBuffer(buffG, 0, nPoints*sG);\n            }\n            await binFileUtils.endReadSection(fd, true);\n\n            const resTau = await G.multiExpAffine(buffG, buff_r, logger, sectionName + \"_\" + p);\n\n            buff_r = new BigBuffer(nPoints * n8r);\n\n            rng = new ChaCha(seed);\n\n            const buff4 = new Uint8Array(4);\n            const buff4V = new DataView(buff4.buffer);\n\n            if (logger) logger.debug(`Creating random numbers Powers${p}...`);\n            for (let i=0; i<nPoints; i++) {\n                if ((i != nPoints-1) || (p != power+1)) {\n                    buff4V.setUint32(0, rng.nextU32(), true);\n                    buff_r.set(buff4, i*n8r);\n                }\n            }\n\n            if (logger) logger.debug(`batchToMontgomery ${p}...`);\n            buff_r = await curve.Fr.batchToMontgomery(buff_r);\n            if (logger) logger.debug(`fft ${p}...`);\n            buff_r = await curve.Fr.fft(buff_r);\n            if (logger) logger.debug(`batchFromMontgomery ${p}...`);\n            buff_r = await curve.Fr.batchFromMontgomery(buff_r);\n\n            if (logger) logger.debug(`reading points Lagrange${p}...`);\n            await binFileUtils.startReadUniqueSection(fd, sections, lagrangeSection);\n            fd.pos += sG*((2 ** p)-1);\n            await fd.readToBuffer(buffG, 0, nPoints*sG);\n            await binFileUtils.endReadSection(fd, true);\n\n            const resLagrange = await G.multiExpAffine(buffG, buff_r, logger, sectionName + \"_\" + p + \"_transformed\");\n\n            if (!G.eq(resTau, resLagrange)) {\n                if (logger) logger.error(\"Phase2 caclutation does not match with powers of tau\");\n                return false;\n            }\n\n            return true;\n        }\n    }\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// Format of the output\n//      Hash of the last contribution  64 Bytes\n//      2^N*2-1 TauG1 Points (compressed)\n//      2^N TauG2 Points (compressed)\n//      2^N AlphaTauG1 Points (compressed)\n//      2^N BetaTauG1 Points (compressed)\n//      Public Key\n//          BetaG2 (compressed)\n//          G1*s (compressed)\n//          G1*s*tau (compressed)\n//          G1*t (compressed)\n//          G1*t*alpha (compressed)\n//          G1*u (compressed)\n//          G1*u*beta (compressed)\n//          G2*sp*tau (compressed)\n//          G2*tp*alpha (compressed)\n//          G2*up*beta (compressed)\n\nimport * as fastFile from \"fastfile\";\nimport Blake2b from \"blake2b-wasm\";\nimport * as utils from \"./powersoftau_utils.js\";\nimport * as misc from \"./misc.js\";\nimport { applyKeyToChallengeSection } from \"./mpc_applykey.js\";\nimport * as keyPair from \"./keypair.js\";\n\nexport default async function challengeContribute(curve, challengeFilename, responesFileName, entropy, logger) {\n    await Blake2b.ready();\n\n    const fdFrom = await fastFile.readExisting(challengeFilename);\n\n\n    const sG1 = curve.F1.n64*8*2;\n    const sG2 = curve.F2.n64*8*2;\n    const domainSize = (fdFrom.totalSize + sG1 - 64 - sG2) / (4*sG1 + sG2);\n    let e = domainSize;\n    let power = 0;\n    while (e>1) {\n        e = e /2;\n        power += 1;\n    }\n\n    if (2 ** power != domainSize) throw new Error(\"Invalid file size\");\n    if (logger) logger.debug(\"Power to tau size: \"+power);\n\n    const rng = await misc.getRandomRng(entropy);\n\n    const fdTo = await fastFile.createOverride(responesFileName);\n\n    // Calculate the hash\n    const challengeHasher = Blake2b(64);\n    for (let i=0; i<fdFrom.totalSize; i+= fdFrom.pageSize) {\n        if (logger) logger.debug(`Hashing challenge ${i}/${fdFrom.totalSize}`);\n        const s = Math.min(fdFrom.totalSize - i, fdFrom.pageSize);\n        const buff = await fdFrom.read(s);\n        challengeHasher.update(buff);\n    }\n\n    const claimedHash = await fdFrom.read(64, 0);\n    if (logger) logger.info(misc.formatHash(claimedHash, \"Claimed Previous Response Hash: \"));\n\n    const challengeHash = challengeHasher.digest();\n    if (logger) logger.info(misc.formatHash(challengeHash, \"Current Challenge Hash: \"));\n\n    const key = keyPair.createPTauKey(curve, challengeHash, rng);\n\n    if (logger) {\n        [\"tau\", \"alpha\", \"beta\"].forEach( (k) => {\n            logger.debug(k + \".g1_s: \" + curve.G1.toString(key[k].g1_s, 16));\n            logger.debug(k + \".g1_sx: \" + curve.G1.toString(key[k].g1_sx, 16));\n            logger.debug(k + \".g2_sp: \" + curve.G2.toString(key[k].g2_sp, 16));\n            logger.debug(k + \".g2_spx: \" + curve.G2.toString(key[k].g2_spx, 16));\n            logger.debug(\"\");\n        });\n    }\n\n    const responseHasher = Blake2b(64);\n\n    await fdTo.write(challengeHash);\n    responseHasher.update(challengeHash);\n\n    await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, \"G1\", (2 ** power)*2-1, curve.Fr.one    , key.tau.prvKey, \"COMPRESSED\", \"tauG1\"     , logger );\n    await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, \"G2\", (2 ** power)    , curve.Fr.one    , key.tau.prvKey, \"COMPRESSED\", \"tauG2\"     , logger );\n    await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, \"G1\", (2 ** power)    , key.alpha.prvKey, key.tau.prvKey, \"COMPRESSED\", \"alphaTauG1\", logger );\n    await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, \"G1\", (2 ** power)    , key.beta.prvKey , key.tau.prvKey, \"COMPRESSED\", \"betaTauG1\" , logger );\n    await applyKeyToChallengeSection(fdFrom, fdTo, responseHasher, curve, \"G2\", 1             , key.beta.prvKey , key.tau.prvKey, \"COMPRESSED\", \"betaTauG2\" , logger );\n\n    // Write and hash key\n    const buffKey = new Uint8Array(curve.F1.n8*2*6+curve.F2.n8*2*3);\n    utils.toPtauPubKeyRpr(buffKey, 0, curve, key, false);\n    await fdTo.write(buffKey);\n    responseHasher.update(buffKey);\n    const responseHash = responseHasher.digest();\n    if (logger) logger.info(misc.formatHash(responseHash, \"Contribution Response Hash: \"));\n\n    await fdTo.close();\n    await fdFrom.close();\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as binFileUtils from \"@iden3/binfileutils\";\n\n/*\n    This function creates a new section in the fdTo file with id idSection.\n    It multiplies the pooints in fdFrom by first, first*inc, first*inc^2, ....\n    nPoint Times.\n    It also updates the newChallengeHasher with the new points\n*/\n\nexport async function applyKeyToSection(fdOld, sections, fdNew, idSection, curve, groupName, first, inc, sectionName, logger) {\n    const MAX_CHUNK_SIZE = 1 << 16;\n    const G = curve[groupName];\n    const sG = G.F.n8*2;\n    const nPoints = sections[idSection][0].size / sG;\n\n    await binFileUtils.startReadUniqueSection(fdOld, sections,idSection );\n    await binFileUtils.startWriteSection(fdNew, idSection);\n\n    let t = first;\n    for (let i=0; i<nPoints; i += MAX_CHUNK_SIZE) {\n        if (logger) logger.debug(`Applying key: ${sectionName}: ${i}/${nPoints}`);\n        const n= Math.min(nPoints - i, MAX_CHUNK_SIZE);\n        let buff;\n        buff = await fdOld.read(n*sG);\n        buff = await G.batchApplyKey(buff, t, inc);\n        await fdNew.write(buff);\n        t = curve.Fr.mul(t, curve.Fr.exp(inc, n));\n    }\n\n    await binFileUtils.endWriteSection(fdNew);\n    await binFileUtils.endReadSection(fdOld);\n}\n\n\n\nexport async function applyKeyToChallengeSection(fdOld, fdNew, responseHasher, curve, groupName, nPoints, first, inc, formatOut, sectionName, logger) {\n    const G = curve[groupName];\n    const sG = G.F.n8*2;\n    const chunkSize = Math.floor((1<<20) / sG);   // 128Mb chunks\n    let t = first;\n    for (let i=0 ; i<nPoints ; i+= chunkSize) {\n        if (logger) logger.debug(`Applying key ${sectionName}: ${i}/${nPoints}`);\n        const n= Math.min(nPoints-i, chunkSize );\n        const buffInU = await fdOld.read(n * sG);\n        const buffInLEM = await G.batchUtoLEM(buffInU);\n        const buffOutLEM = await G.batchApplyKey(buffInLEM, t, inc);\n        let buffOut;\n        if (formatOut == \"COMPRESSED\") {\n            buffOut = await G.batchLEMtoC(buffOutLEM);\n        } else {\n            buffOut = await G.batchLEMtoU(buffOutLEM);\n        }\n\n        if (responseHasher) responseHasher.update(buffOut);\n        await fdNew.write(buffOut);\n        t = curve.Fr.mul(t, curve.Fr.exp(inc, n));\n    }\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport Blake2b from \"blake2b-wasm\";\nimport * as utils from \"./powersoftau_utils.js\";\nimport * as misc from \"./misc.js\";\nimport * as binFileUtils from \"@iden3/binfileutils\";\n\nexport default async function beacon(oldPtauFilename, newPTauFilename, name,  beaconHashStr,numIterationsExp, logger) {\n    const beaconHash = misc.hex2ByteArray(beaconHashStr);\n    if (   (beaconHash.byteLength == 0)\n        || (beaconHash.byteLength*2 !=beaconHashStr.length))\n    {\n        if (logger) logger.error(\"Invalid Beacon Hash. (It must be a valid hexadecimal sequence)\");\n        return false;\n    }\n    if (beaconHash.length>=256) {\n        if (logger) logger.error(\"Maximum lenght of beacon hash is 255 bytes\");\n        return false;\n    }\n\n    numIterationsExp = parseInt(numIterationsExp);\n    if ((numIterationsExp<10)||(numIterationsExp>63)) {\n        if (logger) logger.error(\"Invalid numIterationsExp. (Must be between 10 and 63)\");\n        return false;\n    }\n\n\n    await Blake2b.ready();\n\n    const {fd: fdOld, sections} = await binFileUtils.readBinFile(oldPtauFilename, \"ptau\", 1);\n    const {curve, power, ceremonyPower} = await utils.readPTauHeader(fdOld, sections);\n    if (power != ceremonyPower) {\n        if (logger) logger.error(\"This file has been reduced. You cannot contribute into a reduced file.\");\n        return false;\n    }\n    if (sections[12]) {\n        if (logger) logger.warn(\"Contributing into a file that has phase2 calculated. You will have to prepare phase2 again.\");\n    }\n    const contributions = await utils.readContributions(fdOld, curve, sections);\n    const curContribution = {\n        name: name,\n        type: 1, // Beacon\n        numIterationsExp: numIterationsExp,\n        beaconHash: beaconHash\n    };\n\n    let lastChallengeHash;\n\n    if (contributions.length>0) {\n        lastChallengeHash = contributions[contributions.length-1].nextChallenge;\n    } else {\n        lastChallengeHash = utils.calculateFirstChallengeHash(curve, power, logger);\n    }\n\n    curContribution.key = utils.keyFromBeacon(curve, lastChallengeHash, beaconHash, numIterationsExp);\n\n    const responseHasher = new Blake2b(64);\n    responseHasher.update(lastChallengeHash);\n\n    const fdNew = await binFileUtils.createBinFile(newPTauFilename, \"ptau\", 1, 7);\n    await utils.writePTauHeader(fdNew, curve, power);\n\n    const startSections = [];\n\n    let firstPoints;\n    firstPoints = await processSection(2, \"G1\",  (2 ** power) * 2 -1, curve.Fr.e(1), curContribution.key.tau.prvKey, \"tauG1\", logger );\n    curContribution.tauG1 = firstPoints[1];\n    firstPoints = await processSection(3, \"G2\",  (2 ** power) , curve.Fr.e(1), curContribution.key.tau.prvKey, \"tauG2\", logger );\n    curContribution.tauG2 = firstPoints[1];\n    firstPoints = await processSection(4, \"G1\",  (2 ** power) , curContribution.key.alpha.prvKey, curContribution.key.tau.prvKey, \"alphaTauG1\", logger );\n    curContribution.alphaG1 = firstPoints[0];\n    firstPoints = await processSection(5, \"G1\",  (2 ** power) , curContribution.key.beta.prvKey, curContribution.key.tau.prvKey, \"betaTauG1\", logger );\n    curContribution.betaG1 = firstPoints[0];\n    firstPoints = await processSection(6, \"G2\",  1, curContribution.key.beta.prvKey, curContribution.key.tau.prvKey, \"betaTauG2\", logger );\n    curContribution.betaG2 = firstPoints[0];\n\n    curContribution.partialHash = responseHasher.getPartialHash();\n\n    const buffKey = new Uint8Array(curve.F1.n8*2*6+curve.F2.n8*2*3);\n\n    utils.toPtauPubKeyRpr(buffKey, 0, curve, curContribution.key, false);\n\n    responseHasher.update(new Uint8Array(buffKey));\n    const hashResponse = responseHasher.digest();\n\n    if (logger) logger.info(misc.formatHash(hashResponse, \"Contribution Response Hash imported: \"));\n\n    const nextChallengeHasher = new Blake2b(64);\n    nextChallengeHasher.update(hashResponse);\n\n    await hashSection(fdNew, \"G1\", 2, (2 ** power) * 2 -1, \"tauG1\", logger);\n    await hashSection(fdNew, \"G2\", 3, (2 ** power)       , \"tauG2\", logger);\n    await hashSection(fdNew, \"G1\", 4, (2 ** power)       , \"alphaTauG1\", logger);\n    await hashSection(fdNew, \"G1\", 5, (2 ** power)       , \"betaTauG1\", logger);\n    await hashSection(fdNew, \"G2\", 6, 1                  , \"betaG2\", logger);\n\n    curContribution.nextChallenge = nextChallengeHasher.digest();\n\n    if (logger) logger.info(misc.formatHash(curContribution.nextChallenge, \"Next Challenge Hash: \"));\n\n    contributions.push(curContribution);\n\n    await utils.writeContributions(fdNew, curve, contributions);\n\n    await fdOld.close();\n    await fdNew.close();\n\n    return hashResponse;\n\n    async function processSection(sectionId, groupName, NPoints, first, inc, sectionName, logger) {\n        const res = [];\n        fdOld.pos = sections[sectionId][0].p;\n\n        await binFileUtils.startWriteSection(fdNew, sectionId);\n\n        startSections[sectionId] = fdNew.pos;\n\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        const chunkSize = Math.floor((1<<20) / sG);   // 128Mb chunks\n        let t = first;\n        for (let i=0 ; i<NPoints ; i+= chunkSize) {\n            if (logger) logger.debug(`applying key${sectionName}: ${i}/${NPoints}`);\n            const n= Math.min(NPoints-i, chunkSize );\n            const buffIn = await fdOld.read(n * sG);\n            const buffOutLEM = await G.batchApplyKey(buffIn, t, inc);\n\n            /* Code to test the case where we don't have the 2^m-2 component\n            if (sectionName== \"tauG1\") {\n                const bz = new Uint8Array(64);\n                buffOutLEM.set(bz, 64*((2 ** power) - 1 ));\n            }\n            */\n\n            const promiseWrite = fdNew.write(buffOutLEM);\n            const buffOutC = await G.batchLEMtoC(buffOutLEM);\n\n            responseHasher.update(buffOutC);\n            await promiseWrite;\n            if (i==0)   // Return the 2 first points.\n                for (let j=0; j<Math.min(2, NPoints); j++)\n                    res.push(G.fromRprLEM(buffOutLEM, j*sG));\n            t = curve.Fr.mul(t, curve.Fr.exp(inc, n));\n        }\n\n        await binFileUtils.endWriteSection(fdNew);\n\n        return res;\n    }\n\n\n    async function hashSection(fdTo, groupName, sectionId, nPoints, sectionName, logger) {\n\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        const nPointsChunk = Math.floor((1<<24)/sG);\n\n        const oldPos = fdTo.pos;\n        fdTo.pos = startSections[sectionId];\n\n        for (let i=0; i< nPoints; i += nPointsChunk) {\n            if (logger) logger.debug(`Hashing ${sectionName}: ${i}/${nPoints}`);\n            const n = Math.min(nPoints-i, nPointsChunk);\n\n            const buffLEM = await fdTo.read(n * sG);\n\n            const buffU = await G.batchLEMtoU(buffLEM);\n\n            nextChallengeHasher.update(buffU);\n        }\n\n        fdTo.pos = oldPos;\n    }\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// Format of the output\n//      Hash of the last contribution  64 Bytes\n//      2^N*2-1 TauG1 Points (uncompressed)\n//      2^N TauG2 Points (uncompressed)\n//      2^N AlphaTauG1 Points (uncompressed)\n//      2^N BetaTauG1 Points (uncompressed)\n\nimport Blake2b from \"blake2b-wasm\";\nimport * as utils from \"./powersoftau_utils.js\";\nimport * as keyPair from \"./keypair.js\";\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as misc from \"./misc.js\";\n\nexport default async function contribute(oldPtauFilename, newPTauFilename, name, entropy, logger) {\n    await Blake2b.ready();\n\n    const {fd: fdOld, sections} = await binFileUtils.readBinFile(oldPtauFilename, \"ptau\", 1);\n    const {curve, power, ceremonyPower} = await utils.readPTauHeader(fdOld, sections);\n    if (power != ceremonyPower) {\n        if (logger) logger.error(\"This file has been reduced. You cannot contribute into a reduced file.\");\n        throw new Error(\"This file has been reduced. You cannot contribute into a reduced file.\");\n    }\n    if (sections[12]) {\n        if (logger) logger.warn(\"WARNING: Contributing into a file that has phase2 calculated. You will have to prepare phase2 again.\");\n    }\n    const contributions = await utils.readContributions(fdOld, curve, sections);\n    const curContribution = {\n        name: name,\n        type: 0, // Beacon\n    };\n\n    let lastChallengeHash;\n\n    const rng = await misc.getRandomRng(entropy);\n\n    if (contributions.length>0) {\n        lastChallengeHash = contributions[contributions.length-1].nextChallenge;\n    } else {\n        lastChallengeHash = utils.calculateFirstChallengeHash(curve, power, logger);\n    }\n\n    // Generate a random key\n\n\n    curContribution.key = keyPair.createPTauKey(curve, lastChallengeHash, rng);\n\n\n    const responseHasher = new Blake2b(64);\n    responseHasher.update(lastChallengeHash);\n\n    const fdNew = await binFileUtils.createBinFile(newPTauFilename, \"ptau\", 1, 7);\n    await utils.writePTauHeader(fdNew, curve, power);\n\n    const startSections = [];\n\n    let firstPoints;\n    firstPoints = await processSection(2, \"G1\",  (2 ** power) * 2 -1, curve.Fr.e(1), curContribution.key.tau.prvKey, \"tauG1\" );\n    curContribution.tauG1 = firstPoints[1];\n    firstPoints = await processSection(3, \"G2\",  (2 ** power) , curve.Fr.e(1), curContribution.key.tau.prvKey, \"tauG2\" );\n    curContribution.tauG2 = firstPoints[1];\n    firstPoints = await processSection(4, \"G1\",  (2 ** power) , curContribution.key.alpha.prvKey, curContribution.key.tau.prvKey, \"alphaTauG1\" );\n    curContribution.alphaG1 = firstPoints[0];\n    firstPoints = await processSection(5, \"G1\",  (2 ** power) , curContribution.key.beta.prvKey, curContribution.key.tau.prvKey, \"betaTauG1\" );\n    curContribution.betaG1 = firstPoints[0];\n    firstPoints = await processSection(6, \"G2\",  1, curContribution.key.beta.prvKey, curContribution.key.tau.prvKey, \"betaTauG2\" );\n    curContribution.betaG2 = firstPoints[0];\n\n    curContribution.partialHash = responseHasher.getPartialHash();\n\n    const buffKey = new Uint8Array(curve.F1.n8*2*6+curve.F2.n8*2*3);\n\n    utils.toPtauPubKeyRpr(buffKey, 0, curve, curContribution.key, false);\n\n    responseHasher.update(new Uint8Array(buffKey));\n    const hashResponse = responseHasher.digest();\n\n    if (logger) logger.info(misc.formatHash(hashResponse, \"Contribution Response Hash imported: \"));\n\n    const nextChallengeHasher = new Blake2b(64);\n    nextChallengeHasher.update(hashResponse);\n\n    await hashSection(fdNew, \"G1\", 2, (2 ** power) * 2 -1, \"tauG1\");\n    await hashSection(fdNew, \"G2\", 3, (2 ** power)       , \"tauG2\");\n    await hashSection(fdNew, \"G1\", 4, (2 ** power)       , \"alphaTauG1\");\n    await hashSection(fdNew, \"G1\", 5, (2 ** power)       , \"betaTauG1\");\n    await hashSection(fdNew, \"G2\", 6, 1                  , \"betaG2\");\n\n    curContribution.nextChallenge = nextChallengeHasher.digest();\n\n    if (logger) logger.info(misc.formatHash(curContribution.nextChallenge, \"Next Challenge Hash: \"));\n\n    contributions.push(curContribution);\n\n    await utils.writeContributions(fdNew, curve, contributions);\n\n    await fdOld.close();\n    await fdNew.close();\n\n    return hashResponse;\n\n    async function processSection(sectionId, groupName, NPoints, first, inc, sectionName) {\n        const res = [];\n        fdOld.pos = sections[sectionId][0].p;\n\n        await binFileUtils.startWriteSection(fdNew, sectionId);\n\n        startSections[sectionId] = fdNew.pos;\n\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        const chunkSize = Math.floor((1<<20) / sG);   // 128Mb chunks\n        let t = first;\n        for (let i=0 ; i<NPoints ; i+= chunkSize) {\n            if (logger) logger.debug(`processing: ${sectionName}: ${i}/${NPoints}`);\n            const n= Math.min(NPoints-i, chunkSize );\n            const buffIn = await fdOld.read(n * sG);\n            const buffOutLEM = await G.batchApplyKey(buffIn, t, inc);\n\n            /* Code to test the case where we don't have the 2^m-2 component\n            if (sectionName== \"tauG1\") {\n                const bz = new Uint8Array(64);\n                buffOutLEM.set(bz, 64*((2 ** power) - 1 ));\n            }\n            */\n\n            const promiseWrite = fdNew.write(buffOutLEM);\n            const buffOutC = await G.batchLEMtoC(buffOutLEM);\n\n            responseHasher.update(buffOutC);\n            await promiseWrite;\n            if (i==0)   // Return the 2 first points.\n                for (let j=0; j<Math.min(2, NPoints); j++)\n                    res.push(G.fromRprLEM(buffOutLEM, j*sG));\n            t = curve.Fr.mul(t, curve.Fr.exp(inc, n));\n        }\n\n        await binFileUtils.endWriteSection(fdNew);\n\n        return res;\n    }\n\n\n    async function hashSection(fdTo, groupName, sectionId, nPoints, sectionName) {\n\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        const nPointsChunk = Math.floor((1<<24)/sG);\n\n        const oldPos = fdTo.pos;\n        fdTo.pos = startSections[sectionId];\n\n        for (let i=0; i< nPoints; i += nPointsChunk) {\n            if ((logger)&&i) logger.debug(`Hashing ${sectionName}: ` + i);\n            const n = Math.min(nPoints-i, nPointsChunk);\n\n            const buffLEM = await fdTo.read(n * sG);\n\n            const buffU = await G.batchLEMtoU(buffLEM);\n\n            nextChallengeHasher.update(buffU);\n        }\n\n        fdTo.pos = oldPos;\n    }\n\n\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as utils from \"./powersoftau_utils.js\";\nimport {BigBuffer} from \"ffjavascript\";\n\nexport default async function preparePhase2(oldPtauFilename, newPTauFilename, logger) {\n\n    const {fd: fdOld, sections} = await binFileUtils.readBinFile(oldPtauFilename, \"ptau\", 1);\n    const {curve, power} = await utils.readPTauHeader(fdOld, sections);\n\n    const fdNew = await binFileUtils.createBinFile(newPTauFilename, \"ptau\", 1, 11);\n    await utils.writePTauHeader(fdNew, curve, power);\n\n    await binFileUtils.copySection(fdOld, sections, fdNew, 2);\n    await binFileUtils.copySection(fdOld, sections, fdNew, 3);\n    await binFileUtils.copySection(fdOld, sections, fdNew, 4);\n    await binFileUtils.copySection(fdOld, sections, fdNew, 5);\n    await binFileUtils.copySection(fdOld, sections, fdNew, 6);\n    await binFileUtils.copySection(fdOld, sections, fdNew, 7);\n\n    await processSection(2, 12, \"G1\", \"tauG1\" );\n    await processSection(3, 13, \"G2\", \"tauG2\" );\n    await processSection(4, 14, \"G1\", \"alphaTauG1\" );\n    await processSection(5, 15, \"G1\", \"betaTauG1\" );\n\n    await fdOld.close();\n    await fdNew.close();\n\n    // await fs.promises.unlink(newPTauFilename+ \".tmp\");\n\n    return;\n\n    async function processSection(oldSectionId, newSectionId, Gstr, sectionName) {\n        if (logger) logger.debug(\"Starting section: \"+sectionName);\n\n        await binFileUtils.startWriteSection(fdNew, newSectionId);\n\n        for (let p=0; p<=power; p++) {\n            await processSectionPower(p);\n        }\n\n        if (oldSectionId == 2) {\n            await processSectionPower(power+1);\n        }\n\n        await binFileUtils.endWriteSection(fdNew);\n\n\n        async function processSectionPower(p) {\n            const nPoints = 2 ** p;\n            const G = curve[Gstr];\n            const Fr = curve.Fr;\n            const sGin = G.F.n8*2;\n            const sGmid = G.F.n8*3;\n\n            let buff;\n            buff = new BigBuffer(nPoints*sGin);\n\n            await binFileUtils.startReadUniqueSection(fdOld, sections, oldSectionId);\n            if ((oldSectionId == 2)&&(p==power+1)) {\n                await fdOld.readToBuffer(buff, 0,(nPoints-1)*sGin );\n                buff.set(curve.G1.zeroAffine, (nPoints-1)*sGin );\n            } else {\n                await fdOld.readToBuffer(buff, 0,nPoints*sGin );\n            }\n            await binFileUtils.endReadSection(fdOld, true);\n\n\n            buff = await G.lagrangeEvaluations(buff, \"affine\", \"affine\", logger, sectionName);\n            await fdNew.write(buff);\n\n/*\n            if (p <= curve.Fr.s) {\n                buff = await G.ifft(buff, \"affine\", \"affine\", logger, sectionName);\n                await fdNew.write(buff);\n            } else if (p == curve.Fr.s+1) {\n                const smallM = 1<<curve.Fr.s;\n                let t0 = new BigBuffer( smallM * sGmid );\n                let t1 = new BigBuffer( smallM * sGmid );\n\n                const shift_to_small_m = Fr.exp(Fr.shift, smallM);\n                const one_over_denom = Fr.inv(Fr.sub(shift_to_small_m, Fr.one));\n\n                let sInvAcc = Fr.one;\n                for (let i=0; i<smallM; i++) {\n                    const ti =  buff.slice(i*sGin, (i+1)*sGin);\n                    const tmi = buff.slice((i+smallM)*sGin, (i+smallM+1)*sGin);\n\n                    t0.set(\n                        G.timesFr(\n                            G.sub(\n                                G.timesFr(ti , shift_to_small_m),\n                                tmi\n                            ),\n                            one_over_denom\n                        ),\n                        i*sGmid\n                    );\n                    t1.set(\n                        G.timesFr(\n                            G.sub( tmi, ti),\n                            Fr.mul(sInvAcc, one_over_denom)\n                        ),\n                        i*sGmid\n                    );\n\n\n                    sInvAcc = Fr.mul(sInvAcc, Fr.shiftInv);\n                }\n                t0 = await G.ifft(t0, \"jacobian\", \"affine\", logger, sectionName + \" t0\");\n                await fdNew.write(t0);\n                t0 = null;\n                t1 = await G.ifft(t1, \"jacobian\", \"affine\", logger, sectionName + \" t0\");\n                await fdNew.write(t1);\n\n            } else {\n                if (logger) logger.error(\"Power too big\");\n                throw new Error(\"Power to big\");\n            }\n*/\n        }\n    }\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as utils from \"./powersoftau_utils.js\";\n\nexport default async function truncate(ptauFilename, template, logger) {\n\n    const {fd: fdOld, sections} = await binFileUtils.readBinFile(ptauFilename, \"ptau\", 1);\n    const {curve, power, ceremonyPower} = await utils.readPTauHeader(fdOld, sections);\n\n    const sG1 = curve.G1.F.n8*2;\n    const sG2 = curve.G2.F.n8*2;\n\n    for (let p=1; p<power; p++) {\n        await generateTruncate(p);\n    }\n\n    await fdOld.close();\n\n    return true;\n\n    async function generateTruncate(p) {\n\n        let sP = p.toString();\n        while (sP.length<2) sP = \"0\" + sP;\n\n        if (logger) logger.debug(\"Writing Power: \"+sP);\n\n        const fdNew = await binFileUtils.createBinFile(template + sP + \".ptau\", \"ptau\", 1, 11);\n        await utils.writePTauHeader(fdNew, curve, p, ceremonyPower);\n\n        await binFileUtils.copySection(fdOld, sections, fdNew, 2, ((2 ** p)*2-1) * sG1 ); // tagG1\n        await binFileUtils.copySection(fdOld, sections, fdNew, 3, (2 ** p) * sG2); // tauG2\n        await binFileUtils.copySection(fdOld, sections, fdNew, 4, (2 ** p) * sG1); // alfaTauG1\n        await binFileUtils.copySection(fdOld, sections, fdNew, 5, (2 ** p) * sG1); // betaTauG1\n        await binFileUtils.copySection(fdOld, sections, fdNew, 6,  sG2); // betaTauG2\n        await binFileUtils.copySection(fdOld, sections, fdNew, 7); // contributions\n        await binFileUtils.copySection(fdOld, sections, fdNew, 12, ((2 ** (p+1))*2 -1) * sG1); // L_tauG1\n        await binFileUtils.copySection(fdOld, sections, fdNew, 13, ((2 ** p)*2 -1) * sG2); // L_tauG2\n        await binFileUtils.copySection(fdOld, sections, fdNew, 14, ((2 ** p)*2 -1) * sG1); // L_alfaTauG1\n        await binFileUtils.copySection(fdOld, sections, fdNew, 15, ((2 ** p)*2 -1) * sG1); // L_betaTauG1\n\n        await fdNew.close();\n    }\n\n\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as utils from \"./powersoftau_utils.js\";\nimport * as fastFile from \"fastfile\";\nimport {BigBuffer} from \"ffjavascript\";\n\nexport default async function convert(oldPtauFilename, newPTauFilename, logger) {\n\n    const {fd: fdOld, sections} = await binFileUtils.readBinFile(oldPtauFilename, \"ptau\", 1);\n    const {curve, power} = await utils.readPTauHeader(fdOld, sections);\n\n    const fdNew = await binFileUtils.createBinFile(newPTauFilename, \"ptau\", 1, 11);\n    await utils.writePTauHeader(fdNew, curve, power);\n\n    // const fdTmp = await fastFile.createOverride(newPTauFilename+ \".tmp\");\n\n    await binFileUtils.copySection(fdOld, sections, fdNew, 2);\n    await binFileUtils.copySection(fdOld, sections, fdNew, 3);\n    await binFileUtils.copySection(fdOld, sections, fdNew, 4);\n    await binFileUtils.copySection(fdOld, sections, fdNew, 5);\n    await binFileUtils.copySection(fdOld, sections, fdNew, 6);\n    await binFileUtils.copySection(fdOld, sections, fdNew, 7);\n\n    await processSection(2, 12, \"G1\", \"tauG1\" );\n    await binFileUtils.copySection(fdOld, sections, fdNew, 13);\n    await binFileUtils.copySection(fdOld, sections, fdNew, 14);\n    await binFileUtils.copySection(fdOld, sections, fdNew, 15);\n\n    await fdOld.close();\n    await fdNew.close();\n\n    // await fs.promises.unlink(newPTauFilename+ \".tmp\");\n\n    return;\n\n    async function processSection(oldSectionId, newSectionId, Gstr, sectionName) {\n        if (logger) logger.debug(\"Starting section: \"+sectionName);\n\n        await binFileUtils.startWriteSection(fdNew, newSectionId);\n\n        const size = sections[newSectionId][0].size;\n        const chunkSize = fdOld.pageSize;\n        await binFileUtils.startReadUniqueSection(fdOld, sections, newSectionId);\n        for (let p=0; p<size; p+=chunkSize) {\n            const l = Math.min(size -p, chunkSize);\n            const buff = await fdOld.read(l);\n            await fdNew.write(buff);\n        }\n        await binFileUtils.endReadSection(fdOld);\n\n        if (oldSectionId == 2) {\n            await processSectionPower(power+1);\n        }\n\n        await binFileUtils.endWriteSection(fdNew);\n\n        async function processSectionPower(p) {\n            const nPoints = 2 ** p;\n            const G = curve[Gstr];\n            const sGin = G.F.n8*2;\n\n            let buff;\n            buff = new BigBuffer(nPoints*sGin);\n\n            await binFileUtils.startReadUniqueSection(fdOld, sections, oldSectionId);\n            if ((oldSectionId == 2)&&(p==power+1)) {\n                await fdOld.readToBuffer(buff, 0,(nPoints-1)*sGin );\n                buff.set(curve.G1.zeroAffine, (nPoints-1)*sGin );\n            } else {\n                await fdOld.readToBuffer(buff, 0,nPoints*sGin );\n            }\n            await binFileUtils.endReadSection(fdOld, true);\n\n            buff = await G.lagrangeEvaluations(buff, \"affine\", \"affine\", logger, sectionName);\n            await fdNew.write(buff);\n\n/*\n            if (p <= curve.Fr.s) {\n                buff = await G.ifft(buff, \"affine\", \"affine\", logger, sectionName);\n                await fdNew.write(buff);\n            } else if (p == curve.Fr.s+1) {\n                const smallM = 1<<curve.Fr.s;\n                let t0 = new BigBuffer( smallM * sGmid );\n                let t1 = new BigBuffer( smallM * sGmid );\n\n                const shift_to_small_m = Fr.exp(Fr.shift, smallM);\n                const one_over_denom = Fr.inv(Fr.sub(shift_to_small_m, Fr.one));\n\n                let sInvAcc = Fr.one;\n                for (let i=0; i<smallM; i++) {\n                    if (i%10000) logger.debug(`sectionName prepare L calc: ${sectionName}, ${i}/${smallM}`);\n                    const ti =  buff.slice(i*sGin, (i+1)*sGin);\n                    const tmi = buff.slice((i+smallM)*sGin, (i+smallM+1)*sGin);\n\n                    t0.set(\n                        G.timesFr(\n                            G.sub(\n                                G.timesFr(ti , shift_to_small_m),\n                                tmi\n                            ),\n                            one_over_denom\n                        ),\n                        i*sGmid\n                    );\n                    t1.set(\n                        G.timesFr(\n                            G.sub( tmi, ti),\n                            Fr.mul(sInvAcc, one_over_denom)\n                        ),\n                        i*sGmid\n                    );\n\n\n                    sInvAcc = Fr.mul(sInvAcc, Fr.shiftInv);\n                }\n                t0 = await G.ifft(t0, \"jacobian\", \"affine\", logger, sectionName + \" t0\");\n                await fdNew.write(t0);\n                t0 = null;\n                t1 = await G.ifft(t1, \"jacobian\", \"affine\", logger, sectionName + \" t1\");\n                await fdNew.write(t1);\n\n            } else {\n                if (logger) logger.error(\"Power too big\");\n                throw new Error(\"Power to big\");\n            }\n*/\n        }\n\n\n    }\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as utils from \"./powersoftau_utils.js\";\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport { stringifyBigIntsWithField } from \"./misc.js\";\n\nexport default async function exportJson(pTauFilename, verbose) {\n    const {fd, sections} = await binFileUtils.readBinFile(pTauFilename, \"ptau\", 1);\n\n    const {curve, power} = await utils.readPTauHeader(fd, sections);\n\n    const pTau = {};\n    pTau.q = curve.q;\n    pTau.power = power;\n    pTau.contributions = await utils.readContributions(fd, curve, sections);\n\n    pTau.tauG1 = await exportSection(2, \"G1\", (2 ** power)*2 -1, \"tauG1\");\n    pTau.tauG2 = await exportSection(3, \"G2\", (2 ** power), \"tauG2\");\n    pTau.alphaTauG1 = await exportSection(4, \"G1\", (2 ** power), \"alphaTauG1\");\n    pTau.betaTauG1 = await exportSection(5, \"G1\", (2 ** power), \"betaTauG1\");\n    pTau.betaG2 = await exportSection(6, \"G2\", 1, \"betaG2\");\n\n    pTau.lTauG1 = await exportLagrange(12, \"G1\", \"lTauG1\");\n    pTau.lTauG2 = await exportLagrange(13, \"G2\", \"lTauG2\");\n    pTau.lAlphaTauG1 = await exportLagrange(14, \"G1\", \"lAlphaTauG2\");\n    pTau.lBetaTauG1 = await exportLagrange(15, \"G1\", \"lBetaTauG2\");\n\n    await fd.close();\n\n    return stringifyBigIntsWithField(curve.Fr, pTau);\n\n\n\n    async function exportSection(sectionId, groupName, nPoints, sectionName) {\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n\n        const res = [];\n        await binFileUtils.startReadUniqueSection(fd, sections, sectionId);\n        for (let i=0; i< nPoints; i++) {\n            if ((verbose)&&i&&(i%10000 == 0)) console.log(`${sectionName}: ` + i);\n            const buff = await fd.read(sG);\n            res.push(G.fromRprLEM(buff, 0));\n        }\n        await binFileUtils.endReadSection(fd);\n\n        return res;\n    }\n\n    async function exportLagrange(sectionId, groupName, sectionName) {\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n\n        const res = [];\n        await binFileUtils.startReadUniqueSection(fd, sections, sectionId);\n        for (let p=0; p<=power; p++) {\n            if (verbose) console.log(`${sectionName}: Power: ${p}`);\n            res[p] = [];\n            const nPoints = (2 ** p);\n            for (let i=0; i<nPoints; i++) {\n                if ((verbose)&&i&&(i%10000 == 0)) console.log(`${sectionName}: ${i}/${nPoints}`);\n                const buff = await fd.read(sG);\n                res[p].push(G.fromRprLEM(buff, 0));\n            }\n        }\n        await binFileUtils.endReadSection(fd, true);\n        return res;\n    }\n\n\n}\n\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexport {default as print} from \"./r1cs_print.js\";\nexport {default as info} from \"./r1cs_info.js\";\nexport {default as exportJson} from \"./r1cs_export_json.js\";\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexport default function r1csPrint(r1cs, syms, logger) {\n    for (let i=0; i<r1cs.constraints.length; i++) {\n        printCostraint(r1cs.constraints[i]);\n    }\n    function printCostraint(c) {\n        const lc2str = (lc) => {\n            let S = \"\";\n            const keys = Object.keys(lc);\n            keys.forEach( (k) => {\n                let name = syms.varIdx2Name[k];\n                if (name == \"one\") name = \"\";\n\n                let vs = r1cs.curve.Fr.toString(lc[k]);\n                if (vs == \"1\") vs = \"\";  // Do not show ones\n                if (vs == \"-1\") vs = \"-\";  // Do not show ones\n                if ((S!=\"\")&&(vs[0]!=\"-\")) vs = \"+\"+vs;\n                if (S!=\"\") vs = \" \"+vs;\n                S= S + vs   + name;\n            });\n            return S;\n        };\n        const S = `[ ${lc2str(c[0])} ] * [ ${lc2str(c[1])} ] - [ ${lc2str(c[2])} ] = 0`;\n        if (logger) logger.info(S);\n    }\n\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { Scalar } from \"ffjavascript\";\nimport { readR1cs }  from \"r1csfile\";\n\nconst bls12381r = Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16);\nconst bn128r = Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\");\n\nexport default async function r1csInfo(r1csName, logger) {\n\n    const cir = await readR1cs(r1csName);\n\n    if (Scalar.eq(cir.prime, bn128r)) {\n        if (logger) logger.info(\"Curve: bn-128\");\n    } else if (Scalar.eq(cir.prime, bls12381r)) {\n        if (logger) logger.info(\"Curve: bls12-381\");\n    } else {\n        if (logger) logger.info(`Unknown Curve. Prime: ${Scalar.toString(cir.prime)}`);\n    }\n    if (logger) logger.info(`# of Wires: ${cir.nVars}`);\n    if (logger) logger.info(`# of Constraints: ${cir.nConstraints}`);\n    if (logger) logger.info(`# of Private Inputs: ${cir.nPrvInputs}`);\n    if (logger) logger.info(`# of Public Inputs: ${cir.nPubInputs}`);\n    if (logger) logger.info(`# of Labels: ${cir.nLabels}`);\n    if (logger) logger.info(`# of Outputs: ${cir.nOutputs}`);\n\n    return cir;\n}\n", "import {F1Field, getCurveFromR} from \"ffjavascript\";\nimport  BigArray from \"@iden3/bigarray\";\nimport * as binFileUtils from \"@iden3/binfileutils\";\n\nexport const R1CS_FILE_HEADER_SECTION = 1;\nexport const R1CS_FILE_CONSTRAINTS_SECTION = 2;\nexport const R1CS_FILE_WIRE2LABELID_SECTION = 3;\nexport const R1CS_FILE_CUSTOM_GATES_LIST_SECTION = 4;\nexport const R1CS_FILE_CUSTOM_GATES_USES_SECTION = 5;\n\nexport async function readR1csHeader(fd,sections,singleThread) {\n    let options;\n    if (typeof singleThread === \"object\") {\n        options = singleThread;\n    } else if (typeof singleThread === \"undefined\") {\n        options= {\n            singleThread: false,\n        };\n    } else {\n        options = {\n            singleThread: singleThread,\n        };\n    }\n\n    const res = {};\n    await binFileUtils.startReadUniqueSection(fd, sections, 1);\n    // Read Header\n    res.n8 = await fd.readULE32();\n    res.prime = await binFileUtils.readBigInt(fd, res.n8);\n\n    if (options.F) {\n        if (options.F.p != res.prime) throw new Error(\"Different Prime\");\n        res.F = options.F;\n    } else if (options.getFieldFromPrime) {\n        res.F = await options.getFieldFromPrime(res.prime, options.singleThread);\n    } else if (options.getCurveFromPrime) {\n        res.curve = await options.getCurveFromPrime(res.prime, options.singleThread);\n        res.F = res.curve.Fr;\n    } else {\n        try {\n            res.curve = await getCurveFromR(res.prime, options.singleThread);\n            res.F = res.curve.Fr;\n        } catch (err) {\n            res.F = new F1Field(res.prime);\n        }\n    }\n\n    res.nVars = await fd.readULE32();\n    res.nOutputs = await fd.readULE32();\n    res.nPubInputs = await fd.readULE32();\n    res.nPrvInputs = await fd.readULE32();\n    res.nLabels = await fd.readULE64();\n    res.nConstraints = await fd.readULE32();\n    res.useCustomGates = typeof sections[R1CS_FILE_CUSTOM_GATES_LIST_SECTION] !== \"undefined\" && sections[R1CS_FILE_CUSTOM_GATES_LIST_SECTION] !== null\n        && typeof sections[R1CS_FILE_CUSTOM_GATES_USES_SECTION] !== \"undefined\" && sections[R1CS_FILE_CUSTOM_GATES_USES_SECTION] !== null;\n\n    await binFileUtils.endReadSection(fd);\n\n    return res;\n}\n\nexport async function readConstraints(fd,sections, r1cs, logger, loggerCtx) {\n    let options;\n    if (typeof logger === \"object\") {\n        options = logger;\n    } else if (typeof logger === \"undefined\") {\n        options= {};\n    } else {\n        options = {\n            logger: logger,\n            loggerCtx: loggerCtx,\n        };\n    }\n\n    const bR1cs = await binFileUtils.readSection(fd, sections, 2);\n    let bR1csPos = 0;\n    let constraints;\n    if (r1cs.nConstraints>1<<20) {\n        constraints = new BigArray();\n    } else {\n        constraints = [];\n    }\n    for (let i=0; i<r1cs.nConstraints; i++) {\n        if ((options.logger)&&(i%100000 == 0)) options.logger.info(`${options.loggerCtx}: Loading constraints: ${i}/${r1cs.nConstraints}`);\n        const c = readConstraint();\n        constraints.push(c);\n    }\n    return constraints;\n\n\n    function readConstraint() {\n        const c = [];\n        c[0] = readLC();\n        c[1] = readLC();\n        c[2] = readLC();\n        return c;\n    }\n\n    function readLC() {\n        const lc= {};\n\n        const buffUL32 = bR1cs.slice(bR1csPos, bR1csPos+4);\n        bR1csPos += 4;\n        const buffUL32V = new DataView(buffUL32.buffer);\n        const nIdx = buffUL32V.getUint32(0, true);\n\n        const buff = bR1cs.slice(bR1csPos, bR1csPos + (4+r1cs.n8)*nIdx );\n        bR1csPos += (4+r1cs.n8)*nIdx;\n        const buffV = new DataView(buff.buffer);\n        for (let i=0; i<nIdx; i++) {\n            const idx = buffV.getUint32(i*(4+r1cs.n8), true);\n            const val = r1cs.F.fromRprLE(buff, i*(4+r1cs.n8)+4);\n            lc[idx] = val;\n        }\n        return lc;\n    }\n}\n\nexport async function readMap(fd, sections, r1cs, logger, loggerCtx) {\n    let options;\n    if (typeof logger === \"object\") {\n        options = logger;\n    } else if (typeof logger === \"undefined\") {\n        options= {};\n    } else {\n        options = {\n            logger: logger,\n            loggerCtx: loggerCtx,\n        };\n    }\n    const bMap = await binFileUtils.readSection(fd, sections, 3);\n    let bMapPos = 0;\n    let map;\n\n    if (r1cs.nVars>1<<20) {\n        map = new BigArray();\n    } else {\n        map = [];\n    }\n    for (let i=0; i<r1cs.nVars; i++) {\n        if ((options.logger)&&(i%10000 == 0)) options.logger.info(`${options.loggerCtx}: Loading map: ${i}/${r1cs.nVars}`);\n        const idx = readULE64();\n        map.push(idx);\n    }\n\n    return map;\n\n    function readULE64() {\n        const buffULE64 = bMap.slice(bMapPos, bMapPos+8);\n        bMapPos += 8;\n        const buffULE64V = new DataView(buffULE64.buffer);\n        const LSB = buffULE64V.getUint32(0, true);\n        const MSB = buffULE64V.getUint32(4, true);\n\n        return MSB * 0x100000000 + LSB;\n    }\n\n}\n\nexport async function readR1csFd(fd, sections, options) {\n    /**\n     * Options properties:\n     *  loadConstraints: <bool> true by default\n     *  loadMap:         <bool> false by default\n     *  loadCustomGates: <bool> true by default\n     */\n\n    if(typeof options !== \"object\") {\n        throw new Error(\"readR1csFd: options must be an object\");\n    }\n\n    options.loadConstraints = options.loadConstraints || true;\n    options.loadMap = options.loadMap || false;\n    options.loadCustomGates = options.loadCustomGates || true;\n\n    const res = await readR1csHeader(fd, sections, options);\n\n    if (options.loadConstraints) {\n        res.constraints = await readConstraints(fd, sections, res, options);\n    }\n\n    // Read Labels\n\n    if (options.loadMap) {\n        res.map = await readMap(fd, sections, res, options);\n    }\n\n    if (options.loadCustomGates) {\n        if (res.useCustomGates) {\n            res.customGates = await readCustomGatesListSection(fd, sections, res.F.n8);\n            res.customGatesUses = await readCustomGatesUsesSection(fd, sections, options);\n        } else {\n            res.customGates = [];\n            res.customGatesUses = [];\n        }\n    }\n    return res;\n}\n\nexport async function readR1cs(fileName, loadConstraints, loadMap, singleThread, logger, loggerCtx) {\n    let options;\n    if (typeof loadConstraints === \"object\") {\n        options = loadConstraints;\n    } else if (typeof loadConstraints === \"undefined\") {\n        options= {\n            loadConstraints: true,\n            loadMap: false,\n            loadCustomGates: true\n        };\n    } else {\n        options = {\n            loadConstraints: loadConstraints,\n            loadMap: loadMap,\n            singleThread: singleThread,\n            logger: logger,\n            loggerCtx: loggerCtx\n        };\n    }\n\n    const {fd, sections} = await binFileUtils.readBinFile(fileName, \"r1cs\", 1, 1<<25, 1<<22);\n\n    const res = await readR1csFd(fd, sections, options);\n\n    await fd.close();\n\n    return res;\n}\n\nexport async function readCustomGatesListSection(fd, sections, fieldSize) {\n    await binFileUtils.startReadUniqueSection(fd, sections, R1CS_FILE_CUSTOM_GATES_LIST_SECTION);\n\n    let num = await fd.readULE32();\n\n    let customGates = [];\n    for (let i = 0; i < num; i++) {\n        let customGate = {};\n        customGate.templateName = await fd.readString();\n        let numParameters = await fd.readULE32();\n\n        customGate.parameters = Array(numParameters);\n        let buff = await fd.read(fieldSize * numParameters);\n\n        for (let j = 0; j < numParameters; j++) {\n            customGate.parameters[j] = buff.slice(j * fieldSize, j * fieldSize + fieldSize);\n        }\n        customGates.push(customGate);\n    }\n    await binFileUtils.endReadSection(fd);\n\n    return customGates;\n}\n\nexport async function readCustomGatesUsesSection(fd,sections, options) {\n    const bR1cs = await binFileUtils.readSection(fd, sections, R1CS_FILE_CUSTOM_GATES_USES_SECTION);\n    const bR1cs32 = new Uint32Array(bR1cs.buffer, bR1cs.byteOffset, bR1cs.byteLength/4);\n    const nCustomGateUses = bR1cs32[0];\n    let bR1csPos = 1;\n    let customGatesUses;\n    if (nCustomGateUses>1<<20) {\n        customGatesUses = new BigArray();\n    } else {\n        customGatesUses = [];\n    }\n    for (let i=0; i<nCustomGateUses; i++) {\n        if ((options.logger)&&(i%100000 == 0)) options.logger.info(`${options.loggerCtx}: Loading custom gate uses: ${i}/${nCustomGateUses}`);\n        let c = {};\n        c.id = bR1cs32[bR1csPos++];\n        let numSignals = bR1cs32[bR1csPos++];\n        c.signals = [];\n        for (let j = 0; j < numSignals; j++) {\n            const LSB = bR1cs32[bR1csPos++];\n            const MSB = bR1cs32[bR1csPos++];\n            c.signals.push(MSB * 0x100000000 + LSB);\n        }\n        customGatesUses.push(c);\n    }\n    return customGatesUses;\n}\n\nexport async function writeR1csHeader(fd, cir) {\n    await binFileUtils.startWriteSection(fd, 1);\n    await fd.writeULE32(cir.n8); // Temporally set to 0 length\n    await binFileUtils.writeBigInt(fd, cir.prime, cir.n8);\n\n    await fd.writeULE32(cir.nVars);\n    await fd.writeULE32(cir.nOutputs);\n    await fd.writeULE32(cir.nPubInputs);\n    await fd.writeULE32(cir.nPrvInputs);\n    await fd.writeULE64(cir.nLabels);\n    await fd.writeULE32(cir.constraints.length);\n\n    await binFileUtils.endWriteSection(fd);\n}\n\nexport async function writeR1csConstraints(fd, cir, logger, loggerCtx) {\n    await binFileUtils.startWriteSection(fd, 2);\n\n    for (let i=0; i<cir.constraints.length; i++) {\n        if ((logger)&&(i%10000 == 0)) logger.info(`${loggerCtx}: writing constraint: ${i}/${cir.constraints.length}`);\n        await writeConstraint(cir.constraints[i]);\n    }\n\n    await binFileUtils.endWriteSection(fd);\n\n\n    function writeConstraint(c) {\n        const n8 = cir.n8;\n        const F = cir.F || cir.curve.Fr;\n        const idxA = Object.keys(c[0]);\n        const idxB = Object.keys(c[1]);\n        const idxC = Object.keys(c[2]);\n        const buff = new Uint8Array((idxA.length+idxB.length+idxC.length)*(n8+4) + 12);\n        const buffV = new DataView(buff.buffer);\n        let o=0;\n\n        buffV.setUint32(o, idxA.length, true); o+=4;\n        for (let i=0; i<idxA.length; i++) {\n            const coef = idxA[i];\n            buffV.setUint32(o, coef, true); o+=4;\n            F.toRprLE(buff, o, c[0][coef]); o+=n8;\n        }\n\n        buffV.setUint32(o, idxB.length, true); o+=4;\n        for (let i=0; i<idxB.length; i++) {\n            const coef = idxB[i];\n            buffV.setUint32(o, coef, true); o+=4;\n            F.toRprLE(buff, o, c[1][coef]); o+=n8;\n        }\n\n        buffV.setUint32(o, idxC.length, true); o+=4;\n        for (let i=0; i<idxC.length; i++) {\n            const coef = idxC[i];\n            buffV.setUint32(o, coef, true); o+=4;\n            F.toRprLE(buff, o, c[2][coef]); o+=n8;\n        }\n\n        return fd.write(buff);\n    }\n\n}\n\n\nexport async function writeR1csMap(fd, cir, logger, loggerCtx) {\n    await binFileUtils.startWriteSection(fd, 3);\n\n    if (cir.map.length != cir.nVars) throw new Error(\"Invalid map size\");\n    for (let i=0; i<cir.nVars; i++) {\n        if ((logger)&&(i%10000 == 0)) logger.info(`${loggerCtx}: writing map: ${i}/${cir.nVars}`);\n        await fd.writeULE64(cir.map[i]);\n    }\n\n    await binFileUtils.endWriteSection(fd);\n}\n\n\n\nexport async function writeR1cs(fileName, cir, logger, loggerCtx) {\n\n    const fd = await binFileUtils.createBinFile(fileName, \"r1cs\", 1, 3, 1<<25, 1<<22);\n\n    await writeR1csHeader(fd, cir);\n\n    await writeR1csConstraints(fd, cir, logger, loggerCtx);\n\n    await writeR1csMap(fd, cir, logger, loggerCtx);\n\n    await fd.close();\n}\n", "\nimport * as _Scalar  from \"./src/scalar.js\";\nexport const Scalar=_Scalar;\n\nexport {default as PolField} from \"./src/polfield.js\";\nexport {default as F1Field} from \"./src/f1field.js\";\nexport {default as F2Field} from \"./src/f2field.js\";\nexport {default as F3Field} from \"./src/f3field.js\";\n\nexport {default as ZqField} from \"./src/f1field.js\";\n\nexport {default as EC} from \"./src/ec.js\";\n\nexport {default as buildBn128} from \"./src/bn128.js\";\nexport {default as buildBls12381} from \"./src/bls12381.js\";\n\nimport * as _utils from \"./src/utils.js\";\nexport const utils = _utils;\nexport {default as ChaCha} from \"./src/chacha.js\";\n\nexport {default as BigBuffer} from \"./src/bigbuffer.js\";\n\nexport {getCurveFromR, getCurveFromQ, getCurveFromName} from \"./src/curves.js\";\n\n", "\n/* global BigInt */\nconst hexLen = [ 0, 1, 2, 2, 3, 3, 3, 3, 4 ,4 ,4 ,4 ,4 ,4 ,4 ,4];\n\nexport function fromString(s, radix) {\n    if ((!radix)||(radix==10)) {\n        return BigInt(s);\n    } else if (radix==16) {\n        if (s.slice(0,2) == \"0x\") {\n            return BigInt(s);\n        } else {\n            return BigInt(\"0x\"+s);\n        }\n    }\n}\n\nexport const e = fromString;\n\nexport function fromArray(a, radix) {\n    let acc =BigInt(0);\n    radix = BigInt(radix);\n    for (let i=0; i<a.length; i++) {\n        acc = acc*radix + BigInt(a[i]);\n    }\n    return acc;\n}\n\nexport function bitLength(a) {\n    const aS =a.toString(16);\n    return (aS.length-1)*4 +hexLen[parseInt(aS[0], 16)];\n}\n\nexport function isNegative(a) {\n    return BigInt(a) < BigInt(0);\n}\n\nexport function isZero(a) {\n    return !a;\n}\n\nexport function shiftLeft(a, n) {\n    return BigInt(a) << BigInt(n);\n}\n\nexport function shiftRight(a, n) {\n    return BigInt(a) >> BigInt(n);\n}\n\nexport const shl = shiftLeft;\nexport const shr = shiftRight;\n\nexport function isOdd(a) {\n    return (BigInt(a) & BigInt(1)) == BigInt(1);\n}\n\n\nexport function naf(n) {\n    let E = BigInt(n);\n    const res = [];\n    while (E) {\n        if (E & BigInt(1)) {\n            const z = 2 - Number(E % BigInt(4));\n            res.push( z );\n            E = E - BigInt(z);\n        } else {\n            res.push( 0 );\n        }\n        E = E >> BigInt(1);\n    }\n    return res;\n}\n\n\nexport function bits(n) {\n    let E = BigInt(n);\n    const res = [];\n    while (E) {\n        if (E & BigInt(1)) {\n            res.push(1);\n        } else {\n            res.push( 0 );\n        }\n        E = E >> BigInt(1);\n    }\n    return res;\n}\n\nexport function toNumber(s) {\n    if (s>BigInt(Number.MAX_SAFE_INTEGER )) {\n        throw new Error(\"Number too big\");\n    }\n    return Number(s);\n}\n\nexport function toArray(s, radix) {\n    const res = [];\n    let rem = BigInt(s);\n    radix = BigInt(radix);\n    while (rem) {\n        res.unshift( Number(rem % radix));\n        rem = rem / radix;\n    }\n    return res;\n}\n\n\nexport function add(a, b) {\n    return BigInt(a) + BigInt(b);\n}\n\nexport function sub(a, b) {\n    return BigInt(a) - BigInt(b);\n}\n\nexport function neg(a) {\n    return -BigInt(a);\n}\n\nexport function mul(a, b) {\n    return BigInt(a) * BigInt(b);\n}\n\nexport function square(a) {\n    return BigInt(a) * BigInt(a);\n}\n\nexport function pow(a, b) {\n    return BigInt(a) ** BigInt(b);\n}\n\nexport function exp(a, b) {\n    return BigInt(a) ** BigInt(b);\n}\n\nexport function abs(a) {\n    return BigInt(a) >= 0 ? BigInt(a) : -BigInt(a);\n}\n\nexport function div(a, b) {\n    return BigInt(a) / BigInt(b);\n}\n\nexport function mod(a, b) {\n    return BigInt(a) % BigInt(b);\n}\n\nexport function eq(a, b) {\n    return BigInt(a) == BigInt(b);\n}\n\nexport function neq(a, b) {\n    return BigInt(a) != BigInt(b);\n}\n\nexport function lt(a, b) {\n    return BigInt(a) < BigInt(b);\n}\n\nexport function gt(a, b) {\n    return BigInt(a) > BigInt(b);\n}\n\nexport function leq(a, b) {\n    return BigInt(a) <= BigInt(b);\n}\n\nexport function geq(a, b) {\n    return BigInt(a) >= BigInt(b);\n}\n\nexport function band(a, b) {\n    return BigInt(a) & BigInt(b);\n}\n\nexport function bor(a, b) {\n    return BigInt(a) | BigInt(b);\n}\n\nexport function bxor(a, b) {\n    return BigInt(a) ^ BigInt(b);\n}\n\nexport function land(a, b) {\n    return BigInt(a) && BigInt(b);\n}\n\nexport function lor(a, b) {\n    return BigInt(a) || BigInt(b);\n}\n\nexport function lnot(a) {\n    return !BigInt(a);\n}\n\n// Returns a buffer with Little Endian Representation\nexport function toRprLE(buff, o, e, n8) {\n    const s = \"0000000\" + e.toString(16);\n    const v = new Uint32Array(buff.buffer, o, n8/4);\n    const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;\n    for (let i=0; i<l; i++) v[i] = parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16);\n    for (let i=l; i<v.length; i++) v[i] = 0;\n    for (let i=v.length*4; i<n8; i++) buff[i] = toNumber(band(shiftRight(e, i*8), 0xFF));\n}\n\n// Returns a buffer with Big Endian Representation\nexport function toRprBE(buff, o, e, n8) {\n    const s = \"0000000\" + e.toString(16);\n    const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n    const l = (((s.length-7)*4 - 1) >> 5)+1;    // Number of 32bit words;\n    for (let i=0; i<l; i++) v.setUint32(n8-i*4 -4, parseInt(s.substring(s.length-8*i-8, s.length-8*i), 16), false);\n    for (let i=0; i<n8/4-l; i++) v[i] = 0;\n}\n\n// Pases a buffer with Little Endian Representation\nexport function fromRprLE(buff, o, n8) {\n    n8 = n8 || buff.byteLength;\n    o = o || 0;\n    const v = new Uint32Array(buff.buffer, o, n8/4);\n    const a = new Array(n8/4);\n    v.forEach( (ch,i) => a[a.length-i-1] = ch.toString(16).padStart(8,\"0\") );\n    return fromString(a.join(\"\"), 16);\n}\n\n// Pases a buffer with Big Endian Representation\nexport function fromRprBE(buff, o, n8) {\n    n8 = n8 || buff.byteLength;\n    o = o || 0;\n    const v = new DataView(buff.buffer, buff.byteOffset + o, n8);\n    const a = new Array(n8/4);\n    for (let i=0; i<n8/4; i++) {\n        a[i] = v.getUint32(i*4, false).toString(16).padStart(8, \"0\");\n    }\n    return fromString(a.join(\"\"), 16);\n}\n\nexport function toString(a, radix) {\n    return a.toString(radix);\n}\n\nexport function toLEBuff(a) {\n    const buff = new Uint8Array(Math.floor((bitLength(a) - 1) / 8) +1);\n    toRprLE(buff, 0, a, buff.byteLength);\n    return buff;\n}\n\nexport const zero = e(0);\nexport const one = e(1);\n\n\n\n\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nexport default class PolField {\n    constructor (F) {\n        this.F = F;\n\n        let rem = F.sqrt_t;\n        let s = F.sqrt_s;\n\n        const five = this.F.add(this.F.add(this.F.two, this.F.two), this.F.one);\n\n        this.w = new Array(s+1);\n        this.wi = new Array(s+1);\n        this.w[s] = this.F.pow(five, rem);\n        this.wi[s] = this.F.inv(this.w[s]);\n\n        let n=s-1;\n        while (n>=0) {\n            this.w[n] = this.F.square(this.w[n+1]);\n            this.wi[n] = this.F.square(this.wi[n+1]);\n            n--;\n        }\n\n\n        this.roots = [];\n/*        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n    */\n        this._setRoots(15);\n    }\n\n    _setRoots(n) {\n        if (n > this.F.sqrt_s) n = this.s;\n        for (let i=n; (i>=0) && (!this.roots[i]); i--) {\n            let r = this.F.one;\n            const nroots = 1 << i;\n            const rootsi = new Array(nroots);\n            for (let j=0; j<nroots; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n            this.roots[i] = rootsi;\n        }\n    }\n\n    add(a, b) {\n        const m = Math.max(a.length, b.length);\n        const res = new Array(m);\n        for (let i=0; i<m; i++) {\n            res[i] = this.F.add(a[i] || this.F.zero, b[i] || this.F.zero);\n        }\n        return this.reduce(res);\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        const m = Math.max(a.length, b.length);\n        const res = new Array(m);\n        for (let i=0; i<m; i++) {\n            res[i] = this.F.sub(a[i] || this.F.zero, b[i] || this.F.zero);\n        }\n        return this.reduce(res);\n    }\n\n    mulScalar(p, b) {\n        if (this.F.eq(b, this.F.zero)) return [];\n        if (this.F.eq(b, this.F.one)) return p;\n        const res = new Array(p.length);\n        for (let i=0; i<p.length; i++) {\n            res[i] = this.F.mul(p[i], b);\n        }\n        return res;\n    }\n\n\n\n    mul(a, b) {\n        if (a.length == 0) return [];\n        if (b.length == 0) return [];\n        if (a.length == 1) return this.mulScalar(b, a[0]);\n        if (b.length == 1) return this.mulScalar(a, b[0]);\n\n        if (b.length > a.length) {\n            [b, a] = [a, b];\n        }\n\n        if ((b.length <= 2) || (b.length < log2(a.length))) {\n            return this.mulNormal(a,b);\n        } else {\n            return this.mulFFT(a,b);\n        }\n    }\n\n    mulNormal(a, b) {\n        let res = [];\n        for (let i=0; i<b.length; i++) {\n            res = this.add(res, this.scaleX(this.mulScalar(a, b[i]), i) );\n        }\n        return res;\n    }\n\n    mulFFT(a,b) {\n        const longestN = Math.max(a.length, b.length);\n        const bitsResult = log2(longestN-1)+2;\n        this._setRoots(bitsResult);\n\n        const m = 1 << bitsResult;\n        const ea = this.extend(a,m);\n        const eb = this.extend(b,m);\n\n        const ta = __fft(this, ea, bitsResult, 0, 1, false);\n        const tb = __fft(this, eb, bitsResult, 0, 1, false);\n\n        const tres = new Array(m);\n\n        for (let i=0; i<m; i++) {\n            tres[i] = this.F.mul(ta[i], tb[i]);\n        }\n\n        const res = __fft(this, tres, bitsResult, 0, 1, true);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return this.reduce(resn);\n    }\n\n\n\n    square(a) {\n        return this.mul(a,a);\n    }\n\n    scaleX(p, n) {\n        if (n==0) {\n            return p;\n        } else if (n>0) {\n            const z = new Array(n).fill(this.F.zero);\n            return z.concat(p);\n        } else {\n            if (-n >= p.length) return [];\n            return p.slice(-n);\n        }\n    }\n\n    eval2(p, x) {\n        let v = this.F.zero;\n        let ix = this.F.one;\n        for (let i=0; i<p.length; i++) {\n            v = this.F.add(v, this.F.mul(p[i], ix));\n            ix = this.F.mul(ix, x);\n        }\n        return v;\n    }\n\n    eval(p,x) {\n        const F = this.F;\n        if (p.length == 0) return F.zero;\n        const m = this._next2Power(p.length);\n        const ep = this.extend(p, m);\n\n        return _eval(ep, x, 0, 1, m);\n\n        function _eval(p, x, offset, step, n) {\n            if (n==1) return p[offset];\n            const newX = F.square(x);\n            const res= F.add(\n                _eval(p, newX, offset, step << 1, n >> 1),\n                F.mul(\n                    x,\n                    _eval(p, newX, offset+step , step << 1, n >> 1)));\n            return res;\n        }\n    }\n\n    lagrange(points) {\n        let roots = [this.F.one];\n        for (let i=0; i<points.length; i++) {\n            roots = this.mul(roots, [this.F.neg(points[i][0]), this.F.one]);\n        }\n\n        let sum = [];\n        for (let i=0; i<points.length; i++) {\n            let mpol = this.ruffini(roots, points[i][0]);\n            const factor =\n                this.F.mul(\n                    this.F.inv(this.eval(mpol, points[i][0])),\n                    points[i][1]);\n            mpol = this.mulScalar(mpol, factor);\n            sum = this.add(sum, mpol);\n        }\n        return sum;\n    }\n\n\n    fft(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        const res = __fft(this, ep, bits, 0, 1);\n        return res;\n    }\n\n    fft2(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        __bitReverse(ep, bits);\n        const res = __fft2(this, ep, bits);\n        return res;\n    }\n\n\n    ifft(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        const res =  __fft(this, ep, bits, 0, 1);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n\n    }\n\n\n    ifft2(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        const ep = this.extend(p, m);\n        __bitReverse(ep, bits);\n        const res =  __fft2(this, ep, bits, 0, 1);\n\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.F.mul(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n\n    }\n\n    _fft(pall, bits, offset, step) {\n\n        const n = 1 << bits;\n        if (n==1) {\n            return [ pall[offset] ];\n        }\n\n        const ndiv2 = n >> 1;\n        const p1 = this._fft(pall, bits-1, offset, step*2);\n        const p2 = this._fft(pall, bits-1, offset+step, step*2);\n\n        const out = new Array(n);\n\n        let m= this.F.one;\n        for (let i=0; i<ndiv2; i++) {\n            out[i] = this.F.add(p1[i], this.F.mul(m, p2[i]));\n            out[i+ndiv2] = this.F.sub(p1[i], this.F.mul(m, p2[i]));\n            m = this.F.mul(m, this.w[bits]);\n        }\n\n        return out;\n    }\n\n    extend(p, e) {\n        if (e == p.length) return p;\n        const z = new Array(e-p.length).fill(this.F.zero);\n\n        return p.concat(z);\n    }\n\n    reduce(p) {\n        if (p.length == 0) return p;\n        if (! this.F.eq(p[p.length-1], this.F.zero) ) return p;\n        let i=p.length-1;\n        while( i>0 && this.F.eq(p[i], this.F.zero) ) i--;\n        return p.slice(0, i+1);\n    }\n\n    eq(a, b) {\n        const pa = this.reduce(a);\n        const pb = this.reduce(b);\n\n        if (pa.length != pb.length) return false;\n        for (let i=0; i<pb.length; i++) {\n            if (!this.F.eq(pa[i], pb[i])) return false;\n        }\n\n        return true;\n    }\n\n    ruffini(p, r) {\n        const res = new Array(p.length-1);\n        res[res.length-1] = p[p.length-1];\n        for (let i = res.length-2; i>=0; i--) {\n            res[i] = this.F.add(this.F.mul(res[i+1], r), p[i+1]);\n        }\n        return res;\n    }\n\n    _next2Power(v) {\n        v--;\n        v |= v >> 1;\n        v |= v >> 2;\n        v |= v >> 4;\n        v |= v >> 8;\n        v |= v >> 16;\n        v++;\n        return v;\n    }\n\n    toString(p) {\n        const ap = this.normalize(p);\n        let S = \"\";\n        for (let i=ap.length-1; i>=0; i--) {\n            if (!this.F.eq(p[i], this.F.zero)) {\n                if (S!=\"\") S += \" + \";\n                S = S + p[i].toString(10);\n                if (i>0) {\n                    S = S + \"x\";\n                    if (i>1) {\n                        S = S + \"^\" +i;\n                    }\n                }\n            }\n        }\n        return S;\n    }\n\n    normalize(p) {\n        const res  = new Array(p.length);\n        for (let i=0; i<p.length; i++) {\n            res[i] = this.F.normalize(p[i]);\n        }\n        return res;\n    }\n\n\n    _reciprocal(p, bits) {\n        const k = 1 << bits;\n        if (k==1) {\n            return [ this.F.inv(p[0]) ];\n        }\n        const np = this.scaleX(p, -k/2);\n        const q = this._reciprocal(np, bits-1);\n        const a = this.scaleX(this.double(q), 3*k/2-2);\n        const b = this.mul( this.square(q), p);\n\n        return this.scaleX(this.sub(a,b),   -(k-2));\n    }\n\n    // divides x^m / v\n    _div2(m, v) {\n        const kbits = log2(v.length-1)+1;\n        const k = 1 << kbits;\n\n        const scaleV = k - v.length;\n\n        // rec = x^(k - 2) / v* x^scaleV =>\n        // rec = x^(k-2-scaleV)/ v\n        //\n        // res = x^m/v = x^(m + (2*k-2 - scaleV) - (2*k-2 - scaleV)) /v =>\n        // res = rec * x^(m - (2*k-2 - scaleV)) =>\n        // res = rec * x^(m - 2*k + 2 + scaleV)\n\n        const rec = this._reciprocal(this.scaleX(v, scaleV), kbits);\n        const res = this.scaleX(rec, m - 2*k + 2 + scaleV);\n\n        return res;\n    }\n\n    div(_u, _v) {\n        if (_u.length < _v.length) return [];\n        const kbits = log2(_v.length-1)+1;\n        const k = 1 << kbits;\n\n        const u = this.scaleX(_u, k-_v.length);\n        const v = this.scaleX(_v, k-_v.length);\n\n        const n = v.length-1;\n        let m = u.length-1;\n\n        const s = this._reciprocal(v, kbits);\n        let t;\n        if (m>2*n) {\n            t = this.sub(this.scaleX([this.F.one], 2*n), this.mul(s, v));\n        }\n\n        let q = [];\n        let rem = u;\n        let us, ut;\n        let finish = false;\n\n        while (!finish) {\n            us = this.mul(rem, s);\n            q = this.add(q, this.scaleX(us, -2*n));\n\n            if ( m > 2*n ) {\n                ut = this.mul(rem, t);\n                rem = this.scaleX(ut, -2*n);\n                m = rem.length-1;\n            } else {\n                finish = true;\n            }\n        }\n\n        return q;\n    }\n\n\n    // returns the ith nth-root of one\n    oneRoot(n, i) {\n        let nbits = log2(n-1)+1;\n        let res = this.F.one;\n        let r = i;\n\n        if(i>=n) {\n            throw new Error(\"Given 'i' should be lower than 'n'\");\n        }\n        else if (1<<nbits !== n) {\n            throw new Error(`Internal errlr: ${n} should equal ${1<<nbits}`);\n        }\n\n        while (r>0) {\n            if (r & 1 == 1) {\n                res = this.F.mul(res, this.w[nbits]);\n            }\n            r = r >> 1;\n            nbits --;\n        }\n        return res;\n    }\n\n    computeVanishingPolinomial(bits, t) {\n        const m = 1 << bits;\n        return this.F.sub(this.F.pow(t, m), this.F.one);\n    }\n\n    evaluateLagrangePolynomials(bits, t) {\n        const m= 1 << bits;\n        const tm = this.F.pow(t, m);\n        const u= new Array(m).fill(this.F.zero);\n        this._setRoots(bits);\n        const omega = this.w[bits];\n\n        if (this.F.eq(tm, this.F.one)) {\n            for (let i = 0; i < m; i++) {\n                if (this.F.eq(this.roots[bits][0],t)) { // i.e., t equals omega^i\n                    u[i] = this.F.one;\n                    return u;\n                }\n            }\n        }\n\n        const z = this.F.sub(tm, this.F.one);\n        //        let l = this.F.mul(z,  this.F.pow(this.F.twoinv, m));\n        let l = this.F.mul(z,  this.F.inv(this.F.e(m)));\n        for (let i = 0; i < m; i++) {\n            u[i] = this.F.mul(l, this.F.inv(this.F.sub(t,this.roots[bits][i])));\n            l = this.F.mul(l, omega);\n        }\n\n        return u;\n    }\n\n    log2(V) {\n        return log2(V);\n    }\n}\n\nfunction log2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction __fft(PF, pall, bits, offset, step) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[offset] ];\n    } else if (n==2) {\n        return [\n            PF.F.add(pall[offset], pall[offset + step]),\n            PF.F.sub(pall[offset], pall[offset + step])];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft(PF, pall, bits-1, offset, step*2);\n    const p2 = __fft(PF, pall, bits-1, offset+step, step*2);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.F.add(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n        out[i+ndiv2] = PF.F.sub(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n    }\n\n    return out;\n}\n\n\nfunction __fft2(PF, pall, bits) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[0] ];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft2(PF, pall.slice(0, ndiv2), bits-1);\n    const p2 = __fft2(PF, pall.slice(ndiv2), bits-1);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.F.add(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n        out[i+ndiv2] = PF.F.sub(p1[i], PF.F.mul(PF.roots[bits][i], p2[i]));\n    }\n\n    return out;\n}\n\nconst _revTable = [];\nfor (let i=0; i<256; i++) {\n    _revTable[i] = _revSlow(i, 8);\n}\n\nfunction _revSlow(idx, bits) {\n    let res =0;\n    let a = idx;\n    for (let i=0; i<bits; i++) {\n        res <<= 1;\n        res = res | (a &1);\n        a >>=1;\n    }\n    return res;\n}\n\nfunction rev(idx, bits) {\n    return (\n        _revTable[idx >>> 24] |\n        (_revTable[(idx >>> 16) & 0xFF] << 8) |\n        (_revTable[(idx >>> 8) & 0xFF] << 16) |\n        (_revTable[idx & 0xFF] << 24)\n    ) >>> (32-bits);\n}\n\nfunction __bitReverse(p, bits) {\n    for (let k=0; k<p.length; k++) {\n        const r = rev(k, bits);\n        if (r>k) {\n            const tmp= p[k];\n            p[k] = p[r];\n            p[r] = tmp;\n        }\n    }\n\n}\n\n\n", "/* global BigInt */\nimport * as Scalar from \"./scalar.js\";\nimport * as futils from \"./futils.js\";\nimport buildSqrt from \"./fsqrt.js\";\nimport {getRandomBytes} from \"./random.js\";\nimport FFFT from \"./fft.js\";\n\nexport default class ZqField {\n    constructor(p) {\n        this.type=\"F1\";\n        this.one = BigInt(1);\n        this.zero = BigInt(0);\n        this.p = BigInt(p);\n        this.m = 1;\n        this.negone = this.p-this.one;\n        this.two = BigInt(2);\n        this.half = this.p >> this.one;\n        this.bitLength = Scalar.bitLength(this.p);\n        this.mask = (this.one << BigInt(this.bitLength)) - this.one;\n\n        this.n64 = Math.floor((this.bitLength - 1) / 64)+1;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n        this.R = this.e(this.one << BigInt(this.n64*64));\n        this.Ri = this.inv(this.R);\n\n        const e = this.negone >> this.one;\n        this.nqr = this.two;\n        let r = this.pow(this.nqr, e);\n        while (!this.eq(r, this.negone)) {\n            this.nqr = this.nqr + this.one;\n            r = this.pow(this.nqr, e);\n        }\n\n\n        this.s = 0;\n        this.t = this.negone;\n\n        while ((this.t & this.one) == this.zero) {\n            this.s = this.s + 1;\n            this.t = this.t >> this.one;\n        }\n\n        this.nqr_to_t = this.pow(this.nqr, this.t);\n\n        buildSqrt(this);\n\n        this.FFT = new FFFT(this, this, this.mul.bind(this));\n\n        this.fft = this.FFT.fft.bind(this.FFT);\n        this.ifft = this.FFT.ifft.bind(this.FFT);\n        this.w = this.FFT.w;\n        this.wi = this.FFT.wi; \n    \n        this.shift = this.square(this.nqr);\n        this.k = this.exp(this.nqr, 2**this.s);\n    }\n\n    e(a,b) {\n        let res;\n        if (!b) {\n            res = BigInt(a);\n        } else if (b==16) {\n            res = BigInt(\"0x\"+a);\n        }\n        if (res < 0) {\n            let nres = -res;\n            if (nres >= this.p) nres = nres % this.p;\n            return this.p - nres;\n        } else {\n            return (res>= this.p) ? res%this.p : res;\n        }\n\n    }\n\n    add(a, b) {\n        const res = a + b;\n        return res >= this.p ? res-this.p : res;\n    }\n\n    sub(a, b) {\n        return (a >= b) ? a-b : this.p-b+a;\n    }\n\n    neg(a) {\n        return a ? this.p-a : a;\n    }\n\n    mul(a, b) {\n        return (a*b)%this.p;\n    }\n\n    mulScalar(base, s) {\n        return (base * this.e(s)) % this.p;\n    }\n\n    square(a) {\n        return (a*a) % this.p;\n    }\n\n    eq(a, b) {\n        return a==b;\n    }\n\n    neq(a, b) {\n        return a!=b;\n    }\n\n    lt(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa < bb;\n    }\n\n    gt(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa > bb;\n    }\n\n    leq(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa <= bb;\n    }\n\n    geq(a, b) {\n        const aa = (a > this.half) ? a - this.p : a;\n        const bb = (b > this.half) ? b - this.p : b;\n        return aa >= bb;\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    idiv(a, b) {\n        if (!b) throw new Error(\"Division by zero\");\n        return a / b;\n    }\n\n    inv(a) {\n        if (!a) throw new Error(\"Division by zero\");\n\n        let t = this.zero;\n        let r = this.p;\n        let newt = this.one;\n        let newr = a % this.p;\n        while (newr) {\n            let q = r/newr;\n            [t, newt] = [newt, t-q*newt];\n            [r, newr] = [newr, r-q*newr];\n        }\n        if (t<this.zero) t += this.p;\n        return t;\n    }\n\n    mod(a, b) {\n        return a % b;\n    }\n\n    pow(b, e) {\n        return futils.exp(this, b, e);\n    }\n\n    exp(b, e) {\n        return futils.exp(this, b, e);\n    }\n\n    band(a, b) {\n        const res =  ((a & b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bor(a, b) {\n        const res =  ((a | b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bxor(a, b) {\n        const res =  ((a ^ b) & this.mask);\n        return res >= this.p ? res-this.p : res;\n    }\n\n    bnot(a) {\n        const res = a ^ this.mask;\n        return res >= this.p ? res-this.p : res;\n    }\n\n    shl(a, b) {\n        if (Number(b) < this.bitLength) {\n            const res = (a << b) & this.mask;\n            return res >= this.p ? res-this.p : res;\n        } else {\n            const nb = this.p - b;\n            if (Number(nb) < this.bitLength) {\n                return a >> nb;\n            } else {\n                return this.zero;\n            }\n        }\n    }\n\n    shr(a, b) {\n        if (Number(b) < this.bitLength) {\n            return a >> b;\n        } else {\n            const nb = this.p - b;\n            if (Number(nb) < this.bitLength) {\n                const res = (a << nb) & this.mask;\n                return res >= this.p ? res-this.p : res;\n            } else {\n                return 0;\n            }\n        }\n    }\n\n    land(a, b) {\n        return (a && b) ? this.one : this.zero;\n    }\n\n    lor(a, b) {\n        return (a || b) ? this.one : this.zero;\n    }\n\n    lnot(a) {\n        return (a) ? this.zero : this.one;\n    }\n\n    sqrt_old(n) {\n\n        if (n == this.zero) return this.zero;\n\n        // Test that have solution\n        const res = this.pow(n, this.negone >> this.one);\n        if ( res != this.one ) return null;\n\n        let m = this.s;\n        let c = this.nqr_to_t;\n        let t = this.pow(n, this.t);\n        let r = this.pow(n, this.add(this.t, this.one) >> this.one );\n\n        while ( t != this.one ) {\n            let sq = this.square(t);\n            let i = 1;\n            while (sq != this.one ) {\n                i++;\n                sq = this.square(sq);\n            }\n\n            // b = c ^ m-i-1\n            let b = c;\n            for (let j=0; j< m-i-1; j ++) b = this.square(b);\n\n            m = i;\n            c = this.square(b);\n            t = this.mul(t, c);\n            r = this.mul(r, b);\n        }\n\n        if (r > (this.p >> this.one)) {\n            r = this.neg(r);\n        }\n\n        return r;\n    }\n\n    normalize(a, b) {\n        a = BigInt(a,b);\n        if (a < 0) {\n            let na = -a;\n            if (na >= this.p) na = na % this.p;\n            return this.p - na;\n        } else {\n            return (a>= this.p) ? a%this.p : a;\n        }\n    }\n\n    random() {\n        const nBytes = (this.bitLength*2 / 8);\n        let res =this.zero;\n        for (let i=0; i<nBytes; i++) {\n            res = (res << BigInt(8)) + BigInt(getRandomBytes(1)[0]);\n        }\n        return res % this.p;\n    }\n\n    toString(a, base) {\n        base = base || 10;\n        let vs;\n        if ((a > this.half)&&(base == 10)) {\n            const v = this.p-a;\n            vs = \"-\"+v.toString(base);\n        } else {\n            vs = a.toString(base);\n        }\n        return vs;\n    }\n\n    isZero(a) {\n        return a == this.zero;\n    }\n\n    fromRng(rng) {\n        let v;\n        do {\n            v=this.zero;\n            for (let i=0; i<this.n64; i++) {\n                v += rng.nextU64() << BigInt(64 *i);\n            }\n            v &= this.mask;\n        } while (v >= this.p);\n        v = (v * this.Ri) % this.p;   // Convert from montgomery\n        return v;\n    }\n\n    fft(a) {\n        return this.FFT.fft(a);\n    }\n\n    ifft(a) {\n        return this.FFT.ifft(a);\n    }\n\n    // Returns a buffer with Little Endian Representation\n    toRprLE(buff, o, e) {\n        Scalar.toRprLE(buff, o, e, this.n64*8);\n    }\n\n    // Returns a buffer with Big Endian Representation\n    toRprBE(buff, o, e) {\n        Scalar.toRprBE(buff, o, e, this.n64*8);\n    }\n\n    // Returns a buffer with Big Endian Montgomery Representation\n    toRprBEM(buff, o, e) {\n        return this.toRprBE(buff, o, this.mul(this.R, e));\n    }\n\n    toRprLEM(buff, o, e) {\n        return this.toRprLE(buff, o, this.mul(this.R, e));\n    }\n\n\n    // Pases a buffer with Little Endian Representation\n    fromRprLE(buff, o) {\n        return Scalar.fromRprLE(buff, o, this.n8);\n    }\n\n    // Pases a buffer with Big Endian Representation\n    fromRprBE(buff, o) {\n        return Scalar.fromRprBE(buff, o, this.n8);\n    }\n\n    fromRprLEM(buff, o) {\n        return this.mul(this.fromRprLE(buff, o), this.Ri);\n    }\n\n    fromRprBEM(buff, o) {\n        return this.mul(this.fromRprBE(buff, o), this.Ri);\n    }\n\n    toObject(a) {\n        return a;\n    }\n}", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as Scalar from \"./scalar.js\";\n\n\nexport function mulScalar(F, base, e) {\n    let res;\n\n    if (Scalar.isZero(e)) return F.zero;\n\n    const n = Scalar.naf(e);\n\n    if (n[n.length-1] == 1) {\n        res = base;\n    } else if (n[n.length-1] == -1) {\n        res = F.neg(base);\n    } else {\n        throw new Error(\"invlaud NAF\");\n    }\n\n    for (let i=n.length-2; i>=0; i--) {\n\n        res = F.double(res);\n\n        if (n[i] == 1) {\n            res = F.add(res, base);\n        } else if (n[i] == -1) {\n            res = F.sub(res, base);\n        }\n    }\n\n    return res;\n}\n\n\n/*\nexports.mulScalar = (F, base, e) =>{\n    let res = F.zero;\n    let rem = bigInt(e);\n    let exp = base;\n\n    while (! rem.eq(bigInt.zero)) {\n        if (rem.and(bigInt.one).eq(bigInt.one)) {\n            res = F.add(res, exp);\n        }\n        exp = F.double(exp);\n        rem = rem.shiftRight(1);\n    }\n\n    return res;\n};\n*/\n\n\nexport function exp(F, base, e) {\n\n    if (Scalar.isZero(e)) return F.one;\n\n    const n = Scalar.bits(e);\n\n    if (n.length==0) return F.one;\n\n    let res = base;\n\n    for (let i=n.length-2; i>=0; i--) {\n\n        res = F.square(res);\n\n        if (n[i]) {\n            res = F.mul(res, base);\n        }\n    }\n\n    return res;\n}\n\n\n", "import * as Scalar from \"./scalar.js\";\n// Check here: https://eprint.iacr.org/2012/685.pdf\n\nexport default function buildSqrt (F) {\n    if ((F.m % 2) == 1) {\n        if (Scalar.eq(Scalar.mod(F.p, 4), 1 )) {\n            if (Scalar.eq(Scalar.mod(F.p, 8), 1 )) {\n                if (Scalar.eq(Scalar.mod(F.p, 16), 1 )) {\n                    // alg7_muller(F);\n                    alg5_tonelliShanks(F);\n                } else if (Scalar.eq(Scalar.mod(F.p, 16), 9 )) {\n                    alg4_kong(F);\n                } else {\n                    throw new Error(\"Field withot sqrt\");\n                }\n            } else if (Scalar.eq(Scalar.mod(F.p, 8), 5 )) {\n                alg3_atkin(F);\n            } else {\n                throw new Error(\"Field withot sqrt\");\n            }\n        } else if (Scalar.eq(Scalar.mod(F.p, 4), 3 )) {\n            alg2_shanks(F);\n        }\n    } else {\n        const pm2mod4 = Scalar.mod(Scalar.pow(F.p, F.m/2), 4);\n        if (pm2mod4 == 1) {\n            alg10_adj(F);\n        } else if (pm2mod4 == 3) {\n            alg9_adj(F);\n        } else {\n            alg8_complex(F);\n        }\n\n    }\n}\n\n\nfunction alg5_tonelliShanks(F) {\n    F.sqrt_q = Scalar.pow(F.p, F.m);\n\n    F.sqrt_s = 0;\n    F.sqrt_t = Scalar.sub(F.sqrt_q, 1);\n\n    while (!Scalar.isOdd(F.sqrt_t)) {\n        F.sqrt_s = F.sqrt_s + 1;\n        F.sqrt_t = Scalar.div(F.sqrt_t, 2);\n    }\n\n    let c0 = F.one;\n\n    while (F.eq(c0, F.one)) {\n        const c = F.random();\n        F.sqrt_z = F.pow(c, F.sqrt_t);\n        c0 = F.pow(F.sqrt_z, 2 ** (F.sqrt_s-1) );\n    }\n\n    F.sqrt_tm1d2 = Scalar.div(Scalar.sub(F.sqrt_t, 1),2);\n\n    F.sqrt = function(a) {\n        const F=this;\n        if (F.isZero(a)) return F.zero;\n        let w = F.pow(a, F.sqrt_tm1d2);\n        const a0 = F.pow( F.mul(F.square(w), a), 2 ** (F.sqrt_s-1) );\n        if (F.eq(a0, F.negone)) return null;\n\n        let v = F.sqrt_s;\n        let x = F.mul(a, w);\n        let b = F.mul(x, w);\n        let z = F.sqrt_z;\n        while (!F.eq(b, F.one)) {\n            let b2k = F.square(b);\n            let k=1;\n            while (!F.eq(b2k, F.one)) {\n                b2k = F.square(b2k);\n                k++;\n            }\n\n            w = z;\n            for (let i=0; i<v-k-1; i++) {\n                w = F.square(w);\n            }\n            z = F.square(w);\n            b = F.mul(b, z);\n            x = F.mul(x, w);\n            v = k;\n        }\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\nfunction alg4_kong(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 4 not implemented\");\n    };\n}\n\nfunction alg3_atkin(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 3 not implemented\");\n    };\n}\n\nfunction alg2_shanks(F) {\n\n    F.sqrt_q = Scalar.pow(F.p, F.m);\n    F.sqrt_e1 = Scalar.div( Scalar.sub(F.sqrt_q, 3) , 4);\n\n    F.sqrt = function(a) {\n        if (this.isZero(a)) return this.zero;\n\n        // Test that have solution\n        const a1 = this.pow(a, this.sqrt_e1);\n\n        const a0 = this.mul(this.square(a1), a);\n\n        if ( this.eq(a0, this.negone) ) return null;\n\n        const x = this.mul(a1, a);\n\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\nfunction alg10_adj(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 10 not implemented\");\n    };\n}\n\nfunction alg9_adj(F) {\n    F.sqrt_q = Scalar.pow(F.p, F.m/2);\n    F.sqrt_e34 = Scalar.div( Scalar.sub(F.sqrt_q, 3) , 4);\n    F.sqrt_e12 = Scalar.div( Scalar.sub(F.sqrt_q, 1) , 2);\n\n    F.frobenius = function(n, x) {\n        if ((n%2) == 1) {\n            return F.conjugate(x);\n        } else {\n            return x;\n        }\n    };\n\n    F.sqrt = function(a) {\n        const F = this;\n        const a1 = F.pow(a, F.sqrt_e34);\n        const alfa = F.mul(F.square(a1), a);\n        const a0 = F.mul(F.frobenius(1, alfa), alfa);\n        if (F.eq(a0, F.negone)) return null;\n        const x0 = F.mul(a1, a);\n        let x;\n        if (F.eq(alfa, F.negone)) {\n            x = F.mul(x0, [F.F.zero, F.F.one]);\n        } else {\n            const b = F.pow(F.add(F.one, alfa), F.sqrt_e12);\n            x = F.mul(b, x0);\n        }\n        return F.geq(x, F.zero) ? x : F.neg(x);\n    };\n}\n\n\nfunction alg8_complex(F) {\n    F.sqrt = function() {\n        throw new Error(\"Sqrt alg 8 not implemented\");\n    };\n}\n", "import ChaCha from \"./chacha.js\";\nimport crypto from \"crypto\";\n\nexport function getRandomBytes(n) {\n    let array = new Uint8Array(n);\n    if (process.browser) { // Browser\n        if (typeof globalThis.crypto !== \"undefined\") { // Supported\n            globalThis.crypto.getRandomValues(array);\n        } else { // fallback\n            for (let i=0; i<n; i++) {\n                array[i] = (Math.random()*4294967296)>>>0;\n            }\n        }\n    }\n    else { // NodeJS\n        crypto.randomFillSync(array);\n    }\n    return array;\n}\n\nexport function getRandomSeed() {\n    const arr = getRandomBytes(32);\n    const arrV = new Uint32Array(arr.buffer);\n    const seed = [];\n    for (let i=0; i<8; i++) {\n        seed.push(arrV[i]);\n    }\n    return seed;\n}\n\nlet threadRng = null;\n\nexport function getThreadRng() {\n    if (threadRng) return threadRng;\n    threadRng = new ChaCha(getRandomSeed());\n    return threadRng;\n}\n", "\n\nimport * as Scalar from \"./scalar.js\";\n\n\nfunction quarterRound(st, a, b, c, d) {\n\n    st[a] = (st[a] + st[b]) >>> 0;\n    st[d] = (st[d] ^ st[a]) >>> 0;\n    st[d] = ((st[d] << 16) | ((st[d]>>>16) & 0xFFFF)) >>> 0;\n\n    st[c] = (st[c] + st[d]) >>> 0;\n    st[b] = (st[b] ^ st[c]) >>> 0;\n    st[b] = ((st[b] << 12) | ((st[b]>>>20) & 0xFFF)) >>> 0;\n\n    st[a] = (st[a] + st[b]) >>> 0;\n    st[d] = (st[d] ^ st[a]) >>> 0;\n    st[d] = ((st[d] << 8) | ((st[d]>>>24) & 0xFF)) >>> 0;\n\n    st[c] = (st[c] + st[d]) >>> 0;\n    st[b] = (st[b] ^ st[c]) >>> 0;\n    st[b] = ((st[b] << 7) | ((st[b]>>>25) & 0x7F)) >>> 0;\n}\n\nfunction doubleRound(st) {\n    quarterRound(st, 0, 4, 8,12);\n    quarterRound(st, 1, 5, 9,13);\n    quarterRound(st, 2, 6,10,14);\n    quarterRound(st, 3, 7,11,15);\n\n    quarterRound(st, 0, 5,10,15);\n    quarterRound(st, 1, 6,11,12);\n    quarterRound(st, 2, 7, 8,13);\n    quarterRound(st, 3, 4, 9,14);\n}\n\nexport default class ChaCha {\n\n    constructor(seed) {\n        seed = seed || [0,0,0,0,0,0,0,0];\n        this.state = [\n            0x61707865,\n            0x3320646E,\n            0x79622D32,\n            0x6B206574,\n            seed[0],\n            seed[1],\n            seed[2],\n            seed[3],\n            seed[4],\n            seed[5],\n            seed[6],\n            seed[7],\n            0,\n            0,\n            0,\n            0\n        ];\n        this.idx = 16;\n        this.buff = new Array(16);\n    }\n\n    nextU32() {\n        if (this.idx == 16) this.update();\n        return this.buff[this.idx++];\n    }\n\n    nextU64() {\n        return Scalar.add(Scalar.mul(this.nextU32(), 0x100000000), this.nextU32());\n    }\n\n    nextBool() {\n        return (this.nextU32() & 1) == 1;\n    }\n\n    update() {\n        // Copy the state\n        for (let i=0; i<16; i++) this.buff[i] = this.state[i];\n\n        // Apply the rounds\n        for (let i=0; i<10; i++) doubleRound(this.buff);\n\n        // Add to the initial\n        for (let i=0; i<16; i++) this.buff[i] = (this.buff[i] + this.state[i]) >>> 0;\n\n        this.idx = 0;\n\n        this.state[12] = (this.state[12] + 1) >>> 0;\n        if (this.state[12] != 0) return;\n        this.state[13] = (this.state[13] + 1) >>> 0;\n        if (this.state[13] != 0) return;\n        this.state[14] = (this.state[14] + 1) >>> 0;\n        if (this.state[14] != 0) return;\n        this.state[15] = (this.state[15] + 1) >>> 0;\n    }\n}\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/*\n    This library does operations on polynomials with coefficients in a field F.\n\n    A polynomial P(x) = p0 + p1 * x + p2 * x^2 + ... + pn * x^n  is represented\n    by the array [ p0, p1, p2, ... , pn ].\n */\n\nexport default class FFT {\n    constructor (G, F, opMulGF) {\n        this.F = F;\n        this.G = G;\n        this.opMulGF = opMulGF;\n\n        let rem = F.sqrt_t || F.t;\n        let s = F.sqrt_s || F.s;\n\n        let nqr = F.one;\n        while (F.eq(F.pow(nqr, F.half), F.one)) nqr = F.add(nqr, F.one);\n\n        this.w = new Array(s+1);\n        this.wi = new Array(s+1);\n        this.w[s] = this.F.pow(nqr, rem);\n        this.wi[s] = this.F.inv(this.w[s]);\n\n        let n=s-1;\n        while (n>=0) {\n            this.w[n] = this.F.square(this.w[n+1]);\n            this.wi[n] = this.F.square(this.wi[n+1]);\n            n--;\n        }\n\n\n        this.roots = [];\n        /*\n        for (let i=0; i<16; i++) {\n            let r = this.F.one;\n            n = 1 << i;\n            const rootsi = new Array(n);\n            for (let j=0; j<n; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots.push(rootsi);\n        }\n        */\n        this._setRoots(Math.min(s, 15));\n    }\n\n    _setRoots(n) {\n        for (let i=n; (i>=0) && (!this.roots[i]); i--) {\n            let r = this.F.one;\n            const nroots = 1 << i;\n            const rootsi = new Array(nroots);\n            for (let j=0; j<nroots; j++) {\n                rootsi[j] = r;\n                r = this.F.mul(r, this.w[i]);\n            }\n\n            this.roots[i] = rootsi;\n        }\n    }\n\n    fft(p) {\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n\n        const m = 1 << bits;\n        if (p.length != m) {\n            throw new Error(\"Size must be multiple of 2\");\n        }\n        const res = __fft(this, p, bits, 0, 1);\n        return res;\n    }\n\n    ifft(p) {\n\n        if (p.length <= 1) return p;\n        const bits = log2(p.length-1)+1;\n        this._setRoots(bits);\n        const m = 1 << bits;\n        if (p.length != m) {\n            throw new Error(\"Size must be multiple of 2\");\n        }\n        const res =  __fft(this, p, bits, 0, 1);\n        const twoinvm = this.F.inv( this.F.mulScalar(this.F.one, m) );\n        const resn = new Array(m);\n        for (let i=0; i<m; i++) {\n            resn[i] = this.opMulGF(res[(m-i)%m], twoinvm);\n        }\n\n        return resn;\n    }\n\n\n}\n\nfunction log2( V )\n{\n    return( ( ( V & 0xFFFF0000 ) !== 0 ? ( V &= 0xFFFF0000, 16 ) : 0 ) | ( ( V & 0xFF00FF00 ) !== 0 ? ( V &= 0xFF00FF00, 8 ) : 0 ) | ( ( V & 0xF0F0F0F0 ) !== 0 ? ( V &= 0xF0F0F0F0, 4 ) : 0 ) | ( ( V & 0xCCCCCCCC ) !== 0 ? ( V &= 0xCCCCCCCC, 2 ) : 0 ) | ( ( V & 0xAAAAAAAA ) !== 0 ) );\n}\n\n\nfunction __fft(PF, pall, bits, offset, step) {\n\n    const n = 1 << bits;\n    if (n==1) {\n        return [ pall[offset] ];\n    } else if (n==2) {\n        return [\n            PF.G.add(pall[offset], pall[offset + step]),\n            PF.G.sub(pall[offset], pall[offset + step])];\n    }\n\n    const ndiv2 = n >> 1;\n    const p1 = __fft(PF, pall, bits-1, offset, step*2);\n    const p2 = __fft(PF, pall, bits-1, offset+step, step*2);\n\n    const out = new Array(n);\n\n    for (let i=0; i<ndiv2; i++) {\n        out[i] = PF.G.add(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n        out[i+ndiv2] = PF.G.sub(p1[i], PF.opMulGF(p2[i], PF.roots[bits][i]));\n    }\n\n    return out;\n}\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fUtils from \"./futils.js\";\nimport buildSqrt from \"./fsqrt.js\";\n\nexport default class F2Field {\n    constructor(F, nonResidue) {\n        this.type=\"F2\";\n        this.F = F;\n        this.zero = [this.F.zero, this.F.zero];\n        this.one = [this.F.one, this.F.zero];\n        this.negone = this.neg(this.one);\n        this.nonResidue = nonResidue;\n        this.m = F.m*2;\n        this.p = F.p;\n        this.n64 = F.n64*2;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n\n        buildSqrt(this);\n    }\n\n    _mulByNonResidue(a) {\n        return this.F.mul(this.nonResidue, a);\n    }\n\n    copy(a) {\n        return [this.F.copy(a[0]), this.F.copy(a[1])];\n    }\n\n    add(a, b) {\n        return [\n            this.F.add(a[0], b[0]),\n            this.F.add(a[1], b[1])\n        ];\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        return [\n            this.F.sub(a[0], b[0]),\n            this.F.sub(a[1], b[1])\n        ];\n    }\n\n    neg(a) {\n        return this.sub(this.zero, a);\n    }\n\n    conjugate(a) {\n        return [\n            a[0],\n            this.F.neg(a[1])\n        ];\n    }\n\n    mul(a, b) {\n        const aA = this.F.mul(a[0] , b[0]);\n        const bB = this.F.mul(a[1] , b[1]);\n\n        return [\n            this.F.add( aA , this._mulByNonResidue(bB)),\n            this.F.sub(\n                this.F.mul(\n                    this.F.add(a[0], a[1]),\n                    this.F.add(b[0], b[1])),\n                this.F.add(aA, bB))];\n    }\n\n    inv(a) {\n        const t0 = this.F.square(a[0]);\n        const t1 = this.F.square(a[1]);\n        const t2 = this.F.sub(t0, this._mulByNonResidue(t1));\n        const t3 = this.F.inv(t2);\n        return [\n            this.F.mul(a[0], t3),\n            this.F.neg(this.F.mul( a[1], t3)) ];\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    square(a) {\n        const ab = this.F.mul(a[0] , a[1]);\n\n        /*\n        [\n            (a + b) * (a + non_residue * b) - ab - non_residue * ab,\n            ab + ab\n        ];\n        */\n\n        return [\n            this.F.sub(\n                this.F.mul(\n                    this.F.add(a[0], a[1]) ,\n                    this.F.add(\n                        a[0] ,\n                        this._mulByNonResidue(a[1]))),\n                this.F.add(\n                    ab,\n                    this._mulByNonResidue(ab))),\n            this.F.add(ab, ab)\n        ];\n    }\n\n    isZero(a) {\n        return this.F.isZero(a[0]) && this.F.isZero(a[1]);\n    }\n\n    eq(a, b) {\n        return this.F.eq(a[0], b[0]) && this.F.eq(a[1], b[1]);\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    pow(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    exp(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    toString(a) {\n        return `[ ${this.F.toString(a[0])} , ${this.F.toString(a[1])} ]`;\n    }\n\n    fromRng(rng) {\n        const c0 = this.F.fromRng(rng);\n        const c1 = this.F.fromRng(rng);\n        return [c0, c1];\n    }\n\n    gt(a, b) {\n        if (this.F.gt(a[0], b[0])) return true;\n        if (this.F.gt(b[0], a[0])) return false;\n        if (this.F.gt(a[1], b[1])) return true;\n        return false;\n    }\n\n    geq(a, b) {\n        return this.gt(a, b) || this.eq(a, b);\n    }\n\n    lt(a, b) {\n        return !this.geq(a,b);\n    }\n\n    leq(a, b) {\n        return !this.gt(a,b);\n    }\n\n    neq(a, b) {\n        return !this.eq(a,b);\n    }\n\n    random() {\n        return [this.F.random(), this.F.random()];\n    }\n\n\n    toRprLE(buff, o, e) {\n        this.F.toRprLE(buff, o, e[0]);\n        this.F.toRprLE(buff, o+this.F.n8, e[1]);\n    }\n\n    toRprBE(buff, o, e) {\n        this.F.toRprBE(buff, o, e[1]);\n        this.F.toRprBE(buff, o+this.F.n8, e[0]);\n    }\n\n    toRprLEM(buff, o, e) {\n        this.F.toRprLEM(buff, o, e[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, e[1]);\n    }\n\n\n    toRprBEM(buff, o, e) {\n        this.F.toRprBEM(buff, o, e[1]);\n        this.F.toRprBEM(buff, o+this.F.n8, e[0]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLE(buff, o);\n        const c1 = this.F.fromRprLE(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const c1 = this.F.fromRprBE(buff, o);\n        const c0 = this.F.fromRprBE(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLEM(buff, o);\n        const c1 = this.F.fromRprLEM(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const c1 = this.F.fromRprBEM(buff, o);\n        const c0 = this.F.fromRprBEM(buff, o+this.F.n8);\n        return [c0, c1];\n    }\n\n    toObject(a) {\n        return a;\n    }\n\n}\n\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fUtils from \"./futils.js\";\n\nexport default class F3Field {\n    constructor(F, nonResidue) {\n        this.type=\"F3\";\n        this.F = F;\n        this.zero = [this.F.zero, this.F.zero, this.F.zero];\n        this.one = [this.F.one, this.F.zero, this.F.zero];\n        this.negone = this.neg(this.one);\n        this.nonResidue = nonResidue;\n        this.m = F.m*3;\n        this.p = F.p;\n        this.n64 = F.n64*3;\n        this.n32 = this.n64*2;\n        this.n8 = this.n64*8;\n    }\n\n    _mulByNonResidue(a) {\n        return this.F.mul(this.nonResidue, a);\n    }\n\n    copy(a) {\n        return [this.F.copy(a[0]), this.F.copy(a[1]), this.F.copy(a[2])];\n    }\n\n    add(a, b) {\n        return [\n            this.F.add(a[0], b[0]),\n            this.F.add(a[1], b[1]),\n            this.F.add(a[2], b[2])\n        ];\n    }\n\n    double(a) {\n        return this.add(a,a);\n    }\n\n    sub(a, b) {\n        return [\n            this.F.sub(a[0], b[0]),\n            this.F.sub(a[1], b[1]),\n            this.F.sub(a[2], b[2])\n        ];\n    }\n\n    neg(a) {\n        return this.sub(this.zero, a);\n    }\n\n    mul(a, b) {\n\n        const aA = this.F.mul(a[0] , b[0]);\n        const bB = this.F.mul(a[1] , b[1]);\n        const cC = this.F.mul(a[2] , b[2]);\n\n        return [\n            this.F.add(\n                aA,\n                this._mulByNonResidue(\n                    this.F.sub(\n                        this.F.mul(\n                            this.F.add(a[1], a[2]),\n                            this.F.add(b[1], b[2])),\n                        this.F.add(bB, cC)))),    // aA + non_residue*((b+c)*(B+C)-bB-cC),\n\n            this.F.add(\n                this.F.sub(\n                    this.F.mul(\n                        this.F.add(a[0], a[1]),\n                        this.F.add(b[0], b[1])),\n                    this.F.add(aA, bB)),\n                this._mulByNonResidue( cC)),   // (a+b)*(A+B)-aA-bB+non_residue*cC\n\n            this.F.add(\n                this.F.sub(\n                    this.F.mul(\n                        this.F.add(a[0], a[2]),\n                        this.F.add(b[0], b[2])),\n                    this.F.add(aA, cC)),\n                bB)];                           // (a+c)*(A+C)-aA+bB-cC)\n    }\n\n    inv(a) {\n        const t0 = this.F.square(a[0]);             // t0 = a^2 ;\n        const t1 = this.F.square(a[1]);             // t1 = b^2 ;\n        const t2 = this.F.square(a[2]);             // t2 = c^2;\n        const t3 = this.F.mul(a[0],a[1]);           // t3 = ab\n        const t4 = this.F.mul(a[0],a[2]);           // t4 = ac\n        const t5 = this.F.mul(a[1],a[2]);           // t5 = bc;\n        // c0 = t0 - non_residue * t5;\n        const c0 = this.F.sub(t0, this._mulByNonResidue(t5));\n        // c1 = non_residue * t2 - t3;\n        const c1 = this.F.sub(this._mulByNonResidue(t2), t3);\n        const c2 = this.F.sub(t1, t4);              // c2 = t1-t4\n\n        // t6 = (a * c0 + non_residue * (c * c1 + b * c2)).inv();\n        const t6 =\n            this.F.inv(\n                this.F.add(\n                    this.F.mul(a[0], c0),\n                    this._mulByNonResidue(\n                        this.F.add(\n                            this.F.mul(a[2], c1),\n                            this.F.mul(a[1], c2)))));\n\n        return [\n            this.F.mul(t6, c0),         // t6*c0\n            this.F.mul(t6, c1),         // t6*c1\n            this.F.mul(t6, c2)];        // t6*c2\n    }\n\n    div(a, b) {\n        return this.mul(a, this.inv(b));\n    }\n\n    square(a) {\n        const s0 = this.F.square(a[0]);                   // s0 = a^2\n        const ab = this.F.mul(a[0], a[1]);                // ab = a*b\n        const s1 = this.F.add(ab, ab);                    // s1 = 2ab;\n        const s2 = this.F.square(\n            this.F.add(this.F.sub(a[0],a[1]), a[2]));     // s2 = (a - b + c)^2;\n        const bc = this.F.mul(a[1],a[2]);                 // bc = b*c\n        const s3 = this.F.add(bc, bc);                    // s3 = 2*bc\n        const s4 = this.F.square(a[2]);                   // s4 = c^2\n\n\n        return [\n            this.F.add(\n                s0,\n                this._mulByNonResidue(s3)),           // s0 + non_residue * s3,\n            this.F.add(\n                s1,\n                this._mulByNonResidue(s4)),           // s1 + non_residue * s4,\n            this.F.sub(\n                this.F.add( this.F.add(s1, s2) , s3 ),\n                this.F.add(s0, s4))];                      // s1 + s2 + s3 - s0 - s4\n    }\n\n    isZero(a) {\n        return this.F.isZero(a[0]) && this.F.isZero(a[1]) && this.F.isZero(a[2]);\n    }\n\n    eq(a, b) {\n        return this.F.eq(a[0], b[0]) && this.F.eq(a[1], b[1]) && this.F.eq(a[2], b[2]);\n    }\n\n    affine(a) {\n        return [this.F.affine(a[0]), this.F.affine(a[1]), this.F.affine(a[2])];\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    pow(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    exp(base, e) {\n        return fUtils.exp(this, base, e);\n    }\n\n    toString(a) {\n        return `[ ${this.F.toString(a[0])} , ${this.F.toString(a[1])}, ${this.F.toString(a[2])} ]`;\n    }\n\n    fromRng(rng) {\n        const c0 = this.F.fromRng(rng);\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        return [c0, c1, c2];\n    }\n\n    gt(a, b) {\n        if (this.F.gt(a[0], b[0])) return true;\n        if (this.F.gt(b[0], a[0])) return false;\n        if (this.F.gt(a[1], b[1])) return true;\n        if (this.F.gt(b[1], a[1])) return false;\n        if (this.F.gt(a[2], b[2])) return true;\n        return false;\n    }\n\n\n    geq(a, b) {\n        return this.gt(a, b) || this.eq(a, b);\n    }\n\n    lt(a, b) {\n        return !this.geq(a,b);\n    }\n\n    leq(a, b) {\n        return !this.gt(a,b);\n    }\n\n    neq(a, b) {\n        return !this.eq(a,b);\n    }\n\n    random() {\n        return [this.F.random(), this.F.random(), this.F.random()];\n    }\n\n\n    toRprLE(buff, o, e) {\n        this.F.toRprLE(buff, o, e[0]);\n        this.F.toRprLE(buff, o+this.F.n8, e[1]);\n        this.F.toRprLE(buff, o+this.F.n8*2, e[2]);\n    }\n\n    toRprBE(buff, o, e) {\n        this.F.toRprBE(buff, o, e[2]);\n        this.F.toRprBE(buff, o+this.F.n8, e[1]);\n        this.F.toRprBE(buff, o+this.F.n8*2, e[0]);\n    }\n\n    toRprLEM(buff, o, e) {\n        this.F.toRprLEM(buff, o, e[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, e[1]);\n        this.F.toRprLEM(buff, o+this.F.n8*2, e[2]);\n    }\n\n\n    toRprBEM(buff, o, e) {\n        this.F.toRprBEM(buff, o, e[2]);\n        this.F.toRprBEM(buff, o+this.F.n8, e[1]);\n        this.F.toRprBEM(buff, o+this.F.n8*2, e[0]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLE(buff, o);\n        const c1 = this.F.fromRprLE(buff, o+this.n8);\n        const c2 = this.F.fromRprLE(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const c2 = this.F.fromRprBE(buff, o);\n        const c1 = this.F.fromRprBE(buff, o+this.n8);\n        const c0 = this.F.fromRprBE(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const c0 = this.F.fromRprLEM(buff, o);\n        const c1 = this.F.fromRprLEM(buff, o+this.n8);\n        const c2 = this.F.fromRprLEM(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const c2 = this.F.fromRprBEM(buff, o);\n        const c1 = this.F.fromRprBEM(buff, o+this.n8);\n        const c0 = this.F.fromRprBEM(buff, o+this.n8*2);\n        return [c0, c1, c2];\n    }\n\n    toObject(a) {\n        return a;\n    }\n}\n", "/*\n    Copyright 2018 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n\n\nimport * as fUtils from \"./futils.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nfunction isGreatest(F, a) {\n    if (Array.isArray(a)) {\n        for (let i=a.length-1; i>=0; i--) {\n            if (!F.F.isZero(a[i])) {\n                return isGreatest(F.F, a[i]);\n            }\n        }\n        return 0;\n    } else {\n        const na = F.neg(a);\n        return Scalar.gt(a, na);\n    }\n}\n\n\nexport default class EC {\n\n    constructor(F, g) {\n        this.F = F;\n        this.g = g;\n        if (this.g.length == 2) this.g[2] = this.F.one;\n        this.zero = [this.F.zero, this.F.one, this.F.zero];\n    }\n\n    add(p1, p2) {\n\n        const F = this.F;\n\n        if (this.eq(p1, this.zero)) return p2;\n        if (this.eq(p2, this.zero)) return p1;\n\n        const res = new Array(3);\n\n        const Z1Z1 = F.square( p1[2] );\n        const Z2Z2 = F.square( p2[2] );\n\n        const U1 = F.mul( p1[0] , Z2Z2 );     // U1 = X1  * Z2Z2\n        const U2 = F.mul( p2[0] , Z1Z1 );     // U2 = X2  * Z1Z1\n\n        const Z1_cubed = F.mul( p1[2] , Z1Z1);\n        const Z2_cubed = F.mul( p2[2] , Z2Z2);\n\n        const S1 = F.mul( p1[1] , Z2_cubed);  // S1 = Y1 * Z2 * Z2Z2\n        const S2 = F.mul( p2[1] , Z1_cubed);  // S2 = Y2 * Z1 * Z1Z1\n\n        if (F.eq(U1,U2) && F.eq(S1,S2)) {\n            return this.double(p1);\n        }\n\n        const H = F.sub( U2 , U1 );                    // H = U2-U1\n\n        const S2_minus_S1 = F.sub( S2 , S1 );\n\n        const I = F.square( F.add(H,H) );         // I = (2 * H)^2\n        const J = F.mul( H , I );                      // J = H * I\n\n        const r = F.add( S2_minus_S1 , S2_minus_S1 );  // r = 2 * (S2-S1)\n        const V = F.mul( U1 , I );                     // V = U1 * I\n\n        res[0] =\n            F.sub(\n                F.sub( F.square(r) , J ),\n                F.add( V , V ));                       // X3 = r^2 - J - 2 * V\n\n        const S1_J = F.mul( S1 , J );\n\n        res[1] =\n            F.sub(\n                F.mul( r , F.sub(V,res[0])),\n                F.add( S1_J,S1_J ));                   // Y3 = r * (V-X3)-2 S1 J\n\n        res[2] =\n            F.mul(\n                H,\n                F.sub(\n                    F.square( F.add(p1[2],p2[2]) ),\n                    F.add( Z1Z1 , Z2Z2 )));            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2) * H\n\n        return res;\n    }\n\n    neg(p) {\n        return [p[0], this.F.neg(p[1]), p[2]];\n    }\n\n    sub(a, b) {\n        return this.add(a, this.neg(b));\n    }\n\n    double(p) {\n        const F = this.F;\n\n        const res = new Array(3);\n\n        if (this.eq(p, this.zero)) return p;\n\n        const A = F.square( p[0] );                    // A = X1^2\n        const B = F.square( p[1] );                    // B = Y1^2\n        const C = F.square( B );                       // C = B^2\n\n        let D =\n            F.sub(\n                F.square( F.add(p[0] , B )),\n                F.add( A , C));\n        D = F.add(D,D);                    // D = 2 * ((X1 + B)^2 - A - C)\n\n        const E = F.add( F.add(A,A), A);          // E = 3 * A\n        const FF =F.square( E );                       // F = E^2\n\n        res[0] = F.sub( FF , F.add(D,D) );         // X3 = F - 2 D\n\n        let eightC = F.add( C , C );\n        eightC = F.add( eightC , eightC );\n        eightC = F.add( eightC , eightC );\n\n        res[1] =\n            F.sub(\n                F.mul(\n                    E,\n                    F.sub( D, res[0] )),\n                eightC);                                    // Y3 = E * (D - X3) - 8 * C\n\n        const Y1Z1 = F.mul( p[1] , p[2] );\n        res[2] = F.add( Y1Z1 , Y1Z1 );                 // Z3 = 2 * Y1 * Z1\n\n        return res;\n    }\n\n    timesScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    mulScalar(base, e) {\n        return fUtils.mulScalar(this, base, e);\n    }\n\n    affine(p) {\n        const F = this.F;\n        if (this.isZero(p)) {\n            return this.zero;\n        } else if (F.eq(p[2], F.one)) {\n            return p;\n        } else {\n            const Z_inv = F.inv(p[2]);\n            const Z2_inv = F.square(Z_inv);\n            const Z3_inv = F.mul(Z2_inv, Z_inv);\n\n            const res = new Array(3);\n            res[0] = F.mul(p[0],Z2_inv);\n            res[1] = F.mul(p[1],Z3_inv);\n            res[2] = F.one;\n\n            return res;\n        }\n    }\n\n    multiAffine(arr) {\n        const keys = Object.keys(arr);\n        const F = this.F;\n        const accMul = new Array(keys.length+1);\n        accMul[0] = F.one;\n        for (let i = 0; i< keys.length; i++) {\n            if (F.eq(arr[keys[i]][2], F.zero)) {\n                accMul[i+1] = accMul[i];\n            } else {\n                accMul[i+1] = F.mul(accMul[i], arr[keys[i]][2]);\n            }\n        }\n\n        accMul[keys.length] = F.inv(accMul[keys.length]);\n\n        for (let i = keys.length-1; i>=0; i--) {\n            if (F.eq(arr[keys[i]][2], F.zero)) {\n                accMul[i] = accMul[i+1];\n                arr[keys[i]] = this.zero;\n            } else {\n                const Z_inv = F.mul(accMul[i], accMul[i+1]);\n                accMul[i] = F.mul(arr[keys[i]][2], accMul[i+1]);\n\n                const Z2_inv = F.square(Z_inv);\n                const Z3_inv = F.mul(Z2_inv, Z_inv);\n\n                arr[keys[i]][0] = F.mul(arr[keys[i]][0],Z2_inv);\n                arr[keys[i]][1] = F.mul(arr[keys[i]][1],Z3_inv);\n                arr[keys[i]][2] = F.one;\n            }\n        }\n\n    }\n\n    eq(p1, p2) {\n        const F = this.F;\n\n        if (this.F.eq(p1[2], this.F.zero)) return this.F.eq(p2[2], this.F.zero);\n        if (this.F.eq(p2[2], this.F.zero)) return false;\n\n        const Z1Z1 = F.square( p1[2] );\n        const Z2Z2 = F.square( p2[2] );\n\n        const U1 = F.mul( p1[0] , Z2Z2 );\n        const U2 = F.mul( p2[0] , Z1Z1 );\n\n        const Z1_cubed = F.mul( p1[2] , Z1Z1);\n        const Z2_cubed = F.mul( p2[2] , Z2Z2);\n\n        const S1 = F.mul( p1[1] , Z2_cubed);\n        const S2 = F.mul( p2[1] , Z1_cubed);\n\n        return (F.eq(U1,U2) && F.eq(S1,S2));\n    }\n\n    isZero(p) {\n        return this.F.isZero(p[2]);\n    }\n\n    toString(p) {\n        const cp = this.affine(p);\n        return `[ ${this.F.toString(cp[0])} , ${this.F.toString(cp[1])} ]`;\n    }\n\n    fromRng(rng) {\n        const F = this.F;\n        let P = [];\n        let greatest;\n        do {\n            P[0] = F.fromRng(rng);\n            greatest = rng.nextBool();\n            const x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n            P[1] = F.sqrt(x3b);\n        } while ((P[1] == null)||(F.isZero[P]));\n\n        const s = isGreatest(F, P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n        P[2] = F.one;\n\n        if (this.cofactor) {\n            P = this.mulScalar(P, this.cofactor);\n        }\n\n        P = this.affine(P);\n\n        return P;\n\n    }\n\n    toRprLE(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLE(buff, o, p[0]);\n        this.F.toRprLE(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprBE(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprBE(buff, o, p[0]);\n        this.F.toRprBE(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprLEM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLEM(buff, o, p[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, p[1]);\n    }\n\n    toRprLEJM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprLEM(buff, o, p[0]);\n        this.F.toRprLEM(buff, o+this.F.n8, p[1]);\n        this.F.toRprLEM(buff, o+2*this.F.n8, p[2]);\n    }\n\n\n    toRprBEM(buff, o, p) {\n        p = this.affine(p);\n        if (this.isZero(p)) {\n            const BuffV = new Uint8Array(buff, o, this.F.n8*2);\n            BuffV.fill(0);\n            return;\n        }\n        this.F.toRprBEM(buff, o, p[0]);\n        this.F.toRprBEM(buff, o+this.F.n8, p[1]);\n    }\n\n    fromRprLE(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLE(buff, o);\n        const y = this.F.fromRprLE(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprBE(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprBE(buff, o);\n        const y = this.F.fromRprBE(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprLEM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLEM(buff, o);\n        const y = this.F.fromRprLEM(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprLEJM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprLEM(buff, o);\n        const y = this.F.fromRprLEM(buff, o+this.F.n8);\n        const z = this.F.fromRprLEM(buff, o+this.F.n8*2);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, z];\n    }\n\n    fromRprBEM(buff, o) {\n        o = o || 0;\n        const x = this.F.fromRprBEM(buff, o);\n        const y = this.F.fromRprBEM(buff, o+this.F.n8);\n        if (this.F.isZero(x) && this.F.isZero(y)) {\n            return this.zero;\n        }\n        return [x, y, this.F.one];\n    }\n\n    fromRprCompressed(buff, o) {\n        const F = this.F;\n        const v = new Uint8Array(buff.buffer, o, F.n8);\n        if (v[0] & 0x40) return this.zero;\n        const P = new Array(3);\n\n        const greatest = ((v[0] & 0x80) != 0);\n        v[0] = v[0] & 0x7F;\n        P[0] = F.fromRprBE(buff, o);\n        if (greatest) v[0] = v[0] | 0x80;  // set back again the old value\n\n        const x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n        P[1] = F.sqrt(x3b);\n\n        if (P[1] === null) {\n            throw new Error(\"Invalid Point!\");\n        }\n\n        const s = isGreatest(F, P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n        P[2] = F.one;\n\n        return P;\n    }\n\n    toRprCompressed(buff, o, p) {\n        p = this.affine(p);\n        const v = new Uint8Array(buff.buffer, o, this.F.n8);\n        if (this.isZero(p)) {\n            v.fill(0);\n            v[0] = 0x40;\n            return;\n        }\n        this.F.toRprBE(buff, o, p[0]);\n\n        if (isGreatest(this.F, p[1])) {\n            v[0] = v[0] | 0x80;\n        }\n    }\n\n\n    fromRprUncompressed(buff, o) {\n        if (buff[0] & 0x40) return this.zero;\n\n        return this.fromRprBE(buff, o);\n    }\n\n    toRprUncompressed(buff, o, p) {\n        this.toRprBE(buff, o, p);\n\n        if (this.isZero(p)) {\n            buff[o] = buff[o] | 0x40;\n        }\n    }\n\n\n}\n\n\n", "import { buildBn128 as buildBn128wasm } from \"wasmcurves\";\nimport buildEngine from \"./engine.js\";\nimport * as Scalar from \"./scalar.js\";\nimport { ModuleBuilder } from \"wasmbuilder\";\n\nglobalThis.curve_bn128 = null;\n\nexport default async function buildBn128(singleThread, plugins) {\n\n    const moduleBuilder = new ModuleBuilder();\n    moduleBuilder.setMemory(25);\n    buildBn128wasm(moduleBuilder);\n\n    if (plugins) plugins(moduleBuilder);\n\n    const bn128wasm = {};\n\n    bn128wasm.code = moduleBuilder.build();\n    bn128wasm.pq = moduleBuilder.modules.f1m.pq;\n    bn128wasm.pr = moduleBuilder.modules.frm.pq;\n    bn128wasm.pG1gen = moduleBuilder.modules.bn128.pG1gen;\n    bn128wasm.pG1zero = moduleBuilder.modules.bn128.pG1zero;\n    bn128wasm.pG1b = moduleBuilder.modules.bn128.pG1b;\n    bn128wasm.pG2gen = moduleBuilder.modules.bn128.pG2gen;\n    bn128wasm.pG2zero = moduleBuilder.modules.bn128.pG2zero;\n    bn128wasm.pG2b = moduleBuilder.modules.bn128.pG2b;\n    bn128wasm.pOneT = moduleBuilder.modules.bn128.pOneT;\n    bn128wasm.prePSize = moduleBuilder.modules.bn128.prePSize;\n    bn128wasm.preQSize = moduleBuilder.modules.bn128.preQSize;\n    bn128wasm.n8q = 32;\n    bn128wasm.n8r = 32;\n    bn128wasm.q = moduleBuilder.modules.bn128.q;\n    bn128wasm.r = moduleBuilder.modules.bn128.r;\n\n    if ((!singleThread) && (globalThis.curve_bn128)) return globalThis.curve_bn128;\n    const params = {\n        name: \"bn128\",\n        wasm: bn128wasm,\n        q: Scalar.e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\"),\n        r: Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\"),\n        n8q: 32,\n        n8r: 32,\n        cofactorG2: Scalar.e(\"30644e72e131a029b85045b68181585e06ceecda572a2489345f2299c0f9fa8d\", 16),\n        singleThread: singleThread ? true : false\n    };\n\n    const curve = await buildEngine(params);\n    curve.terminate = async function () {\n        if (!params.singleThread) {\n            globalThis.curve_bn128 = null;\n            await this.tm.terminate();\n        }\n    };\n\n    if (!singleThread) {\n        globalThis.curve_bn128 = curve;\n    }\n\n    return curve;\n}\n\n", "import WasmField1 from \"./wasm_field1.js\";\nimport WasmField2 from \"./wasm_field2.js\";\nimport WasmField3 from \"./wasm_field3.js\";\nimport WasmCurve from \"./wasm_curve.js\";\nimport buildThreadManager from \"./threadman.js\";\nimport * as Scalar from \"./scalar.js\";\nimport buildBatchApplyKey from \"./engine_applykey.js\";\nimport buildPairing from \"./engine_pairing.js\";\nimport buildMultiExp from \"./engine_multiexp.js\";\nimport buildFFT from \"./engine_fft.js\";\n\nexport default async function buildEngine(params) {\n\n    const tm = await buildThreadManager(params.wasm, params.singleThread);\n\n\n    const curve = {};\n\n    curve.q = Scalar.e(params.wasm.q.toString());\n    curve.r = Scalar.e(params.wasm.r.toString());\n    curve.name = params.name;\n    curve.tm = tm;\n    curve.prePSize = params.wasm.prePSize;\n    curve.preQSize = params.wasm.preQSize;\n    curve.Fr = new WasmField1(tm, \"frm\", params.n8r, params.r);\n    curve.F1 = new WasmField1(tm, \"f1m\", params.n8q, params.q);\n    curve.F2 = new WasmField2(tm, \"f2m\", curve.F1);\n    curve.G1 = new WasmCurve(tm, \"g1m\", curve.F1, params.wasm.pG1gen, params.wasm.pG1b, params.cofactorG1);\n    curve.G2 = new WasmCurve(tm, \"g2m\", curve.F2, params.wasm.pG2gen, params.wasm.pG2b, params.cofactorG2);\n    curve.F6 = new WasmField3(tm, \"f6m\", curve.F2);\n    curve.F12 = new WasmField2(tm, \"ftm\", curve.F6);\n\n    curve.Gt = curve.F12;\n\n    buildBatchApplyKey(curve, \"G1\");\n    buildBatchApplyKey(curve, \"G2\");\n    buildBatchApplyKey(curve, \"Fr\");\n\n    buildMultiExp(curve, \"G1\");\n    buildMultiExp(curve, \"G2\");\n\n    buildFFT(curve, \"G1\");\n    buildFFT(curve, \"G2\");\n    buildFFT(curve, \"Fr\");\n\n    buildPairing(curve);\n\n    curve.array2buffer = function(arr, sG) {\n        const buff = new Uint8Array(sG*arr.length);\n\n        for (let i=0; i<arr.length; i++) {\n            buff.set(arr[i], i*sG);\n        }\n\n        return buff;\n    };\n\n    curve.buffer2array = function(buff , sG) {\n        const n= buff.byteLength / sG;\n        const arr = new Array(n);\n        for (let i=0; i<n; i++) {\n            arr[i] = buff.slice(i*sG, i*sG+sG);\n        }\n        return arr;\n    };\n\n    return curve;\n}\n\n\n", "import * as Scalar from \"./scalar.js\";\nimport * as utils from \"./utils.js\";\nimport { getThreadRng } from \"./random.js\";\nimport buildBatchConvert from \"./engine_batchconvert.js\";\nimport BigBuffer from \"./bigbuffer.js\";\n\n\nexport default class WasmField1 {\n\n    constructor(tm, prefix, n8, p) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.p = p;\n        this.n8 = n8;\n        this.type = \"F1\";\n        this.m = 1;\n\n        this.half = Scalar.shiftRight(p, Scalar.one);\n        this.bitLength = Scalar.bitLength(p);\n        this.mask = Scalar.sub(Scalar.shiftLeft(Scalar.one, this.bitLength), Scalar.one);\n\n        this.pOp1 = tm.alloc(n8);\n        this.pOp2 = tm.alloc(n8);\n        this.pOp3 = tm.alloc(n8);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = this.tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = this.tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n        this.n64 = Math.floor(n8/8);\n        this.n32 = Math.floor(n8/4);\n\n        if(this.n64*8 != this.n8) {\n            throw new Error(\"n8 must be a multiple of 8\");\n        }\n\n        this.half = Scalar.shiftRight(this.p, Scalar.one);\n        this.nqr = this.two;\n        let r = this.exp(this.nqr, this.half);\n        while (!this.eq(r, this.negone)) {\n            this.nqr = this.add(this.nqr, this.one);\n            r = this.exp(this.nqr, this.half);\n        }\n\n        this.shift = this.mul(this.nqr, this.nqr);\n        this.shiftInv = this.inv(this.shift);\n\n        this.s = 0;\n        let t = Scalar.sub(this.p, Scalar.one);\n\n        while ( !Scalar.isOdd(t) ) {\n            this.s = this.s + 1;\n            t = Scalar.shiftRight(t, Scalar.one);\n        }\n\n        this.w = [];\n        this.w[this.s] = this.exp(this.nqr, t);\n\n        for (let i= this.s-1; i>=0; i--) {\n            this.w[i] = this.square(this.w[i+1]);\n        }\n\n        if (!this.eq(this.w[0], this.one)) {\n            throw new Error(\"Error calculating roots of unity\");\n        }\n\n        this.batchToMontgomery = buildBatchConvert(tm, prefix + \"_batchToMontgomery\", this.n8, this.n8);\n        this.batchFromMontgomery = buildBatchConvert(tm, prefix + \"_batchFromMontgomery\", this.n8, this.n8);\n    }\n\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        let ra = Scalar.e(a, b);\n        if (Scalar.isNegative(ra)) {\n            ra = Scalar.neg(ra);\n            if (Scalar.gt(ra, this.p)) {\n                ra = Scalar.mod(ra, this.p);\n            }\n            ra = Scalar.sub(this.p, ra);\n        } else {\n            if (Scalar.gt(ra, this.p)) {\n                ra = Scalar.mod(ra, this.p);\n            }\n        }\n        const buff = utils.leInt2Buff(ra, this.n8);\n        return this.toMontgomery(buff);\n    }\n\n    toString(a, radix) {\n        const an = this.fromMontgomery(a);\n        const s = Scalar.fromRprLE(an, 0);\n        return Scalar.toString(s, radix);\n    }\n\n    fromRng(rng) {\n        let v;\n        const buff = new Uint8Array(this.n8);\n        do {\n            v = Scalar.zero;\n            for (let i=0; i<this.n64; i++) {\n                v = Scalar.add(v,  Scalar.shiftLeft(rng.nextU64(), 64*i));\n            }\n            v = Scalar.band(v, this.mask);\n        } while (Scalar.geq(v, this.p));\n        Scalar.toRprLE(buff, 0, v, this.n8);\n        return buff;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const an = this.fromMontgomery(a);\n        return Scalar.fromRprLE(an, 0);\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.n8);\n        Scalar.toRprLE(buff, 0, a, this.n8);\n        return this.toMontgomery(buff);\n    }\n\n    toRprLE(buff, offset, a) {\n        buff.set(this.fromMontgomery(a), offset);\n    }\n\n    toRprBE(buff, offset, a) {\n        const buff2 = this.fromMontgomery(a);\n        for (let i=0; i<this.n8/2; i++) {\n            const aux = buff2[i];\n            buff2[i] = buff2[this.n8-1-i];\n            buff2[this.n8-1-i] = aux;\n        }\n        buff.set(buff2, offset);\n    }\n\n    fromRprLE(buff, offset) {\n        offset = offset || 0;\n        const res = buff.slice(offset, offset + this.n8);\n        return this.toMontgomery(res);\n    }\n\n    async batchInverse(buffIn) {\n        let returnArray = false;\n        const sIn = this.n8;\n        const sOut = this.n8;\n\n        if (Array.isArray(buffIn)) {\n            buffIn = utils.array2buffer(buffIn, sIn );\n            returnArray = true;\n        } else {\n            buffIn = buffIn.slice(0, buffIn.byteLength);\n        }\n\n        const nPoints = Math.floor(buffIn.byteLength / sIn);\n        if ( nPoints * sIn !== buffIn.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const pointsPerChunk = Math.floor(nPoints/this.tm.concurrency);\n        const opPromises = [];\n        for (let i=0; i<this.tm.concurrency; i++) {\n            let n;\n            if (i< this.tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff:buffChunk},\n                {cmd: \"ALLOC\", var: 1, len:sOut * n},\n                {cmd: \"CALL\", fnName: this.prefix + \"_batchInverse\", params: [\n                    {var: 0},\n                    {val: sIn},\n                    {val: n},\n                    {var: 1},\n                    {val: sOut},\n                ]},\n                {cmd: \"GET\", out: 0, var: 1, len:sOut * n},\n            ];\n            opPromises.push(\n                this.tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buffIn instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        if (returnArray) {\n            return utils.buffer2array(fullBuffOut, sOut);\n        } else {\n            return fullBuffOut;\n        }\n\n    }\n\n}\n\n\n", "/* global BigInt */\nimport * as Scalar from \"./scalar.js\";\n\nexport function stringifyBigInts(o) {\n    if (typeof o == \"bigint\" || o.eq !== undefined) {\n        return o.toString(10);\n    } else if (o instanceof Uint8Array) {\n        return Scalar.fromRprLE(o, 0);\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyBigInts);\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = stringifyBigInts(o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function unstringifyBigInts(o) {\n    if (typeof o == \"string\" && /^[0-9]+$/.test(o)) {\n        return BigInt(o);\n    } else if (typeof o == \"string\" && /^0x[0-9a-fA-F]+$/.test(o)) {\n        return BigInt(o);\n    } else if (Array.isArray(o)) {\n        return o.map(unstringifyBigInts);\n    } else if (typeof o == \"object\") {\n        if (o === null) return null;\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = unstringifyBigInts(o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function beBuff2int(buff) {\n    let res = BigInt(0);\n    let i = buff.length;\n    let offset = 0;\n    const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n    while (i > 0) {\n        if (i >= 4) {\n            i -= 4;\n            res += BigInt(buffV.getUint32(i)) << BigInt(offset * 8);\n            offset += 4;\n        } else if (i >= 2) {\n            i -= 2;\n            res += BigInt(buffV.getUint16(i)) << BigInt(offset * 8);\n            offset += 2;\n        } else {\n            i -= 1;\n            res += BigInt(buffV.getUint8(i)) << BigInt(offset * 8);\n            offset += 1;\n        }\n    }\n    return res;\n}\n\nexport function beInt2Buff(n, len) {\n    let r = n;\n    const buff = new Uint8Array(len);\n    const buffV = new DataView(buff.buffer);\n    let o = len;\n    while (o > 0) {\n        if (o - 4 >= 0) {\n            o -= 4;\n            buffV.setUint32(o, Number(r & BigInt(0xffffffff)));\n            r = r >> BigInt(32);\n        } else if (o - 2 >= 0) {\n            o -= 2;\n            buffV.setUint16(o, Number(r & BigInt(0xffff)));\n            r = r >> BigInt(16);\n        } else {\n            o -= 1;\n            buffV.setUint8(o, Number(r & BigInt(0xff)));\n            r = r >> BigInt(8);\n        }\n    }\n    if (r) {\n        throw new Error(\"Number does not fit in this length\");\n    }\n    return buff;\n}\n\nexport function leBuff2int(buff) {\n    let res = BigInt(0);\n    let i = 0;\n    const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n    while (i < buff.length) {\n        if (i + 4 <= buff.length) {\n            res += BigInt(buffV.getUint32(i, true)) << BigInt(i * 8);\n            i += 4;\n        } else if (i + 4 <= buff.length) {\n            res += BigInt(buffV.getUint16(i, true)) << BigInt(i * 8);\n            i += 2;\n        } else {\n            res += BigInt(buffV.getUint8(i, true)) << BigInt(i * 8);\n            i += 1;\n        }\n    }\n    return res;\n}\n\nexport function leInt2Buff(n, len) {\n    let r = n;\n    if (typeof len === \"undefined\") {\n        len = Math.floor((Scalar.bitLength(n) - 1) / 8) + 1;\n        if (len == 0) len = 1;\n    }\n    const buff = new Uint8Array(len);\n    const buffV = new DataView(buff.buffer);\n    let o = 0;\n    while (o < len) {\n        if (o + 4 <= len) {\n            buffV.setUint32(o, Number(r & BigInt(0xffffffff)), true);\n            o += 4;\n            r = r >> BigInt(32);\n        } else if (o + 2 <= len) {\n            buffV.setUint16(Number(o, r & BigInt(0xffff)), true);\n            o += 2;\n            r = r >> BigInt(16);\n        } else {\n            buffV.setUint8(Number(o, r & BigInt(0xff)), true);\n            o += 1;\n            r = r >> BigInt(8);\n        }\n    }\n    if (r) {\n        throw new Error(\"Number does not fit in this length\");\n    }\n    return buff;\n}\n\nexport function stringifyFElements(F, o) {\n    if (typeof o == \"bigint\" || o.eq !== undefined) {\n        return o.toString(10);\n    } else if (o instanceof Uint8Array) {\n        return F.toString(F.e(o));\n    } else if (Array.isArray(o)) {\n        return o.map(stringifyFElements.bind(this, F));\n    } else if (typeof o == \"object\") {\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = stringifyFElements(F, o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nexport function unstringifyFElements(F, o) {\n    if (typeof o == \"string\" && /^[0-9]+$/.test(o)) {\n        return F.e(o);\n    } else if (typeof o == \"string\" && /^0x[0-9a-fA-F]+$/.test(o)) {\n        return F.e(o);\n    } else if (Array.isArray(o)) {\n        return o.map(unstringifyFElements.bind(this, F));\n    } else if (typeof o == \"object\") {\n        if (o === null) return null;\n        const res = {};\n        const keys = Object.keys(o);\n        keys.forEach((k) => {\n            res[k] = unstringifyFElements(F, o[k]);\n        });\n        return res;\n    } else {\n        return o;\n    }\n}\n\nconst _revTable = [];\nfor (let i = 0; i < 256; i++) {\n    _revTable[i] = _revSlow(i, 8);\n}\n\nfunction _revSlow(idx, bits) {\n    let res = 0;\n    let a = idx;\n    for (let i = 0; i < bits; i++) {\n        res <<= 1;\n        res = res | (a & 1);\n        a >>= 1;\n    }\n    return res;\n}\n\nexport function bitReverse(idx, bits) {\n    return (\n        (_revTable[idx >>> 24] |\n        (_revTable[(idx >>> 16) & 0xff] << 8) |\n        (_revTable[(idx >>> 8) & 0xff] << 16) |\n        (_revTable[idx & 0xff] << 24)) >>>\n        (32 - bits)\n    );\n}\n\nexport function log2(V) {\n    return (\n        ((V & 0xffff0000) !== 0 ? ((V &= 0xffff0000), 16) : 0) |\n        ((V & 0xff00ff00) !== 0 ? ((V &= 0xff00ff00), 8) : 0) |\n        ((V & 0xf0f0f0f0) !== 0 ? ((V &= 0xf0f0f0f0), 4) : 0) |\n        ((V & 0xcccccccc) !== 0 ? ((V &= 0xcccccccc), 2) : 0) |\n        ((V & 0xaaaaaaaa) !== 0)\n    );\n}\n\nexport function buffReverseBits(buff, eSize) {\n    const n = buff.byteLength / eSize;\n    const bits = log2(n);\n    if (n != 1 << bits) {\n        throw new Error(\"Invalid number of pointers\");\n    }\n    for (let i = 0; i < n; i++) {\n        const r = bitReverse(i, bits);\n        if (i > r) {\n            const tmp = buff.slice(i * eSize, (i + 1) * eSize);\n            buff.set(buff.slice(r * eSize, (r + 1) * eSize), i * eSize);\n            buff.set(tmp, r * eSize);\n        }\n    }\n}\n\nexport function array2buffer(arr, sG) {\n    const buff = new Uint8Array(sG * arr.length);\n\n    for (let i = 0; i < arr.length; i++) {\n        buff.set(arr[i], i * sG);\n    }\n\n    return buff;\n}\n\nexport function buffer2array(buff, sG) {\n    const n = buff.byteLength / sG;\n    const arr = new Array(n);\n    for (let i = 0; i < n; i++) {\n        arr[i] = buff.slice(i * sG, i * sG + sG);\n    }\n    return arr;\n}\n", "import BigBuffer from \"./bigbuffer.js\";\n\nexport default function buildBatchConvert(tm, fnName, sIn, sOut) {\n    return async function batchConvert(buffIn) {\n        const nPoints = Math.floor(buffIn.byteLength / sIn);\n        if ( nPoints * sIn !== buffIn.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const pointsPerChunk = Math.floor(nPoints/tm.concurrency);\n        const opPromises = [];\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const buffChunk = buffIn.slice(i*pointsPerChunk*sIn, i*pointsPerChunk*sIn + n*sIn);\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff:buffChunk},\n                {cmd: \"ALLOC\", var: 1, len:sOut * n},\n                {cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {val: n},\n                    {var: 1}\n                ]},\n                {cmd: \"GET\", out: 0, var: 1, len:sOut * n},\n            ];\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buffIn instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n}\n", "\nconst PAGE_SIZE = 1<<30;\n\nexport default class BigBuffer {\n\n    constructor(size) {\n        this.buffers = [];\n        this.byteLength = size;\n        for (let i=0; i<size; i+= PAGE_SIZE) {\n            const n = Math.min(size-i, PAGE_SIZE);\n            this.buffers.push(new Uint8Array(n));\n        }\n\n    }\n\n    slice(fr, to) {\n        if ( to === undefined ) to = this.byteLength;\n        if ( fr === undefined ) fr = 0;\n        const len = to-fr;\n\n        const firstPage = Math.floor(fr / PAGE_SIZE);\n        const lastPage = Math.floor((fr+len-1) / PAGE_SIZE);\n\n        if ((firstPage == lastPage)||(len==0))\n            return this.buffers[firstPage].slice(fr%PAGE_SIZE, fr%PAGE_SIZE + len);\n\n        let buff;\n\n        let p = firstPage;\n        let o = fr % PAGE_SIZE;\n        // Remaining bytes to read\n        let r = len;\n        while (r>0) {\n            // bytes to copy from this page\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset+o, l);\n            if (l == len) return srcView.slice();\n            if (!buff) {\n                if (len <= PAGE_SIZE) {\n                    buff = new Uint8Array(len);\n                } else {\n                    buff = new BigBuffer(len);\n                }\n            }\n            buff.set(srcView, len-r);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n        return buff;\n    }\n\n    set(buff, offset) {\n        if (offset === undefined) offset = 0;\n\n        const len = buff.byteLength;\n\n        if (len==0) return;\n\n        const firstPage = Math.floor(offset / PAGE_SIZE);\n        const lastPage = Math.floor((offset+len-1) / PAGE_SIZE);\n\n        if (firstPage == lastPage) {\n            if ((buff instanceof BigBuffer)&&(buff.buffers.length==1)) {\n                return this.buffers[firstPage].set(buff.buffers[0], offset % PAGE_SIZE);\n            } else {\n                return this.buffers[firstPage].set(buff, offset % PAGE_SIZE);\n            }\n\n        }\n\n\n        let p = firstPage;\n        let o = offset % PAGE_SIZE;\n        let r = len;\n        while (r>0) {\n            const l = (o+r > PAGE_SIZE) ? (PAGE_SIZE -o) : r;\n            const srcView = buff.slice( len -r, len -r+l);\n            const dstView = new Uint8Array(this.buffers[p].buffer, this.buffers[p].byteOffset + o, l);\n            dstView.set(srcView);\n            r = r-l;\n            p ++;\n            o = 0;\n        }\n\n    }\n}\n", "import { getThreadRng } from \"./random.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nexport default class WasmField2 {\n\n    constructor(tm, prefix, F) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.F = F;\n        this.type = \"F2\";\n        this.m = F.m * 2;\n        this.n8 = this.F.n8*2;\n        this.n32 = this.F.n32*2;\n        this.n64 = this.F.n64*2;\n\n        this.pOp1 = tm.alloc(F.n8*2);\n        this.pOp2 = tm.alloc(F.n8*2);\n        this.pOp3 = tm.alloc(F.n8*2);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    mul1(a,b) {\n        return this.op2(\"_mul1\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        if ((Array.isArray(a)) && (a.length == 2)) {\n            const c1 = this.F.e(a[0], b);\n            const c2 = this.F.e(a[1], b);\n            const res = new Uint8Array(this.F.n8*2);\n            res.set(c1);\n            res.set(c2, this.F.n8*2);\n            return res;\n        } else {\n            throw new Error(\"invalid F2\");\n        }\n    }\n\n    toString(a, radix) {\n        const s1 = this.F.toString(a.slice(0, this.F.n8), radix);\n        const s2 = this.F.toString(a.slice(this.F.n8), radix);\n        return `[${s1}, ${s2}]`;\n    }\n\n    fromRng(rng) {\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        const res = new Uint8Array(this.F.n8*2);\n        res.set(c1);\n        res.set(c2, this.F.n8);\n        return res;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const c1 = this.F.toObject(a.slice(0, this.F.n8));\n        const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        return [c1, c2];\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.F.n8*2);\n        const b1 = this.F.fromObject(a[0]);\n        const b2 = this.F.fromObject(a[1]);\n        buff.set(b1);\n        buff.set(b2, this.F.n8);\n        return buff;\n    }\n\n    c1(a) {\n        return a.slice(0, this.F.n8);\n    }\n\n    c2(a) {\n        return a.slice(this.F.n8);\n    }\n\n}\n\n", "\n\nimport { getThreadRng } from \"./random.js\";\nimport * as Scalar from \"./scalar.js\";\n\n\nexport default class WasmField3 {\n\n    constructor(tm, prefix, F) {\n        this.tm = tm;\n        this.prefix = prefix;\n\n        this.F = F;\n        this.type = \"F3\";\n        this.m = F.m * 3;\n        this.n8 = this.F.n8*3;\n        this.n32 = this.F.n32*3;\n        this.n64 = this.F.n64*3;\n\n        this.pOp1 = tm.alloc(F.n8*3);\n        this.pOp2 = tm.alloc(F.n8*3);\n        this.pOp3 = tm.alloc(F.n8*3);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = tm.getBuff(this.pOp1, this.n8);\n        this.tm.instance.exports[prefix + \"_one\"](this.pOp1);\n        this.one = tm.getBuff(this.pOp1, this.n8);\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op2Bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n\n    eq(a,b) {\n        return this.op2Bool(\"_eq\", a, b);\n    }\n\n    isZero(a) {\n        return this.op1Bool(\"_isZero\", a);\n    }\n\n    add(a,b) {\n        return this.op2(\"_add\", a, b);\n    }\n\n    sub(a,b) {\n        return this.op2(\"_sub\", a, b);\n    }\n\n    neg(a) {\n        return this.op1(\"_neg\", a);\n    }\n\n    inv(a) {\n        return this.op1(\"_inverse\", a);\n    }\n\n    isNegative(a) {\n        return this.op1Bool(\"_isNegative\", a);\n    }\n\n    toMontgomery(a) {\n        return this.op1(\"_toMontgomery\", a);\n    }\n\n    fromMontgomery(a) {\n        return this.op1(\"_fromMontgomery\", a);\n    }\n\n    mul(a,b) {\n        return this.op2(\"_mul\", a, b);\n    }\n\n    div(a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_inverse\"](this.pOp2, this.pOp2);\n        this.tm.instance.exports[this.prefix + \"_mul\"](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.n8);\n    }\n\n    square(a) {\n        return this.op1(\"_square\", a);\n    }\n\n    isSquare(a) {\n        return this.op1Bool(\"_isSquare\", a);\n    }\n\n    sqrt(a) {\n        return this.op1(\"_sqrt\", a);\n    }\n\n    exp(a, b) {\n        if (!(b instanceof Uint8Array)) {\n            b = Scalar.toLEBuff(Scalar.e(b));\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + \"_exp\"](this.pOp1, this.pOp2, b.byteLength, this.pOp3);\n        return this.getBuff(this.pOp3, this.n8);\n    }\n\n    e(a, b) {\n        if (a instanceof Uint8Array) return a;\n        if ((Array.isArray(a)) && (a.length == 3)) {\n            const c1 = this.F.e(a[0], b);\n            const c2 = this.F.e(a[1], b);\n            const c3 = this.F.e(a[2], b);\n            const res = new Uint8Array(this.F.n8*3);\n            res.set(c1);\n            res.set(c2, this.F.n8);\n            res.set(c3, this.F.n8*2);\n            return res;\n        } else {\n            throw new Error(\"invalid F3\");\n        }\n    }\n\n    toString(a, radix) {\n        const s1 = this.F.toString(a.slice(0, this.F.n8), radix);\n        const s2 = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);\n        const s3 = this.F.toString(a.slice(this.F.n8*2), radix);\n        return `[${s1}, ${s2}, ${s3}]`;\n    }\n\n    fromRng(rng) {\n        const c1 = this.F.fromRng(rng);\n        const c2 = this.F.fromRng(rng);\n        const c3 = this.F.fromRng(rng);\n        const res = new Uint8Array(this.F.n8*3);\n        res.set(c1);\n        res.set(c2, this.F.n8);\n        res.set(c3, this.F.n8*2);\n        return res;\n    }\n\n    random() {\n        return this.fromRng(getThreadRng());\n    }\n\n    toObject(a) {\n        const c1 = this.F.toObject(a.slice(0, this.F.n8));\n        const c2 = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        const c3 = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));\n        return [c1, c2, c3];\n    }\n\n    fromObject(a) {\n        const buff = new Uint8Array(this.F.n8*3);\n        const b1 = this.F.fromObject(a[0]);\n        const b2 = this.F.fromObject(a[1]);\n        const b3 = this.F.fromObject(a[2]);\n        buff.set(b1);\n        buff.set(b2, this.F.n8);\n        buff.set(b3, this.F.n8*2);\n        return buff;\n    }\n\n    c1(a) {\n        return a.slice(0, this.F.n8);\n    }\n\n    c2(a) {\n        return a.slice(this.F.n8, this.F.n8*2);\n    }\n\n    c3(a) {\n        return a.slice(this.F.n8*2);\n    }\n\n}\n\n\n", "\n\nimport * as Scalar from \"./scalar.js\";\nimport buildBatchConvert from \"./engine_batchconvert.js\";\n\nexport default class WasmCurve {\n\n    constructor(tm, prefix, F, pGen, pGb, cofactor) {\n        this.tm = tm;\n        this.prefix = prefix;\n        this.F = F;\n\n        this.pOp1 = tm.alloc(F.n8*3);\n        this.pOp2 = tm.alloc(F.n8*3);\n        this.pOp3 = tm.alloc(F.n8*3);\n        this.tm.instance.exports[prefix + \"_zero\"](this.pOp1);\n        this.zero = this.tm.getBuff(this.pOp1, F.n8*3);\n        this.tm.instance.exports[prefix + \"_zeroAffine\"](this.pOp1);\n        this.zeroAffine = this.tm.getBuff(this.pOp1, F.n8*2);\n        this.one = this.tm.getBuff(pGen, F.n8*3);\n        this.g = this.one;\n        this.oneAffine = this.tm.getBuff(pGen, F.n8*2);\n        this.gAffine = this.oneAffine;\n        this.b = this.tm.getBuff(pGb, F.n8);\n\n        if (cofactor) {\n            this.cofactor = Scalar.toLEBuff(cofactor);\n        }\n\n        this.negone = this.neg(this.one);\n        this.two = this.add(this.one, this.one);\n\n        this.batchLEMtoC = buildBatchConvert(tm, prefix + \"_batchLEMtoC\", F.n8*2, F.n8);\n        this.batchLEMtoU = buildBatchConvert(tm, prefix + \"_batchLEMtoU\", F.n8*2, F.n8*2);\n        this.batchCtoLEM = buildBatchConvert(tm, prefix + \"_batchCtoLEM\", F.n8, F.n8*2);\n        this.batchUtoLEM = buildBatchConvert(tm, prefix + \"_batchUtoLEM\", F.n8*2, F.n8*2);\n        this.batchToJacobian = buildBatchConvert(tm, prefix + \"_batchToJacobian\", F.n8*2, F.n8*3);\n        this.batchToAffine = buildBatchConvert(tm, prefix + \"_batchToAffine\", F.n8*3, F.n8*2);\n    }\n\n    op2(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    op2bool(opName, a, b) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, b);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp2, this.pOp3);\n    }\n\n    op1(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    op1Affine(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*2);\n    }\n\n    op1Bool(opName, a) {\n        this.tm.setBuff(this.pOp1, a);\n        return !!this.tm.instance.exports[this.prefix + opName](this.pOp1, this.pOp3);\n    }\n\n    add(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_add\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_addMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_addMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_addAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    sub(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_sub\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_subMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2(\"_subMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2(\"_subAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    neg(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1(\"_neg\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1Affine(\"_negAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    double(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1(\"_double\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1(\"_doubleAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    isZero(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1Bool(\"_isZero\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1Bool(\"_isZeroAffine\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    timesScalar(a, s) {\n        if (!(s instanceof Uint8Array)) {\n            s = Scalar.toLEBuff(Scalar.e(s));\n        }\n        let fnName;\n        if (a.byteLength == this.F.n8*3) {\n            fnName = this.prefix + \"_timesScalar\";\n        } else if (a.byteLength == this.F.n8*2) {\n            fnName = this.prefix + \"_timesScalarAffine\";\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, s);\n        this.tm.instance.exports[fnName](this.pOp1, this.pOp2, s.byteLength, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    timesFr(a, s) {\n        let fnName;\n        if (a.byteLength == this.F.n8*3) {\n            fnName = this.prefix + \"_timesFr\";\n        } else if (a.byteLength == this.F.n8*2) {\n            fnName = this.prefix + \"_timesFrAffine\";\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.setBuff(this.pOp1, a);\n        this.tm.setBuff(this.pOp2, s);\n        this.tm.instance.exports[fnName](this.pOp1, this.pOp2, this.pOp3);\n        return this.tm.getBuff(this.pOp3, this.F.n8*3);\n    }\n\n    eq(a,b) {\n        if (a.byteLength == this.F.n8*3) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2bool(\"_eq\", a, b);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2bool(\"_eqMixed\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else if (a.byteLength == this.F.n8*2) {\n            if (b.byteLength == this.F.n8*3) {\n                return this.op2bool(\"_eqMixed\", b, a);\n            } else if (b.byteLength == this.F.n8*2) {\n                return this.op2bool(\"_eqAffine\", a, b);\n            } else {\n                throw new Error(\"invalid point size\");\n            }\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toAffine(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return this.op1Affine(\"_toAffine\", a);\n        } else if (a.byteLength == this.F.n8*2) {\n            return a;\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toJacobian(a) {\n        if (a.byteLength == this.F.n8*3) {\n            return a;\n        } else if (a.byteLength == this.F.n8*2) {\n            return this.op1(\"_toJacobian\", a);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    toRprUncompressed(arr, offset, a) {\n        this.tm.setBuff(this.pOp1, a);\n        if (a.byteLength == this.F.n8*3) {\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n        } else if (a.byteLength != this.F.n8*2) {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.instance.exports[this.prefix + \"_LEMtoU\"](this.pOp1, this.pOp1);\n        const res = this.tm.getBuff(this.pOp1, this.F.n8*2);\n        arr.set(res, offset);\n    }\n\n    fromRprUncompressed(arr, offset) {\n        const buff = arr.slice(offset, offset + this.F.n8*2);\n        this.tm.setBuff(this.pOp1, buff);\n        this.tm.instance.exports[this.prefix + \"_UtoLEM\"](this.pOp1, this.pOp1);\n        return this.tm.getBuff(this.pOp1, this.F.n8*2);\n    }\n\n    toRprCompressed(arr, offset, a) {\n        this.tm.setBuff(this.pOp1, a);\n        if (a.byteLength == this.F.n8*3) {\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n        } else if (a.byteLength != this.F.n8*2) {\n            throw new Error(\"invalid point size\");\n        }\n        this.tm.instance.exports[this.prefix + \"_LEMtoC\"](this.pOp1, this.pOp1);\n        const res = this.tm.getBuff(this.pOp1, this.F.n8);\n        arr.set(res, offset);\n    }\n\n    fromRprCompressed(arr, offset) {\n        const buff = arr.slice(offset, offset + this.F.n8);\n        this.tm.setBuff(this.pOp1, buff);\n        this.tm.instance.exports[this.prefix + \"_CtoLEM\"](this.pOp1, this.pOp2);\n        return this.tm.getBuff(this.pOp2, this.F.n8*2);\n    }\n\n    toUncompressed(a) {\n        const buff = new Uint8Array(this.F.n8*2);\n        this.toRprUncompressed(buff, 0, a);\n        return buff;\n    }\n\n    toRprLEM(arr, offset, a) {\n        if (a.byteLength == this.F.n8*2) {\n            arr.set(a, offset);\n            return;\n        } else if (a.byteLength == this.F.n8*3) {\n            this.tm.setBuff(this.pOp1, a);\n            this.tm.instance.exports[this.prefix + \"_toAffine\"](this.pOp1, this.pOp1);\n            const res = this.tm.getBuff(this.pOp1, this.F.n8*2);\n            arr.set(res, offset);\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    fromRprLEM(arr, offset) {\n        offset = offset || 0;\n        return arr.slice(offset, offset+this.F.n8*2);\n    }\n\n    toString(a, radix) {\n        if (a.byteLength == this.F.n8*3) {\n            const x = this.F.toString(a.slice(0, this.F.n8), radix);\n            const y = this.F.toString(a.slice(this.F.n8, this.F.n8*2), radix);\n            const z = this.F.toString(a.slice(this.F.n8*2), radix);\n            return `[ ${x}, ${y}, ${z} ]`;\n        } else if (a.byteLength == this.F.n8*2) {\n            const x = this.F.toString(a.slice(0, this.F.n8), radix);\n            const y = this.F.toString(a.slice(this.F.n8), radix);\n            return `[ ${x}, ${y} ]`;\n        } else {\n            throw new Error(\"invalid point size\");\n        }\n    }\n\n    isValid(a) {\n        if (this.isZero(a)) return true;\n        const F = this.F;\n        const aa = this.toAffine(a);\n        const x = aa.slice(0, this.F.n8);\n        const y = aa.slice(this.F.n8, this.F.n8*2);\n        const x3b = F.add(F.mul(F.square(x),x), this.b);\n        const y2 = F.square(y);\n        return F.eq(x3b, y2);\n    }\n\n    fromRng(rng) {\n        const F = this.F;\n        let P = [];\n        let greatest;\n        let x3b;\n        do {\n            P[0] = F.fromRng(rng);\n            greatest = rng.nextBool();\n            x3b = F.add(F.mul(F.square(P[0]), P[0]), this.b);\n        } while (!F.isSquare(x3b));\n\n        P[1] = F.sqrt(x3b);\n\n        const s = F.isNegative(P[1]);\n        if (greatest ^ s) P[1] = F.neg(P[1]);\n\n        let Pbuff = new Uint8Array(this.F.n8*2);\n        Pbuff.set(P[0]);\n        Pbuff.set(P[1], this.F.n8);\n\n        if (this.cofactor) {\n            Pbuff = this.timesScalar(Pbuff, this.cofactor);\n        }\n\n        return Pbuff;\n    }\n\n\n\n    toObject(a) {\n        if (this.isZero(a)) {\n            return [\n                this.F.toObject(this.F.zero),\n                this.F.toObject(this.F.one),\n                this.F.toObject(this.F.zero),\n            ];\n        }\n        const x = this.F.toObject(a.slice(0, this.F.n8));\n        const y = this.F.toObject(a.slice(this.F.n8, this.F.n8*2));\n        let z;\n        if (a.byteLength == this.F.n8*3) {\n            z = this.F.toObject(a.slice(this.F.n8*2, this.F.n8*3));\n        } else {\n            z = this.F.toObject(this.F.one);\n        }\n        return [x, y, z];\n    }\n\n    fromObject(a) {\n        const x = this.F.fromObject(a[0]);\n        const y = this.F.fromObject(a[1]);\n        let z;\n        if (a.length==3) {\n            z = this.F.fromObject(a[2]);\n        } else {\n            z = this.F.one;\n        }\n        if (this.F.isZero(z, this.F.one)) {\n            return this.zeroAffine;\n        } else if (this.F.eq(z, this.F.one)) {\n            const buff = new Uint8Array(this.F.n8*2);\n            buff.set(x);\n            buff.set(y, this.F.n8);\n            return buff;\n        } else {\n            const buff = new Uint8Array(this.F.n8*3);\n            buff.set(x);\n            buff.set(y, this.F.n8);\n            buff.set(z, this.F.n8*2);\n            return buff;\n        }\n    }\n\n    e(a) {\n        if (a instanceof Uint8Array) return a;\n        return this.fromObject(a);\n    }\n\n    x(a) {\n        const tmp = this.toAffine(a);\n        return tmp.slice(0, this.F.n8);\n    }\n\n    y(a) {\n        const tmp = this.toAffine(a);\n        return tmp.slice(this.F.n8);\n    }\n\n}\n\n\n", "/* global navigator, WebAssembly */\n/*\n    Copyright 2019 0KIMS association.\n\n    This file is part of wasmsnark (Web Assembly zkSnark Prover).\n\n    wasmsnark is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    wasmsnark is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with wasmsnark. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// const MEM_SIZE = 1000;  // Memory size in 64K Pakes (512Mb)\nconst MEM_SIZE = 25;  // Memory size in 64K Pakes (1600Kb)\n\n\nimport thread from \"./threadman_thread.js\";\nimport os from \"os\";\nimport Worker from \"web-worker\";\n\nclass Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject)=> {\n            this.reject = reject;\n            this.resolve = resolve;\n        });\n    }\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction stringToBase64(str) {\n    if (process.browser) {\n        return globalThis.btoa(str);\n    } else {\n        return Buffer.from(str).toString(\"base64\");\n    }\n}\n\nconst threadSource = stringToBase64(\"(\" + thread.toString() + \")(self)\");\nconst workerSource = \"data:application/javascript;base64,\" + threadSource;\n\n\n\nexport default async function buildThreadManager(wasm, singleThread) {\n    const tm = new ThreadManager();\n\n    tm.memory = new WebAssembly.Memory({initial:MEM_SIZE});\n    tm.u8 = new Uint8Array(tm.memory.buffer);\n    tm.u32 = new Uint32Array(tm.memory.buffer);\n\n    const wasmModule = await WebAssembly.compile(wasm.code);\n\n    tm.instance = await WebAssembly.instantiate(wasmModule, {\n        env: {\n            \"memory\": tm.memory\n        }\n    });\n\n    tm.singleThread = singleThread;\n    tm.initalPFree = tm.u32[0];   // Save the Pointer to free space.\n    tm.pq = wasm.pq;\n    tm.pr = wasm.pr;\n    tm.pG1gen = wasm.pG1gen;\n    tm.pG1zero = wasm.pG1zero;\n    tm.pG2gen = wasm.pG2gen;\n    tm.pG2zero = wasm.pG2zero;\n    tm.pOneT = wasm.pOneT;\n\n    //    tm.pTmp0 = tm.alloc(curve.G2.F.n8*3);\n    //    tm.pTmp1 = tm.alloc(curve.G2.F.n8*3);\n\n\n    if (singleThread) {\n        tm.code = wasm.code;\n        tm.taskManager = thread();\n        await tm.taskManager([{\n            cmd: \"INIT\",\n            init: MEM_SIZE,\n            code: tm.code.slice()\n        }]);\n        tm.concurrency  = 1;\n    } else {\n        tm.workers = [];\n        tm.pendingDeferreds = [];\n        tm.working = [];\n\n        let concurrency;\n\n        if ((typeof(navigator) === \"object\") && navigator.hardwareConcurrency) {\n            concurrency = navigator.hardwareConcurrency;\n        } else {\n            concurrency = os.cpus().length;\n        }\n\n        if(concurrency == 0){\n            concurrency = 2;\n        }\n\n        // Limit to 64 threads for memory reasons.\n        if (concurrency>64) concurrency=64;\n        tm.concurrency = concurrency;\n\n        for (let i = 0; i<concurrency; i++) {\n\n            tm.workers[i] = new Worker(workerSource);\n\n            tm.workers[i].addEventListener(\"message\", getOnMsg(i));\n\n            tm.working[i]=false;\n        }\n\n        const initPromises = [];\n        for (let i=0; i<tm.workers.length;i++) {\n            const copyCode = wasm.code.slice();\n            initPromises.push(tm.postAction(i, [{\n                cmd: \"INIT\",\n                init: MEM_SIZE,\n                code: copyCode\n            }], [copyCode.buffer]));\n        }\n\n        await Promise.all(initPromises);\n\n    }\n    return tm;\n\n    function getOnMsg(i) {\n        return function(e) {\n            let data;\n            if ((e)&&(e.data)) {\n                data = e.data;\n            } else {\n                data = e;\n            }\n\n            tm.working[i]=false;\n            tm.pendingDeferreds[i].resolve(data);\n            tm.processWorks();\n        };\n    }\n\n}\n\nclass ThreadManager {\n    constructor() {\n        this.actionQueue = [];\n        this.oldPFree = 0;\n    }\n\n    startSyncOp() {\n        if (this.oldPFree != 0) throw new Error(\"Sync operation in progress\");\n        this.oldPFree = this.u32[0];\n    }\n\n    endSyncOp() {\n        if (this.oldPFree == 0) throw new Error(\"No sync operation in progress\");\n        this.u32[0] = this.oldPFree;\n        this.oldPFree = 0;\n    }\n\n    postAction(workerId, e, transfers, _deferred) {\n        if (this.working[workerId]) {\n            throw new Error(\"Posting a job t a working worker\");\n        }\n        this.working[workerId] = true;\n\n        this.pendingDeferreds[workerId] = _deferred ? _deferred : new Deferred();\n        this.workers[workerId].postMessage(e, transfers);\n\n        return this.pendingDeferreds[workerId].promise;\n    }\n\n    processWorks() {\n        for (let i=0; (i<this.workers.length)&&(this.actionQueue.length > 0); i++) {\n            if (this.working[i] == false) {\n                const work = this.actionQueue.shift();\n                this.postAction(i, work.data, work.transfers, work.deferred);\n            }\n        }\n    }\n\n    queueAction(actionData, transfers) {\n        const d = new Deferred();\n\n        if (this.singleThread) {\n            const res = this.taskManager(actionData);\n            d.resolve(res);\n        } else {\n            this.actionQueue.push({\n                data: actionData,\n                transfers: transfers,\n                deferred: d\n            });\n            this.processWorks();\n        }\n        return d.promise;\n    }\n\n    resetMemory() {\n        this.u32[0] = this.initalPFree;\n    }\n\n    allocBuff(buff) {\n        const pointer = this.alloc(buff.byteLength);\n        this.setBuff(pointer, buff);\n        return pointer;\n    }\n\n    getBuff(pointer, length) {\n        return this.u8.slice(pointer, pointer+ length);\n    }\n\n    setBuff(pointer, buffer) {\n        this.u8.set(new Uint8Array(buffer), pointer);\n    }\n\n    alloc(length) {\n        while (this.u32[0] & 3) this.u32[0]++;  // Return always aligned pointers\n        const res = this.u32[0];\n        this.u32[0] += length;\n        return res;\n    }\n\n    async terminate() {\n        for (let i=0; i<this.workers.length; i++) {\n            this.workers[i].postMessage([{cmd: \"TERMINATE\"}]);\n        }\n        await sleep(200);\n    }\n\n}\n", "/* global WebAssembly */\n\nexport default function thread(self) {\n    const MAXMEM = 32767;\n    let instance;\n    let memory;\n\n    if (self) {\n        self.onmessage = function(e) {\n            let data;\n            if (e.data) {\n                data = e.data;\n            } else {\n                data = e;\n            }\n\n            if (data[0].cmd == \"INIT\") {\n                init(data[0]).then(function() {\n                    self.postMessage(data.result);\n                });\n            } else if (data[0].cmd == \"TERMINATE\") {\n                self.close();\n            } else {\n                const res = runTask(data);\n                self.postMessage(res);\n            }\n        };\n    }\n\n    async function init(data) {\n        const code = new Uint8Array(data.code);\n        const wasmModule = await WebAssembly.compile(code);\n        memory = new WebAssembly.Memory({initial:data.init, maximum: MAXMEM});\n\n        instance = await WebAssembly.instantiate(wasmModule, {\n            env: {\n                \"memory\": memory\n            }\n        });\n    }\n\n\n\n    function alloc(length) {\n        const u32 = new Uint32Array(memory.buffer, 0, 1);\n        while (u32[0] & 3) u32[0]++;  // Return always aligned pointers\n        const res = u32[0];\n        u32[0] += length;\n        if (u32[0] + length > memory.buffer.byteLength) {\n            const currentPages = memory.buffer.byteLength / 0x10000;\n            let requiredPages = Math.floor((u32[0] + length) / 0x10000)+1;\n            if (requiredPages>MAXMEM) requiredPages=MAXMEM;\n            memory.grow(requiredPages-currentPages);\n        }\n        return res;\n    }\n\n    function allocBuffer(buffer) {\n        const p = alloc(buffer.byteLength);\n        setBuffer(p, buffer);\n        return p;\n    }\n\n    function getBuffer(pointer, length) {\n        const u8 = new Uint8Array(memory.buffer);\n        return new Uint8Array(u8.buffer, u8.byteOffset + pointer, length);\n    }\n\n    function setBuffer(pointer, buffer) {\n        const u8 = new Uint8Array(memory.buffer);\n        u8.set(new Uint8Array(buffer), pointer);\n    }\n\n    function runTask(task) {\n        if (task[0].cmd == \"INIT\") {\n            return init(task[0]);\n        }\n        const ctx = {\n            vars: [],\n            out: []\n        };\n        const u32a = new Uint32Array(memory.buffer, 0, 1);\n        const oldAlloc = u32a[0];\n        for (let i=0; i<task.length; i++) {\n            switch (task[i].cmd) {\n            case \"ALLOCSET\":\n                ctx.vars[task[i].var] = allocBuffer(task[i].buff);\n                break;\n            case \"ALLOC\":\n                ctx.vars[task[i].var] = alloc(task[i].len);\n                break;\n            case \"SET\":\n                setBuffer(ctx.vars[task[i].var], task[i].buff);\n                break;\n            case \"CALL\": {\n                const params = [];\n                for (let j=0; j<task[i].params.length; j++) {\n                    const p = task[i].params[j];\n                    if (typeof p.var !== \"undefined\") {\n                        params.push(ctx.vars[p.var] + (p.offset || 0));\n                    } else if (typeof p.val != \"undefined\") {\n                        params.push(p.val);\n                    }\n                }\n                instance.exports[task[i].fnName](...params);\n                break;\n            }\n            case \"GET\":\n                ctx.out[task[i].out] = getBuffer(ctx.vars[task[i].var], task[i].len).slice();\n                break;\n            default:\n                throw new Error(\"Invalid cmd\");\n            }\n        }\n        const u32b = new Uint32Array(memory.buffer, 0, 1);\n        u32b[0] = oldAlloc;\n        return ctx.out;\n    }\n\n\n    return runTask;\n}\n", "import BigBuffer from \"./bigbuffer.js\";\n\nexport default function buildBatchApplyKey(curve, groupName) {\n    const G = curve[groupName];\n    const Fr = curve.Fr;\n    const tm = curve.tm;\n\n    curve[groupName].batchApplyKey = async function(buff, first, inc, inType, outType) {\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n        let fnName, fnAffine;\n        let sGin, sGmid, sGout;\n        if (groupName == \"G1\") {\n            if (inType == \"jacobian\") {\n                sGin = G.F.n8*3;\n                fnName = \"g1m_batchApplyKey\";\n            } else {\n                sGin = G.F.n8*2;\n                fnName = \"g1m_batchApplyKeyMixed\";\n            }\n            sGmid = G.F.n8*3;\n            if (outType == \"jacobian\") {\n                sGout = G.F.n8*3;\n            } else {\n                fnAffine = \"g1m_batchToAffine\";\n                sGout = G.F.n8*2;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"jacobian\") {\n                sGin = G.F.n8*3;\n                fnName = \"g2m_batchApplyKey\";\n            } else {\n                sGin = G.F.n8*2;\n                fnName = \"g2m_batchApplyKeyMixed\";\n            }\n            sGmid = G.F.n8*3;\n            if (outType == \"jacobian\") {\n                sGout = G.F.n8*3;\n            } else {\n                fnAffine = \"g2m_batchToAffine\";\n                sGout = G.F.n8*2;\n            }\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_batchApplyKey\";\n            sGin = G.n8;\n            sGmid = G.n8;\n            sGout = G.n8;\n        } else {\n            throw new Error(\"Invalid group: \" + groupName);\n        }\n        const nPoints = Math.floor(buff.byteLength / sGin);\n        const pointsPerChunk = Math.floor(nPoints/tm.concurrency);\n        const opPromises = [];\n        inc = Fr.e(inc);\n        let t = Fr.e(first);\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n\n            const task = [];\n\n            task.push({\n                cmd: \"ALLOCSET\",\n                var: 0,\n                buff: buff.slice(i*pointsPerChunk*sGin, i*pointsPerChunk*sGin + n*sGin)\n            });\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: t});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: inc});\n            task.push({cmd: \"ALLOC\", var: 3, len: n*Math.max(sGmid, sGout)});\n            task.push({\n                cmd: \"CALL\",\n                fnName: fnName,\n                params: [\n                    {var: 0},\n                    {val: n},\n                    {var: 1},\n                    {var: 2},\n                    {var:3}\n                ]\n            });\n            if (fnAffine) {\n                task.push({\n                    cmd: \"CALL\",\n                    fnName: fnAffine,\n                    params: [\n                        {var: 3},\n                        {val: n},\n                        {var: 3},\n                    ]\n                });\n            }\n            task.push({cmd: \"GET\", out: 0, var: 3, len: n*sGout});\n\n            opPromises.push(tm.queueAction(task));\n            t = Fr.mul(t, Fr.exp(inc, n));\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let outBuff;\n        if (buff instanceof BigBuffer) {\n            outBuff = new BigBuffer(nPoints*sGout);\n        } else {\n            outBuff = new Uint8Array(nPoints*sGout);\n        }\n\n        let p=0;\n        for (let i=0; i<result.length; i++) {\n            outBuff.set(result[i][0], p);\n            p += result[i][0].byteLength;\n        }\n\n        return outBuff;\n    };\n}\n", "\nexport default function buildPairing(curve) {\n    const tm = curve.tm;\n    curve.pairing = function pairing(a, b) {\n\n        tm.startSyncOp();\n        const pA = tm.allocBuff(curve.G1.toJacobian(a));\n        const pB = tm.allocBuff(curve.G2.toJacobian(b));\n        const pRes = tm.alloc(curve.Gt.n8);\n        tm.instance.exports[curve.name + \"_pairing\"](pA, pB, pRes);\n\n        const res = tm.getBuff(pRes, curve.Gt.n8);\n\n        tm.endSyncOp();\n        return res;\n    };\n\n    curve.pairingEq = async function pairingEq() {\n        let  buffCt;\n        let nEqs;\n        if ((arguments.length % 2) == 1) {\n            buffCt = arguments[arguments.length-1];\n            nEqs = (arguments.length -1) /2;\n        } else {\n            buffCt = curve.Gt.one;\n            nEqs = arguments.length /2;\n        }\n\n        const opPromises = [];\n        for (let i=0; i<nEqs; i++) {\n\n            const task = [];\n\n            const g1Buff = curve.G1.toJacobian(arguments[i*2]);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: g1Buff});\n            task.push({cmd: \"ALLOC\", var: 1, len: curve.prePSize});\n\n            const g2Buff = curve.G2.toJacobian(arguments[i*2 +1]);\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: g2Buff});\n            task.push({cmd: \"ALLOC\", var: 3, len: curve.preQSize});\n\n            task.push({cmd: \"ALLOC\", var: 4, len: curve.Gt.n8});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_prepareG1\", params: [\n                {var: 0},\n                {var: 1}\n            ]});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_prepareG2\", params: [\n                {var: 2},\n                {var: 3}\n            ]});\n\n            task.push({cmd: \"CALL\", fnName: curve.name + \"_millerLoop\", params: [\n                {var: 1},\n                {var: 3},\n                {var: 4}\n            ]});\n\n            task.push({cmd: \"GET\", out: 0, var: 4, len: curve.Gt.n8});\n\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        tm.startSyncOp();\n        const pRes = tm.alloc(curve.Gt.n8);\n        tm.instance.exports.ftm_one(pRes);\n\n        for (let i=0; i<result.length; i++) {\n            const pMR = tm.allocBuff(result[i][0]);\n            tm.instance.exports.ftm_mul(pRes, pMR, pRes);\n        }\n        tm.instance.exports[curve.name + \"_finalExponentiation\"](pRes, pRes);\n\n        const pCt = tm.allocBuff(buffCt);\n\n        const r = !!tm.instance.exports.ftm_eq(pRes, pCt);\n\n        tm.endSyncOp();\n\n        return r;\n    };\n\n    curve.prepareG1 = function(p) {\n        this.tm.startSyncOp();\n        const pP = this.tm.allocBuff(p);\n        const pPrepP = this.tm.alloc(this.prePSize);\n        this.tm.instance.exports[this.name + \"_prepareG1\"](pP, pPrepP);\n        const res = this.tm.getBuff(pPrepP, this.prePSize);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.prepareG2 = function(q) {\n        this.tm.startSyncOp();\n        const pQ = this.tm.allocBuff(q);\n        const pPrepQ = this.tm.alloc(this.preQSize);\n        this.tm.instance.exports[this.name + \"_prepareG2\"](pQ, pPrepQ);\n        const res = this.tm.getBuff(pPrepQ, this.preQSize);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.millerLoop = function(preP, preQ) {\n        this.tm.startSyncOp();\n        const pPreP = this.tm.allocBuff(preP);\n        const pPreQ = this.tm.allocBuff(preQ);\n        const pRes = this.tm.alloc(this.Gt.n8);\n        this.tm.instance.exports[this.name + \"_millerLoop\"](pPreP, pPreQ, pRes);\n        const res = this.tm.getBuff(pRes, this.Gt.n8);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n    curve.finalExponentiation = function(a) {\n        this.tm.startSyncOp();\n        const pA = this.tm.allocBuff(a);\n        const pRes = this.tm.alloc(this.Gt.n8);\n        this.tm.instance.exports[this.name + \"_finalExponentiation\"](pA, pRes);\n        const res = this.tm.getBuff(pRes, this.Gt.n8);\n        this.tm.endSyncOp();\n        return res;\n    };\n\n}\n", "import { log2 } from \"./utils.js\";\n\nconst pTSizes = [\n    1 ,  1,  1,  1,    2,  3,  4,  5,\n    6 ,  7,  7,  8,    9, 10, 11, 12,\n    13, 13, 14, 15,   16, 16, 17, 17,\n    17, 17, 17, 17,   17, 17, 17, 17\n];\n\nexport default function buildMultiexp(curve, groupName) {\n    const G = curve[groupName];\n    const tm = G.tm;\n    async function _multiExpChunk(buffBases, buffScalars, inType, logger, logText) {\n        if ( ! (buffBases instanceof Uint8Array) ) {\n            if (logger) logger.error(`${logText} _multiExpChunk buffBases is not Uint8Array`);\n            throw new Error(`${logText} _multiExpChunk buffBases is not Uint8Array`);\n        }\n        if ( ! (buffScalars instanceof Uint8Array) ) {\n            if (logger) logger.error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);\n            throw new Error(`${logText} _multiExpChunk buffScalars is not Uint8Array`);\n        }\n        inType = inType || \"affine\";\n\n        let sGIn;\n        let fnName;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                fnName = \"g1m_multiexpAffine_chunk\";\n                sGIn = G.F.n8*2;\n            } else {\n                fnName = \"g1m_multiexp_chunk\";\n                sGIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                fnName = \"g2m_multiexpAffine_chunk\";\n                sGIn = G.F.n8*2;\n            } else {\n                fnName = \"g2m_multiexp_chunk\";\n                sGIn = G.F.n8*3;\n            }\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n        const nPoints = Math.floor(buffBases.byteLength / sGIn);\n\n        if (nPoints == 0) return G.zero;\n        const sScalar = Math.floor(buffScalars.byteLength / nPoints);\n        if( sScalar * nPoints != buffScalars.byteLength) {\n            throw new Error(\"Scalar size does not match\");\n        }\n\n        const bitChunkSize = pTSizes[log2(nPoints)];\n        const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [\n                {cmd: \"ALLOCSET\", var: 0, buff: buffBases},\n                {cmd: \"ALLOCSET\", var: 1, buff: buffScalars},\n                {cmd: \"ALLOC\", var: 2, len: G.F.n8*3},\n                {cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {var: 1},\n                    {val: sScalar},\n                    {val: nPoints},\n                    {val: i*bitChunkSize},\n                    {val: Math.min(sScalar*8 - i*bitChunkSize, bitChunkSize)},\n                    {var: 2}\n                ]},\n                {cmd: \"GET\", out: 0, var: 2, len: G.F.n8*3}\n            ];\n            opPromises.push(\n                G.tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let res = G.zero;\n        for (let i=result.length-1; i>=0; i--) {\n            if (!G.isZero(res)) {\n                for (let j=0; j<bitChunkSize; j++) res = G.double(res);\n            }\n            res = G.add(res, result[i][0]);\n        }\n\n        return res;\n    }\n\n    async function _multiExp(buffBases, buffScalars, inType, logger, logText) {\n        const MAX_CHUNK_SIZE = 1 << 22;\n        const MIN_CHUNK_SIZE = 1 << 10;\n        let sGIn;\n\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sGIn = G.F.n8*2;\n            } else {\n                sGIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sGIn = G.F.n8*2;\n            } else {\n                sGIn = G.F.n8*3;\n            }\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buffBases.byteLength / sGIn);\n        const sScalar = Math.floor(buffScalars.byteLength / nPoints);\n        if( sScalar * nPoints != buffScalars.byteLength) {\n            throw new Error(\"Scalar size does not match\");\n        }\n\n        const bitChunkSize = pTSizes[log2(nPoints)];\n        const nChunks = Math.floor((sScalar*8 - 1) / bitChunkSize) +1;\n\n        let chunkSize;\n        chunkSize = Math.floor(nPoints / (tm.concurrency /nChunks));\n        if (chunkSize>MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;\n        if (chunkSize<MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;\n\n        const opPromises = [];\n        for (let i=0; i<nPoints; i += chunkSize) {\n            if (logger) logger.debug(`Multiexp start: ${logText}: ${i}/${nPoints}`);\n            const n= Math.min(nPoints - i, chunkSize);\n            const buffBasesChunk = buffBases.slice(i*sGIn, (i+n)*sGIn);\n            const buffScalarsChunk = buffScalars.slice(i*sScalar, (i+n)*sScalar);\n            opPromises.push(_multiExpChunk(buffBasesChunk, buffScalarsChunk, inType, logger, logText).then( (r) => {\n                if (logger) logger.debug(`Multiexp end: ${logText}: ${i}/${nPoints}`);\n                return r;\n            }));\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let res = G.zero;\n        for (let i=result.length-1; i>=0; i--) {\n            res = G.add(res, result[i]);\n        }\n\n        return res;\n    }\n\n    G.multiExp = async function multiExpAffine(buffBases, buffScalars, logger, logText) {\n        return await _multiExp(buffBases, buffScalars, \"jacobian\", logger, logText);\n    };\n    G.multiExpAffine = async function multiExpAffine(buffBases, buffScalars, logger, logText) {\n        return await _multiExp(buffBases, buffScalars, \"affine\", logger, logText);\n    };\n}\n", "import {log2, buffReverseBits, array2buffer, buffer2array} from \"./utils.js\";\nimport BigBuffer from \"./bigbuffer.js\";\n\n\nexport default function buildFFT(curve, groupName) {\n    const G = curve[groupName];\n    const Fr = curve.Fr;\n    const tm = G.tm;\n    async function _fft(buff, inverse, inType, outType, logger, loggerTxt) {\n\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n        const MAX_BITS_THREAD = 14;\n\n        let sIn, sMid, sOut, fnIn2Mid, fnMid2Out, fnFFTMix, fnFFTJoin, fnFFTFinal;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g1m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            if (inverse) {\n                fnFFTFinal = \"g1m_fftFinal\";\n            }\n            fnFFTJoin = \"g1m_fftJoin\";\n            fnFFTMix = \"g1m_fftMix\";\n\n            if (outType == \"affine\") {\n                sOut = G.F.n8*2;\n                fnMid2Out = \"g1m_batchToAffine\";\n            } else {\n                sOut = G.F.n8*3;\n            }\n\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g2m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            if (inverse) {\n                fnFFTFinal = \"g2m_fftFinal\";\n            }\n            fnFFTJoin = \"g2m_fftJoin\";\n            fnFFTMix = \"g2m_fftMix\";\n            if (outType == \"affine\") {\n                sOut = G.F.n8*2;\n                fnMid2Out = \"g2m_batchToAffine\";\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = G.n8;\n            sMid = G.n8;\n            sOut = G.n8;\n            if (inverse) {\n                fnFFTFinal = \"frm_fftFinal\";\n            }\n            fnFFTMix = \"frm_fftMix\";\n            fnFFTJoin = \"frm_fftJoin\";\n        }\n\n\n        let returnArray = false;\n        if (Array.isArray(buff)) {\n            buff = array2buffer(buff, sIn);\n            returnArray = true;\n        } else {\n            buff = buff.slice(0, buff.byteLength);\n        }\n\n        const nPoints = buff.byteLength / sIn;\n        const bits = log2(nPoints);\n\n        if  ((1 << bits) != nPoints) {\n            throw new Error(\"fft must be multiple of 2\" );\n        }\n\n        if (bits == Fr.s +1) {\n            let buffOut;\n\n            if (inverse) {\n                buffOut =  await _fftExtInv(buff, inType, outType, logger, loggerTxt);\n            } else {\n                buffOut =  await _fftExt(buff, inType, outType, logger, loggerTxt);\n            }\n\n            if (returnArray) {\n                return buffer2array(buffOut, sOut);\n            } else {\n                return buffOut;\n            }\n        }\n\n        let inv;\n        if (inverse) {\n            inv = Fr.inv(Fr.e(nPoints));\n        }\n\n        let buffOut;\n\n        buffReverseBits(buff, sIn);\n\n        let chunks;\n        let pointsInChunk = Math.min(1 << MAX_BITS_THREAD, nPoints);\n        let nChunks = nPoints / pointsInChunk;\n\n        while ((nChunks < tm.concurrency)&&(pointsInChunk>=16)) {\n            nChunks *= 2;\n            pointsInChunk /= 2;\n        }\n\n        const l2Chunk = log2(pointsInChunk);\n\n        const promises = [];\n        for (let i = 0; i< nChunks; i++) {\n            if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix start: ${i}/${nChunks}`);\n            const task = [];\n            task.push({cmd: \"ALLOC\", var: 0, len: sMid*pointsInChunk});\n            const buffChunk = buff.slice( (pointsInChunk * i)*sIn, (pointsInChunk * (i+1))*sIn);\n            task.push({cmd: \"SET\", var: 0, buff: buffChunk});\n            if (fnIn2Mid) {\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n            }\n            for (let j=1; j<=l2Chunk;j++) {\n                task.push({cmd: \"CALL\", fnName:fnFFTMix, params: [{var:0}, {val: pointsInChunk}, {val: j}]});\n            }\n\n            if (l2Chunk==bits) {\n                if (fnFFTFinal) {\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: inv});\n                    task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                        {var: 0},\n                        {val: pointsInChunk},\n                        {var: 1},\n                    ]});\n                }\n                if (fnMid2Out) {\n                    task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n                }\n                task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sOut});\n            } else {\n                task.push({cmd: \"GET\", out:0, var: 0, len: sMid*pointsInChunk});\n            }\n            promises.push(tm.queueAction(task).then( (r) => {\n                if (logger) logger.debug(`${loggerTxt}: fft ${bits} mix end: ${i}/${nChunks}`);\n                return r;\n            }));\n        }\n\n        chunks = await Promise.all(promises);\n        for (let i = 0; i< nChunks; i++) chunks[i] = chunks[i][0];\n\n        for (let i = l2Chunk+1;   i<=bits; i++) {\n            if (logger) logger.debug(`${loggerTxt}: fft  ${bits}  join: ${i}/${bits}`);\n            const nGroups = 1 << (bits - i);\n            const nChunksPerGroup = nChunks / nGroups;\n            const opPromises = [];\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const first = Fr.exp( Fr.w[i], k*pointsInChunk);\n                    const inc = Fr.w[i];\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n\n                    const task = [];\n                    task.push({cmd: \"ALLOCSET\", var: 0, buff: chunks[o1]});\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: chunks[o2]});\n                    task.push({cmd: \"ALLOCSET\", var: 2, buff: first});\n                    task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n                    task.push({cmd: \"CALL\", fnName: fnFFTJoin,  params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: pointsInChunk},\n                        {var: 2},\n                        {var: 3}\n                    ]});\n                    if (i==bits) {\n                        if (fnFFTFinal) {\n                            task.push({cmd: \"ALLOCSET\", var: 4, buff: inv});\n                            task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                                {var: 0},\n                                {val: pointsInChunk},\n                                {var: 4},\n                            ]});\n                            task.push({cmd: \"CALL\", fnName: fnFFTFinal,  params:[\n                                {var: 1},\n                                {val: pointsInChunk},\n                                {var: 4},\n                            ]});\n                        }\n                        if (fnMid2Out) {\n                            task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: pointsInChunk}, {var: 0}]});\n                            task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:1}, {val: pointsInChunk}, {var: 1}]});\n                        }\n                        task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sOut});\n                        task.push({cmd: \"GET\", out: 1, var: 1, len: pointsInChunk*sOut});\n                    } else {\n                        task.push({cmd: \"GET\", out: 0, var: 0, len: pointsInChunk*sMid});\n                        task.push({cmd: \"GET\", out: 1, var: 1, len: pointsInChunk*sMid});\n                    }\n                    opPromises.push(tm.queueAction(task).then( (r) => {\n                        if (logger) logger.debug(`${loggerTxt}: fft ${bits} join  ${i}/${bits}  ${j+1}/${nGroups} ${k}/${nChunksPerGroup/2}`);\n                        return r;\n                    }));\n                }\n            }\n\n            const res = await Promise.all(opPromises);\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n                    const resChunk = res.shift();\n                    chunks[o1] = resChunk[0];\n                    chunks[o2] = resChunk[1];\n                }\n            }\n        }\n\n        if (buff instanceof BigBuffer) {\n            buffOut = new BigBuffer(nPoints*sOut);\n        } else {\n            buffOut = new Uint8Array(nPoints*sOut);\n        }\n        if (inverse) {\n            buffOut.set(chunks[0].slice((pointsInChunk-1)*sOut));\n            let p= sOut;\n            for (let i=nChunks-1; i>0; i--) {\n                buffOut.set(chunks[i], p);\n                p += pointsInChunk*sOut;\n                delete chunks[i];  // Liberate mem\n            }\n            buffOut.set(chunks[0].slice(0, (pointsInChunk-1)*sOut), p);\n            delete chunks[0];\n        } else {\n            for (let i=0; i<nChunks; i++) {\n                buffOut.set(chunks[i], pointsInChunk*sOut*i);\n                delete chunks[i];\n            }\n        }\n\n        if (returnArray) {\n            return buffer2array(buffOut, sOut);\n        } else {\n            return buffOut;\n        }\n    }\n\n    async function _fftExt(buff, inType, outType, logger, loggerTxt) {\n        let b1, b2;\n        b1 = buff.slice( 0 , buff.byteLength/2);\n        b2 = buff.slice( buff.byteLength/2, buff.byteLength);\n\n        const promises = [];\n\n        [b1, b2] = await _fftJoinExt(b1, b2, \"fftJoinExt\", Fr.one, Fr.shift, inType, \"jacobian\", logger, loggerTxt);\n\n        promises.push( _fft(b1, false, \"jacobian\", outType, logger, loggerTxt));\n        promises.push( _fft(b2, false, \"jacobian\", outType, logger, loggerTxt));\n\n        const res1 = await Promise.all(promises);\n\n        let buffOut;\n        if (res1[0].byteLength > (1<<28)) {\n            buffOut = new BigBuffer(res1[0].byteLength*2);\n        } else {\n            buffOut = new Uint8Array(res1[0].byteLength*2);\n        }\n\n        buffOut.set(res1[0]);\n        buffOut.set(res1[1], res1[0].byteLength);\n\n        return buffOut;\n    }\n\n    async function _fftExtInv(buff, inType, outType, logger, loggerTxt) {\n        let b1, b2;\n        b1 = buff.slice( 0 , buff.byteLength/2);\n        b2 = buff.slice( buff.byteLength/2, buff.byteLength);\n\n        const promises = [];\n\n        promises.push( _fft(b1, true, inType, \"jacobian\", logger, loggerTxt));\n        promises.push( _fft(b2, true, inType, \"jacobian\", logger, loggerTxt));\n\n        [b1, b2] = await Promise.all(promises);\n\n        const res1 = await _fftJoinExt(b1, b2, \"fftJoinExtInv\", Fr.one, Fr.shiftInv, \"jacobian\", outType, logger, loggerTxt);\n\n        let buffOut;\n        if (res1[0].byteLength > (1<<28)) {\n            buffOut = new BigBuffer(res1[0].byteLength*2);\n        } else {\n            buffOut = new Uint8Array(res1[0].byteLength*2);\n        }\n\n        buffOut.set(res1[0]);\n        buffOut.set(res1[1], res1[0].byteLength);\n\n        return buffOut;\n    }\n\n\n    async function _fftJoinExt(buff1, buff2, fn, first, inc, inType, outType, logger, loggerTxt) {\n        const MAX_CHUNK_SIZE = 1<<16;\n        const MIN_CHUNK_SIZE = 1<<4;\n\n        let fnName;\n        let fnIn2Mid, fnMid2Out;\n        let sOut, sIn, sMid;\n\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g1m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            sMid = G.F.n8*3;\n            fnName = \"g1m_\"+fn;\n            if (outType == \"affine\") {\n                fnMid2Out = \"g1m_batchToAffine\";\n                sOut = G.F.n8*2;\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n                fnIn2Mid = \"g2m_batchToJacobian\";\n            } else {\n                sIn = G.F.n8*3;\n            }\n            fnName = \"g2m_\"+fn;\n            sMid = G.F.n8*3;\n            if (outType == \"affine\") {\n                fnMid2Out = \"g2m_batchToAffine\";\n                sOut = G.F.n8*2;\n            } else {\n                sOut = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = Fr.n8;\n            sOut = Fr.n8;\n            sMid = Fr.n8;\n            fnName = \"frm_\" + fn;\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        if (buff1.byteLength != buff2.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const nPoints = Math.floor(buff1.byteLength / sIn);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        let chunkSize = Math.floor(nPoints /tm.concurrency);\n        if (chunkSize < MIN_CHUNK_SIZE) chunkSize = MIN_CHUNK_SIZE;\n        if (chunkSize > MAX_CHUNK_SIZE) chunkSize = MAX_CHUNK_SIZE;\n\n        const opPromises = [];\n\n        for (let i=0; i<nPoints; i += chunkSize) {\n            if (logger) logger.debug(`${loggerTxt}: fftJoinExt Start: ${i}/${nPoints}`);\n            const n= Math.min(nPoints - i, chunkSize);\n\n            const firstChunk = Fr.mul(first, Fr.exp( inc, i));\n            const task = [];\n\n            const b1 = buff1.slice(i*sIn, (i+n)*sIn);\n            const b2 = buff2.slice(i*sIn, (i+n)*sIn);\n\n            task.push({cmd: \"ALLOC\", var: 0, len: sMid*n});\n            task.push({cmd: \"SET\", var: 0, buff: b1});\n            task.push({cmd: \"ALLOC\", var: 1, len: sMid*n});\n            task.push({cmd: \"SET\", var: 1, buff: b2});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: firstChunk});\n            task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n            if (fnIn2Mid) {\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:0}, {val: n}, {var: 0}]});\n                task.push({cmd: \"CALL\", fnName:fnIn2Mid, params: [{var:1}, {val: n}, {var: 1}]});\n            }\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {var: 1},\n                {val: n},\n                {var: 2},\n                {var: 3},\n                {val: Fr.s},\n            ]});\n            if (fnMid2Out) {\n                task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:0}, {val: n}, {var: 0}]});\n                task.push({cmd: \"CALL\", fnName:fnMid2Out, params: [{var:1}, {val: n}, {var: 1}]});\n            }\n            task.push({cmd: \"GET\", out: 0, var: 0, len: n*sOut});\n            task.push({cmd: \"GET\", out: 1, var: 1, len: n*sOut});\n            opPromises.push(\n                tm.queueAction(task).then( (r) => {\n                    if (logger) logger.debug(`${loggerTxt}: fftJoinExt End: ${i}/${nPoints}`);\n                    return r;\n                })\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut1;\n        let fullBuffOut2;\n        if (nPoints * sOut > 1<<28) {\n            fullBuffOut1 = new BigBuffer(nPoints*sOut);\n            fullBuffOut2 = new BigBuffer(nPoints*sOut);\n        } else {\n            fullBuffOut1 = new Uint8Array(nPoints*sOut);\n            fullBuffOut2 = new Uint8Array(nPoints*sOut);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut1.set(result[i][0], p);\n            fullBuffOut2.set(result[i][1], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return [fullBuffOut1, fullBuffOut2];\n    }\n\n\n    G.fft = async function(buff, inType, outType, logger, loggerTxt) {\n        return await _fft(buff, false, inType, outType, logger, loggerTxt);\n    };\n\n    G.ifft = async function(buff, inType, outType, logger, loggerTxt) {\n        return await _fft(buff, true, inType, outType, logger, loggerTxt);\n    };\n\n    G.lagrangeEvaluations = async function (buff, inType, outType, logger, loggerTxt) {\n        inType = inType || \"affine\";\n        outType = outType || \"affine\";\n\n        let sIn;\n        if (groupName == \"G1\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n            } else {\n                sIn = G.F.n8*3;\n            }\n        } else if (groupName == \"G2\") {\n            if (inType == \"affine\") {\n                sIn = G.F.n8*2;\n            } else {\n                sIn = G.F.n8*3;\n            }\n        } else if (groupName == \"Fr\") {\n            sIn = Fr.n8;\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = buff.byteLength /sIn;\n        const bits = log2(nPoints);\n\n        if ((2 ** bits)*sIn != buff.byteLength) {\n            if (logger) logger.error(\"lagrangeEvaluations iinvalid input size\");\n            throw new Error(\"lagrangeEvaluations invalid Input size\");\n        }\n\n        if (bits <= Fr.s) {\n            return await G.ifft(buff, inType, outType, logger, loggerTxt);\n        }\n\n        if (bits > Fr.s+1) {\n            if (logger) logger.error(\"lagrangeEvaluations input too big\");\n            throw new Error(\"lagrangeEvaluations input too big\");\n        }\n\n        let t0 = buff.slice(0, buff.byteLength/2);\n        let t1 = buff.slice(buff.byteLength/2, buff.byteLength);\n\n\n        const shiftToSmallM = Fr.exp(Fr.shift, nPoints/2);\n        const sConst = Fr.inv( Fr.sub(Fr.one, shiftToSmallM));\n\n        [t0, t1] = await _fftJoinExt(t0, t1, \"prepareLagrangeEvaluation\", sConst, Fr.shiftInv, inType, \"jacobian\", logger, loggerTxt + \" prep\");\n\n        const promises = [];\n\n        promises.push( _fft(t0, true, \"jacobian\", outType, logger, loggerTxt + \" t0\"));\n        promises.push( _fft(t1, true, \"jacobian\", outType, logger, loggerTxt + \" t1\"));\n\n        [t0, t1] = await Promise.all(promises);\n\n        let buffOut;\n        if (t0.byteLength > (1<<28)) {\n            buffOut = new BigBuffer(t0.byteLength*2);\n        } else {\n            buffOut = new Uint8Array(t0.byteLength*2);\n        }\n\n        buffOut.set(t0);\n        buffOut.set(t1, t0.byteLength);\n\n        return buffOut;\n    };\n\n    G.fftMix = async function fftMix(buff) {\n        const sG = G.F.n8*3;\n        let fnName, fnFFTJoin;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftMix\";\n            fnFFTJoin = \"g1m_fftJoin\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftMix\";\n            fnFFTJoin = \"g2m_fftJoin\";\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_fftMix\";\n            fnFFTJoin = \"frm_fftJoin\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buff.byteLength / sG);\n        const power = log2(nPoints);\n\n        let nChunks = 1 << log2(tm.concurrency);\n\n        if (nPoints <= nChunks*2) nChunks = 1;\n\n        const pointsPerChunk = nPoints / nChunks;\n\n        const powerChunk = log2(pointsPerChunk);\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [];\n            const b = buff.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b});\n            for (let j=1; j<=powerChunk; j++) {\n                task.push({cmd: \"CALL\", fnName: fnName, params: [\n                    {var: 0},\n                    {val: pointsPerChunk},\n                    {val: j}\n                ]});\n            }\n            task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n        }\n\n        const result = await Promise.all(opPromises);\n\n        const chunks = [];\n        for (let i=0; i<result.length; i++) chunks[i] = result[i][0];\n\n\n        for (let i = powerChunk+1; i<=power; i++) {\n            const nGroups = 1 << (power - i);\n            const nChunksPerGroup = nChunks / nGroups;\n            const opPromises = [];\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const first = Fr.exp( Fr.w[i], k*pointsPerChunk);\n                    const inc = Fr.w[i];\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n\n                    const task = [];\n                    task.push({cmd: \"ALLOCSET\", var: 0, buff: chunks[o1]});\n                    task.push({cmd: \"ALLOCSET\", var: 1, buff: chunks[o2]});\n                    task.push({cmd: \"ALLOCSET\", var: 2, buff: first});\n                    task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n                    task.push({cmd: \"CALL\", fnName: fnFFTJoin,  params:[\n                        {var: 0},\n                        {var: 1},\n                        {val: pointsPerChunk},\n                        {var: 2},\n                        {var: 3}\n                    ]});\n                    task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n                    task.push({cmd: \"GET\", out: 1, var: 1, len: pointsPerChunk*sG});\n                    opPromises.push(tm.queueAction(task));\n                }\n            }\n\n            const res = await Promise.all(opPromises);\n            for (let j=0; j<nGroups; j++) {\n                for (let k=0; k <nChunksPerGroup/2; k++) {\n                    const o1 = j*nChunksPerGroup + k;\n                    const o2 = j*nChunksPerGroup + k + nChunksPerGroup/2;\n                    const resChunk = res.shift();\n                    chunks[o1] = resChunk[0];\n                    chunks[o2] = resChunk[1];\n                }\n            }\n        }\n\n        let fullBuffOut;\n        if (buff instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sG);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sG);\n        }\n        let p =0;\n        for (let i=0; i<nChunks; i++) {\n            fullBuffOut.set(chunks[i], p);\n            p+=chunks[i].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n\n    G.fftJoin = async function fftJoin(buff1, buff2, first, inc) {\n        const sG = G.F.n8*3;\n        let fnName;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftJoin\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftJoin\";\n        } else if (groupName == \"Fr\") {\n            fnName = \"frm_fftJoin\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        if (buff1.byteLength != buff2.byteLength) {\n            throw new Error(\"Invalid buffer size\");\n        }\n        const nPoints = Math.floor(buff1.byteLength / sG);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        let nChunks = 1 << log2(tm.concurrency);\n        if (nPoints <= nChunks*2) nChunks = 1;\n\n        const pointsPerChunk = nPoints / nChunks;\n\n\n        const opPromises = [];\n        for (let i=0; i<nChunks; i++) {\n            const task = [];\n\n            const firstChunk = Fr.mul(first, Fr.exp(inc, i*pointsPerChunk));\n            const b1 = buff1.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            const b2 = buff2.slice((i* pointsPerChunk)*sG, ((i+1)* pointsPerChunk)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b1});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: b2});\n            task.push({cmd: \"ALLOCSET\", var: 2, buff: firstChunk});\n            task.push({cmd: \"ALLOCSET\", var: 3, buff: inc});\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {var: 1},\n                {val: pointsPerChunk},\n                {var: 2},\n                {var: 3}\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 0, len: pointsPerChunk*sG});\n            task.push({cmd: \"GET\", out: 1, var: 1, len: pointsPerChunk*sG});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut1;\n        let fullBuffOut2;\n        if (buff1 instanceof BigBuffer) {\n            fullBuffOut1 = new BigBuffer(nPoints*sG);\n            fullBuffOut2 = new BigBuffer(nPoints*sG);\n        } else {\n            fullBuffOut1 = new Uint8Array(nPoints*sG);\n            fullBuffOut2 = new Uint8Array(nPoints*sG);\n        }\n\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut1.set(result[i][0], p);\n            fullBuffOut2.set(result[i][1], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return [fullBuffOut1, fullBuffOut2];\n    };\n\n\n\n    G.fftFinal =  async function fftFinal(buff, factor) {\n        const sG = G.F.n8*3;\n        const sGout = G.F.n8*2;\n        let fnName, fnToAffine;\n        if (groupName == \"G1\") {\n            fnName = \"g1m_fftFinal\";\n            fnToAffine = \"g1m_batchToAffine\";\n        } else if (groupName == \"G2\") {\n            fnName = \"g2m_fftFinal\";\n            fnToAffine = \"g2m_batchToAffine\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n\n        const nPoints = Math.floor(buff.byteLength / sG);\n        if (nPoints != 1 << log2(nPoints)) {\n            throw new Error(\"Invalid number of points\");\n        }\n\n        const pointsPerChunk = Math.floor(nPoints / tm.concurrency);\n\n        const opPromises = [];\n        for (let i=0; i<tm.concurrency; i++) {\n            let n;\n            if (i< tm.concurrency-1) {\n                n = pointsPerChunk;\n            } else {\n                n = nPoints - i*pointsPerChunk;\n            }\n            if (n==0) continue;\n            const task = [];\n            const b = buff.slice((i* pointsPerChunk)*sG, (i*pointsPerChunk+n)*sG);\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: b});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: factor});\n            task.push({cmd: \"CALL\", fnName: fnName, params: [\n                {var: 0},\n                {val: n},\n                {var: 1},\n            ]});\n            task.push({cmd: \"CALL\", fnName: fnToAffine, params: [\n                {var: 0},\n                {val: n},\n                {var: 0},\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 0, len: n*sGout});\n            opPromises.push(\n                tm.queueAction(task)\n            );\n\n        }\n\n        const result = await Promise.all(opPromises);\n\n        let fullBuffOut;\n        if (buff instanceof BigBuffer) {\n            fullBuffOut = new BigBuffer(nPoints*sGout);\n        } else {\n            fullBuffOut = new Uint8Array(nPoints*sGout);\n        }\n\n        let p =0;\n        for (let i=result.length-1; i>=0; i--) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    };\n}\n", "import { buildBls12381 as buildBls12381wasm } from \"wasmcurves\";\nimport buildEngine from \"./engine.js\";\nimport * as Scalar from \"./scalar.js\";\nimport { ModuleBuilder } from \"wasmbuilder\";\n\nglobalThis.curve_bls12381 = null;\n\nexport default async function buildBls12381(singleThread, plugins) {\n\n    const moduleBuilder = new ModuleBuilder();\n    moduleBuilder.setMemory(25);\n    buildBls12381wasm(moduleBuilder);\n\n    if (plugins) plugins(moduleBuilder);\n\n    const bls12381wasm = {};\n\n    bls12381wasm.code = moduleBuilder.build();\n    bls12381wasm.pq = moduleBuilder.modules.f1m.pq;\n    bls12381wasm.pr = moduleBuilder.modules.frm.pq;\n    bls12381wasm.pG1gen = moduleBuilder.modules.bls12381.pG1gen;\n    bls12381wasm.pG1zero = moduleBuilder.modules.bls12381.pG1zero;\n    bls12381wasm.pG1b = moduleBuilder.modules.bls12381.pG1b;\n    bls12381wasm.pG2gen = moduleBuilder.modules.bls12381.pG2gen;\n    bls12381wasm.pG2zero = moduleBuilder.modules.bls12381.pG2zero;\n    bls12381wasm.pG2b = moduleBuilder.modules.bls12381.pG2b;\n    bls12381wasm.pOneT = moduleBuilder.modules.bls12381.pOneT;\n    bls12381wasm.prePSize = moduleBuilder.modules.bls12381.prePSize;\n    bls12381wasm.preQSize = moduleBuilder.modules.bls12381.preQSize;\n    bls12381wasm.n8q = 48;\n    bls12381wasm.n8r = 32;\n    bls12381wasm.q = moduleBuilder.modules.bls12381.q;\n    bls12381wasm.r = moduleBuilder.modules.bls12381.r;\n\n\n    if ((!singleThread) && (globalThis.curve_bls12381)) return globalThis.curve_bls12381;\n    const params = {\n        name: \"bls12381\",\n        wasm: bls12381wasm,\n        q: Scalar.e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16),\n        r: Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16),\n        n8q: 48,\n        n8r: 32,\n        cofactorG1: Scalar.e(\"0x396c8c005555e1568c00aaab0000aaab\", 16),\n        cofactorG2: Scalar.e(\"0x5d543a95414e7f1091d50792876a202cd91de4547085abaa68a205b2e5a7ddfa628f1cb4d9e82ef21537e293a6691ae1616ec6e786f0c70cf1c38e31c7238e5\", 16),\n        singleThread: singleThread ? true : false\n    };\n\n    const curve = await buildEngine(params);\n    curve.terminate = async function () {\n        if (!params.singleThread) {\n            globalThis.curve_bls12381 = null;\n            await this.tm.terminate();\n        }\n    };\n\n    if (!singleThread) {\n        globalThis.curve_bls12381 = curve;\n    }\n\n    return curve;\n}\n\n", "import * as Scalar from \"./scalar.js\";\nimport {default as buildBn128} from \"./bn128.js\";\nimport {default as buildBls12381} from \"./bls12381.js\";\n\nconst bls12381r = Scalar.e(\"73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001\", 16);\nconst bn128r = Scalar.e(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\");\n\nconst bls12381q = Scalar.e(\"1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab\", 16);\nconst bn128q = Scalar.e(\"21888242871839275222246405745257275088696311157297823662689037894645226208583\");\n\nexport async function getCurveFromR(r, singleThread, plugins) {\n    let curve;\n    if (Scalar.eq(r, bn128r)) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if (Scalar.eq(r, bls12381r)) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(r)}`);\n    }\n    return curve;\n}\n\nexport async function getCurveFromQ(q, singleThread, plugins) {\n    let curve;\n    if (Scalar.eq(q, bn128q)) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if (Scalar.eq(q, bls12381q)) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${Scalar.toString(q, 16)}`);\n    }\n    return curve;\n}\n\nexport async function getCurveFromName(name, singleThread, plugins) {\n    let curve;\n    const normName = normalizeName(name);\n    if ([\"BN128\", \"BN254\", \"ALTBN128\"].indexOf(normName) >= 0) {\n        curve = await buildBn128(singleThread, plugins);\n    } else if ([\"BLS12381\"].indexOf(normName) >= 0) {\n        curve = await buildBls12381(singleThread, plugins);\n    } else {\n        throw new Error(`Curve not supported: ${name}`);\n    }\n    return curve;\n\n    function normalizeName(n) {\n        return n.toUpperCase().match(/[A-Za-z0-9]+/g).join(\"\");\n    }\n\n}\n", "const SUBARRAY_SIZE = 0x40000;\n\nconst BigArrayHandler = {\n    get: function(obj, prop) {\n        if (!isNaN(prop)) {\n            return obj.getElement(prop);\n        } else return obj[prop];\n    },\n    set: function(obj, prop, value) {\n        if (!isNaN(prop)) {\n            return obj.setElement(prop, value);\n        } else {\n            obj[prop] = value;\n            return true;\n        }\n    }\n};\n\nclass _BigArray {\n    constructor (initSize) {\n        this.length = initSize || 0;\n        this.arr = new Array(SUBARRAY_SIZE);\n\n        for (let i=0; i<initSize; i+=SUBARRAY_SIZE) {\n            this.arr[i/SUBARRAY_SIZE] = new Array(Math.min(SUBARRAY_SIZE, initSize - i));\n        }\n        return this;\n    }\n    push () {\n        for (let i=0; i<arguments.length; i++) {\n            this.setElement (this.length, arguments[i]);\n        }\n    }\n\n    slice (f, t) {\n        const arr = new Array(t-f);\n        for (let i=f; i< t; i++) arr[i-f] = this.getElement(i);\n        return arr;\n    }\n    getElement(idx) {\n        idx = parseInt(idx);\n        const idx1 = Math.floor(idx / SUBARRAY_SIZE);\n        const idx2 = idx % SUBARRAY_SIZE;\n        return this.arr[idx1] ? this.arr[idx1][idx2] : undefined;\n    }\n    setElement(idx, value) {\n        idx = parseInt(idx);\n        const idx1 = Math.floor(idx / SUBARRAY_SIZE);\n        if (!this.arr[idx1]) {\n            this.arr[idx1] = new Array(SUBARRAY_SIZE);\n        }\n        const idx2 = idx % SUBARRAY_SIZE;\n        this.arr[idx1][idx2] = value;\n        if (idx >= this.length) this.length = idx+1;\n        return true;\n    }\n    getKeys() {\n        const newA = new BigArray();\n        for (let i=0; i<this.arr.length; i++) {\n            if (this.arr[i]) {\n                for (let j=0; j<this.arr[i].length; j++) {\n                    if (typeof this.arr[i][j] !== \"undefined\") {\n                        newA.push(i*SUBARRAY_SIZE+j);\n                    }\n                }\n            }\n        }\n        return newA;\n    }\n}\n\nclass BigArray {\n    constructor( initSize ) {\n        const obj = new _BigArray(initSize);\n        const extObj = new Proxy(obj, BigArrayHandler);\n        return extObj;\n    }\n}\n\nexport default BigArray;\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport {readR1cs}  from \"r1csfile\";\nimport { stringifyBigIntsWithField } from \"./misc.js\";\n\n\nexport default async function r1csExportJson(r1csFileName, logger) {\n\n    const cir = await readR1cs(r1csFileName, true, true, true, logger);\n    const Fr=cir.curve.Fr;\n    delete cir.curve;\n    delete cir.F;\n\n    return stringifyBigIntsWithField(Fr, cir);\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexport {default as calculate} from \"./wtns_calculate.js\";\nexport {default as debug} from \"./wtns_debug.js\";\nexport {default as exportJson} from \"./wtns_export_json.js\";\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fastFile from \"fastfile\";\nimport { WitnessCalculatorBuilder } from \"circom_runtime\";\nimport * as wtnsUtils from \"./wtns_utils.js\";\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport loadSyms from \"./loadsyms.js\";\nimport {  utils }   from \"ffjavascript\";\nconst {unstringifyBigInts} = utils;\n\n\nexport default async function wtnsDebug(_input, wasmFileName, wtnsFileName, symName, options, logger) {\n\n    const input = unstringifyBigInts(_input);\n\n    const fdWasm = await fastFile.readExisting(wasmFileName);\n    const wasm = await fdWasm.read(fdWasm.totalSize);\n    await fdWasm.close();\n\n\n    let wcOps = {\n        sanityCheck: true\n    };\n    let sym = await loadSyms(symName);\n    if (options.set) {\n        if (!sym) sym = await loadSyms(symName);\n        wcOps.logSetSignal= function(labelIdx, value) {\n            // The line below splits the arrow log into 2 strings to avoid some Secure ECMAScript issues\n            if (logger) logger.info(\"SET \" + sym.labelIdx2Name[labelIdx] + \" <\" + \"-- \" + value.toString());\n        };\n    }\n    if (options.get) {\n        if (!sym) sym = await loadSyms(symName);\n        wcOps.logGetSignal= function(varIdx, value) {\n            // The line below splits the arrow log into 2 strings to avoid some Secure ECMAScript issues\n            if (logger) logger.info(\"GET \" + sym.labelIdx2Name[varIdx] + \" --\" + \"> \" + value.toString());\n        };\n    }\n    if (options.trigger) {\n        if (!sym) sym = await loadSyms(symName);\n        wcOps.logStartComponent= function(cIdx) {\n            if (logger) logger.info(\"START: \" + sym.componentIdx2Name[cIdx]);\n        };\n        wcOps.logFinishComponent= function(cIdx) {\n            if (logger) logger.info(\"FINISH: \" + sym.componentIdx2Name[cIdx]);\n        };\n    }\n    wcOps.sym = sym;\n\n    const wc = await WitnessCalculatorBuilder(wasm, wcOps);\n    const w = await wc.calculateWitness(input);\n\n    const fdWtns = await binFileUtils.createBinFile(wtnsFileName, \"wtns\", 2, 2);\n\n    await wtnsUtils.write(fdWtns, w, wc.prime);\n\n    await fdWtns.close();\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as fastFile from \"fastfile\";\n\nexport default async function loadSymbols(symFileName) {\n    const sym = {\n        labelIdx2Name: [ \"one\" ],\n        varIdx2Name: [ \"one\" ],\n        componentIdx2Name: []\n    };\n    const fd = await fastFile.readExisting(symFileName);\n    const buff = await fd.read(fd.totalSize);\n    const symsStr = new TextDecoder(\"utf-8\").decode(buff);\n    const lines = symsStr.split(\"\\n\");\n    for (let i=0; i<lines.length; i++) {\n        const arr = lines[i].split(\",\");\n        if (arr.length!=4) continue;\n        if (sym.varIdx2Name[arr[1]]) {\n            sym.varIdx2Name[arr[1]] += \"|\" + arr[3];\n        } else {\n            sym.varIdx2Name[arr[1]] = arr[3];\n        }\n        sym.labelIdx2Name[arr[0]] = arr[3];\n        if (!sym.componentIdx2Name[arr[2]]) {\n            sym.componentIdx2Name[arr[2]] = extractComponent(arr[3]);\n        }\n    }\n\n    await fd.close();\n\n    return sym;\n\n    function extractComponent(name) {\n        const arr = name.split(\".\");\n        arr.pop(); // Remove the lasr element\n        return arr.join(\".\");\n    }\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport {read} from \"./wtns_utils.js\";\n\nexport default async function wtnsExportJson(wtnsFileName) {\n\n    const w = await read(wtnsFileName);\n\n    return w;\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexport {default as newZKey} from \"./zkey_new.js\";\nexport {default as exportBellman} from \"./zkey_export_bellman.js\";\nexport {default as importBellman} from \"./zkey_import_bellman.js\";\nexport {default as verifyFromR1cs} from \"./zkey_verify_fromr1cs.js\";\nexport {default as verifyFromInit} from \"./zkey_verify_frominit.js\";\nexport {default as contribute} from \"./zkey_contribute.js\";\nexport {default as beacon} from \"./zkey_beacon.js\";\nexport {default as exportJson} from \"./zkey_export_json.js\";\nexport {default as bellmanContribute} from \"./zkey_bellman_contribute.js\";\nexport {default as exportVerificationKey} from \"./zkey_export_verificationkey.js\";\nexport {default as exportSolidityVerifier} from \"./zkey_export_solidityverifier.js\";\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport {readR1csHeader} from \"r1csfile\";\nimport * as utils from \"./powersoftau_utils.js\";\nimport {\n    readBinFile,\n    createBinFile,\n    readSection,\n    writeBigInt,\n    startWriteSection,\n    endWriteSection,\n} from \"@iden3/binfileutils\";\nimport { log2, formatHash } from \"./misc.js\";\nimport { Scalar, BigBuffer } from \"ffjavascript\";\nimport Blake2b from \"blake2b-wasm\";\nimport BigArray from \"./bigarray.js\";\n\n\nexport default async function newZKey(r1csName, ptauName, zkeyName, logger) {\n\n    const TAU_G1 = 0;\n    const TAU_G2 = 1;\n    const ALPHATAU_G1 = 2;\n    const BETATAU_G1 = 3;\n    await Blake2b.ready();\n    const csHasher = Blake2b(64);\n\n    const {fd: fdPTau, sections: sectionsPTau} = await readBinFile(ptauName, \"ptau\", 1, 1<<22, 1<<24);\n    const {curve, power} = await utils.readPTauHeader(fdPTau, sectionsPTau);\n    const {fd: fdR1cs, sections: sectionsR1cs} = await readBinFile(r1csName, \"r1cs\", 1, 1<<22, 1<<24);\n    const r1cs = await readR1csHeader(fdR1cs, sectionsR1cs, false);\n\n    const fdZKey = await createBinFile(zkeyName, \"zkey\", 1, 10, 1<<22, 1<<24);\n\n    const sG1 = curve.G1.F.n8*2;\n    const sG2 = curve.G2.F.n8*2;\n\n    if (r1cs.prime != curve.r) {\n        if (logger) logger.error(\"r1cs curve does not match powers of tau ceremony curve\");\n        return -1;\n    }\n\n    const cirPower = log2(r1cs.nConstraints + r1cs.nPubInputs + r1cs.nOutputs +1 -1) +1;\n\n    if (cirPower > power) {\n        if (logger) logger.error(`circuit too big for this power of tau ceremony. ${r1cs.nConstraints}*2 > 2**${power}`);\n        return -1;\n    }\n\n    if (!sectionsPTau[12]) {\n        if (logger) logger.error(\"Powers of tau is not prepared.\");\n        return -1;\n    }\n\n    const nPublic = r1cs.nOutputs + r1cs.nPubInputs;\n    const domainSize = 2 ** cirPower;\n\n    // Write the header\n    ///////////\n    await startWriteSection(fdZKey, 1);\n    await fdZKey.writeULE32(1); // Groth\n    await endWriteSection(fdZKey);\n\n    // Write the Groth header section\n    ///////////\n\n    await startWriteSection(fdZKey, 2);\n    const primeQ = curve.q;\n    const n8q = (Math.floor( (Scalar.bitLength(primeQ) - 1) / 64) +1)*8;\n\n    const primeR = curve.r;\n    const n8r = (Math.floor( (Scalar.bitLength(primeR) - 1) / 64) +1)*8;\n    const Rr = Scalar.mod(Scalar.shl(1, n8r*8), primeR);\n    const R2r = curve.Fr.e(Scalar.mod(Scalar.mul(Rr,Rr), primeR));\n\n    await fdZKey.writeULE32(n8q);\n    await writeBigInt(fdZKey, primeQ, n8q);\n    await fdZKey.writeULE32(n8r);\n    await writeBigInt(fdZKey, primeR, n8r);\n    await fdZKey.writeULE32(r1cs.nVars);                         // Total number of bars\n    await fdZKey.writeULE32(nPublic);                       // Total number of public vars (not including ONE)\n    await fdZKey.writeULE32(domainSize);                  // domainSize\n\n    let bAlpha1;\n    bAlpha1 = await fdPTau.read(sG1, sectionsPTau[4][0].p);\n    await fdZKey.write(bAlpha1);\n    bAlpha1 = await curve.G1.batchLEMtoU(bAlpha1);\n    csHasher.update(bAlpha1);\n\n    let bBeta1;\n    bBeta1 = await fdPTau.read(sG1, sectionsPTau[5][0].p);\n    await fdZKey.write(bBeta1);\n    bBeta1 = await curve.G1.batchLEMtoU(bBeta1);\n    csHasher.update(bBeta1);\n\n    let bBeta2;\n    bBeta2 = await fdPTau.read(sG2, sectionsPTau[6][0].p);\n    await fdZKey.write(bBeta2);\n    bBeta2 = await curve.G2.batchLEMtoU(bBeta2);\n    csHasher.update(bBeta2);\n\n    const bg1 = new Uint8Array(sG1);\n    curve.G1.toRprLEM(bg1, 0, curve.G1.g);\n    const bg2 = new Uint8Array(sG2);\n    curve.G2.toRprLEM(bg2, 0, curve.G2.g);\n    const bg1U = new Uint8Array(sG1);\n    curve.G1.toRprUncompressed(bg1U, 0, curve.G1.g);\n    const bg2U = new Uint8Array(sG2);\n    curve.G2.toRprUncompressed(bg2U, 0, curve.G2.g);\n\n    await fdZKey.write(bg2);        // gamma2\n    await fdZKey.write(bg1);        // delta1\n    await fdZKey.write(bg2);        // delta2\n    csHasher.update(bg2U);      // gamma2\n    csHasher.update(bg1U);      // delta1\n    csHasher.update(bg2U);      // delta2\n    await endWriteSection(fdZKey);\n\n    if (logger) logger.info(\"Reading r1cs\");\n    let sR1cs = await readSection(fdR1cs, sectionsR1cs, 2);\n\n    const A = new BigArray(r1cs.nVars);\n    const B1 = new BigArray(r1cs.nVars);\n    const B2 = new BigArray(r1cs.nVars);\n    const C = new BigArray(r1cs.nVars- nPublic -1);\n    const IC = new Array(nPublic+1);\n\n    if (logger) logger.info(\"Reading tauG1\");\n    let sTauG1 = await readSection(fdPTau, sectionsPTau, 12, (domainSize -1)*sG1, domainSize*sG1);\n    if (logger) logger.info(\"Reading tauG2\");\n    let sTauG2 = await readSection(fdPTau, sectionsPTau, 13, (domainSize -1)*sG2, domainSize*sG2);\n    if (logger) logger.info(\"Reading alphatauG1\");\n    let sAlphaTauG1 = await readSection(fdPTau, sectionsPTau, 14, (domainSize -1)*sG1, domainSize*sG1);\n    if (logger) logger.info(\"Reading betatauG1\");\n    let sBetaTauG1 = await readSection(fdPTau, sectionsPTau, 15, (domainSize -1)*sG1, domainSize*sG1);\n\n    await processConstraints();\n\n    await composeAndWritePoints(3, \"G1\", IC, \"IC\");\n\n    await writeHs();\n\n    await hashHPoints();\n\n    await composeAndWritePoints(8, \"G1\", C, \"C\");\n    await composeAndWritePoints(5, \"G1\", A, \"A\");\n    await composeAndWritePoints(6, \"G1\", B1, \"B1\");\n    await composeAndWritePoints(7, \"G2\", B2, \"B2\");\n\n    const csHash = csHasher.digest();\n    // Contributions section\n    await startWriteSection(fdZKey, 10);\n    await fdZKey.write(csHash);\n    await fdZKey.writeULE32(0);\n    await endWriteSection(fdZKey);\n\n    if (logger) logger.info(formatHash(csHash, \"Circuit hash: \"));\n\n\n    await fdZKey.close();\n    await fdR1cs.close();\n    await fdPTau.close();\n\n    return csHash;\n\n    async function writeHs() {\n        await startWriteSection(fdZKey, 9);\n        const buffOut = new BigBuffer(domainSize*sG1);\n        if (cirPower < curve.Fr.s) {\n            let sTauG1 = await readSection(fdPTau, sectionsPTau, 12, (domainSize*2-1)*sG1, domainSize*2*sG1);\n            for (let i=0; i< domainSize; i++) {\n                if ((logger)&&(i%10000 == 0)) logger.debug(`spliting buffer: ${i}/${domainSize}`);\n                const buff = sTauG1.slice( (i*2+1)*sG1, (i*2+1)*sG1 + sG1 );\n                buffOut.set(buff, i*sG1);\n            }\n        } else if (cirPower == curve.Fr.s) {\n            const o = sectionsPTau[12][0].p + ((2 ** (cirPower+1)) -1)*sG1;\n            await fdPTau.readToBuffer(buffOut, 0, domainSize*sG1, o + domainSize*sG1);\n        } else {\n            if (logger) logger.error(\"Circuit too big\");\n            throw new Error(\"Circuit too big for this curve\");\n        }\n        await fdZKey.write(buffOut);\n        await endWriteSection(fdZKey);\n    }\n\n    async function processConstraints() {\n        const buffCoeff = new Uint8Array(12 + curve.Fr.n8);\n        const buffCoeffV = new DataView(buffCoeff.buffer);\n        const bOne = new Uint8Array(curve.Fr.n8);\n        curve.Fr.toRprLE(bOne, 0, curve.Fr.e(1));\n\n        let r1csPos = 0;\n\n        function r1cs_readULE32() {\n            const buff = sR1cs.slice(r1csPos, r1csPos+4);\n            r1csPos += 4;\n            const buffV = new DataView(buff.buffer);\n            return buffV.getUint32(0, true);\n        }\n\n        const coefs = new BigArray();\n        for (let c=0; c<r1cs.nConstraints; c++) {\n            if ((logger)&&(c%10000 == 0)) logger.debug(`processing constraints: ${c}/${r1cs.nConstraints}`);\n            const nA = r1cs_readULE32();\n            for (let i=0; i<nA; i++) {\n                const s = r1cs_readULE32();\n                const coefp = r1csPos;\n                r1csPos += curve.Fr.n8;\n\n                const l1t = TAU_G1;\n                const l1 = sG1*c;\n                const l2t = BETATAU_G1;\n                const l2 = sG1*c;\n                if (typeof A[s] === \"undefined\") A[s] = [];\n                A[s].push([l1t, l1, coefp]);\n\n                if (s <= nPublic) {\n                    if (typeof IC[s] === \"undefined\") IC[s] = [];\n                    IC[s].push([l2t, l2, coefp]);\n                } else {\n                    if (typeof C[s- nPublic -1] === \"undefined\") C[s- nPublic -1] = [];\n                    C[s - nPublic -1].push([l2t, l2, coefp]);\n                }\n                coefs.push([0, c, s, coefp]);\n            }\n\n            const nB = r1cs_readULE32();\n            for (let i=0; i<nB; i++) {\n                const s = r1cs_readULE32();\n                const coefp = r1csPos;\n                r1csPos += curve.Fr.n8;\n\n                const l1t = TAU_G1;\n                const l1 = sG1*c;\n                const l2t = TAU_G2;\n                const l2 = sG2*c;\n                const l3t = ALPHATAU_G1;\n                const l3 = sG1*c;\n                if (typeof B1[s] === \"undefined\") B1[s] = [];\n                B1[s].push([l1t, l1, coefp]);\n                if (typeof B2[s] === \"undefined\") B2[s] = [];\n                B2[s].push([l2t, l2, coefp]);\n\n                if (s <= nPublic) {\n                    if (typeof IC[s] === \"undefined\") IC[s] = [];\n                    IC[s].push([l3t, l3, coefp]);\n                } else {\n                    if (typeof C[s- nPublic -1] === \"undefined\") C[s- nPublic -1] = [];\n                    C[s- nPublic -1].push([l3t, l3, coefp]);\n                }\n\n                coefs.push([1, c, s, coefp]);\n            }\n\n            const nC = r1cs_readULE32();\n            for (let i=0; i<nC; i++) {\n                const s = r1cs_readULE32();\n                const coefp = r1csPos;\n                r1csPos += curve.Fr.n8;\n\n                const l1t = TAU_G1;\n                const l1 = sG1*c;\n                if (s <= nPublic) {\n                    if (typeof IC[s] === \"undefined\") IC[s] = [];\n                    IC[s].push([l1t, l1, coefp]);\n                } else {\n                    if (typeof C[s- nPublic -1] === \"undefined\") C[s- nPublic -1] = [];\n                    C[s- nPublic -1].push([l1t, l1, coefp]);\n                }\n            }\n        }\n\n        for (let s = 0; s <= nPublic ; s++) {\n            const l1t = TAU_G1;\n            const l1 = sG1*(r1cs.nConstraints + s);\n            const l2t = BETATAU_G1;\n            const l2 = sG1*(r1cs.nConstraints + s);\n            if (typeof A[s] === \"undefined\") A[s] = [];\n            A[s].push([l1t, l1, -1]);\n            if (typeof IC[s] === \"undefined\") IC[s] = [];\n            IC[s].push([l2t, l2, -1]);\n            coefs.push([0, r1cs.nConstraints + s, s, -1]);\n        }\n\n\n        await startWriteSection(fdZKey, 4);\n\n        const buffSection = new BigBuffer(coefs.length*(12+curve.Fr.n8) + 4);\n\n        const buff4 = new Uint8Array(4);\n        const buff4V = new DataView(buff4.buffer);\n        buff4V.setUint32(0, coefs.length, true);\n        buffSection.set(buff4);\n        let coefsPos = 4;\n        for (let i=0; i<coefs.length; i++) {\n            if ((logger)&&(i%100000 == 0)) logger.debug(`writing coeffs: ${i}/${coefs.length}`);\n            writeCoef(coefs[i]);\n        }\n\n        await fdZKey.write(buffSection);\n        await endWriteSection(fdZKey);\n\n        function writeCoef(c) {\n            buffCoeffV.setUint32(0, c[0], true);\n            buffCoeffV.setUint32(4, c[1], true);\n            buffCoeffV.setUint32(8, c[2], true);\n            let n;\n            if (c[3]>=0) {\n                n = curve.Fr.fromRprLE(sR1cs.slice(c[3], c[3] + curve.Fr.n8), 0);\n            } else {\n                n = curve.Fr.fromRprLE(bOne, 0);\n            }\n            const nR2 = curve.Fr.mul(n, R2r);\n            curve.Fr.toRprLE(buffCoeff, 12, nR2);\n            buffSection.set(buffCoeff, coefsPos);\n            coefsPos += buffCoeff.length;\n        }\n\n    }\n\n    async function composeAndWritePoints(idSection, groupName, arr, sectionName) {\n        const CHUNK_SIZE= 1<<15;\n        const G = curve[groupName];\n\n        hashU32(arr.length);\n        await startWriteSection(fdZKey, idSection);\n\n        let opPromises = [];\n\n        let i=0;\n        while (i<arr.length) {\n\n            let t=0;\n            while ((i<arr.length)&&(t<curve.tm.concurrency)) {\n                if (logger)  logger.debug(`Writing points start ${sectionName}: ${i}/${arr.length}`);\n                let n = 1;\n                let nP = (arr[i] ? arr[i].length : 0);\n                while ((i + n < arr.length) && (nP + (arr[i+n] ? arr[i+n].length : 0) < CHUNK_SIZE) && (n<CHUNK_SIZE)) {\n                    nP += (arr[i+n] ? arr[i+n].length : 0);\n                    n ++;\n                }\n                const subArr = arr.slice(i, i + n);\n                const _i = i;\n                opPromises.push(composeAndWritePointsThread(groupName, subArr, logger, sectionName).then( (r) => {\n                    if (logger)  logger.debug(`Writing points end ${sectionName}: ${_i}/${arr.length}`);\n                    return r;\n                }));\n                i += n;\n                t++;\n            }\n\n            const result = await Promise.all(opPromises);\n\n            for (let k=0; k<result.length; k++) {\n                await fdZKey.write(result[k][0]);\n                const buff = await G.batchLEMtoU(result[k][0]);\n                csHasher.update(buff);\n            }\n            opPromises = [];\n\n        }\n        await endWriteSection(fdZKey);\n\n    }\n\n    async function composeAndWritePointsThread(groupName, arr, logger, sectionName) {\n        const G = curve[groupName];\n        const sGin = G.F.n8*2;\n        const sGmid = G.F.n8*3;\n        const sGout = G.F.n8*2;\n        let fnExp, fnMultiExp, fnBatchToAffine, fnZero;\n        if (groupName == \"G1\") {\n            fnExp = \"g1m_timesScalarAffine\";\n            fnMultiExp = \"g1m_multiexpAffine\";\n            fnBatchToAffine = \"g1m_batchToAffine\";\n            fnZero = \"g1m_zero\";\n        } else if (groupName == \"G2\") {\n            fnExp = \"g2m_timesScalarAffine\";\n            fnMultiExp = \"g2m_multiexpAffine\";\n            fnBatchToAffine = \"g2m_batchToAffine\";\n            fnZero = \"g2m_zero\";\n        } else {\n            throw new Error(\"Invalid group\");\n        }\n        let acc =0;\n        for (let i=0; i<arr.length; i++) acc += arr[i] ? arr[i].length : 0;\n        let bBases, bScalars;\n        if (acc> 2<<14) {\n            bBases = new BigBuffer(acc*sGin);\n            bScalars = new BigBuffer(acc*curve.Fr.n8);\n        } else {\n            bBases = new Uint8Array(acc*sGin);\n            bScalars = new Uint8Array(acc*curve.Fr.n8);\n        }\n        let pB =0;\n        let pS =0;\n\n        const sBuffs = [\n            sTauG1,\n            sTauG2,\n            sAlphaTauG1,\n            sBetaTauG1\n        ];\n\n        const bOne = new Uint8Array(curve.Fr.n8);\n        curve.Fr.toRprLE(bOne, 0, curve.Fr.e(1));\n\n        let offset = 0;\n        for (let i=0; i<arr.length; i++) {\n            if (!arr[i]) continue;\n            for (let j=0; j<arr[i].length; j++) {\n                if ((logger)&&(j)&&(j%10000 == 0))  logger.debug(`Configuring big array ${sectionName}: ${j}/${arr[i].length}`);\n                bBases.set(\n                    sBuffs[arr[i][j][0]].slice(\n                        arr[i][j][1],\n                        arr[i][j][1] + sGin\n                    ), offset*sGin\n                );\n                if (arr[i][j][2]>=0) {\n                    bScalars.set(\n                        sR1cs.slice(\n                            arr[i][j][2],\n                            arr[i][j][2] + curve.Fr.n8\n                        ),\n                        offset*curve.Fr.n8\n                    );\n                } else {\n                    bScalars.set(bOne, offset*curve.Fr.n8);\n                }\n                offset ++;\n            }\n        }\n\n        if (arr.length>1) {\n            const task = [];\n            task.push({cmd: \"ALLOCSET\", var: 0, buff: bBases});\n            task.push({cmd: \"ALLOCSET\", var: 1, buff: bScalars});\n            task.push({cmd: \"ALLOC\", var: 2, len: arr.length*sGmid});\n            pB = 0;\n            pS = 0;\n            let pD =0;\n            for (let i=0; i<arr.length; i++) {\n                if (!arr[i]) {\n                    task.push({cmd: \"CALL\", fnName: fnZero, params: [\n                        {var: 2, offset: pD}\n                    ]});\n                    pD += sGmid;\n                    continue;\n                }\n                if (arr[i].length == 1) {\n                    task.push({cmd: \"CALL\", fnName: fnExp, params: [\n                        {var: 0, offset: pB},\n                        {var: 1, offset: pS},\n                        {val: curve.Fr.n8},\n                        {var: 2, offset: pD}\n                    ]});\n                } else {\n                    task.push({cmd: \"CALL\", fnName: fnMultiExp, params: [\n                        {var: 0, offset: pB},\n                        {var: 1, offset: pS},\n                        {val: curve.Fr.n8},\n                        {val: arr[i].length},\n                        {var: 2, offset: pD}\n                    ]});\n                }\n                pB += sGin*arr[i].length;\n                pS += curve.Fr.n8*arr[i].length;\n                pD += sGmid;\n            }\n            task.push({cmd: \"CALL\", fnName: fnBatchToAffine, params: [\n                {var: 2},\n                {val: arr.length},\n                {var: 2},\n            ]});\n            task.push({cmd: \"GET\", out: 0, var: 2, len: arr.length*sGout});\n\n            const res = await curve.tm.queueAction(task);\n            return res;\n        } else {\n            let res = await G.multiExpAffine(bBases, bScalars, logger, sectionName);\n            res = [ G.toAffine(res) ];\n            return res;\n        }\n    }\n\n\n    async function hashHPoints() {\n        const CHUNK_SIZE = 1<<14;\n\n        hashU32(domainSize-1);\n\n        for (let i=0; i<domainSize-1; i+= CHUNK_SIZE) {\n            if (logger)  logger.debug(`HashingHPoints: ${i}/${domainSize}`);\n            const n = Math.min(domainSize-1, CHUNK_SIZE);\n            await hashHPointsChunk(i, n);\n        }\n    }\n\n    async function hashHPointsChunk(offset, nPoints) {\n        const buff1 = await fdPTau.read(nPoints *sG1, sectionsPTau[2][0].p + (offset + domainSize)*sG1);\n        const buff2 = await fdPTau.read(nPoints *sG1, sectionsPTau[2][0].p + offset*sG1);\n        const concurrency= curve.tm.concurrency;\n        const nPointsPerThread = Math.floor(nPoints / concurrency);\n        const opPromises = [];\n        for (let i=0; i<concurrency; i++) {\n            let n;\n            if (i< concurrency-1) {\n                n = nPointsPerThread;\n            } else {\n                n = nPoints - i*nPointsPerThread;\n            }\n            if (n==0) continue;\n\n            const subBuff1 = buff1.slice(i*nPointsPerThread*sG1, (i*nPointsPerThread+n)*sG1);\n            const subBuff2 = buff2.slice(i*nPointsPerThread*sG1, (i*nPointsPerThread+n)*sG1);\n            opPromises.push(hashHPointsThread(subBuff1, subBuff2));\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        for (let i=0; i<result.length; i++) {\n            csHasher.update(result[i][0]);\n        }\n    }\n\n    async function hashHPointsThread(buff1, buff2) {\n        const nPoints = buff1.byteLength/sG1;\n        const sGmid = curve.G1.F.n8*3;\n        const task = [];\n        task.push({cmd: \"ALLOCSET\", var: 0, buff: buff1});\n        task.push({cmd: \"ALLOCSET\", var: 1, buff: buff2});\n        task.push({cmd: \"ALLOC\", var: 2, len: nPoints*sGmid});\n        for (let i=0; i<nPoints; i++) {\n            task.push({\n                cmd: \"CALL\",\n                fnName: \"g1m_subAffine\",\n                params: [\n                    {var: 0, offset: i*sG1},\n                    {var: 1, offset: i*sG1},\n                    {var: 2, offset: i*sGmid},\n                ]\n            });\n        }\n        task.push({cmd: \"CALL\", fnName: \"g1m_batchToAffine\", params: [\n            {var: 2},\n            {val: nPoints},\n            {var: 2},\n        ]});\n        task.push({cmd: \"CALL\", fnName: \"g1m_batchLEMtoU\", params: [\n            {var: 2},\n            {val: nPoints},\n            {var: 2},\n        ]});\n        task.push({cmd: \"GET\", out: 0, var: 2, len: nPoints*sG1});\n\n        const res = await curve.tm.queueAction(task);\n\n        return res;\n    }\n\n    function hashU32(n) {\n        const buff = new Uint8Array(4);\n        const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n        buffV.setUint32(0, n, false);\n        csHasher.update(buff);\n    }\n\n}\n\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nconst SUBARRAY_SIZE = 0x40000;\n\nconst BigArrayHandler = {\n    get: function(obj, prop) {\n        if (!isNaN(prop)) {\n            return obj.getElement(prop);\n        } else return obj[prop];\n    },\n    set: function(obj, prop, value) {\n        if (!isNaN(prop)) {\n            return obj.setElement(prop, value);\n        } else {\n            obj[prop] = value;\n            return true;\n        }\n    }\n};\n\nclass _BigArray {\n    constructor (initSize) {\n        this.length = initSize || 0;\n        this.arr = new Array(SUBARRAY_SIZE);\n\n        for (let i=0; i<initSize; i+=SUBARRAY_SIZE) {\n            this.arr[i/SUBARRAY_SIZE] = new Array(Math.min(SUBARRAY_SIZE, initSize - i));\n        }\n        return this;\n    }\n    push () {\n        for (let i=0; i<arguments.length; i++) {\n            this.setElement (this.length, arguments[i]);\n        }\n    }\n\n    slice (f, t) {\n        const arr = new Array(t-f);\n        for (let i=f; i< t; i++) arr[i-f] = this.getElement(i);\n        return arr;\n    }\n    getElement(idx) {\n        idx = parseInt(idx);\n        const idx1 = Math.floor(idx / SUBARRAY_SIZE);\n        const idx2 = idx % SUBARRAY_SIZE;\n        return this.arr[idx1] ? this.arr[idx1][idx2] : undefined;\n    }\n    setElement(idx, value) {\n        idx = parseInt(idx);\n        const idx1 = Math.floor(idx / SUBARRAY_SIZE);\n        if (!this.arr[idx1]) {\n            this.arr[idx1] = new Array(SUBARRAY_SIZE);\n        }\n        const idx2 = idx % SUBARRAY_SIZE;\n        this.arr[idx1][idx2] = value;\n        if (idx >= this.length) this.length = idx+1;\n        return true;\n    }\n    getKeys() {\n        const newA = new BigArray();\n        for (let i=0; i<this.arr.length; i++) {\n            if (this.arr[i]) {\n                for (let j=0; j<this.arr[i].length; j++) {\n                    if (typeof this.arr[i][j] !== \"undefined\") {\n                        newA.push(i*SUBARRAY_SIZE+j);\n                    }\n                }\n            }\n        }\n        return newA;\n    }\n}\n\nclass BigArray {\n    constructor( initSize ) {\n        const obj = new _BigArray(initSize);\n        const extObj = new Proxy(obj, BigArrayHandler);\n        return extObj;\n    }\n}\n\nexport default BigArray;\n", "\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as zkeyUtils from \"./zkey_utils.js\";\nimport * as fastFile from \"fastfile\";\nimport { getCurveFromQ as getCurve } from \"./curves.js\";\n\nexport default async function phase2exportMPCParams(zkeyName, mpcparamsName, logger) {\n\n    const {fd: fdZKey, sections: sectionsZKey} = await binFileUtils.readBinFile(zkeyName, \"zkey\", 2);\n    const zkey = await zkeyUtils.readHeader(fdZKey, sectionsZKey);\n    if (zkey.protocol != \"groth16\") {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n    const curve = await getCurve(zkey.q);\n    const sG1 = curve.G1.F.n8*2;\n    const sG2 = curve.G2.F.n8*2;\n\n    const mpcParams = await zkeyUtils.readMPCParams(fdZKey, curve, sectionsZKey);\n\n    const fdMPCParams = await fastFile.createOverride(mpcparamsName);\n\n    /////////////////////\n    // Verification Key Section\n    /////////////////////\n    await writeG1(zkey.vk_alpha_1);\n    await writeG1(zkey.vk_beta_1);\n    await writeG2(zkey.vk_beta_2);\n    await writeG2(zkey.vk_gamma_2);\n    await writeG1(zkey.vk_delta_1);\n    await writeG2(zkey.vk_delta_2);\n\n    // IC\n    let buffBasesIC;\n    buffBasesIC = await binFileUtils.readSection(fdZKey, sectionsZKey, 3);\n    buffBasesIC = await curve.G1.batchLEMtoU(buffBasesIC);\n\n    await writePointArray(\"G1\", buffBasesIC);\n\n    /////////////////////\n    // h Section\n    /////////////////////\n    const buffBasesH_Lodd = await binFileUtils.readSection(fdZKey, sectionsZKey, 9);\n\n    let buffBasesH_Tau;\n    buffBasesH_Tau = await curve.G1.fft(buffBasesH_Lodd, \"affine\", \"jacobian\", logger);\n    buffBasesH_Tau = await curve.G1.batchApplyKey(buffBasesH_Tau, curve.Fr.neg(curve.Fr.e(2)), curve.Fr.w[zkey.power+1], \"jacobian\", \"affine\", logger);\n\n    // Remove last element.  (The degree of H will be allways m-2)\n    buffBasesH_Tau = buffBasesH_Tau.slice(0, buffBasesH_Tau.byteLength - sG1);\n    buffBasesH_Tau = await curve.G1.batchLEMtoU(buffBasesH_Tau);\n    await writePointArray(\"G1\", buffBasesH_Tau);\n\n    /////////////////////\n    // L section\n    /////////////////////\n    let buffBasesC;\n    buffBasesC = await binFileUtils.readSection(fdZKey, sectionsZKey, 8);\n    buffBasesC = await curve.G1.batchLEMtoU(buffBasesC);\n    await writePointArray(\"G1\", buffBasesC);\n\n    /////////////////////\n    // A Section (C section)\n    /////////////////////\n    let buffBasesA;\n    buffBasesA = await binFileUtils.readSection(fdZKey, sectionsZKey, 5);\n    buffBasesA = await curve.G1.batchLEMtoU(buffBasesA);\n    await writePointArray(\"G1\", buffBasesA);\n\n    /////////////////////\n    // B1 Section\n    /////////////////////\n    let buffBasesB1;\n    buffBasesB1 = await binFileUtils.readSection(fdZKey, sectionsZKey, 6);\n    buffBasesB1 = await curve.G1.batchLEMtoU(buffBasesB1);\n    await writePointArray(\"G1\", buffBasesB1);\n\n    /////////////////////\n    // B2 Section\n    /////////////////////\n    let buffBasesB2;\n    buffBasesB2 = await binFileUtils.readSection(fdZKey, sectionsZKey, 7);\n    buffBasesB2 = await curve.G2.batchLEMtoU(buffBasesB2);\n    await writePointArray(\"G2\", buffBasesB2);\n\n    await fdMPCParams.write(mpcParams.csHash);\n    await writeU32(mpcParams.contributions.length);\n\n    for (let i=0; i<mpcParams.contributions.length; i++) {\n        const c = mpcParams.contributions[i];\n        await writeG1(c.deltaAfter);\n        await writeG1(c.delta.g1_s);\n        await writeG1(c.delta.g1_sx);\n        await writeG2(c.delta.g2_spx);\n        await fdMPCParams.write(c.transcript);\n    }\n\n    await fdZKey.close();\n    await fdMPCParams.close();\n\n    async function writeG1(P) {\n        const buff = new Uint8Array(sG1);\n        curve.G1.toRprUncompressed(buff, 0, P);\n        await fdMPCParams.write(buff);\n    }\n\n    async function writeG2(P) {\n        const buff = new Uint8Array(sG2);\n        curve.G2.toRprUncompressed(buff, 0, P);\n        await fdMPCParams.write(buff);\n    }\n\n    async function writePointArray(groupName, buff) {\n        let sG;\n        if (groupName == \"G1\") {\n            sG = sG1;\n        } else {\n            sG = sG2;\n        }\n\n        const buffSize = new Uint8Array(4);\n        const buffSizeV = new DataView(buffSize.buffer, buffSize.byteOffset, buffSize.byteLength);\n        buffSizeV.setUint32(0, buff.byteLength / sG, false);\n\n        await fdMPCParams.write(buffSize);\n        await fdMPCParams.write(buff);\n    }\n\n    async function writeU32(n) {\n        const buffSize = new Uint8Array(4);\n        const buffSizeV = new DataView(buffSize.buffer, buffSize.byteOffset, buffSize.byteLength);\n        buffSizeV.setUint32(0, n, false);\n\n        await fdMPCParams.write(buffSize);\n    }\n\n\n\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as zkeyUtils from \"./zkey_utils.js\";\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as fastFile from \"fastfile\";\nimport { getCurveFromQ as getCurve } from \"./curves.js\";\nimport * as misc from \"./misc.js\";\n\nexport default async function phase2importMPCParams(zkeyNameOld, mpcparamsName, zkeyNameNew, name, logger) {\n\n    const {fd: fdZKeyOld, sections: sectionsZKeyOld} = await binFileUtils.readBinFile(zkeyNameOld, \"zkey\", 2);\n    const zkeyHeader = await zkeyUtils.readHeader(fdZKeyOld, sectionsZKeyOld, false);\n    if (zkeyHeader.protocol != \"groth16\") {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n    const curve = await getCurve(zkeyHeader.q);\n    const sG1 = curve.G1.F.n8*2;\n    const sG2 = curve.G2.F.n8*2;\n\n    const oldMPCParams = await zkeyUtils.readMPCParams(fdZKeyOld, curve, sectionsZKeyOld);\n    const newMPCParams = {};\n\n    const fdMPCParams = await fastFile.readExisting(mpcparamsName);\n\n    fdMPCParams.pos =\n        sG1*3 + sG2*3 +                     // vKey\n        8 + sG1*zkeyHeader.nVars +              // IC + C\n        4 + sG1*(zkeyHeader.domainSize-1) +     // H\n        4 + sG1*zkeyHeader.nVars +              // A\n        4 + sG1*zkeyHeader.nVars +              // B1\n        4 + sG2*zkeyHeader.nVars;               // B2\n\n    // csHash\n    newMPCParams.csHash =  await fdMPCParams.read(64);\n\n    const nConttributions = await fdMPCParams.readUBE32();\n    newMPCParams.contributions = [];\n    for (let i=0; i<nConttributions; i++) {\n        const c = { delta:{} };\n        c.deltaAfter = await readG1(fdMPCParams);\n        c.delta.g1_s = await readG1(fdMPCParams);\n        c.delta.g1_sx = await readG1(fdMPCParams);\n        c.delta.g2_spx = await readG2(fdMPCParams);\n        c.transcript = await fdMPCParams.read(64);\n        if (i<oldMPCParams.contributions.length) {\n            c.type = oldMPCParams.contributions[i].type;\n            if (c.type==1) {\n                c.beaconHash = oldMPCParams.contributions[i].beaconHash;\n                c.numIterationsExp = oldMPCParams.contributions[i].numIterationsExp;\n            }\n            if (oldMPCParams.contributions[i].name) {\n                c.name = oldMPCParams.contributions[i].name;\n            }\n        }\n        newMPCParams.contributions.push(c);\n    }\n\n    if (!misc.hashIsEqual(newMPCParams.csHash, oldMPCParams.csHash)) {\n        if (logger) logger.error(\"Hash of the original circuit does not match with the MPC one\");\n        return false;\n    }\n\n    if (oldMPCParams.contributions.length > newMPCParams.contributions.length) {\n        if (logger) logger.error(\"The impoerted file does not include new contributions\");\n        return false;\n    }\n\n    for (let i=0; i<oldMPCParams.contributions.length; i++) {\n        if (!contributionIsEqual(oldMPCParams.contributions[i], newMPCParams.contributions[i])) {\n            if (logger) logger.error(`Previos contribution ${i} does not match`);\n            return false;\n        }\n    }\n\n\n    // Set the same name to all new controbutions\n    if (name) {\n        for (let i=oldMPCParams.contributions.length; i<newMPCParams.contributions.length; i++) {\n            newMPCParams.contributions[i].name = name;\n        }\n    }\n\n    const fdZKeyNew = await binFileUtils.createBinFile(zkeyNameNew, \"zkey\", 1, 10);\n    fdMPCParams.pos = 0;\n\n    // Header\n    fdMPCParams.pos += sG1;  // ignore alpha1 (keep original)\n    fdMPCParams.pos += sG1;  // ignore beta1\n    fdMPCParams.pos += sG2;  // ignore beta2\n    fdMPCParams.pos += sG2;  // ignore gamma2\n    zkeyHeader.vk_delta_1 = await readG1(fdMPCParams);\n    zkeyHeader.vk_delta_2 = await readG2(fdMPCParams);\n    await zkeyUtils.writeHeader(fdZKeyNew, zkeyHeader);\n\n    // IC (Keep original)\n    const nIC = await fdMPCParams.readUBE32();\n    if (nIC != zkeyHeader.nPublic +1) {\n        if (logger) logger.error(\"Invalid number of points in IC\");\n        await fdZKeyNew.discard();\n        return false;\n    }\n    fdMPCParams.pos += sG1*(zkeyHeader.nPublic+1);\n    await binFileUtils.copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 3);\n\n    // Coeffs (Keep original)\n    await binFileUtils.copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 4);\n\n    // H Section\n    const nH = await fdMPCParams.readUBE32();\n    if (nH != zkeyHeader.domainSize-1) {\n        if (logger) logger.error(\"Invalid number of points in H\");\n        await fdZKeyNew.discard();\n        return false;\n    }\n    let buffH;\n    const buffTauU = await fdMPCParams.read(sG1*(zkeyHeader.domainSize-1));\n    const buffTauLEM = await curve.G1.batchUtoLEM(buffTauU);\n    buffH = new Uint8Array(zkeyHeader.domainSize*sG1);\n    buffH.set(buffTauLEM);   // Let the last one to zero.\n    curve.G1.toRprLEM(buffH, sG1*(zkeyHeader.domainSize-1), curve.G1.zeroAffine);\n    const n2Inv = curve.Fr.neg(curve.Fr.inv(curve.Fr.e(2)));\n    const wInv = curve.Fr.inv(curve.Fr.w[zkeyHeader.power+1]);\n    buffH = await curve.G1.batchApplyKey(buffH, n2Inv, wInv, \"affine\", \"jacobian\", logger);\n    buffH = await curve.G1.ifft(buffH, \"jacobian\", \"affine\", logger);\n    await binFileUtils.startWriteSection(fdZKeyNew, 9);\n    await fdZKeyNew.write(buffH);\n    await binFileUtils.endWriteSection(fdZKeyNew);\n\n    // C Secion (L section)\n    const nL = await fdMPCParams.readUBE32();\n    if (nL != (zkeyHeader.nVars-zkeyHeader.nPublic-1)) {\n        if (logger) logger.error(\"Invalid number of points in L\");\n        await fdZKeyNew.discard();\n        return false;\n    }\n    let buffL;\n    buffL = await fdMPCParams.read(sG1*(zkeyHeader.nVars-zkeyHeader.nPublic-1));\n    buffL = await curve.G1.batchUtoLEM(buffL);\n    await binFileUtils.startWriteSection(fdZKeyNew, 8);\n    await fdZKeyNew.write(buffL);\n    await binFileUtils.endWriteSection(fdZKeyNew);\n\n    // A Section\n    const nA = await fdMPCParams.readUBE32();\n    if (nA != zkeyHeader.nVars) {\n        if (logger) logger.error(\"Invalid number of points in A\");\n        await fdZKeyNew.discard();\n        return false;\n    }\n    fdMPCParams.pos += sG1*(zkeyHeader.nVars);\n    await binFileUtils.copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 5);\n\n    // B1 Section\n    const nB1 = await fdMPCParams.readUBE32();\n    if (nB1 != zkeyHeader.nVars) {\n        if (logger) logger.error(\"Invalid number of points in B1\");\n        await fdZKeyNew.discard();\n        return false;\n    }\n    fdMPCParams.pos += sG1*(zkeyHeader.nVars);\n    await binFileUtils.copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 6);\n\n    // B2 Section\n    const nB2 = await fdMPCParams.readUBE32();\n    if (nB2 != zkeyHeader.nVars) {\n        if (logger) logger.error(\"Invalid number of points in B2\");\n        await fdZKeyNew.discard();\n        return false;\n    }\n    fdMPCParams.pos += sG2*(zkeyHeader.nVars);\n    await binFileUtils.copySection(fdZKeyOld, sectionsZKeyOld, fdZKeyNew, 7);\n\n    await zkeyUtils.writeMPCParams(fdZKeyNew, curve, newMPCParams);\n\n    await fdMPCParams.close();\n    await fdZKeyNew.close();\n    await fdZKeyOld.close();\n\n    return true;\n\n    async function readG1(fd) {\n        const buff = await fd.read(curve.G1.F.n8*2);\n        return curve.G1.fromRprUncompressed(buff, 0);\n    }\n\n    async function readG2(fd) {\n        const buff = await fd.read(curve.G2.F.n8*2);\n        return curve.G2.fromRprUncompressed(buff, 0);\n    }\n\n\n    function contributionIsEqual(c1, c2) {\n        if (!curve.G1.eq(c1.deltaAfter   , c2.deltaAfter)) return false;\n        if (!curve.G1.eq(c1.delta.g1_s   , c2.delta.g1_s)) return false;\n        if (!curve.G1.eq(c1.delta.g1_sx  , c2.delta.g1_sx)) return false;\n        if (!curve.G2.eq(c1.delta.g2_spx , c2.delta.g2_spx)) return false;\n        if (!misc.hashIsEqual(c1.transcript, c2.transcript)) return false;\n        return true;\n    }\n\n\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport newZKey from \"./zkey_new.js\";\nimport phase2verifyFromInit from \"./zkey_verify_frominit.js\";\n\nexport default async function phase2verifyFromR1cs(r1csFileName, pTauFileName, zkeyFileName, logger) {\n\n    // const initFileName = \"~\" + zkeyFileName + \".init\";\n    const initFileName = {type: \"bigMem\"};\n    await newZKey(r1csFileName, pTauFileName, initFileName, logger);\n\n    return await phase2verifyFromInit(initFileName, pTauFileName, zkeyFileName, logger);\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as zkeyUtils from \"./zkey_utils.js\";\nimport { getCurveFromQ as getCurve } from \"./curves.js\";\nimport Blake2b from \"blake2b-wasm\";\nimport * as misc from \"./misc.js\";\nimport { hashToG2 as hashToG2 } from \"./keypair.js\";\nconst sameRatio = misc.sameRatio;\nimport crypto from \"crypto\";\nimport {hashG1, hashPubKey} from \"./zkey_utils.js\";\nimport { Scalar, ChaCha, BigBuffer } from \"ffjavascript\";\n\n\n\nexport default async function phase2verifyFromInit(initFileName, pTauFileName, zkeyFileName, logger) {\n\n    let sr;\n    await Blake2b.ready();\n\n    const {fd, sections} = await binFileUtils.readBinFile(zkeyFileName, \"zkey\", 2);\n    const zkey = await zkeyUtils.readHeader(fd, sections, false);\n    if (zkey.protocol != \"groth16\") {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n    const curve = await getCurve(zkey.q);\n    const sG1 = curve.G1.F.n8*2;\n\n    const mpcParams = await zkeyUtils.readMPCParams(fd, curve, sections);\n\n    const accumulatedHasher = Blake2b(64);\n    accumulatedHasher.update(mpcParams.csHash);\n    let curDelta = curve.G1.g;\n    for (let i=0; i<mpcParams.contributions.length; i++) {\n        const c = mpcParams.contributions[i];\n        const ourHasher = misc.cloneHasher(accumulatedHasher);\n\n        hashG1(ourHasher, curve, c.delta.g1_s);\n        hashG1(ourHasher, curve, c.delta.g1_sx);\n\n        if (!misc.hashIsEqual(ourHasher.digest(), c.transcript)) {\n            console.log(`INVALID(${i}): Inconsistent transcript `);\n            return false;\n        }\n\n        const delta_g2_sp = hashToG2(curve, c.transcript);\n\n        sr = await sameRatio(curve, c.delta.g1_s, c.delta.g1_sx, delta_g2_sp, c.delta.g2_spx);\n        if (sr !== true) {\n            console.log(`INVALID(${i}): public key G1 and G2 do not have the same ration `);\n            return false;\n        }\n\n        sr = await sameRatio(curve, curDelta, c.deltaAfter, delta_g2_sp, c.delta.g2_spx);\n        if (sr !== true) {\n            console.log(`INVALID(${i}): deltaAfter does not fillow the public key `);\n            return false;\n        }\n\n        if (c.type == 1) {\n            const rng = misc.rngFromBeaconParams(c.beaconHash, c.numIterationsExp);\n            const expected_prvKey = curve.Fr.fromRng(rng);\n            const expected_g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));\n            const expected_g1_sx = curve.G1.toAffine(curve.G1.timesFr(expected_g1_s, expected_prvKey));\n            if (curve.G1.eq(expected_g1_s, c.delta.g1_s) !== true) {\n                console.log(`INVALID(${i}): Key of the beacon does not match. g1_s `);\n                return false;\n            }\n            if (curve.G1.eq(expected_g1_sx, c.delta.g1_sx) !== true) {\n                console.log(`INVALID(${i}): Key of the beacon does not match. g1_sx `);\n                return false;\n            }\n        }\n\n        hashPubKey(accumulatedHasher, curve, c);\n\n        const contributionHasher = Blake2b(64);\n        hashPubKey(contributionHasher, curve, c);\n\n        c.contributionHash = contributionHasher.digest();\n\n        curDelta = c.deltaAfter;\n    }\n\n\n    const {fd: fdInit, sections: sectionsInit} = await binFileUtils.readBinFile(initFileName, \"zkey\", 2);\n    const zkeyInit = await zkeyUtils.readHeader(fdInit, sectionsInit, false);\n\n    if (zkeyInit.protocol != \"groth16\") {\n        throw new Error(\"zkeyinit file is not groth16\");\n    }\n\n    if (  (!Scalar.eq(zkeyInit.q, zkey.q))\n        ||(!Scalar.eq(zkeyInit.r, zkey.r))\n        ||(zkeyInit.n8q != zkey.n8q)\n        ||(zkeyInit.n8r != zkey.n8r))\n    {\n        if (logger) logger.error(\"INVALID:  Different curves\");\n        return false;\n    }\n\n    if (  (zkeyInit.nVars != zkey.nVars)\n        ||(zkeyInit.nPublic !=  zkey.nPublic)\n        ||(zkeyInit.domainSize != zkey.domainSize))\n    {\n        if (logger) logger.error(\"INVALID:  Different circuit parameters\");\n        return false;\n    }\n\n    if (!curve.G1.eq(zkey.vk_alpha_1, zkeyInit.vk_alpha_1)) {\n        if (logger) logger.error(\"INVALID:  Invalid alpha1\");\n        return false;\n    }\n    if (!curve.G1.eq(zkey.vk_beta_1, zkeyInit.vk_beta_1)) {\n        if (logger) logger.error(\"INVALID:  Invalid beta1\");\n        return false;\n    }\n    if (!curve.G2.eq(zkey.vk_beta_2, zkeyInit.vk_beta_2)) {\n        if (logger) logger.error(\"INVALID:  Invalid beta2\");\n        return false;\n    }\n    if (!curve.G2.eq(zkey.vk_gamma_2, zkeyInit.vk_gamma_2)) {\n        if (logger) logger.error(\"INVALID:  Invalid gamma2\");\n        return false;\n    }\n    if (!curve.G1.eq(zkey.vk_delta_1, curDelta)) {\n        if (logger) logger.error(\"INVALID:  Invalid delta1\");\n        return false;\n    }\n    sr = await sameRatio(curve, curve.G1.g, curDelta, curve.G2.g, zkey.vk_delta_2);\n    if (sr !== true) {\n        if (logger) logger.error(\"INVALID:  Invalid delta2\");\n        return false;\n    }\n\n    const mpcParamsInit = await zkeyUtils.readMPCParams(fdInit, curve, sectionsInit);\n    if (!misc.hashIsEqual(mpcParams.csHash, mpcParamsInit.csHash)) {\n        if (logger) logger.error(\"INVALID:  Circuit does not match\");\n        return false;\n    }\n\n    // Check sizes of sections\n    if (sections[8][0].size != sG1*(zkey.nVars-zkey.nPublic-1)) {\n        if (logger) logger.error(\"INVALID:  Invalid L section size\");\n        return false;\n    }\n\n    if (sections[9][0].size != sG1*(zkey.domainSize)) {\n        if (logger) logger.error(\"INVALID:  Invalid H section size\");\n        return false;\n    }\n\n    let ss;\n    ss = await binFileUtils.sectionIsEqual(fd, sections, fdInit, sectionsInit, 3);\n    if (!ss) {\n        if (logger) logger.error(\"INVALID:  IC section is not identical\");\n        return false;\n    }\n\n    ss = await binFileUtils.sectionIsEqual(fd, sections, fdInit, sectionsInit, 4);\n    if (!ss) {\n        if (logger) logger.error(\"Coeffs section is not identical\");\n        return false;\n    }\n\n    ss = await binFileUtils.sectionIsEqual(fd, sections, fdInit, sectionsInit, 5);\n    if (!ss) {\n        if (logger) logger.error(\"A section is not identical\");\n        return false;\n    }\n\n    ss = await binFileUtils.sectionIsEqual(fd, sections, fdInit, sectionsInit, 6);\n    if (!ss) {\n        if (logger) logger.error(\"B1 section is not identical\");\n        return false;\n    }\n\n    ss = await binFileUtils.sectionIsEqual(fd, sections, fdInit, sectionsInit, 7);\n    if (!ss) {\n        if (logger) logger.error(\"B2 section is not identical\");\n        return false;\n    }\n\n    // Check L\n    sr = await sectionHasSameRatio(\"G1\", fdInit, sectionsInit, fd, sections, 8, zkey.vk_delta_2, zkeyInit.vk_delta_2, \"L section\");\n    if (sr!==true) {\n        if (logger) logger.error(\"L section does not match\");\n        return false;\n    }\n\n    // Check H\n    sr = await sameRatioH();\n    if (sr!==true) {\n        if (logger) logger.error(\"H section does not match\");\n        return false;\n    }\n\n    if (logger) logger.info(misc.formatHash(mpcParams.csHash, \"Circuit Hash: \"));\n\n    await fd.close();\n    await fdInit.close();\n\n    for (let i=mpcParams.contributions.length-1; i>=0; i--) {\n        const c = mpcParams.contributions[i];\n        if (logger) logger.info(\"-------------------------\");\n        if (logger) logger.info(misc.formatHash(c.contributionHash, `contribution #${i+1} ${c.name ? c.name : \"\"}:`));\n        if (c.type == 1) {\n            if (logger) logger.info(`Beacon generator: ${misc.byteArray2hex(c.beaconHash)}`);\n            if (logger) logger.info(`Beacon iterations Exp: ${c.numIterationsExp}`);\n        }\n    }\n    if (logger) logger.info(\"-------------------------\");\n\n    if (logger) logger.info(\"ZKey Ok!\");\n\n    return true;\n\n\n    async function sectionHasSameRatio(groupName, fd1, sections1, fd2, sections2, idSection, g2sp, g2spx, sectionName) {\n        const MAX_CHUNK_SIZE = 1<<20;\n        const G = curve[groupName];\n        const sG = G.F.n8*2;\n        await binFileUtils.startReadUniqueSection(fd1, sections1, idSection);\n        await binFileUtils.startReadUniqueSection(fd2, sections2, idSection);\n\n        let R1 = G.zero;\n        let R2 = G.zero;\n\n        const nPoints = sections1[idSection][0].size / sG;\n\n        for (let i=0; i<nPoints; i += MAX_CHUNK_SIZE) {\n            if (logger) logger.debug(`Same ratio check ${sectionName}:  ${i}/${nPoints}`);\n            const n = Math.min(nPoints - i, MAX_CHUNK_SIZE);\n            const bases1 = await fd1.read(n*sG);\n            const bases2 = await fd2.read(n*sG);\n\n            const scalars = new Uint8Array(4*n);\n            crypto.randomFillSync(scalars);\n\n\n            const r1 = await G.multiExpAffine(bases1, scalars);\n            const r2 = await G.multiExpAffine(bases2, scalars);\n\n            R1 = G.add(R1, r1);\n            R2 = G.add(R2, r2);\n        }\n        await binFileUtils.endReadSection(fd1);\n        await binFileUtils.endReadSection(fd2);\n\n        if (nPoints == 0) return true;\n\n        sr = await sameRatio(curve, R1, R2, g2sp, g2spx);\n        if (sr !== true) return false;\n\n        return true;\n    }\n\n    async function sameRatioH() {\n        const MAX_CHUNK_SIZE = 1<<20;\n        const G = curve.G1;\n        const Fr = curve.Fr;\n        const sG = G.F.n8*2;\n\n        const {fd: fdPTau, sections: sectionsPTau} = await binFileUtils.readBinFile(pTauFileName, \"ptau\", 1);\n\n        let buff_r = new BigBuffer(zkey.domainSize * zkey.n8r);\n\n        const seed= new Array(8);\n        for (let i=0; i<8; i++) {\n            seed[i] = crypto.randomBytes(4).readUInt32BE(0, true);\n        }\n        const rng = new ChaCha(seed);\n        for (let i=0; i<zkey.domainSize-1; i++) {   // Note that last one is zero\n            const e = Fr.fromRng(rng);\n            Fr.toRprLE(buff_r, i*zkey.n8r, e);\n        }\n        Fr.toRprLE(buff_r, (zkey.domainSize-1)*zkey.n8r, Fr.zero);\n\n        let R1 = G.zero;\n        for (let i=0; i<zkey.domainSize; i += MAX_CHUNK_SIZE) {\n            if (logger) logger.debug(`H Verificaition(tau):  ${i}/${zkey.domainSize}`);\n            const n = Math.min(zkey.domainSize - i, MAX_CHUNK_SIZE);\n\n            const buff1 = await fdPTau.read(sG*n, sectionsPTau[2][0].p + zkey.domainSize*sG + i*sG);\n            const buff2 = await fdPTau.read(sG*n, sectionsPTau[2][0].p + i*sG);\n\n            const buffB = await batchSubstract(buff1, buff2);\n            const buffS = buff_r.slice(i*zkey.n8r, (i+n)*zkey.n8r);\n            const r = await G.multiExpAffine(buffB, buffS);\n\n            R1 = G.add(R1, r);\n        }\n\n        // Caluclate odd coeficients in transformed domain\n\n        buff_r = await Fr.batchToMontgomery(buff_r);\n        // const first = curve.Fr.neg(curve.Fr.inv(curve.Fr.e(2)));\n        // Works*2   const first = curve.Fr.neg(curve.Fr.e(2));\n\n\n        let first;\n\n        if (zkey.power < Fr.s) {\n            first = Fr.neg(Fr.e(2));\n        } else {\n            const small_m  = 2 ** Fr.s;\n            const shift_to_small_m = Fr.exp(Fr.shift, small_m);\n            first = Fr.sub( shift_to_small_m, Fr.one);\n        }\n\n        // const inc = curve.Fr.inv(curve.PFr.w[zkey.power+1]);\n        const inc = zkey.power < Fr.s ? Fr.w[zkey.power+1] : Fr.shift;\n        buff_r = await Fr.batchApplyKey(buff_r, first, inc);\n        buff_r = await Fr.fft(buff_r);\n        buff_r = await Fr.batchFromMontgomery(buff_r);\n\n        await binFileUtils.startReadUniqueSection(fd, sections, 9);\n        let R2 = G.zero;\n        for (let i=0; i<zkey.domainSize; i += MAX_CHUNK_SIZE) {\n            if (logger) logger.debug(`H Verificaition(lagrange):  ${i}/${zkey.domainSize}`);\n            const n = Math.min(zkey.domainSize - i, MAX_CHUNK_SIZE);\n\n            const buff = await fd.read(sG*n);\n            const buffS = buff_r.slice(i*zkey.n8r, (i+n)*zkey.n8r);\n            const r = await G.multiExpAffine(buff, buffS);\n\n            R2 = G.add(R2, r);\n        }\n        await binFileUtils.endReadSection(fd);\n\n        sr = await sameRatio(curve, R1, R2, zkey.vk_delta_2, zkeyInit.vk_delta_2);\n        if (sr !== true) return false;\n\n\n        return true;\n\n    }\n\n    async function batchSubstract(buff1, buff2) {\n        const sG = curve.G1.F.n8*2;\n        const nPoints = buff1.byteLength / sG;\n        const concurrency= curve.tm.concurrency;\n        const nPointsPerThread = Math.floor(nPoints / concurrency);\n        const opPromises = [];\n        for (let i=0; i<concurrency; i++) {\n            let n;\n            if (i< concurrency-1) {\n                n = nPointsPerThread;\n            } else {\n                n = nPoints - i*nPointsPerThread;\n            }\n            if (n==0) continue;\n\n            const subBuff1 = buff1.slice(i*nPointsPerThread*sG1, (i*nPointsPerThread+n)*sG1);\n            const subBuff2 = buff2.slice(i*nPointsPerThread*sG1, (i*nPointsPerThread+n)*sG1);\n            opPromises.push(batchSubstractThread(subBuff1, subBuff2));\n        }\n\n\n        const result = await Promise.all(opPromises);\n\n        const fullBuffOut = new Uint8Array(nPoints*sG);\n        let p =0;\n        for (let i=0; i<result.length; i++) {\n            fullBuffOut.set(result[i][0], p);\n            p+=result[i][0].byteLength;\n        }\n\n        return fullBuffOut;\n    }\n\n\n    async function batchSubstractThread(buff1, buff2) {\n        const sG1 = curve.G1.F.n8*2;\n        const sGmid = curve.G1.F.n8*3;\n        const nPoints = buff1.byteLength/sG1;\n        const task = [];\n        task.push({cmd: \"ALLOCSET\", var: 0, buff: buff1});\n        task.push({cmd: \"ALLOCSET\", var: 1, buff: buff2});\n        task.push({cmd: \"ALLOC\", var: 2, len: nPoints*sGmid});\n        for (let i=0; i<nPoints; i++) {\n            task.push({\n                cmd: \"CALL\",\n                fnName: \"g1m_subAffine\",\n                params: [\n                    {var: 0, offset: i*sG1},\n                    {var: 1, offset: i*sG1},\n                    {var: 2, offset: i*sGmid},\n                ]\n            });\n        }\n        task.push({cmd: \"CALL\", fnName: \"g1m_batchToAffine\", params: [\n            {var: 2},\n            {val: nPoints},\n            {var: 2},\n        ]});\n        task.push({cmd: \"GET\", out: 0, var: 2, len: nPoints*sG1});\n\n        const res = await curve.tm.queueAction(task);\n\n        return res;\n    }\n\n}\n\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as zkeyUtils from \"./zkey_utils.js\";\nimport { getCurveFromQ as getCurve } from \"./curves.js\";\nimport * as misc from \"./misc.js\";\nimport Blake2b from \"blake2b-wasm\";\nimport * as utils from \"./zkey_utils.js\";\nimport { hashToG2 as hashToG2 } from \"./keypair.js\";\nimport { applyKeyToSection } from \"./mpc_applykey.js\";\n\nexport default async function phase2contribute(zkeyNameOld, zkeyNameNew, name, entropy, logger) {\n    await Blake2b.ready();\n\n    const {fd: fdOld, sections: sections} = await binFileUtils.readBinFile(zkeyNameOld, \"zkey\", 2);\n    const zkey = await zkeyUtils.readHeader(fdOld, sections);\n    if (zkey.protocol != \"groth16\") {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n    const curve = await getCurve(zkey.q);\n\n    const mpcParams = await zkeyUtils.readMPCParams(fdOld, curve, sections);\n\n    const fdNew = await binFileUtils.createBinFile(zkeyNameNew, \"zkey\", 1, 10);\n\n\n    const rng = await misc.getRandomRng(entropy);\n\n    const transcriptHasher = Blake2b(64);\n    transcriptHasher.update(mpcParams.csHash);\n    for (let i=0; i<mpcParams.contributions.length; i++) {\n        utils.hashPubKey(transcriptHasher, curve, mpcParams.contributions[i]);\n    }\n\n    const curContribution = {};\n    curContribution.delta = {};\n    curContribution.delta.prvKey = curve.Fr.fromRng(rng);\n    curContribution.delta.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));\n    curContribution.delta.g1_sx = curve.G1.toAffine(curve.G1.timesFr(curContribution.delta.g1_s, curContribution.delta.prvKey));\n    utils.hashG1(transcriptHasher, curve, curContribution.delta.g1_s);\n    utils.hashG1(transcriptHasher, curve, curContribution.delta.g1_sx);\n    curContribution.transcript = transcriptHasher.digest();\n    curContribution.delta.g2_sp = hashToG2(curve, curContribution.transcript);\n    curContribution.delta.g2_spx = curve.G2.toAffine(curve.G2.timesFr(curContribution.delta.g2_sp, curContribution.delta.prvKey));\n\n    zkey.vk_delta_1 = curve.G1.timesFr(zkey.vk_delta_1, curContribution.delta.prvKey);\n    zkey.vk_delta_2 = curve.G2.timesFr(zkey.vk_delta_2, curContribution.delta.prvKey);\n\n    curContribution.deltaAfter = zkey.vk_delta_1;\n\n    curContribution.type = 0;\n    if (name) curContribution.name = name;\n\n    mpcParams.contributions.push(curContribution);\n\n    await zkeyUtils.writeHeader(fdNew, zkey);\n\n    // IC\n    await binFileUtils.copySection(fdOld, sections, fdNew, 3);\n\n    // Coeffs (Keep original)\n    await binFileUtils.copySection(fdOld, sections, fdNew, 4);\n\n    // A Section\n    await binFileUtils.copySection(fdOld, sections, fdNew, 5);\n\n    // B1 Section\n    await binFileUtils.copySection(fdOld, sections, fdNew, 6);\n\n    // B2 Section\n    await binFileUtils.copySection(fdOld, sections, fdNew, 7);\n\n    const invDelta = curve.Fr.inv(curContribution.delta.prvKey);\n    await applyKeyToSection(fdOld, sections, fdNew, 8, curve, \"G1\", invDelta, curve.Fr.e(1), \"L Section\", logger);\n    await applyKeyToSection(fdOld, sections, fdNew, 9, curve, \"G1\", invDelta, curve.Fr.e(1), \"H Section\", logger);\n\n    await zkeyUtils.writeMPCParams(fdNew, curve, mpcParams);\n\n    await fdOld.close();\n    await fdNew.close();\n\n    const contributionHasher = Blake2b(64);\n    utils.hashPubKey(contributionHasher, curve, curContribution);\n\n    const contribuionHash = contributionHasher.digest();\n\n    if (logger) logger.info(misc.formatHash(mpcParams.csHash, \"Circuit Hash: \"));\n    if (logger) logger.info(misc.formatHash(contribuionHash, \"Contribution Hash: \"));\n\n    return contribuionHash;\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as zkeyUtils from \"./zkey_utils.js\";\nimport { getCurveFromQ as getCurve } from \"./curves.js\";\nimport * as misc from \"./misc.js\";\nimport Blake2b from \"blake2b-wasm\";\nimport * as utils from \"./zkey_utils.js\";\nimport { hashToG2 as hashToG2 } from \"./keypair.js\";\nimport { applyKeyToSection } from \"./mpc_applykey.js\";\n\n\nexport default async function beacon(zkeyNameOld, zkeyNameNew, name, beaconHashStr, numIterationsExp, logger) {\n    await Blake2b.ready();\n\n    const beaconHash = misc.hex2ByteArray(beaconHashStr);\n    if (   (beaconHash.byteLength == 0)\n        || (beaconHash.byteLength*2 !=beaconHashStr.length))\n    {\n        if (logger) logger.error(\"Invalid Beacon Hash. (It must be a valid hexadecimal sequence)\");\n        return false;\n    }\n    if (beaconHash.length>=256) {\n        if (logger) logger.error(\"Maximum lenght of beacon hash is 255 bytes\");\n        return false;\n    }\n\n    numIterationsExp = parseInt(numIterationsExp);\n    if ((numIterationsExp<10)||(numIterationsExp>63)) {\n        if (logger) logger.error(\"Invalid numIterationsExp. (Must be between 10 and 63)\");\n        return false;\n    }\n\n\n    const {fd: fdOld, sections: sections} = await binFileUtils.readBinFile(zkeyNameOld, \"zkey\", 2);\n    const zkey = await zkeyUtils.readHeader(fdOld, sections);\n\n    if (zkey.protocol != \"groth16\") {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n\n    const curve = await getCurve(zkey.q);\n\n    const mpcParams = await zkeyUtils.readMPCParams(fdOld, curve, sections);\n\n    const fdNew = await binFileUtils.createBinFile(zkeyNameNew, \"zkey\", 1, 10);\n\n    const rng = await misc.rngFromBeaconParams(beaconHash, numIterationsExp);\n\n    const transcriptHasher = Blake2b(64);\n    transcriptHasher.update(mpcParams.csHash);\n    for (let i=0; i<mpcParams.contributions.length; i++) {\n        utils.hashPubKey(transcriptHasher, curve, mpcParams.contributions[i]);\n    }\n\n    const curContribution = {};\n    curContribution.delta = {};\n    curContribution.delta.prvKey = curve.Fr.fromRng(rng);\n    curContribution.delta.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));\n    curContribution.delta.g1_sx = curve.G1.toAffine(curve.G1.timesFr(curContribution.delta.g1_s, curContribution.delta.prvKey));\n    utils.hashG1(transcriptHasher, curve, curContribution.delta.g1_s);\n    utils.hashG1(transcriptHasher, curve, curContribution.delta.g1_sx);\n    curContribution.transcript = transcriptHasher.digest();\n    curContribution.delta.g2_sp = hashToG2(curve, curContribution.transcript);\n    curContribution.delta.g2_spx = curve.G2.toAffine(curve.G2.timesFr(curContribution.delta.g2_sp, curContribution.delta.prvKey));\n\n    zkey.vk_delta_1 = curve.G1.timesFr(zkey.vk_delta_1, curContribution.delta.prvKey);\n    zkey.vk_delta_2 = curve.G2.timesFr(zkey.vk_delta_2, curContribution.delta.prvKey);\n\n    curContribution.deltaAfter = zkey.vk_delta_1;\n\n    curContribution.type = 1;\n    curContribution.numIterationsExp = numIterationsExp;\n    curContribution.beaconHash = beaconHash;\n\n    if (name) curContribution.name = name;\n\n    mpcParams.contributions.push(curContribution);\n\n    await zkeyUtils.writeHeader(fdNew, zkey);\n\n    // IC\n    await binFileUtils.copySection(fdOld, sections, fdNew, 3);\n\n    // Coeffs (Keep original)\n    await binFileUtils.copySection(fdOld, sections, fdNew, 4);\n\n    // A Section\n    await binFileUtils.copySection(fdOld, sections, fdNew, 5);\n\n    // B1 Section\n    await binFileUtils.copySection(fdOld, sections, fdNew, 6);\n\n    // B2 Section\n    await binFileUtils.copySection(fdOld, sections, fdNew, 7);\n\n    const invDelta = curve.Fr.inv(curContribution.delta.prvKey);\n    await applyKeyToSection(fdOld, sections, fdNew, 8, curve, \"G1\", invDelta, curve.Fr.e(1), \"L Section\", logger);\n    await applyKeyToSection(fdOld, sections, fdNew, 9, curve, \"G1\", invDelta, curve.Fr.e(1), \"H Section\", logger);\n\n    await zkeyUtils.writeMPCParams(fdNew, curve, mpcParams);\n\n    await fdOld.close();\n    await fdNew.close();\n\n    const contributionHasher = Blake2b(64);\n    utils.hashPubKey(contributionHasher, curve, curContribution);\n\n    const contribuionHash = contributionHasher.digest();\n\n    if (logger) logger.info(misc.formatHash(contribuionHash, \"Contribution Hash: \"));\n\n    return contribuionHash;\n}\n", "import { readZKey as readZKey } from \"./zkey_utils.js\";\nimport { utils } from \"ffjavascript\";\n\nexport default async function zkeyExportJson(zkeyFileName) {\n\n    const zKey = await readZKey(zkeyFileName, true);\n    delete zKey.curve;\n    delete zKey.F;\n\n    return utils.stringifyBigInts(zKey);\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n// Format of the output\n//      Hash of the last contribution  64 Bytes\n//      2^N*2-1 TauG1 Points (compressed)\n//      2^N TauG2 Points (compressed)\n//      2^N AlphaTauG1 Points (compressed)\n//      2^N BetaTauG1 Points (compressed)\n//      Public Key\n//          BetaG2 (compressed)\n//          G1*s (compressed)\n//          G1*s*tau (compressed)\n//          G1*t (compressed)\n//          G1*t*alpha (compressed)\n//          G1*u (compressed)\n//          G1*u*beta (compressed)\n//          G2*sp*tau (compressed)\n//          G2*tp*alpha (compressed)\n//          G2*up*beta (compressed)\n\nimport * as fastFile from \"fastfile\";\nimport Blake2b from \"blake2b-wasm\";\nimport * as utils from \"./zkey_utils.js\";\nimport * as misc from \"./misc.js\";\nimport { applyKeyToChallengeSection } from \"./mpc_applykey.js\";\nimport { hashPubKey } from \"./zkey_utils.js\";\nimport { hashToG2 as hashToG2 } from \"./keypair.js\";\n\nexport default async function bellmanContribute(curve, challengeFilename, responesFileName, entropy, logger) {\n    await Blake2b.ready();\n\n    const rng = await misc.getRandomRng(entropy);\n\n    const delta = curve.Fr.fromRng(rng);\n    const invDelta = curve.Fr.inv(delta);\n\n    const sG1 = curve.G1.F.n8*2;\n    const sG2 = curve.G2.F.n8*2;\n\n    const fdFrom = await fastFile.readExisting(challengeFilename);\n    const fdTo = await fastFile.createOverride(responesFileName);\n\n\n    await copy(sG1); // alpha1\n    await copy(sG1); // beta1\n    await copy(sG2); // beta2\n    await copy(sG2); // gamma2\n    const oldDelta1 = await readG1();\n    const delta1 = curve.G1.timesFr(oldDelta1, delta);\n    await writeG1(delta1);\n    const oldDelta2 = await readG2();\n    const delta2 = curve.G2.timesFr(oldDelta2, delta);\n    await writeG2(delta2);\n\n    // IC\n    const nIC = await fdFrom.readUBE32();\n    await fdTo.writeUBE32(nIC);\n    await copy(nIC*sG1);\n\n    // H\n    const nH = await fdFrom.readUBE32();\n    await fdTo.writeUBE32(nH);\n    await applyKeyToChallengeSection(fdFrom, fdTo, null, curve, \"G1\", nH, invDelta, curve.Fr.e(1), \"UNCOMPRESSED\", \"H\", logger);\n\n    // L\n    const nL = await fdFrom.readUBE32();\n    await fdTo.writeUBE32(nL);\n    await applyKeyToChallengeSection(fdFrom, fdTo, null, curve, \"G1\", nL, invDelta, curve.Fr.e(1), \"UNCOMPRESSED\", \"L\", logger);\n\n    // A\n    const nA = await fdFrom.readUBE32();\n    await fdTo.writeUBE32(nA);\n    await copy(nA*sG1);\n\n    // B1\n    const nB1 = await fdFrom.readUBE32();\n    await fdTo.writeUBE32(nB1);\n    await copy(nB1*sG1);\n\n    // B2\n    const nB2 = await fdFrom.readUBE32();\n    await fdTo.writeUBE32(nB2);\n    await copy(nB2*sG2);\n\n\n    //////////\n    /// Read contributions\n    //////////\n    const transcriptHasher = Blake2b(64);\n\n    const mpcParams = {};\n    // csHash\n    mpcParams.csHash =  await fdFrom.read(64);\n    transcriptHasher.update(mpcParams.csHash);\n\n    const nConttributions = await fdFrom.readUBE32();\n    mpcParams.contributions = [];\n    for (let i=0; i<nConttributions; i++) {\n        const c = { delta:{} };\n        c.deltaAfter = await readG1();\n        c.delta.g1_s = await readG1();\n        c.delta.g1_sx = await readG1();\n        c.delta.g2_spx = await readG2();\n        c.transcript = await fdFrom.read(64);\n        mpcParams.contributions.push(c);\n        hashPubKey(transcriptHasher, curve, c);\n    }\n\n    const curContribution = {};\n    curContribution.delta = {};\n    curContribution.delta.prvKey = delta;\n    curContribution.delta.g1_s = curve.G1.toAffine(curve.G1.fromRng(rng));\n    curContribution.delta.g1_sx = curve.G1.toAffine(curve.G1.timesFr(curContribution.delta.g1_s, delta));\n    utils.hashG1(transcriptHasher, curve, curContribution.delta.g1_s);\n    utils.hashG1(transcriptHasher, curve, curContribution.delta.g1_sx);\n    curContribution.transcript = transcriptHasher.digest();\n    curContribution.delta.g2_sp = hashToG2(curve, curContribution.transcript);\n    curContribution.delta.g2_spx = curve.G2.toAffine(curve.G2.timesFr(curContribution.delta.g2_sp, delta));\n    curContribution.deltaAfter = delta1;\n    curContribution.type = 0;\n    mpcParams.contributions.push(curContribution);\n\n\n    //////////\n    /// Write COntribution\n    //////////\n\n    await fdTo.write(mpcParams.csHash);\n    await fdTo.writeUBE32(mpcParams.contributions.length);\n\n    for (let i=0; i<mpcParams.contributions.length; i++) {\n        const c = mpcParams.contributions[i];\n        await writeG1(c.deltaAfter);\n        await writeG1(c.delta.g1_s);\n        await writeG1(c.delta.g1_sx);\n        await writeG2(c.delta.g2_spx);\n        await fdTo.write(c.transcript);\n    }\n\n    const contributionHasher = Blake2b(64);\n    hashPubKey(contributionHasher, curve, curContribution);\n\n    const contributionHash = contributionHasher.digest();\n\n    if (logger) logger.info(misc.formatHash(contributionHash, \"Contribution Hash: \"));\n\n    await fdTo.close();\n    await fdFrom.close();\n\n    return contributionHash;\n\n    async function copy(nBytes) {\n        const CHUNK_SIZE = fdFrom.pageSize*2;\n        for (let i=0; i<nBytes; i+= CHUNK_SIZE) {\n            const n = Math.min(nBytes -i, CHUNK_SIZE);\n            const buff = await fdFrom.read(n);\n            await fdTo.write(buff);\n        }\n    }\n\n    async function readG1() {\n        const buff = await fdFrom.read(curve.G1.F.n8*2);\n        return curve.G1.fromRprUncompressed(buff, 0);\n    }\n\n    async function readG2() {\n        const buff = await fdFrom.read(curve.G2.F.n8*2);\n        return curve.G2.fromRprUncompressed(buff, 0);\n    }\n\n    async function writeG1(P) {\n        const buff = new Uint8Array(sG1);\n        curve.G1.toRprUncompressed(buff, 0, P);\n        await fdTo.write(buff);\n    }\n\n    async function writeG2(P) {\n        const buff = new Uint8Array(sG2);\n        curve.G2.toRprUncompressed(buff, 0, P);\n        await fdTo.write(buff);\n    }\n\n\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as zkeyUtils from \"./zkey_utils.js\";\nimport { getCurveFromQ as getCurve } from \"./curves.js\";\nimport { utils } from \"ffjavascript\";\nconst {stringifyBigInts} = utils;\n\nexport default async function zkeyExportVerificationKey(zkeyName, /* logger */ ) {\n\n    const {fd, sections} = await binFileUtils.readBinFile(zkeyName, \"zkey\", 2);\n    const zkey = await zkeyUtils.readHeader(fd, sections);\n\n    let res;\n    if (zkey.protocol == \"groth16\") {\n        res = await groth16Vk(zkey, fd, sections);\n    } else if (zkey.protocol == \"plonk\") {\n        res = await plonkVk(zkey);\n    } else {\n        throw new Error(\"zkey file is not groth16\");\n    }\n\n    await fd.close();\n\n    return res;\n}\n\n\nasync function groth16Vk(zkey, fd, sections) {\n    const curve = await getCurve(zkey.q);\n    const sG1 = curve.G1.F.n8*2;\n\n    const alphaBeta = await curve.pairing( zkey.vk_alpha_1 , zkey.vk_beta_2 );\n\n    let vKey = {\n        protocol: zkey.protocol,\n        curve: curve.name,\n        nPublic: zkey.nPublic,\n\n        vk_alpha_1: curve.G1.toObject(zkey.vk_alpha_1),\n\n        vk_beta_2: curve.G2.toObject(zkey.vk_beta_2),\n        vk_gamma_2:  curve.G2.toObject(zkey.vk_gamma_2),\n        vk_delta_2:  curve.G2.toObject(zkey.vk_delta_2),\n\n        vk_alphabeta_12: curve.Gt.toObject(alphaBeta)\n    };\n\n    // Read IC Section\n    ///////////\n    await binFileUtils.startReadUniqueSection(fd, sections, 3);\n    vKey.IC = [];\n    for (let i=0; i<= zkey.nPublic; i++) {\n        const buff = await fd.read(sG1);\n        const P = curve.G1.toObject(buff);\n        vKey.IC.push(P);\n    }\n    await binFileUtils.endReadSection(fd);\n\n    vKey = stringifyBigInts(vKey);\n\n    return vKey;\n}\n\n\nasync function plonkVk(zkey) {\n    const curve = await getCurve(zkey.q);\n\n    let vKey = {\n        protocol: zkey.protocol,\n        curve: curve.name,\n        nPublic: zkey.nPublic,\n        power: zkey.power,\n\n        k1: curve.Fr.toObject(zkey.k1),\n        k2: curve.Fr.toObject(zkey.k2),\n\n        Qm: curve.G1.toObject(zkey.Qm),\n        Ql: curve.G1.toObject(zkey.Ql),\n        Qr: curve.G1.toObject(zkey.Qr),\n        Qo: curve.G1.toObject(zkey.Qo),\n        Qc: curve.G1.toObject(zkey.Qc),\n        S1: curve.G1.toObject(zkey.S1),\n        S2: curve.G1.toObject(zkey.S2),\n        S3: curve.G1.toObject(zkey.S3),\n\n        X_2: curve.G2.toObject(zkey.X_2),\n\n        w: curve.Fr.toObject(curve.Fr.w[zkey.power])\n    };\n\n    vKey = stringifyBigInts(vKey);\n\n    return vKey;\n}\n", "import * as fastFile from \"fastfile\";\nimport ejs from \"ejs\";\n\nimport exportVerificationKey from \"./zkey_export_verificationkey.js\";\n// Not ready yet\n// module.exports.generateVerifier_kimleeoh = generateVerifier_kimleeoh;\n\n\n\nexport default async function exportSolidityVerifier(zKeyName, templates, logger) {\n\n    const verificationKey = await exportVerificationKey(zKeyName, logger);\n\n    let template = templates[verificationKey.protocol];\n\n    return ejs.render(template ,  verificationKey);\n}\n", "/*\n    Copyright 2018 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nexport {default as setup} from \"./plonk_setup.js\";\nexport {default as fullProve} from \"./plonk_fullprove.js\";\nexport {default as prove} from \"./plonk_prove.js\";\nexport {default as verify} from \"./plonk_verify.js\";\nexport {default as exportSolidityCallData} from \"./plonk_exportsoliditycalldata.js\";\n", "/*\n    Copyright 2021 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/* Implementation of this paper: https://eprint.iacr.org/2019/953.pdf */\n\nimport {readR1csFd} from \"r1csfile\";\nimport * as utils from \"./powersoftau_utils.js\";\nimport {\n    readBinFile,\n    createBinFile,\n    readSection,\n    writeBigInt,\n    startWriteSection,\n    endWriteSection,\n} from \"@iden3/binfileutils\";\nimport { log2  } from \"./misc.js\";\nimport { Scalar, BigBuffer } from \"ffjavascript\";\nimport Blake2b from \"blake2b-wasm\";\nimport BigArray from \"./bigarray.js\";\n\n\nexport default async function plonkSetup(r1csName, ptauName, zkeyName, logger) {\n\n    if (globalThis.gc) {globalThis.gc();}\n\n    await Blake2b.ready();\n\n    const {fd: fdPTau, sections: sectionsPTau} = await readBinFile(ptauName, \"ptau\", 1, 1<<22, 1<<24);\n    const {curve, power} = await utils.readPTauHeader(fdPTau, sectionsPTau);\n    const {fd: fdR1cs, sections: sectionsR1cs} = await readBinFile(r1csName, \"r1cs\", 1, 1<<22, 1<<24);\n\n    const r1cs = await readR1csFd(fdR1cs, sectionsR1cs, {loadConstraints: true, loadCustomGates: true});\n\n    const sG1 = curve.G1.F.n8*2;\n    const G1 = curve.G1;\n    const sG2 = curve.G2.F.n8*2;\n    const Fr = curve.Fr;\n    const n8r = curve.Fr.n8;\n\n    if (logger) logger.info(\"Reading r1cs\");\n    let sR1cs = await readSection(fdR1cs, sectionsR1cs, 2);\n\n    const plonkConstraints = new BigArray();\n    const plonkAdditions = new BigArray();\n    let plonkNVars = r1cs.nVars;\n\n    const nPublic = r1cs.nOutputs + r1cs.nPubInputs;\n\n    await processConstraints(curve.Fr, r1cs, logger);\n\n    if (globalThis.gc) {globalThis.gc();}\n\n    const fdZKey = await createBinFile(zkeyName, \"zkey\", 1, 14, 1<<22, 1<<24);\n\n\n    if (r1cs.prime != curve.r) {\n        if (logger) logger.error(\"r1cs curve does not match powers of tau ceremony curve\");\n        return -1;\n    }\n\n    let cirPower = log2(plonkConstraints.length -1) +1;\n    if (cirPower < 3) cirPower = 3;   // As the t polinomal is n+5 whe need at least a power of 4\n    const domainSize = 2 ** cirPower;\n\n    if (logger) logger.info(\"Plonk constraints: \" + plonkConstraints.length);\n    if (cirPower > power) {\n        if (logger) logger.error(`circuit too big for this power of tau ceremony. ${plonkConstraints.length} > 2**${power}`);\n        return -1;\n    }\n\n    if (!sectionsPTau[12]) {\n        if (logger) logger.error(\"Powers of tau is not prepared.\");\n        return -1;\n    }\n\n\n    const LPoints = new BigBuffer(domainSize*sG1);\n    const o = sectionsPTau[12][0].p + ((2 ** (cirPower)) -1)*sG1;\n    await fdPTau.readToBuffer(LPoints, 0, domainSize*sG1, o);\n\n    const [k1, k2] = getK1K2();\n\n    const vk = {};\n\n\n    await writeAdditions(3, \"Additions\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeWitnessMap(4, 0, \"Amap\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeWitnessMap(5, 1, \"Bmap\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeWitnessMap(6, 2, \"Cmap\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeQMap(7, 3, \"Qm\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeQMap(8, 4, \"Ql\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeQMap(9, 5, \"Qr\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeQMap(10, 6, \"Qo\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeQMap(11, 7, \"Qc\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeSigma(12, \"sigma\");\n    if (globalThis.gc) {globalThis.gc();}\n    await writeLs(13, \"lagrange polynomials\");\n    if (globalThis.gc) {globalThis.gc();}\n\n    // Write PTau points\n    ////////////\n\n    await startWriteSection(fdZKey, 14);\n    const buffOut = new BigBuffer((domainSize+6)*sG1);\n    await fdPTau.readToBuffer(buffOut, 0, (domainSize+6)*sG1, sectionsPTau[2][0].p);\n    await fdZKey.write(buffOut);\n    await endWriteSection(fdZKey);\n    if (globalThis.gc) {globalThis.gc();}\n\n\n    await writeHeaders();\n\n    await fdZKey.close();\n    await fdR1cs.close();\n    await fdPTau.close();\n\n    if (logger) logger.info(\"Setup Finished\");\n\n    return ;\n\n    async function processConstraints(Fr, r1cs, logger) {\n\n        function normalize(linearComb) {\n            const ss = Object.keys(linearComb);\n            for (let i = 0; i < ss.length; i++) {\n                if (linearComb[ss[i]] == 0n) delete linearComb[ss[i]];\n            }\n        }\n\n        function join(linearComb1, k, linearComb2) {\n            const res = {};\n\n            for (let s in linearComb1) {\n                if (typeof res[s] == \"undefined\") {\n                    res[s] = Fr.mul(k, linearComb1[s]);\n                } else {\n                    res[s] = Fr.add(res[s], Fr.mul(k, linearComb1[s]));\n                }\n            }\n\n            for (let s in linearComb2) {\n                if (typeof res[s] == \"undefined\") {\n                    res[s] = linearComb2[s];\n                } else {\n                    res[s] = Fr.add(res[s], linearComb2[s]);\n                }\n            }\n            normalize(res);\n            return res;\n        }\n\n        function reduceCoefs(linearComb, maxC) {\n            const res = {\n                k: Fr.zero,\n                s: [],\n                coefs: []\n            };\n            const cs = [];\n\n            for (let s in linearComb) {\n                if (s == 0) {\n                    res.k = Fr.add(res.k, linearComb[s]);\n                } else if (linearComb[s] != 0n) {\n                    cs.push([Number(s), linearComb[s]])\n                }\n            }\n            while (cs.length > maxC) {\n                const c1 = cs.shift();\n                const c2 = cs.shift();\n\n                const sl = c1[0];\n                const sr = c2[0];\n                const so = plonkNVars++;\n                const qm = Fr.zero;\n                const ql = Fr.neg(c1[1]);\n                const qr = Fr.neg(c2[1]);\n                const qo = Fr.one;\n                const qc = Fr.zero;\n\n                plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);\n\n                plonkAdditions.push([sl, sr, c1[1], c2[1]]);\n\n                cs.push([so, Fr.one]);\n            }\n            for (let i = 0; i < cs.length; i++) {\n                res.s[i] = cs[i][0];\n                res.coefs[i] = cs[i][1];\n            }\n            while (res.coefs.length < maxC) {\n                res.s.push(0);\n                res.coefs.push(Fr.zero);\n            }\n            return res;\n        }\n\n        function addConstraintSum(lc) {\n            const C = reduceCoefs(lc, 3);\n            const sl = C.s[0];\n            const sr = C.s[1];\n            const so = C.s[2];\n            const qm = Fr.zero;\n            const ql = C.coefs[0];\n            const qr = C.coefs[1];\n            const qo = C.coefs[2];\n            const qc = C.k;\n            plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);\n        }\n\n        function addConstraintMul(lcA, lcB, lcC) {\n            const A = reduceCoefs(lcA, 1);\n            const B = reduceCoefs(lcB, 1);\n            const C = reduceCoefs(lcC, 1);\n\n\n            const sl = A.s[0];\n            const sr = B.s[0];\n            const so = C.s[0];\n            const qm = Fr.mul(A.coefs[0], B.coefs[0]);\n            const ql = Fr.mul(A.coefs[0], B.k);\n            const qr = Fr.mul(A.k, B.coefs[0]);\n            const qo = Fr.neg(C.coefs[0]);\n            const qc = Fr.sub(Fr.mul(A.k, B.k), C.k);\n            plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);\n        }\n\n        function getLinearCombinationType(lc) {\n            let k = Fr.zero;\n            let n = 0;\n            const ss = Object.keys(lc);\n            for (let i = 0; i < ss.length; i++) {\n                if (lc[ss[i]] == 0n) {\n                    delete lc[ss[i]];\n                } else if (ss[i] == 0) {\n                    k = Fr.add(k, lc[ss[i]]);\n                } else {\n                    n++;\n                }\n            }\n            if (n > 0) return n.toString();\n            if (k != Fr.zero) return \"k\";\n            return \"0\";\n        }\n\n        function process(lcA, lcB, lcC) {\n            const lctA = getLinearCombinationType(lcA);\n            const lctB = getLinearCombinationType(lcB);\n            if ((lctA === \"0\") || (lctB === \"0\")) {\n                normalize(lcC);\n                addConstraintSum(lcC);\n            } else if (lctA === \"k\") {\n                const lcCC = join(lcB, lcA[0], lcC);\n                addConstraintSum(lcCC);\n            } else if (lctB === \"k\") {\n                const lcCC = join(lcA, lcB[0], lcC);\n                addConstraintSum(lcCC);\n            } else {\n                addConstraintMul(lcA, lcB, lcC);\n            }\n        }\n\n        for (let s = 1; s <= nPublic; s++) {\n            const sl = s;\n            const sr = 0;\n            const so = 0;\n            const qm = Fr.zero;\n            const ql = Fr.one;\n            const qr = Fr.zero;\n            const qo = Fr.zero;\n            const qc = Fr.zero;\n\n            plonkConstraints.push([sl, sr, so, qm, ql, qr, qo, qc]);\n        }\n\n        for (let c = 0; c < r1cs.constraints.length; c++) {\n            if ((logger) && (c % 10000 === 0)) logger.debug(`processing constraints: ${c}/${r1cs.nConstraints}`);\n            process(...r1cs.constraints[c]);\n        }\n    }\n\n    async function writeWitnessMap(sectionNum, posConstraint, name) {\n        await startWriteSection(fdZKey, sectionNum);\n        for (let i=0; i<plonkConstraints.length; i++) {\n            await fdZKey.writeULE32(plonkConstraints[i][posConstraint]);\n            if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name}: ${i}/${plonkConstraints.length}`);\n        }\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeQMap(sectionNum, posConstraint, name) {\n        let Q = new BigBuffer(domainSize*n8r);\n        for (let i=0; i<plonkConstraints.length; i++) {\n            Q.set(plonkConstraints[i][posConstraint], i*n8r);\n            if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name}: ${i}/${plonkConstraints.length}`);\n        }\n        await startWriteSection(fdZKey, sectionNum);\n        await writeP4(Q);\n        await endWriteSection(fdZKey);\n        Q = await Fr.batchFromMontgomery(Q);\n        vk[name]= await curve.G1.multiExpAffine(LPoints, Q, logger, \"multiexp \"+name);\n    }\n\n    async function writeP4(buff) {\n        const q = await Fr.ifft(buff);\n        const q4 = new BigBuffer(domainSize*n8r*4);\n        q4.set(q, 0);\n        const Q4 = await Fr.fft(q4);\n        await fdZKey.write(q);\n        await fdZKey.write(Q4);\n    }\n\n    async function writeAdditions(sectionNum, name) {\n        await startWriteSection(fdZKey, sectionNum);\n        const buffOut = new Uint8Array((2*4+2*n8r));\n        const buffOutV = new DataView(buffOut.buffer);\n        for (let i=0; i<plonkAdditions.length; i++) {\n            const addition=plonkAdditions[i];\n            let o=0;\n            buffOutV.setUint32(o, addition[0], true); o+=4;\n            buffOutV.setUint32(o, addition[1], true); o+=4;\n            // The value is storen in  Montgomery. stored = v*R\n            // so when montgomery multiplicated by the witness  it result = v*R*w/R = v*w \n            buffOut.set(addition[2], o); o+= n8r;\n            buffOut.set(addition[3], o); o+= n8r;\n            await fdZKey.write(buffOut);\n            if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name}: ${i}/${plonkAdditions.length}`);\n        }\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeSigma(sectionNum, name) {\n        const sigma = new BigBuffer(n8r*domainSize*3);\n        const lastAparence =  new BigArray(plonkNVars);\n        const firstPos = new BigArray(plonkNVars);\n        let w = Fr.one;\n        for (let i=0; i<domainSize;i++) {\n            if (i<plonkConstraints.length) {\n                buildSigma(plonkConstraints[i][0], i);\n                buildSigma(plonkConstraints[i][1], domainSize + i);\n                buildSigma(plonkConstraints[i][2], domainSize*2 + i);\n            } else {\n                buildSigma(0, i);\n                buildSigma(0, domainSize + i);\n                buildSigma(0, domainSize*2 + i);\n            }\n            w = Fr.mul(w, Fr.w[cirPower]);\n            if ((logger)&&(i%1000000 == 0)) logger.debug(`writing ${name} phase1: ${i}/${plonkConstraints.length}`);\n        }\n        for (let s=0; s<plonkNVars; s++) {\n            if (typeof firstPos[s] !== \"undefined\") {\n                sigma.set(lastAparence[s], firstPos[s]*n8r);\n            } else {\n                // throw new Error(\"Variable not used\");\n                console.log(\"Variable not used\");\n            }\n            if ((logger)&&(s%1000000 == 0)) logger.debug(`writing ${name} phase2: ${s}/${plonkNVars}`);\n        }\n\n        if (globalThis.gc) {globalThis.gc();}\n        await startWriteSection(fdZKey, sectionNum);\n        let S1 = sigma.slice(0, domainSize*n8r);\n        await writeP4(S1);\n        if (globalThis.gc) {globalThis.gc();}\n        let S2 = sigma.slice(domainSize*n8r, domainSize*n8r*2);\n        await writeP4(S2);\n        if (globalThis.gc) {globalThis.gc();}\n        let S3 = sigma.slice(domainSize*n8r*2, domainSize*n8r*3);\n        await writeP4(S3);\n        if (globalThis.gc) {globalThis.gc();}\n        await endWriteSection(fdZKey);\n\n        S1 = await Fr.batchFromMontgomery(S1);\n        S2 = await Fr.batchFromMontgomery(S2);\n        S3 = await Fr.batchFromMontgomery(S3);\n\n        vk.S1= await curve.G1.multiExpAffine(LPoints, S1, logger, \"multiexp S1\");\n        if (globalThis.gc) {globalThis.gc();}\n        vk.S2= await curve.G1.multiExpAffine(LPoints, S2, logger, \"multiexp S2\");\n        if (globalThis.gc) {globalThis.gc();}\n        vk.S3= await curve.G1.multiExpAffine(LPoints, S3, logger, \"multiexp S3\");\n        if (globalThis.gc) {globalThis.gc();}\n\n        function buildSigma(s, p) {\n            if (typeof lastAparence[s] === \"undefined\") {\n                firstPos[s] = p;\n            } else {\n                sigma.set(lastAparence[s], p*n8r);\n            }\n            let v;\n            if (p<domainSize) {\n                v = w;\n            } else if (p<2*domainSize) {\n                v = Fr.mul(w, k1);\n            } else {\n                v = Fr.mul(w, k2);\n            }\n            lastAparence[s]=v;\n        }\n    }\n\n    async function writeLs(sectionNum, name) {\n        await startWriteSection(fdZKey, sectionNum);\n        const l=Math.max(nPublic, 1);\n        for (let i=0; i<l; i++) {\n            let buff = new BigBuffer(domainSize*n8r);\n            buff.set(Fr.one, i*n8r);\n            await writeP4(buff);\n            if (logger) logger.debug(`writing ${name} ${i}/${l}`);\n        }\n        await endWriteSection(fdZKey);\n    }\n\n    async function writeHeaders() {\n\n        // Write the header\n        ///////////\n        await startWriteSection(fdZKey, 1);\n        await fdZKey.writeULE32(2); // Plonk\n        await endWriteSection(fdZKey);\n\n        // Write the Plonk header section\n        ///////////\n\n        await startWriteSection(fdZKey, 2);\n        const primeQ = curve.q;\n        const n8q = (Math.floor( (Scalar.bitLength(primeQ) - 1) / 64) +1)*8;\n\n        const primeR = curve.r;\n        const n8r = (Math.floor( (Scalar.bitLength(primeR) - 1) / 64) +1)*8;\n\n        await fdZKey.writeULE32(n8q);\n        await writeBigInt(fdZKey, primeQ, n8q);\n        await fdZKey.writeULE32(n8r);\n        await writeBigInt(fdZKey, primeR, n8r);\n        await fdZKey.writeULE32(plonkNVars);                         // Total number of bars\n        await fdZKey.writeULE32(nPublic);                       // Total number of public vars (not including ONE)\n        await fdZKey.writeULE32(domainSize);                  // domainSize\n        await fdZKey.writeULE32(plonkAdditions.length);                  // domainSize\n        await fdZKey.writeULE32(plonkConstraints.length); \n\n        await fdZKey.write(k1);\n        await fdZKey.write(k2);\n\n        await fdZKey.write(G1.toAffine(vk.Qm));\n        await fdZKey.write(G1.toAffine(vk.Ql));\n        await fdZKey.write(G1.toAffine(vk.Qr));\n        await fdZKey.write(G1.toAffine(vk.Qo));\n        await fdZKey.write(G1.toAffine(vk.Qc));\n\n        await fdZKey.write(G1.toAffine(vk.S1));\n        await fdZKey.write(G1.toAffine(vk.S2));\n        await fdZKey.write(G1.toAffine(vk.S3));\n\n        let bX_2;\n        bX_2 = await fdPTau.read(sG2, sectionsPTau[3][0].p + sG2);\n        await fdZKey.write(bX_2);\n\n        await endWriteSection(fdZKey);\n    }\n\n    function getK1K2() {\n        let k1 = Fr.two;\n        while (isIncluded(k1, [], cirPower)) Fr.add(k1, Fr.one);\n        let k2 = Fr.add(k1, Fr.one);\n        while (isIncluded(k2, [k1], cirPower)) Fr.add(k2, Fr.one);\n        return [k1, k2];\n\n\n        function isIncluded(k, kArr, pow) {\n            const domainSize= 2**pow;\n            let w = Fr.one;\n            for (let i=0; i<domainSize; i++) {\n                if (Fr.eq(k, w)) return true;\n                for (let j=0; j<kArr.length; j++) {\n                    if (Fr.eq(k, Fr.mul(kArr[j], w))) return true;\n                }\n                w = Fr.mul(w, Fr.w[pow]);\n            }\n            return false;\n        }\n    }\n}\n\n\n", "/*\n    Copyright 2021 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport plonk_prove from \"./plonk_prove.js\";\nimport wtns_calculate from \"./wtns_calculate.js\";\nimport {utils} from 'ffjavascript';\nconst {unstringifyBigInts} = utils;\n\nexport default async function plonkFullProve(_input, wasmFile, zkeyFileName, logger) {\n    const input = unstringifyBigInts(_input);\n\n    const wtns= {\n        type: \"mem\"\n    };\n    await wtns_calculate(input, wasmFile, wtns);\n    return await plonk_prove(zkeyFileName, wtns, logger);\n}\n", "/*\n    Copyright 2021 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/* Implementation of this paper: https://eprint.iacr.org/2019/953.pdf section 8.4 */\n\nimport * as binFileUtils from \"@iden3/binfileutils\";\nimport * as zkeyUtils from \"./zkey_utils.js\";\nimport * as wtnsUtils from \"./wtns_utils.js\";\nimport { getCurveFromQ as getCurve } from \"./curves.js\";\nimport { Scalar, utils, BigBuffer } from \"ffjavascript\";\nconst {stringifyBigInts} = utils;\nimport jsSha3 from \"js-sha3\";\nconst { keccak256 } = jsSha3;\n\nexport default async function plonk16Prove(zkeyFileName, witnessFileName, logger) {\n    const {fd: fdWtns, sections: sectionsWtns} = await binFileUtils.readBinFile(witnessFileName, \"wtns\", 2, 1<<25, 1<<23);\n\n    const wtns = await wtnsUtils.readHeader(fdWtns, sectionsWtns);\n\n    const {fd: fdZKey, sections: sectionsZKey} = await binFileUtils.readBinFile(zkeyFileName, \"zkey\", 2, 1<<25, 1<<23);\n\n    const zkey = await zkeyUtils.readHeader(fdZKey, sectionsZKey);\n    if (zkey.protocol != \"plonk\") {\n        throw new Error(\"zkey file is not plonk\");\n    }\n\n    if (!Scalar.eq(zkey.r,  wtns.q)) {\n        throw new Error(\"Curve of the witness does not match the curve of the proving key\");\n    }\n\n    if (wtns.nWitness != zkey.nVars -zkey.nAdditions) {\n        throw new Error(`Invalid witness length. Circuit: ${zkey.nVars}, witness: ${wtns.nWitness}, ${zkey.nAdditions}`);\n    }\n\n    const curve = zkey.curve;\n    const Fr = curve.Fr;\n    const G1 = curve.G1;\n    const n8r = curve.Fr.n8;\n\n    if (logger) logger.debug(\"Reading Wtns\");\n    const buffWitness = await binFileUtils.readSection(fdWtns, sectionsWtns, 2);\n    // First element in plonk is not used and can be any value. (But always the same).\n    // We set it to zero to go faster in the exponentiations.\n    buffWitness.set(Fr.zero, 0);\n    const buffInternalWitness = new BigBuffer(n8r*zkey.nAdditions);\n\n    await calculateAdditions();\n\n    let A,B,C,Z;\n    let A4, B4, C4, Z4;\n    let pol_a,pol_b,pol_c, pol_z, pol_t, pol_r;\n    let proof = {};\n\n    const sigmaBuff = new BigBuffer(zkey.domainSize*n8r*4*3);\n    let o = sectionsZKey[12][0].p + zkey.domainSize*n8r;\n    await fdZKey.readToBuffer(sigmaBuff, 0 , zkey.domainSize*n8r*4, o);\n    o += zkey.domainSize*n8r*5;\n    await fdZKey.readToBuffer(sigmaBuff, zkey.domainSize*n8r*4 , zkey.domainSize*n8r*4, o);\n    o += zkey.domainSize*n8r*5;\n    await fdZKey.readToBuffer(sigmaBuff, zkey.domainSize*n8r*8 , zkey.domainSize*n8r*4, o);\n\n    const pol_s1 = new BigBuffer(zkey.domainSize*n8r);\n    await fdZKey.readToBuffer(pol_s1, 0 , zkey.domainSize*n8r, sectionsZKey[12][0].p);\n\n    const pol_s2 = new BigBuffer(zkey.domainSize*n8r);\n    await fdZKey.readToBuffer(pol_s2, 0 , zkey.domainSize*n8r, sectionsZKey[12][0].p + 5*zkey.domainSize*n8r);\n\n    const PTau = await binFileUtils.readSection(fdZKey, sectionsZKey, 14);\n\n\n    const ch = {};\n\n    await round1();\n    await round2();\n    await round3();\n    await round4();\n    await round5();\n\n\n    ///////////////////////\n    // Final adjustments //\n    ///////////////////////\n\n    proof.protocol = \"plonk\";\n    proof.curve = curve.name;\n\n    await fdZKey.close();\n    await fdWtns.close();\n\n    let publicSignals = [];\n\n    for (let i=1; i<= zkey.nPublic; i++) {\n        const pub = buffWitness.slice(i*Fr.n8, i*Fr.n8+Fr.n8);\n        publicSignals.push(Scalar.fromRprLE(pub));\n    }\n\n    proof.A = G1.toObject(proof.A);\n    proof.B = G1.toObject(proof.B);\n    proof.C = G1.toObject(proof.C);\n    proof.Z = G1.toObject(proof.Z);\n\n    proof.T1 = G1.toObject(proof.T1);\n    proof.T2 = G1.toObject(proof.T2);\n    proof.T3 = G1.toObject(proof.T3);\n\n    proof.eval_a = Fr.toObject(proof.eval_a);\n    proof.eval_b = Fr.toObject(proof.eval_b);\n    proof.eval_c = Fr.toObject(proof.eval_c);\n    proof.eval_s1 = Fr.toObject(proof.eval_s1);\n    proof.eval_s2 = Fr.toObject(proof.eval_s2);\n    proof.eval_zw = Fr.toObject(proof.eval_zw);\n    proof.eval_t = Fr.toObject(proof.eval_t);\n    proof.eval_r = Fr.toObject(proof.eval_r);\n\n    proof.Wxi = G1.toObject(proof.Wxi);\n    proof.Wxiw = G1.toObject(proof.Wxiw);\n\n    delete proof.eval_t;\n\n    proof = stringifyBigInts(proof);\n    publicSignals = stringifyBigInts(publicSignals);\n\n    return {proof, publicSignals};\n\n    async function calculateAdditions() {\n        const additionsBuff = await binFileUtils.readSection(fdZKey, sectionsZKey, 3);\n\n        const sSum = 8+curve.Fr.n8*2;\n\n        for (let i=0; i<zkey.nAdditions; i++) {\n            const ai= readUInt32(additionsBuff, i*sSum);\n            const bi= readUInt32(additionsBuff, i*sSum+4);\n            const ac= additionsBuff.slice(i*sSum+8, i*sSum+8+n8r);\n            const bc= additionsBuff.slice(i*sSum+8+n8r, i*sSum+8+n8r*2);\n            const aw= getWitness(ai);\n            const bw= getWitness(bi);\n\n            const r = curve.Fr.add(\n                curve.Fr.mul(ac, aw),\n                curve.Fr.mul(bc, bw)\n            );\n            buffInternalWitness.set(r, n8r*i);\n        }\n\n    }\n\n    async function buildABC() {\n        let A = new BigBuffer(zkey.domainSize * n8r);\n        let B = new BigBuffer(zkey.domainSize * n8r);\n        let C = new BigBuffer(zkey.domainSize * n8r);\n\n        const aMap = await binFileUtils.readSection(fdZKey, sectionsZKey, 4);\n        const bMap = await binFileUtils.readSection(fdZKey, sectionsZKey, 5);\n        const cMap = await binFileUtils.readSection(fdZKey, sectionsZKey, 6);\n\n        for (let i=0; i<zkey.nConstrains; i++) {\n            const iA = readUInt32(aMap, i*4);\n            A.set(getWitness(iA), i*n8r);\n            const iB = readUInt32(bMap, i*4);\n            B.set(getWitness(iB), i*n8r);\n            const iC = readUInt32(cMap, i*4);\n            C.set(getWitness(iC), i*n8r);\n        }\n\n        A = await Fr.batchToMontgomery(A);\n        B = await Fr.batchToMontgomery(B);\n        C = await Fr.batchToMontgomery(C);\n\n        return [A,B,C];\n    }\n\n    function readUInt32(b, o) {\n        const buff = b.slice(o, o+4);\n        const buffV = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);\n        return buffV.getUint32(0, true);\n    }\n\n    function getWitness(idx) {\n        if (idx < zkey.nVars-zkey.nAdditions) {\n            return buffWitness.slice(idx*n8r, idx*n8r+n8r);\n        } else if (idx < zkey.nVars) {\n            return buffInternalWitness.slice((idx - (zkey.nVars-zkey.nAdditions))*n8r, (idx-(zkey.nVars-zkey.nAdditions))*n8r + n8r);\n        } else {\n            return curve.Fr.zero;\n        }\n    }\n\n    async function round1() {\n        ch.b = [];\n        for (let i=1; i<=11; i++) {\n            ch.b[i] = curve.Fr.random();\n        }\n    \n        [A, B, C] = await buildABC();\n\n        [pol_a, A4] = await to4T(A, [ch.b[2], ch.b[1]]);\n        [pol_b, B4] = await to4T(B, [ch.b[4], ch.b[3]]);\n        [pol_c, C4] = await to4T(C, [ch.b[6], ch.b[5]]);\n\n                \n        proof.A = await expTau(pol_a, \"multiexp A\");\n        proof.B = await expTau(pol_b, \"multiexp B\");\n        proof.C = await expTau(pol_c, \"multiexp C\");\n    }\n\n    async function round2() {\n\n        const transcript1 = new Uint8Array(zkey.nPublic*n8r + G1.F.n8*2*3);\n        for (let i=0; i<zkey.nPublic; i++) {\n            Fr.toRprBE(transcript1, i*n8r, A.slice((i)*n8r, (i+1)*n8r));\n        }\n        G1.toRprUncompressed(transcript1, zkey.nPublic*n8r + 0, proof.A);\n        G1.toRprUncompressed(transcript1, zkey.nPublic*n8r + G1.F.n8*2, proof.B);\n        G1.toRprUncompressed(transcript1, zkey.nPublic*n8r + G1.F.n8*4, proof.C);\n\n        ch.beta = hashToFr(transcript1);\n        if (logger) logger.debug(\"beta: \" + Fr.toString(ch.beta));\n    \n        const transcript2 = new Uint8Array(n8r);\n        Fr.toRprBE(transcript2, 0, ch.beta);\n        ch.gamma = hashToFr(transcript2);\n        if (logger) logger.debug(\"gamma: \" + Fr.toString(ch.gamma));\n    \n        let numArr = new BigBuffer(Fr.n8*zkey.domainSize);\n        let denArr = new BigBuffer(Fr.n8*zkey.domainSize);\n\n        numArr.set(Fr.one, 0);\n        denArr.set(Fr.one, 0);\n\n        let w = Fr.one;\n        for (let i=0; i<zkey.domainSize; i++) {\n            let n1 = A.slice(i*n8r, (i+1)*n8r);\n            n1 = Fr.add( n1, Fr.mul(ch.beta, w) );\n            n1 = Fr.add( n1, ch.gamma );\n\n            let n2 = B.slice(i*n8r, (i+1)*n8r);\n            n2 = Fr.add( n2, Fr.mul(zkey.k1, Fr.mul(ch.beta, w) ));\n            n2 = Fr.add( n2, ch.gamma );\n\n            let n3 = C.slice(i*n8r, (i+1)*n8r);\n            n3 = Fr.add( n3, Fr.mul(zkey.k2, Fr.mul(ch.beta, w) ));\n            n3 = Fr.add( n3, ch.gamma );\n\n            const num = Fr.mul(n1, Fr.mul(n2, n3));\n\n            let d1 = A.slice(i*n8r, (i+1)*n8r);\n            d1 = Fr.add(d1, Fr.mul( sigmaBuff.slice(i*n8r*4, i*n8r*4 + n8r) , ch.beta));\n            d1 = Fr.add(d1, ch.gamma);\n\n            let d2 = B.slice(i*n8r, (i+1)*n8r);\n            d2 = Fr.add(d2, Fr.mul( sigmaBuff.slice((zkey.domainSize + i)*4*n8r, (zkey.domainSize + i)*4*n8r+n8r) , ch.beta));\n            d2 = Fr.add(d2, ch.gamma);\n\n            let d3 = C.slice(i*n8r, (i+1)*n8r);\n            d3 = Fr.add(d3, Fr.mul( sigmaBuff.slice((zkey.domainSize*2 + i)*4*n8r, (zkey.domainSize*2 + i)*4*n8r + n8r) , ch.beta));\n            d3 = Fr.add(d3, ch.gamma);\n\n            const den = Fr.mul(d1, Fr.mul(d2, d3));\n\n            numArr.set(  \n                Fr.mul( \n                    numArr.slice(i*n8r,(i+1)*n8r) , \n                    num\n                ),\n                ((i+1)%zkey.domainSize)*n8r\n            );\n\n            denArr.set(  \n                Fr.mul( \n                    denArr.slice(i*n8r,(i+1)*n8r) , \n                    den\n                ),\n                ((i+1)%zkey.domainSize)*n8r\n            );\n\n            w = Fr.mul(w, Fr.w[zkey.power]);\n        }\n\n        denArr = await Fr.batchInverse(denArr);\n\n        // TODO: Do it in assembly and in parallel\n        for (let i=0; i<zkey.domainSize; i++) {\n            numArr.set(   Fr.mul( numArr.slice(i*n8r, (i+1)*n8r), denArr.slice(i*n8r, (i+1)*n8r) )      ,i*n8r);\n        }\n\n        if (!Fr.eq(numArr.slice(0, n8r), Fr.one)) {\n            throw new Error(\"Copy constraints does not match\");\n        }\n\n        Z = numArr;\n\n        [pol_z, Z4] = await to4T(Z, [ch.b[9], ch.b[8], ch.b[7]]);\n\n        proof.Z = await expTau( pol_z, \"multiexp Z\");\n    }\n\n    async function round3() {\n\n        /*\n        async function checkDegree(P) {\n            const p = await curve.Fr.ifft(P);\n            let deg = (P.byteLength/n8r)-1;\n            while ((deg>0)&&(Fr.isZero(p.slice(deg*n8r, deg*n8r+n8r)))) deg--;\n            return deg;\n        }\n\n        function printPol(P) {\n            const n=(P.byteLength/n8r);\n            console.log(\"[\");\n            for (let i=0; i<n; i++) {\n                console.log(Fr.toString(P.slice(i*n8r, i*n8r+n8r)));\n            }\n            console.log(\"]\");\n        }\n        */\n\n        if (logger) logger.debug(\"phse3: Reading QM4\");    \n        const QM4 = new BigBuffer(zkey.domainSize*4*n8r);\n        await fdZKey.readToBuffer(QM4, 0 , zkey.domainSize*n8r*4, sectionsZKey[7][0].p + zkey.domainSize*n8r);\n\n        if (logger) logger.debug(\"phse3: Reading QL4\");    \n        const QL4 = new BigBuffer(zkey.domainSize*4*n8r);\n        await fdZKey.readToBuffer(QL4, 0 , zkey.domainSize*n8r*4, sectionsZKey[8][0].p + zkey.domainSize*n8r);\n\n        if (logger) logger.debug(\"phse3: Reading QR4\");    \n        const QR4 = new BigBuffer(zkey.domainSize*4*n8r);\n        await fdZKey.readToBuffer(QR4, 0 , zkey.domainSize*n8r*4, sectionsZKey[9][0].p + zkey.domainSize*n8r);\n\n        if (logger) logger.debug(\"phse3: Reading QO4\");    \n        const QO4 = new BigBuffer(zkey.domainSize*4*n8r);\n        await fdZKey.readToBuffer(QO4, 0 , zkey.domainSize*n8r*4, sectionsZKey[10][0].p + zkey.domainSize*n8r);\n\n        if (logger) logger.debug(\"phse3: Reading QC4\");    \n        const QC4 = new BigBuffer(zkey.domainSize*4*n8r);\n        await fdZKey.readToBuffer(QC4, 0 , zkey.domainSize*n8r*4, sectionsZKey[11][0].p + zkey.domainSize*n8r);\n\n        const lPols = await binFileUtils.readSection(fdZKey, sectionsZKey, 13);\n\n        const transcript3 = new Uint8Array(G1.F.n8*2);\n        G1.toRprUncompressed(transcript3, 0, proof.Z);\n\n        ch.alpha = hashToFr(transcript3);\n\n        if (logger) logger.debug(\"alpha: \" + Fr.toString(ch.alpha));    \n\n\n        const Z1 = [\n            Fr.zero,\n            Fr.add(Fr.e(-1), Fr.w[2]),\n            Fr.e(-2),\n            Fr.sub(Fr.e(-1), Fr.w[2]),\n        ];\n\n        const Z2 = [\n            Fr.zero,\n            Fr.add(Fr.zero, Fr.mul(Fr.e(-2), Fr.w[2])),\n            Fr.e(4),\n            Fr.sub(Fr.zero, Fr.mul(Fr.e(-2), Fr.w[2])),\n        ];\n\n        const Z3 = [\n            Fr.zero,\n            Fr.add(Fr.e(2), Fr.mul(Fr.e(2), Fr.w[2])),\n            Fr.e(-8),\n            Fr.sub(Fr.e(2), Fr.mul(Fr.e(2), Fr.w[2])),\n        ];\n\n        const T = new BigBuffer(zkey.domainSize*4*n8r);\n        const Tz = new BigBuffer(zkey.domainSize*4*n8r);\n\n        let w = Fr.one;\n        for (let i=0; i<zkey.domainSize*4; i++) {\n            if ((i%4096 == 0)&&(logger)) logger.debug(`calculating t ${i}/${zkey.domainSize*4}`);\n\n            const a = A4.slice(i*n8r, i*n8r+n8r);\n            const b = B4.slice(i*n8r, i*n8r+n8r);\n            const c = C4.slice(i*n8r, i*n8r+n8r);\n            const z = Z4.slice(i*n8r, i*n8r+n8r);\n            const zw = Z4.slice(((i+zkey.domainSize*4+4)%(zkey.domainSize*4)) *n8r, ((i+zkey.domainSize*4+4)%(zkey.domainSize*4)) *n8r +n8r);\n            const qm = QM4.slice(i*n8r, i*n8r+n8r);\n            const ql = QL4.slice(i*n8r, i*n8r+n8r);\n            const qr = QR4.slice(i*n8r, i*n8r+n8r);\n            const qo = QO4.slice(i*n8r, i*n8r+n8r);\n            const qc = QC4.slice(i*n8r, i*n8r+n8r);\n            const s1 = sigmaBuff.slice(i*n8r, i*n8r+n8r);\n            const s2 = sigmaBuff.slice((i+zkey.domainSize*4)*n8r, (i+zkey.domainSize*4)*n8r+n8r);\n            const s3 = sigmaBuff.slice((i+zkey.domainSize*8)*n8r, (i+zkey.domainSize*8)*n8r+n8r);\n            const ap = Fr.add(ch.b[2], Fr.mul(ch.b[1], w));\n            const bp = Fr.add(ch.b[4], Fr.mul(ch.b[3], w));\n            const cp = Fr.add(ch.b[6], Fr.mul(ch.b[5], w));\n            const w2 = Fr.square(w);\n            const zp = Fr.add(Fr.add(Fr.mul(ch.b[7], w2), Fr.mul(ch.b[8], w)), ch.b[9]);\n            const wW = Fr.mul(w, Fr.w[zkey.power]);\n            const wW2 = Fr.square(wW);\n            const zWp = Fr.add(Fr.add(Fr.mul(ch.b[7], wW2), Fr.mul(ch.b[8], wW)), ch.b[9]);\n\n            let pl = Fr.zero;\n            for (let j=0; j<zkey.nPublic; j++) {\n                pl = Fr.sub(pl, Fr.mul( \n                    lPols.slice( (j*5*zkey.domainSize+ zkey.domainSize+ i)*n8r, (j*5*zkey.domainSize+ zkey.domainSize + i+1)*n8r),\n                    A.slice(j*n8r, (j+1)*n8r)\n                ));\n            }\n\n            let [e1, e1z] = mul2(a, b, ap, bp, i%4);\n            e1 = Fr.mul(e1, qm);\n            e1z = Fr.mul(e1z, qm);\n\n            e1 = Fr.add(e1, Fr.mul(a, ql));\n            e1z = Fr.add(e1z, Fr.mul(ap, ql));\n\n            e1 = Fr.add(e1, Fr.mul(b, qr));\n            e1z = Fr.add(e1z, Fr.mul(bp, qr));\n\n            e1 = Fr.add(e1, Fr.mul(c, qo));\n            e1z = Fr.add(e1z, Fr.mul(cp, qo));\n\n            e1 = Fr.add(e1, pl);\n            e1 = Fr.add(e1, qc);\n\n            const betaw = Fr.mul(ch.beta, w);\n            let e2a =a;\n            e2a = Fr.add(e2a, betaw);\n            e2a = Fr.add(e2a, ch.gamma);\n\n            let e2b =b;\n            e2b = Fr.add(e2b, Fr.mul(betaw, zkey.k1));\n            e2b = Fr.add(e2b, ch.gamma);\n\n            let e2c =c;\n            e2c = Fr.add(e2c, Fr.mul(betaw, zkey.k2));\n            e2c = Fr.add(e2c, ch.gamma);\n\n            let e2d = z;\n\n            let [e2, e2z] = mul4(e2a, e2b, e2c, e2d, ap, bp, cp, zp, i%4);\n            e2 = Fr.mul(e2, ch.alpha);\n            e2z = Fr.mul(e2z, ch.alpha);\n\n            let e3a = a;\n            e3a = Fr.add(e3a, Fr.mul(ch.beta, s1));\n            e3a = Fr.add(e3a, ch.gamma);\n\n            let e3b = b;\n            e3b = Fr.add(e3b, Fr.mul(ch.beta,s2));\n            e3b = Fr.add(e3b, ch.gamma);\n\n            let e3c = c;\n            e3c = Fr.add(e3c, Fr.mul(ch.beta,s3));\n            e3c = Fr.add(e3c, ch.gamma);\n\n            let e3d = zw;\n            let [e3, e3z] = mul4(e3a, e3b, e3c, e3d, ap, bp, cp, zWp, i%4);\n\n            e3 = Fr.mul(e3, ch.alpha);\n            e3z = Fr.mul(e3z, ch.alpha);\n\n            let e4 = Fr.sub(z, Fr.one);\n            e4 = Fr.mul(e4, lPols.slice( (zkey.domainSize + i)*n8r, (zkey.domainSize+i+1)*n8r));\n            e4 = Fr.mul(e4, Fr.mul(ch.alpha, ch.alpha));\n\n            let e4z = Fr.mul(zp, lPols.slice( (zkey.domainSize + i)*n8r, (zkey.domainSize+i+1)*n8r));\n            e4z = Fr.mul(e4z, Fr.mul(ch.alpha, ch.alpha));\n\n            let e = Fr.add(Fr.sub(Fr.add(e1, e2), e3), e4);\n            let ez = Fr.add(Fr.sub(Fr.add(e1z, e2z), e3z), e4z);\n\n            T.set(e, i*n8r);\n            Tz.set(ez, i*n8r);\n\n            w = Fr.mul(w, Fr.w[zkey.power+2]);\n        }\n\n        if (logger) logger.debug(\"ifft T\");    \n        let t = await Fr.ifft(T);\n\n        if (logger) logger.debug(\"dividing T/Z\");    \n        for (let i=0; i<zkey.domainSize; i++) {\n            t.set(Fr.neg(t.slice(i*n8r, i*n8r+n8r)), i*n8r);\n        }\n\n        for (let i=zkey.domainSize; i<zkey.domainSize*4; i++) {\n            const a = Fr.sub(\n                t.slice((i-zkey.domainSize)*n8r, (i-zkey.domainSize)*n8r + n8r),\n                t.slice(i*n8r, i*n8r+n8r)\n            );\n            t.set(a, i*n8r);\n            if (i > (zkey.domainSize*3 -4) ) {\n                if (!Fr.isZero(a)) {\n                    throw new Error(\"T Polynomial is not divisible\");\n                }\n            }\n        }\n\n        if (logger) logger.debug(\"ifft Tz\");    \n        const tz = await Fr.ifft(Tz);\n        for (let i=0; i<zkey.domainSize*4; i++) {\n            const a = tz.slice(i*n8r, (i+1)*n8r);\n            if (i > (zkey.domainSize*3 +5) ) {\n                if (!Fr.isZero(a)) {\n                    throw new Error(\"Tz Polynomial is not well calculated\");\n                }\n            } else {\n                t.set(  \n                    Fr.add(\n                        t.slice(i*n8r, (i+1)*n8r),\n                        a\n                    ),\n                    i*n8r\n                );\n            }\n        }\n\n        pol_t = t.slice(0, (zkey.domainSize * 3 + 6) * n8r);\n\n        // t(x) has degree 3n + 5, we are going to split t(x) into three smaller polynomials:\n        // t'_low and t'_mid  with a degree < n and t'_high with a degree n+5\n        // such that t(x) = t'_low(X) + X^n t'_mid(X) + X^{2n} t'_hi(X)\n        // To randomize the parts we use blinding scalars b_10 and b_11 in a way that doesn't change t(X):\n        // t_low(X) = t'_low(X) + b_10 X^n\n        // t_mid(X) = t'_mid(X) - b_10 + b_11 X^n\n        // t_high(X) = t'_high(X) - b_11\n        // such that\n        // t(X) = t_low(X) + X^n t_mid(X) + X^2n t_high(X)\n\n        // compute t_low(X)\n        let polTLow = new BigBuffer((zkey.domainSize + 1) * n8r);\n        polTLow.set(t.slice(0, zkey.domainSize * n8r), 0);\n        // Add blinding scalar b_10 as a new coefficient n\n        polTLow.set(ch.b[10], zkey.domainSize * n8r);\n\n        // compute t_mid(X)\n        let polTMid = new BigBuffer((zkey.domainSize + 1) * n8r);\n        polTMid.set(t.slice(zkey.domainSize * n8r, zkey.domainSize * 2 * n8r), 0);\n        // Subtract blinding scalar b_10 to the lowest coefficient of t_mid\n        const lowestMid = Fr.sub(polTMid.slice(0, n8r), ch.b[10]);\n        polTMid.set(lowestMid, 0);\n        // Add blinding scalar b_11 as a new coefficient n\n        polTMid.set(ch.b[11], zkey.domainSize * n8r);\n\n        // compute t_high(X)\n        let polTHigh = new BigBuffer((zkey.domainSize + 6) * n8r);\n        polTHigh.set(t.slice(zkey.domainSize * 2 * n8r, (zkey.domainSize * 3 + 6) * n8r), 0);\n        //Subtract blinding scalar b_11 to the lowest coefficient of t_high\n        const lowestHigh = Fr.sub(polTHigh.slice(0, n8r), ch.b[11]);\n        polTHigh.set(lowestHigh, 0);\n\n        proof.T1 = await expTau(polTLow, \"multiexp T1\");\n        proof.T2 = await expTau(polTMid, \"multiexp T2\");\n        proof.T3 = await expTau(polTHigh, \"multiexp T3\");\n\n        function mul2(a,b, ap, bp,  p) {\n            let r, rz;\n\n            \n            const a_b = Fr.mul(a,b);\n            const a_bp = Fr.mul(a,bp);\n            const ap_b = Fr.mul(ap,b);\n            const ap_bp = Fr.mul(ap,bp);\n\n            r = a_b;\n\n            let a0 = Fr.add(a_bp, ap_b);\n\n            let a1 = ap_bp;\n\n            rz = a0;\n            if (p) {\n                rz = Fr.add(rz, Fr.mul(Z1[p], a1));\n            }\n\n            return [r, rz];\n        }\n\n        function mul4(a,b,c,d, ap, bp, cp, dp, p) {\n            let r, rz;\n\n            \n            const a_b = Fr.mul(a,b);\n            const a_bp = Fr.mul(a,bp);\n            const ap_b = Fr.mul(ap,b);\n            const ap_bp = Fr.mul(ap,bp);\n\n            const c_d = Fr.mul(c,d);\n            const c_dp = Fr.mul(c,dp);\n            const cp_d = Fr.mul(cp,d);\n            const cp_dp = Fr.mul(cp,dp);\n\n            r = Fr.mul(a_b, c_d);\n\n            let a0 = Fr.mul(ap_b, c_d);\n            a0 = Fr.add(a0, Fr.mul(a_bp, c_d));\n            a0 = Fr.add(a0, Fr.mul(a_b, cp_d));\n            a0 = Fr.add(a0, Fr.mul(a_b, c_dp));\n\n            let a1 = Fr.mul(ap_bp, c_d);\n            a1 = Fr.add(a1, Fr.mul(ap_b, cp_d));\n            a1 = Fr.add(a1, Fr.mul(ap_b, c_dp));\n            a1 = Fr.add(a1, Fr.mul(a_bp, cp_d));\n            a1 = Fr.add(a1, Fr.mul(a_bp, c_dp));\n            a1 = Fr.add(a1, Fr.mul(a_b, cp_dp));\n\n            let a2 = Fr.mul(a_bp, cp_dp);\n            a2 = Fr.add(a2, Fr.mul(ap_b, cp_dp));\n            a2 = Fr.add(a2, Fr.mul(ap_bp, c_dp));\n            a2 = Fr.add(a2, Fr.mul(ap_bp, cp_d));\n\n            let a3 = Fr.mul(ap_bp, cp_dp);\n\n            rz = a0;\n            if (p) {\n                rz = Fr.add(rz, Fr.mul(Z1[p], a1));\n                rz = Fr.add(rz, Fr.mul(Z2[p], a2));\n                rz = Fr.add(rz, Fr.mul(Z3[p], a3));\n            }\n\n            return [r, rz];\n        }\n    }\n\n    async function round4() {\n        const pol_qm = new BigBuffer(zkey.domainSize*n8r);\n        await fdZKey.readToBuffer(pol_qm, 0 , zkey.domainSize*n8r, sectionsZKey[7][0].p);\n\n        const pol_ql = new BigBuffer(zkey.domainSize*n8r);\n        await fdZKey.readToBuffer(pol_ql, 0 , zkey.domainSize*n8r, sectionsZKey[8][0].p);\n\n        const pol_qr = new BigBuffer(zkey.domainSize*n8r);\n        await fdZKey.readToBuffer(pol_qr, 0 , zkey.domainSize*n8r, sectionsZKey[9][0].p);\n\n        const pol_qo = new BigBuffer(zkey.domainSize*n8r);\n        await fdZKey.readToBuffer(pol_qo, 0 , zkey.domainSize*n8r, sectionsZKey[10][0].p);\n\n        const pol_qc = new BigBuffer(zkey.domainSize*n8r);\n        await fdZKey.readToBuffer(pol_qc, 0 , zkey.domainSize*n8r, sectionsZKey[11][0].p);\n\n        const pol_s3 = new BigBuffer(zkey.domainSize*n8r);\n        await fdZKey.readToBuffer(pol_s3, 0 , zkey.domainSize*n8r, sectionsZKey[12][0].p + 10*zkey.domainSize*n8r);\n\n        const transcript4 = new Uint8Array(G1.F.n8*2*3);\n        G1.toRprUncompressed(transcript4, 0, proof.T1);\n        G1.toRprUncompressed(transcript4, G1.F.n8*2, proof.T2);\n        G1.toRprUncompressed(transcript4, G1.F.n8*4, proof.T3);\n        ch.xi = hashToFr(transcript4);\n\n        if (logger) logger.debug(\"xi: \" + Fr.toString(ch.xi));    \n\n        proof.eval_a = evalPol(pol_a, ch.xi);\n        proof.eval_b = evalPol(pol_b, ch.xi);\n        proof.eval_c = evalPol(pol_c, ch.xi);\n        proof.eval_s1 = evalPol(pol_s1, ch.xi);\n        proof.eval_s2 = evalPol(pol_s2, ch.xi);\n        proof.eval_t = evalPol(pol_t, ch.xi);\n        proof.eval_zw = evalPol(pol_z, Fr.mul(ch.xi, Fr.w[zkey.power]));\n\n        const coef_ab = Fr.mul(proof.eval_a, proof.eval_b);\n        \n        let e2a = proof.eval_a;\n        const betaxi = Fr.mul(ch.beta, ch.xi);\n        e2a = Fr.add( e2a, betaxi);\n        e2a = Fr.add( e2a, ch.gamma);\n\n        let e2b = proof.eval_b;\n        e2b = Fr.add( e2b, Fr.mul(betaxi, zkey.k1));\n        e2b = Fr.add( e2b, ch.gamma);\n\n        let e2c = proof.eval_c;\n        e2c = Fr.add( e2c, Fr.mul(betaxi, zkey.k2));\n        e2c = Fr.add( e2c, ch.gamma);\n\n        const e2 = Fr.mul(Fr.mul(Fr.mul(e2a, e2b), e2c), ch.alpha);\n\n        let e3a = proof.eval_a;\n        e3a = Fr.add( e3a, Fr.mul(ch.beta, proof.eval_s1));\n        e3a = Fr.add( e3a, ch.gamma);\n\n        let e3b = proof.eval_b;\n        e3b = Fr.add( e3b, Fr.mul(ch.beta, proof.eval_s2));\n        e3b = Fr.add( e3b, ch.gamma);\n\n        let e3 = Fr.mul(e3a, e3b);\n        e3 = Fr.mul(e3, ch.beta);\n        e3 = Fr.mul(e3, proof.eval_zw);\n        e3 = Fr.mul(e3, ch.alpha);\n\n        ch.xim= ch.xi;\n        for (let i=0; i<zkey.power; i++) ch.xim = Fr.mul(ch.xim, ch.xim);\n        const eval_l1 = Fr.div(\n            Fr.sub(ch.xim, Fr.one),\n            Fr.mul(Fr.sub(ch.xi, Fr.one), Fr.e(zkey.domainSize))\n        );\n\n        const e4 = Fr.mul(eval_l1, Fr.mul(ch.alpha, ch.alpha));\n\n        const coefs3 = e3;\n        const coefz = Fr.add(e2, e4);\n\n        pol_r = new BigBuffer((zkey.domainSize+3)*n8r);\n\n        for (let i = 0; i<zkey.domainSize+3; i++) {\n            let v = Fr.mul(coefz, pol_z.slice(i*n8r,(i+1)*n8r));\n            if (i<zkey.domainSize) {\n                v = Fr.add(v, Fr.mul(coef_ab, pol_qm.slice(i*n8r,(i+1)*n8r)));\n                v = Fr.add(v, Fr.mul(proof.eval_a, pol_ql.slice(i*n8r,(i+1)*n8r)));\n                v = Fr.add(v, Fr.mul(proof.eval_b, pol_qr.slice(i*n8r,(i+1)*n8r)));\n                v = Fr.add(v, Fr.mul(proof.eval_c, pol_qo.slice(i*n8r,(i+1)*n8r)));\n                v = Fr.add(v, pol_qc.slice(i*n8r,(i+1)*n8r));\n                v = Fr.sub(v, Fr.mul(coefs3, pol_s3.slice(i*n8r,(i+1)*n8r)));\n            }\n            pol_r.set(v, i*n8r);\n        }\n\n        proof.eval_r = evalPol(pol_r, ch.xi);\n    }\n\n    async function round5() {\n        const transcript5 = new Uint8Array(n8r*7);\n        Fr.toRprBE(transcript5, 0, proof.eval_a);\n        Fr.toRprBE(transcript5, n8r, proof.eval_b);\n        Fr.toRprBE(transcript5, n8r*2, proof.eval_c);\n        Fr.toRprBE(transcript5, n8r*3, proof.eval_s1);\n        Fr.toRprBE(transcript5, n8r*4, proof.eval_s2);\n        Fr.toRprBE(transcript5, n8r*5, proof.eval_zw);\n        Fr.toRprBE(transcript5, n8r*6, proof.eval_r);\n        ch.v = [];\n        ch.v[1] = hashToFr(transcript5);\n        if (logger) logger.debug(\"v: \" + Fr.toString(ch.v[1]));    \n\n        for (let i=2; i<=6; i++ ) ch.v[i] = Fr.mul(ch.v[i-1], ch.v[1]);\n        \n        let pol_wxi = new BigBuffer((zkey.domainSize+6)*n8r);\n\n        const xi2m = Fr.mul(ch.xim, ch.xim);\n\n        for (let i = 0; i < zkey.domainSize + 6; i++) {\n            let w = Fr.zero;\n\n            const polTHigh = pol_t.slice((zkey.domainSize * 2 + i) * n8r, (zkey.domainSize * 2 + i + 1) * n8r);\n            w = Fr.add(w, Fr.mul(xi2m, polTHigh));\n\n            if (i < zkey.domainSize + 3) {\n                w = Fr.add(w, Fr.mul(ch.v[1], pol_r.slice(i * n8r, (i + 1) * n8r)));\n            }\n\n            if (i < zkey.domainSize + 2) {\n                w = Fr.add(w, Fr.mul(ch.v[2], pol_a.slice(i * n8r, (i + 1) * n8r)));\n                w = Fr.add(w, Fr.mul(ch.v[3], pol_b.slice(i * n8r, (i + 1) * n8r)));\n                w = Fr.add(w, Fr.mul(ch.v[4], pol_c.slice(i * n8r, (i + 1) * n8r)));\n            }\n\n            if (i < zkey.domainSize) {\n                const polTLow = pol_t.slice(i * n8r, (i + 1) * n8r);\n                w = Fr.add(w, polTLow);\n\n                const polTMid = pol_t.slice((zkey.domainSize + i) * n8r, (zkey.domainSize + i + 1) * n8r);\n                w = Fr.add(w, Fr.mul(ch.xim, polTMid));\n\n                w = Fr.add(w, Fr.mul(ch.v[5], pol_s1.slice(i * n8r, (i + 1) * n8r)));\n                w = Fr.add(w, Fr.mul(ch.v[6], pol_s2.slice(i * n8r, (i + 1) * n8r)));\n            }\n\n            // b_10 and b_11 blinding scalars were applied on round 3 to randomize the polynomials t_low, t_mid, t_high\n            // Subtract blinding scalar b_10 and b_11 to the lowest coefficient\n            if (i === 0) {\n                w = Fr.sub(w, Fr.mul(xi2m, ch.b[11]));\n                w = Fr.sub(w, Fr.mul(ch.xim, ch.b[10]));\n            }\n\n            // Add blinding scalars b_10 and b_11 to the coefficient n\n            if (i === zkey.domainSize) {\n                w = Fr.add(w, ch.b[10]);\n                w = Fr.add(w, Fr.mul(ch.xim, ch.b[11]));\n            }\n\n            pol_wxi.set(w, i * n8r);\n        }\n\n        let w0 = pol_wxi.slice(0, n8r);\n        w0 = Fr.sub(w0, proof.eval_t);\n        w0 = Fr.sub(w0, Fr.mul(ch.v[1], proof.eval_r));\n        w0 = Fr.sub(w0, Fr.mul(ch.v[2], proof.eval_a));\n        w0 = Fr.sub(w0, Fr.mul(ch.v[3], proof.eval_b));\n        w0 = Fr.sub(w0, Fr.mul(ch.v[4], proof.eval_c));\n        w0 = Fr.sub(w0, Fr.mul(ch.v[5], proof.eval_s1));\n        w0 = Fr.sub(w0, Fr.mul(ch.v[6], proof.eval_s2));\n        pol_wxi.set(w0, 0);\n\n        pol_wxi= divPol1(pol_wxi, ch.xi);\n\n        proof.Wxi = await expTau(pol_wxi, \"multiexp Wxi\");\n\n        let pol_wxiw = new BigBuffer((zkey.domainSize+3)*n8r);\n        for (let i=0; i<zkey.domainSize+3; i++) {\n            const w = pol_z.slice(i*n8r, (i+1)*n8r);\n            pol_wxiw.set(w, i*n8r);\n        }\n        w0 = pol_wxiw.slice(0, n8r);\n        w0 = Fr.sub(w0, proof.eval_zw);\n        pol_wxiw.set(w0, 0);\n\n        pol_wxiw= divPol1(pol_wxiw, Fr.mul(ch.xi, Fr.w[zkey.power]));\n        proof.Wxiw = await expTau(pol_wxiw, \"multiexp Wxiw\");\n    }\n\n    function hashToFr(transcript) {\n        const v = Scalar.fromRprBE(new Uint8Array(keccak256.arrayBuffer(transcript)));\n        return Fr.e(v);\n    }\n\n\n    function evalPol(P, x) {\n        const n = P.byteLength / n8r;\n        if (n == 0) return Fr.zero;\n        let res = P.slice((n-1)*n8r, n*n8r);\n        for (let i=n-2; i>=0; i--) {\n            res = Fr.add(Fr.mul(res, x), P.slice(i*n8r, (i+1)*n8r));\n        }\n        return res;\n    }\n\n    function divPol1(P, d) {\n        const n = P.byteLength/n8r;\n        const res = new BigBuffer(n*n8r);\n        res.set(Fr.zero, (n-1) *n8r);\n        res.set(P.slice((n-1)*n8r, n*n8r), (n-2)*n8r);\n        for (let i=n-3; i>=0; i--) {\n            res.set(\n                Fr.add(\n                    P.slice((i+1)*n8r, (i+2)*n8r), \n                    Fr.mul(\n                        d, \n                        res.slice((i+1)*n8r, (i+2)*n8r)\n                    )\n                ),\n                i*n8r\n            );\n        }\n        if (!Fr.eq(\n            P.slice(0, n8r),\n            Fr.mul(\n                Fr.neg(d),\n                res.slice(0, n8r)\n            )\n        )) {\n            throw new Error(\"Polinomial does not divide\");\n        }\n        return res;\n    }\n\n    async function expTau(b, name) {\n        const n = b.byteLength/n8r;\n        const PTauN = PTau.slice(0, n*curve.G1.F.n8*2);\n        const bm = await curve.Fr.batchFromMontgomery(b);\n        let res = await curve.G1.multiExpAffine(PTauN, bm, logger, name);\n        res = curve.G1.toAffine(res);\n        return res;\n    }\n\n\n    async function to4T(A, pz) {\n        pz = pz || []; \n        let a = await Fr.ifft(A);\n        const a4 = new BigBuffer(n8r*zkey.domainSize*4);\n        a4.set(a, 0);\n\n        const a1 = new BigBuffer(n8r*(zkey.domainSize + pz.length));\n        a1.set(a, 0);\n        for (let i= 0; i<pz.length; i++) {\n            a1.set(\n                Fr.add(\n                    a1.slice((zkey.domainSize+i)*n8r, (zkey.domainSize+i+1)*n8r),\n                    pz[i]\n                ),\n                (zkey.domainSize+i)*n8r\n            );\n            a1.set(\n                Fr.sub(\n                    a1.slice(i*n8r, (i+1)*n8r),\n                    pz[i]\n                ),\n                i*n8r\n            );\n        }\n        const A4 = await Fr.fft(a4);\n        return [a1, A4];\n    }\n\n\n}\n\n\n\n\n", "/*\n    Copyright 2021 0kims association.\n\n    This file is part of snarkjs.\n\n    snarkjs is a free software: you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as published by the\n    Free Software Foundation, either version 3 of the License, or (at your option)\n    any later version.\n\n    snarkjs is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for\n    more details.\n\n    You should have received a copy of the GNU General Public License along with\n    snarkjs. If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/* Implementation of this paper: https://eprint.iacr.org/2019/953.pdf */\nimport { Scalar } from \"ffjavascript\";\nimport * as curves from \"./curves.js\";\nimport {  utils }   from \"ffjavascript\";\nconst {unstringifyBigInts} = utils;\nimport jsSha3 from \"js-sha3\";\nconst { keccak256 } = jsSha3;\n\n\nexport default async function plonkVerify(_vk_verifier, _publicSignals, _proof, logger) {\n    let vk_verifier = unstringifyBigInts(_vk_verifier);\n    let proof = unstringifyBigInts(_proof);\n    let publicSignals = unstringifyBigInts(_publicSignals);\n\n    const curve = await curves.getCurveFromName(vk_verifier.curve);\n\n    const Fr = curve.Fr;\n    const G1 = curve.G1;\n\n    proof = fromObjectProof(curve,proof);\n    vk_verifier = fromObjectVk(curve, vk_verifier);\n    if (!isWellConstructed(curve, proof)) {\n        logger.error(\"Proof is not well constructed\");\n        return false;\n    }\n    if (publicSignals.length != vk_verifier.nPublic) {\n        logger.error(\"Invalid number of public inputs\");\n        return false;\n    }\n    const challanges = calculateChallanges(curve, proof, publicSignals);\n    if (logger) {\n        logger.debug(\"beta: \" + Fr.toString(challanges.beta, 16));    \n        logger.debug(\"gamma: \" + Fr.toString(challanges.gamma, 16));    \n        logger.debug(\"alpha: \" + Fr.toString(challanges.alpha, 16));    \n        logger.debug(\"xi: \" + Fr.toString(challanges.xi, 16));    \n        logger.debug(\"v1: \" + Fr.toString(challanges.v[1], 16));    \n        logger.debug(\"v6: \" + Fr.toString(challanges.v[6], 16));    \n        logger.debug(\"u: \" + Fr.toString(challanges.u, 16));    \n    }\n    const L = calculateLagrangeEvaluations(curve, challanges, vk_verifier);\n    if (logger) {\n        logger.debug(\"Lagrange Evaluations: \");\n        for (let i=1; i<L.length; i++) {\n            logger.debug(`L${i}(xi)=` + Fr.toString(L[i], 16));    \n        }\n    }\n    \n    if (publicSignals.length != vk_verifier.nPublic) {\n        logger.error(\"Number of public signals does not match with vk\");\n        return false;\n    }\n\n    const pl = calculatePl(curve, publicSignals, L);\n    if (logger) {\n        logger.debug(\"Pl: \" + Fr.toString(pl, 16));\n    }\n\n    const t = calculateT(curve, proof, challanges, pl, L[1]);\n    if (logger) {\n        logger.debug(\"t: \" + Fr.toString(t, 16));\n    }\n\n    const D = calculateD(curve, proof, challanges, vk_verifier, L[1]);\n    if (logger) {\n        logger.debug(\"D: \" + G1.toString(G1.toAffine(D), 16));\n    }\n\n    const F = calculateF(curve, proof, challanges, vk_verifier, D);\n    if (logger) {\n        logger.debug(\"F: \" + G1.toString(G1.toAffine(F), 16));\n    }\n\n    const E = calculateE(curve, proof, challanges, vk_verifier, t);\n    if (logger) {\n        logger.debug(\"E: \" + G1.toString(G1.toAffine(E), 16));\n    }\n\n    const res = await isValidPairing(curve, proof, challanges, vk_verifier, E, F);\n\n    if (logger) {\n        if (res) {\n            logger.info(\"OK!\");\n        } else {\n            logger.warn(\"Invalid Proof\");\n        }\n    }\n\n    return res;\n\n}\n\n\nfunction fromObjectProof(curve, proof) {\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n    const res = {};\n    res.A = G1.fromObject(proof.A);\n    res.B = G1.fromObject(proof.B);\n    res.C = G1.fromObject(proof.C);\n    res.Z = G1.fromObject(proof.Z);\n    res.T1 = G1.fromObject(proof.T1);\n    res.T2 = G1.fromObject(proof.T2);\n    res.T3 = G1.fromObject(proof.T3);\n    res.eval_a = Fr.fromObject(proof.eval_a);\n    res.eval_b = Fr.fromObject(proof.eval_b);\n    res.eval_c = Fr.fromObject(proof.eval_c);\n    res.eval_zw = Fr.fromObject(proof.eval_zw);\n    res.eval_s1 = Fr.fromObject(proof.eval_s1);\n    res.eval_s2 = Fr.fromObject(proof.eval_s2);\n    res.eval_r = Fr.fromObject(proof.eval_r);\n    res.Wxi = G1.fromObject(proof.Wxi);\n    res.Wxiw = G1.fromObject(proof.Wxiw);\n    return res;\n}\n\nfunction fromObjectVk(curve, vk) {\n    const G1 = curve.G1;\n    const G2 = curve.G2;\n    const Fr = curve.Fr;\n    const res = vk;\n    res.Qm = G1.fromObject(vk.Qm);\n    res.Ql = G1.fromObject(vk.Ql);\n    res.Qr = G1.fromObject(vk.Qr);\n    res.Qo = G1.fromObject(vk.Qo);\n    res.Qc = G1.fromObject(vk.Qc);\n    res.S1 = G1.fromObject(vk.S1);\n    res.S2 = G1.fromObject(vk.S2);\n    res.S3 = G1.fromObject(vk.S3);\n    res.k1 = Fr.fromObject(vk.k1);\n    res.k2 = Fr.fromObject(vk.k2);\n    res.X_2 = G2.fromObject(vk.X_2);\n\n    return res;\n}\n\nfunction isWellConstructed(curve, proof) {\n    const G1 = curve.G1;\n    if (!G1.isValid(proof.A)) return false;\n    if (!G1.isValid(proof.B)) return false;\n    if (!G1.isValid(proof.C)) return false;\n    if (!G1.isValid(proof.Z)) return false;\n    if (!G1.isValid(proof.T1)) return false;\n    if (!G1.isValid(proof.T2)) return false;\n    if (!G1.isValid(proof.T3)) return false;\n    if (!G1.isValid(proof.Wxi)) return false;\n    if (!G1.isValid(proof.Wxiw)) return false;\n    return true;\n}\n\nfunction calculateChallanges(curve, proof, publicSignals) {\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n    const n8r = curve.Fr.n8;\n    const res = {};\n\n    const transcript1 = new Uint8Array(publicSignals.length*n8r + G1.F.n8*2*3);\n    for (let i=0; i<publicSignals.length; i++) {\n        Fr.toRprBE(transcript1, i*n8r, Fr.e(publicSignals[i]));\n    }\n    G1.toRprUncompressed(transcript1, publicSignals.length*n8r + 0, proof.A);\n    G1.toRprUncompressed(transcript1, publicSignals.length*n8r + G1.F.n8*2, proof.B);\n    G1.toRprUncompressed(transcript1, publicSignals.length*n8r + G1.F.n8*4, proof.C);\n\n    res.beta = hashToFr(curve, transcript1);\n\n    const transcript2 = new Uint8Array(n8r);\n    Fr.toRprBE(transcript2, 0, res.beta);\n    res.gamma = hashToFr(curve, transcript2);\n\n    const transcript3 = new Uint8Array(G1.F.n8*2);\n    G1.toRprUncompressed(transcript3, 0, proof.Z);\n    res.alpha = hashToFr(curve, transcript3);\n\n    const transcript4 = new Uint8Array(G1.F.n8*2*3);\n    G1.toRprUncompressed(transcript4, 0, proof.T1);\n    G1.toRprUncompressed(transcript4, G1.F.n8*2, proof.T2);\n    G1.toRprUncompressed(transcript4, G1.F.n8*4, proof.T3);\n    res.xi = hashToFr(curve, transcript4);\n\n    const transcript5 = new Uint8Array(n8r*7);\n    Fr.toRprBE(transcript5, 0, proof.eval_a);\n    Fr.toRprBE(transcript5, n8r, proof.eval_b);\n    Fr.toRprBE(transcript5, n8r*2, proof.eval_c);\n    Fr.toRprBE(transcript5, n8r*3, proof.eval_s1);\n    Fr.toRprBE(transcript5, n8r*4, proof.eval_s2);\n    Fr.toRprBE(transcript5, n8r*5, proof.eval_zw);\n    Fr.toRprBE(transcript5, n8r*6, proof.eval_r);\n    res.v = [];\n    res.v[1] = hashToFr(curve, transcript5);\n\n    for (let i=2; i<=6; i++ ) res.v[i] = Fr.mul(res.v[i-1], res.v[1]);\n\n    const transcript6 = new Uint8Array(G1.F.n8*2*2);\n    G1.toRprUncompressed(transcript6, 0, proof.Wxi);\n    G1.toRprUncompressed(transcript6, G1.F.n8*2, proof.Wxiw);\n    res.u = hashToFr(curve, transcript6);\n\n    return res;\n}\n\nfunction calculateLagrangeEvaluations(curve, challanges, vk) {\n    const Fr = curve.Fr;\n\n    let xin = challanges.xi;\n    let domainSize = 1;\n    for (let i=0; i<vk.power; i++) {\n        xin = Fr.square(xin);\n        domainSize *= 2;\n    }\n    challanges.xin = xin;\n\n    challanges.zh = Fr.sub(xin, Fr.one);\n    const L = [];\n\n    const n = Fr.e(domainSize);\n    let w = Fr.one;\n    for (let i=1; i<=Math.max(1, vk.nPublic); i++) {\n        L[i] = Fr.div(Fr.mul(w, challanges.zh), Fr.mul(n, Fr.sub(challanges.xi, w)));\n        w = Fr.mul(w, Fr.w[vk.power]);\n    }\n\n    return L;\n}\n\nfunction hashToFr(curve, transcript) {\n    const v = Scalar.fromRprBE(new Uint8Array(keccak256.arrayBuffer(transcript)));\n    return curve.Fr.e(v);\n}\n\nfunction calculatePl(curve, publicSignals, L) {\n    const Fr = curve.Fr;\n\n    let pl = Fr.zero;\n    for (let i=0; i<publicSignals.length; i++) {\n        const w = Fr.e(publicSignals[i]);\n        pl = Fr.sub(pl, Fr.mul(w, L[i+1]));\n    }\n    return pl;\n}\n\nfunction calculateT(curve, proof, challanges, pl, l1) {\n    const Fr = curve.Fr;\n    let num = proof.eval_r;\n    num = Fr.add(num, pl);\n\n    let e1 = proof.eval_a;\n    e1 = Fr.add(e1, Fr.mul(challanges.beta, proof.eval_s1));\n    e1 = Fr.add(e1, challanges.gamma);\n\n    let e2 = proof.eval_b;\n    e2 = Fr.add(e2, Fr.mul(challanges.beta, proof.eval_s2));\n    e2 = Fr.add(e2, challanges.gamma);\n\n    let e3 = proof.eval_c;\n    e3 = Fr.add(e3, challanges.gamma);\n\n    let e = Fr.mul(Fr.mul(e1, e2), e3);\n    e = Fr.mul(e, proof.eval_zw);\n    e = Fr.mul(e, challanges.alpha);\n\n    num = Fr.sub(num, e);\n\n    num = Fr.sub(num, Fr.mul(l1, Fr.square(challanges.alpha)));\n\n    const t = Fr.div(num, challanges.zh);\n\n    return t;\n}\n\nfunction calculateD(curve, proof, challanges, vk, l1) {\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n\n    let s1 = Fr.mul(Fr.mul(proof.eval_a, proof.eval_b), challanges.v[1]);\n    let res = G1.timesFr(vk.Qm, s1);\n\n    let s2 = Fr.mul(proof.eval_a, challanges.v[1]);\n    res = G1.add(res, G1.timesFr(vk.Ql, s2));\n\n    let s3 = Fr.mul(proof.eval_b, challanges.v[1]);\n    res = G1.add(res, G1.timesFr(vk.Qr, s3));\n\n    let s4 = Fr.mul(proof.eval_c, challanges.v[1]);\n    res = G1.add(res, G1.timesFr(vk.Qo, s4));\n\n    res = G1.add(res, G1.timesFr(vk.Qc, challanges.v[1]));\n\n    const betaxi = Fr.mul(challanges.beta, challanges.xi);\n    let s6a = proof.eval_a;\n    s6a = Fr.add(s6a, betaxi);\n    s6a = Fr.add(s6a, challanges.gamma);\n\n    let s6b = proof.eval_b;\n    s6b = Fr.add(s6b, Fr.mul(betaxi, vk.k1));\n    s6b = Fr.add(s6b, challanges.gamma);\n\n    let s6c = proof.eval_c;\n    s6c = Fr.add(s6c, Fr.mul(betaxi, vk.k2));\n    s6c = Fr.add(s6c, challanges.gamma);\n\n    let s6 = Fr.mul(Fr.mul(s6a, s6b), s6c);\n    s6 = Fr.mul(s6, Fr.mul(challanges.alpha, challanges.v[1]));\n\n    let s6d = Fr.mul(Fr.mul(l1, Fr.square(challanges.alpha)), challanges.v[1]);\n    s6 = Fr.add(s6, s6d);\n\n    s6 = Fr.add(s6, challanges.u);\n    res = G1.add(res, G1.timesFr(proof.Z, s6));\n\n\n    let s7a = proof.eval_a;\n    s7a = Fr.add(s7a, Fr.mul(challanges.beta, proof.eval_s1));\n    s7a = Fr.add(s7a, challanges.gamma);\n\n    let s7b = proof.eval_b;\n    s7b = Fr.add(s7b, Fr.mul(challanges.beta, proof.eval_s2));\n    s7b = Fr.add(s7b, challanges.gamma);\n\n    let s7 = Fr.mul(s7a, s7b);\n    s7 = Fr.mul(s7, challanges.alpha);\n    s7 = Fr.mul(s7, challanges.v[1]);\n    s7 = Fr.mul(s7, challanges.beta);\n    s7 = Fr.mul(s7, proof.eval_zw);\n    res = G1.sub(res, G1.timesFr(vk.S3, s7));\n\n    return res;\n}\n\nfunction calculateF(curve, proof, challanges, vk, D) {\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n\n    let res = proof.T1;\n\n    res = G1.add(res, G1.timesFr(proof.T2, challanges.xin));\n    res = G1.add(res, G1.timesFr(proof.T3, Fr.square(challanges.xin)));\n    res = G1.add(res, D);\n    res = G1.add(res, G1.timesFr(proof.A, challanges.v[2]));\n    res = G1.add(res, G1.timesFr(proof.B, challanges.v[3]));\n    res = G1.add(res, G1.timesFr(proof.C, challanges.v[4]));\n    res = G1.add(res, G1.timesFr(vk.S1, challanges.v[5]));\n    res = G1.add(res, G1.timesFr(vk.S2, challanges.v[6]));\n\n    return res;\n}\n\n\nfunction calculateE(curve, proof, challanges, vk, t) {\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n\n    let s = t;\n\n    s = Fr.add(s, Fr.mul(challanges.v[1], proof.eval_r));\n    s = Fr.add(s, Fr.mul(challanges.v[2], proof.eval_a));\n    s = Fr.add(s, Fr.mul(challanges.v[3], proof.eval_b));\n    s = Fr.add(s, Fr.mul(challanges.v[4], proof.eval_c));\n    s = Fr.add(s, Fr.mul(challanges.v[5], proof.eval_s1));\n    s = Fr.add(s, Fr.mul(challanges.v[6], proof.eval_s2));\n    s = Fr.add(s, Fr.mul(challanges.u, proof.eval_zw));\n\n    const res = G1.timesFr(G1.one, s);\n\n    return res;\n}\n\nasync function isValidPairing(curve, proof, challanges, vk, E, F) {\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n\n    let A1 = proof.Wxi;\n    A1 = G1.add(A1, G1.timesFr(proof.Wxiw, challanges.u));\n\n    let B1 = G1.timesFr(proof.Wxi, challanges.xi);\n    const s = Fr.mul(Fr.mul(challanges.u, challanges.xi), Fr.w[vk.power]);\n    B1 = G1.add(B1, G1.timesFr(proof.Wxiw, s));\n    B1 = G1.add(B1, F);\n    B1 = G1.sub(B1, E);\n\n    const res = await curve.pairingEq(\n        G1.neg(A1) , vk.X_2,\n        B1 , curve.G2.one\n    );\n\n    return res;\n\n}\n", "/*\n    Copyright 2021 0KIMS association.\n\n    This file is part of snarkJS.\n\n    snarkJS is a free software: you can redistribute it and/or modify it\n    under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\n    License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\n*/\n\nimport { getCurveFromName } from \"./curves.js\";\nimport {  utils }   from \"ffjavascript\";\nconst { unstringifyBigInts} = utils;\n\nfunction i2hex(i) {\n    return (\"0\" + i.toString(16)).slice(-2);\n}\n\nfunction p256(n) {\n    let nstr = n.toString(16);\n    while (nstr.length < 64) nstr = \"0\"+nstr;\n    nstr = `\"0x${nstr}\"`;\n    return nstr;\n}\n\nexport default async function plonkExportSolidityCallData(_proof, _pub) {\n    const proof = unstringifyBigInts(_proof);\n    const pub = unstringifyBigInts(_pub);\n\n    const curve = await getCurveFromName(proof.curve);\n    const G1 = curve.G1;\n    const Fr = curve.Fr;\n\n    let inputs = \"\";\n    for (let i=0; i<pub.length; i++) {\n        if (inputs != \"\") inputs = inputs + \",\";\n        inputs = inputs + p256(pub[i]);\n    }\n\n    const proofBuff = new Uint8Array(G1.F.n8*2*9 + Fr.n8*7);\n    G1.toRprUncompressed(proofBuff, 0, G1.e(proof.A));\n    G1.toRprUncompressed(proofBuff, G1.F.n8*2, G1.e(proof.B));\n    G1.toRprUncompressed(proofBuff, G1.F.n8*4, G1.e(proof.C));\n    G1.toRprUncompressed(proofBuff, G1.F.n8*6, G1.e(proof.Z));\n    G1.toRprUncompressed(proofBuff, G1.F.n8*8, G1.e(proof.T1));\n    G1.toRprUncompressed(proofBuff, G1.F.n8*10, G1.e(proof.T2));\n    G1.toRprUncompressed(proofBuff, G1.F.n8*12, G1.e(proof.T3));\n    G1.toRprUncompressed(proofBuff, G1.F.n8*14, G1.e(proof.Wxi));\n    G1.toRprUncompressed(proofBuff, G1.F.n8*16, G1.e(proof.Wxiw));\n    Fr.toRprBE(proofBuff, G1.F.n8*18 , Fr.e(proof.eval_a));\n    Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8, Fr.e(proof.eval_b));\n    Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*2, Fr.e(proof.eval_c));\n    Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*3, Fr.e(proof.eval_s1));\n    Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*4, Fr.e(proof.eval_s2));\n    Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*5, Fr.e(proof.eval_zw));\n    Fr.toRprBE(proofBuff, G1.F.n8*18 + Fr.n8*6, Fr.e(proof.eval_r));\n\n    const proofHex = Array.from(proofBuff).map(i2hex).join(\"\");\n\n    const S=\"0x\"+proofHex+\",[\"+inputs+\"]\";\n\n    return S;\n}\n", "import { Id } from '@iden3/js-iden3-core';\nimport { ProvingMethod, ProvingMethodAlg, ZKProof } from './proving';\nimport { AuthV2Circuit, Groth16, prove, verify } from './common';\nimport { Hash, newHashFromString } from '@iden3/js-merkletree';\n\n// AuthV2PubSignals auth.circom public signals\nexport interface AuthV2PubSignals {\n  userID: Id;\n  challenge: bigint;\n  GISTRoot: Hash;\n}\n\nexport const AuthV2Groth16Alg = new ProvingMethodAlg(Groth16, AuthV2Circuit);\n\n// ProvingMethodGroth16AuthV2 instance for Groth16 proving method with an authV2 circuit\nexport class ProvingMethodGroth16AuthV2 implements ProvingMethod {\n  constructor(public readonly methodAlg: ProvingMethodAlg) {}\n\n  get alg(): string {\n    return this.methodAlg.alg;\n  }\n\n  get circuitId(): string {\n    return this.methodAlg.circuitId;\n  }\n\n  async verify(\n    messageHash: Uint8Array,\n    proof: ZKProof,\n    verificationKey: Uint8Array,\n  ): Promise<boolean> {\n    return verify<AuthV2PubSignals>(\n      messageHash,\n      proof,\n      verificationKey,\n      this.unmarshall,\n    );\n  }\n\n  prove(\n    inputs: Uint8Array,\n    provingKey: Uint8Array,\n    wasm: Uint8Array,\n  ): Promise<ZKProof> {\n    return prove(inputs, provingKey, wasm);\n  }\n\n  unmarshall(pubSignals: string[]): AuthV2PubSignals {\n    const len = 3;\n\n    if (pubSignals.length !== len) {\n      throw new Error(\n        `invalid number of Output values expected ${len} got ${pubSignals.length}`,\n      );\n    }\n\n    return {\n      userID: Id.fromBigInt(BigInt(pubSignals[0])),\n      challenge: BigInt(pubSignals[1]),\n      GISTRoot: newHashFromString(pubSignals[2]),\n    };\n  }\n}\n\nexport const provingMethodGroth16AuthV2Instance: ProvingMethod =\n  new ProvingMethodGroth16AuthV2(new ProvingMethodAlg(Groth16, AuthV2Circuit));\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "export {};\n//# sourceMappingURL=hash.js.map", "export {};\n//# sourceMappingURL=node.js.map", "export {};\n//# sourceMappingURL=bytes.js.map", "export {};\n//# sourceMappingURL=storage.js.map", "export {};\n//# sourceMappingURL=merkletree.js.map"],
  "mappings": "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I,EAAE;AAAA,MACrD,CAAC,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;AAAA,MACrD,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,MACrD,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,CAAC;AAAA,MACrD,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,EAAE;AAAA,MACrD,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,CAAC;AAAA,MACrD,CAAC,IAAI,GAAG,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE;AAAA,MACrD,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,EAAE;AAAA,MACrD,CAAC,GAAG,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;AAAA,MACrD,CAAC,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,CAAC;AAAA,MACrD,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAAA,MACrD,CAAC,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;AAAA,MACrD,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,MACrD,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,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CAAC,MAAM;AACtB,YAAE,KAAK,KAAM,CAAC,KAAK;AACnB,YAAE,KAAK,KAAM,CAAC,KAAK;AACnB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,KAAK,KAAM,CAAC,KAAK;AACnB,YAAE,KAAK,KAAM,CAAC,KAAK;AACnB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,KAAK,KAAM,CAAC,KAAK;AACnB,YAAE,KAAK,KAAM,CAAC,KAAK;AACnB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,KAAK,KAAM,CAAC,KAAK;AACnB,YAAE,KAAK,KAAM,CAAC,KAAK;AACnB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,MAAM,MAAO,CAAC,MAAM;AACtB,YAAE,M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",
  "names": ["e", "Buffer", "fill", "string", "val", "read", "i", "e", "compare", "byteLength", "mul", "sub", "self", "listeners", "type", "e", "copy", "emit", "domain", "addListener", "once", "removeListener", "removeAllListeners", "Buffer", "isBuffer", "init", "inited", "lookup", "revLookup", "Arr", "tripletToBase64", "encodeChunk", "e", "write", "kMaxLength", "createBuffer", "allocUnsafe", "from", "fromArrayBuffer", "fromString", "fromObject", "assertSize", "alloc", "fill", "checked", "string", "byteLength", "fromArrayLike", "internalIsBuffer", "isnan", "utf8ToBytes", "base64ToBytes", "slowToString", "hexSlice", "utf8Slice", "asciiSlice", "latin1Slice", "base64Slice", "utf16leSlice", "swap", "bidirectionalIndexOf", "val", "arrayIndexOf", "read", "i", "hexWrite", "utf8Write", "blitBuffer", "asciiWrite", "asciiToBytes", "latin1Write", "base64Write", "ucs2Write", "utf16leToBytes", "decodeCodePointsArray", "MAX_ARGUMENTS_LENGTH", "toHex", "checkOffset", "checkInt", "objectWriteUInt16", "objectWriteUInt32", "checkIEEE754", "writeFloat", "writeDouble", "base64clean", "stringtrim", "INVALID_BASE64_RE", "isFastBuffer", "isSlowBuffer", "toString", "init_buffer", "compare", "isEncoding", "concat", "swap16", "swap32", "swap64", "equals", "includes", "indexOf", "lastIndexOf", "toJSON", "slice", "readUIntLE", "mul", "readUIntBE", "readUInt8", "readUInt16LE", "readUInt16BE", "readUInt32LE", "readUInt32BE", "readIntLE", "readIntBE", "readInt8", "readInt16LE", "readInt16BE", "readInt32LE", "readInt32BE", "readFloatLE", "readFloatBE", "readDoubleLE", "readDoubleBE", "writeUIntLE", "writeUIntBE", "writeUInt8", "writeUInt16LE", "writeUInt16BE", "writeUInt32LE", "writeUInt32BE", "writeIntLE", "sub", "writeIntBE", "writeInt8", "writeInt16LE", "writeInt16BE", "writeInt32LE", "writeInt32BE", "writeFloatLE", "writeFloatBE", "writeDoubleLE", "writeDoubleBE", "copy", "defaultSetTimout", "defaultClearTimeout", "runTimeout", "cachedSetTimeout", "e", "runClearTimeout", "cachedClearTimeout", "cleanUpNextTick", "draining", "currentQueue", "queue", "queueIndex", "drainQueue", "nextTick", "Item", "noop", "binding", "cwd", "chdir", "umask", "hrtime", "performanceNow", "performance", "uptime", "startTime", "title", "platform", "browser", "env", "argv", "version", "versions", "release", "config", "on", "addListener", "once", "off", "removeListener", "removeAllListeners", "emit", "inherits", "inspect", "isArray", "isBuffer", "x", "hash", "val", "e", "Buffer", "add", "Buffer", "inspect", "join", "concat", "err", "self", "NodeError", "includes", "type", "inherits", "deprecate", "config", "val", "Buffer", "realHasInstance", "keys", "self", "Buffer", "fill", "Buffer", "isEncoding", "self", "once", "noop", "onlegacyfinish", "onfinish", "onend", "onerror", "onclose", "onrequest", "resolve", "createReadableStreamAsyncIterator", "EElistenerCount", "type", "Buffer", "debug", "from", "prependListener", "indexOf", "self", "n", "once", "noop", "from", "Buffer", "hash", "require_blake", "Buffer", "Buffer", "e", "Buffer", "Buffer", "e", "Buffer", "module", "module", "module", "module", "module", "compare", "square", "isOdd", "isNegative", "bitLength", "abs", "exp", "mod", "isPrime", "bits", "utils", "bitLength", "isOdd", "square", "module", "buildSqrt", "bitLength", "module", "utils", "module", "buildSqrt", "module", "module", "buildMultiexp", "module", "pTSizes", "buildMultiexp", "module", "F", "isOdd", "utils", "buildFFT", "module", "module", "module", "module", "utils", "buildFFT", "bitLength", "isOdd", "isNegative", "module", "bits", "naf", "F", "mul2", "r", "buildPairing", "utils", "buildFFT", "bitLength", "isOdd", "isNegative", "module", "bits", "naf", "F", "mul2", "buildPairing", "require_browser", "byteLength", "toByteArray", "fromByteArray", "lookup", "revLookup", "Arr", "len", "i", "tripletToBase64", "encodeChunk", "len2", "e", "require_buffer", "base64", "Buffer", "SlowBuffer", "e", "createBuffer", "allocUnsafe", "from", "fromString", "fromArrayBuffer", "fromObject", "assertSize", "alloc", "fill", "checked", "string", "byteLength", "fromArrayLike", "copy", "isBuffer", "compare", "isEncoding", "concat", "utf8ToBytes", "base64ToBytes", "slowToString", "hexSlice", "utf8Slice", "asciiSlice", "latin1Slice", "base64Slice", "utf16leSlice", "swap", "swap16", "swap32", "swap64", "toString", "equals", "inspect", "bidirectionalIndexOf", "val", "arrayIndexOf", "read", "i", "includes", "indexOf", "lastIndexOf", "hexWrite", "utf8Write", "blitBuffer", "asciiWrite", "asciiToBytes", "base64Write", "ucs2Write", "utf16leToBytes", "write", "toJSON", "decodeCodePointsArray", "MAX_ARGUMENTS_LENGTH", "slice", "checkOffset", "readUIntLE", "mul", "readUIntBE", "readUInt8", "readUInt16LE", "readUInt16BE", "readUInt32LE", "readUInt32BE", "readIntLE", "readIntBE", "readInt8", "readInt16LE", "readInt16BE", "readInt32LE", "readInt32BE", "readFloatLE", "readFloatBE", "readDoubleLE", "readDoubleBE", "checkInt", "writeUIntLE", "writeUIntBE", "writeUInt8", "writeUInt16LE", "writeUInt16BE", "writeUInt32LE", "writeUInt32BE", "writeIntLE", "sub", "writeIntBE", "writeInt8", "writeInt16LE", "writeInt16BE", "writeInt32LE", "writeInt32BE", "checkIEEE754", "writeFloat", "writeFloatLE", "writeFloatBE", "writeDouble", "writeDoubleLE", "writeDoubleBE", "INVALID_BASE64_RE", "base64clean", "type", "sha256js", "bits", "hash", "e", "sha256nodeCrypto", "sha256", "require_lib", "string", "bits", "pad", "base16", "base32", "base32hex", "base64", "base64url", "codec", "byteLength", "string", "toString", "write", "byteLength", "string", "toString", "write", "byteLength", "string", "toString", "write", "byteLength", "string", "code", "toString", "write", "bits", "byteLength", "string", "toString", "write", "require_browser", "base64", "isBuffer", "isEncoding", "alloc", "fill", "allocUnsafe", "byteLength", "string", "compare", "concat", "copy", "equals", "from", "fromString", "fromArray", "fromArrayBuffer", "codec", "includes", "indexOf", "bidirectionalIndexOf", "lastIndexOf", "swap", "swap16", "swap32", "swap64", "toString", "write", "writeDoubleLE", "writeFloatLE", "writeUInt32LE", "writeInt32LE", "readDoubleLE", "readFloatLE", "readUInt32LE", "readInt32LE", "__commonJS", "mod", "__require", "base64", "require_blake2b", "mod", "Blake2b", "noop", "from", "require_utils", "hasOwnProperty", "string", "from", "val", "utils", "dirname", "extname", "resolve", "path", "open", "e", "basename", "self", "bits", "createMethod", "i", "type", "j", "fromString", "toString", "e", "bits", "exp", "F", "e", "F", "F", "bits", "e", "exp", "log2", "F", "_revTable", "_revSlow", "bits", "log2", "self", "e", "init", "alloc", "u32", "uptime", "release", "release", "uptime", "Buffer", "toNumber", "isNegative", "isZero", "bitLength", "toNumber", "isNegative", "isZero", "bits", "bitLength", "import_wasmcurves", "F", "e", "exp", "F", "hash", "slice", "hash", "Buffer", "SlotName", "SubjectFlag", "IdPosition", "MerklizedFlag", "MerklizedRootPosition", "Flags", "Blockchain", "NetworkId", "DidMethod", "import_cross_sha256", "checkBigIntInField", "hash", "cjs", "Header", "code", "res", "a", "hash", "self", "resolve", "tmpBuff32", "tmpBuff32v", "tmpBuff64", "tmpBuff64v", "self", "PAGE_SIZE", "createNew", "readExisting", "tmpBuff32", "tmpBuff32v", "tmpBuff64", "tmpBuff64v", "PAGE_SIZE", "self", "createNew", "readExisting", "type", "readExisting", "version", "scalar_exports", "abs", "add", "band", "bitLength", "bits", "bor", "bxor", "div", "e", "eq", "exp", "fromArray", "fromRprBE", "fromRprLE", "fromString", "geq", "gt", "isNegative", "isOdd", "isZero", "land", "leq", "lnot", "lor", "lt", "mod", "mul", "naf", "neg", "neq", "one", "pow", "shiftLeft", "shiftRight", "shl", "shr", "square", "sub", "toArray", "toLEBuff", "toNumber", "toRprBE", "toRprLE", "toString", "zero", "hexLen", "_revTable", "_revSlow", "bits", "ChaCha", "add", "mul", "getRandomBytes", "getThreadRng", "ChaCha", "import_wasmcurves", "utils_exports", "array2buffer", "beBuff2int", "beInt2Buff", "bitReverse", "buffReverseBits", "buffer2array", "leBuff2int", "leInt2Buff", "log2", "stringifyBigInts", "stringifyFElements", "unstringifyBigInts", "unstringifyFElements", "stringifyBigInts", "fromRprLE", "unstringifyBigInts", "beBuff2int", "beInt2Buff", "leBuff2int", "leInt2Buff", "bitLength", "stringifyFElements", "F", "unstringifyFElements", "_revTable", "_revSlow", "bits", "bitReverse", "log2", "buffReverseBits", "array2buffer", "buffer2array", "PAGE_SIZE", "BigBuffer", "buildBatchConvert", "BigBuffer", "WasmField1", "shiftRight", "one", "bitLength", "sub", "shiftLeft", "isOdd", "buildBatchConvert", "toLEBuff", "e", "isNegative", "neg", "gt", "mod", "leInt2Buff", "fromRprLE", "toString", "zero", "add", "band", "geq", "toRprLE", "getThreadRng", "array2buffer", "BigBuffer", "buffer2array", "WasmField2", "F", "toLEBuff", "e", "getThreadRng", "WasmField3", "F", "toLEBuff", "e", "getThreadRng", "WasmCurve", "F", "toLEBuff", "buildBatchConvert", "e", "thread", "self", "e", "init", "alloc", "u32", "import_web_worker", "resolve", "stringToBase64", "Buffer", "threadSource", "thread", "workerSource", "buildThreadManager", "Worker", "e", "buildBatchApplyKey", "BigBuffer", "buildPairing", "buildMultiexp", "log2", "buildFFT", "array2buffer", "bits", "log2", "buffOut", "buffer2array", "buffReverseBits", "BigBuffer", "opPromises", "buildEngine", "buildThreadManager", "e", "WasmField1", "WasmField2", "WasmCurve", "WasmField3", "buildBatchApplyKey", "buildMultiexp", "buildFFT", "buildPairing", "buildBn128", "buildBn128wasm", "e", "buildEngine", "import_wasmcurves", "buildBls12381", "buildBls12381wasm", "e", "buildEngine", "bls12381r", "e", "bn128r", "bls12381q", "bn128q", "Scalar", "scalar_exports", "utils", "utils_exports", "bls12381r", "Scalar", "bn128r", "bls12381q", "bn128q", "getCurveFromQ", "Scalar", "bn128q", "buildBn128", "bls12381q", "buildBls12381", "getCurveFromName", "_revTable", "_revSlow", "bits", "log2", "getCurveFromQ", "log2", "Scalar", "readHeader", "stringifyBigInts", "utils", "readHeader", "Scalar", "log2", "BigBuffer", "flatArray", "res", "a", "fnvHash", "hash", "toArray32", "scalar_exports", "abs", "add", "band", "bitLength", "bits", "bor", "bxor", "div", "e", "eq", "exp", "fromArray", "fromRprBE", "fromRprLE", "fromString", "geq", "gt", "isNegative", "isOdd", "isZero", "land", "leq", "lnot", "lor", "lt", "mod", "mul", "naf", "neg", "neq", "one", "pow", "shiftLeft", "shiftRight", "shl", "shr", "square", "sub", "toArray", "toLEBuff", "toNumber", "toRprBE", "toRprLE", "toString", "zero", "hexLen", "_revTable", "_revSlow", "bits", "exp", "F", "e", "isZero", "bits", "buildSqrt", "F", "eq", "mod", "alg5_tonelliShanks", "alg4_kong", "alg3_atkin", "alg2_shanks", "pow", "alg10_adj", "alg9_adj", "alg8_complex", "sub", "isOdd", "div", "getRandomBytes", "FFT", "F", "bits", "log2", "__fft", "ZqField", "bitLength", "e", "buildSqrt", "FFT", "exp", "getRandomBytes", "toRprLE", "toRprBE", "fromRprLE", "fromRprBE", "import_wasmcurves", "_revTable", "_revSlow", "bits", "PAGE_SIZE", "thread", "self", "e", "init", "alloc", "u32", "import_web_worker", "stringToBase64", "Buffer", "threadSource", "thread", "workerSource", "import_wasmcurves", "bls12381r", "e", "bn128r", "bls12381q", "bn128q", "Scalar", "scalar_exports", "code", "Scalar", "errStr", "Scalar", "ZqField", "fnvHash", "flatArray", "self", "toArray32", "unstringifyBigInts", "utils", "readExisting", "unstringifyBigInts", "utils", "unstringifyBigInts", "utils", "getCurveFromName", "Scalar", "unstringifyBigInts", "utils", "import_blake2b_wasm", "import_blake2b_wasm", "import_blake2b_wasm", "import_blake2b_wasm", "import_blake2b_wasm", "import_blake2b_wasm", "import_blake2b_wasm", "import_blake2b_wasm", "import_blake2b_wasm", "fromString", "e", "zero", "e", "one", "_revTable", "_revSlow", "bits", "import_wasmcurves", "_revTable", "_revSlow", "bits", "PAGE_SIZE", "thread", "self", "e", "init", "alloc", "u32", "import_web_worker", "stringToBase64", "Buffer", "threadSource", "thread", "workerSource", "import_wasmcurves", "bls12381r", "e", "bn128r", "bls12381q", "bn128q", "bls12381r", "Scalar", "bn128r", "unstringifyBigInts", "utils", "import_blake2b_wasm", "import_blake2b_wasm", "import_blake2b_wasm", "import_blake2b_wasm", "import_blake2b_wasm", "stringifyBigInts", "utils", "import_blake2b_wasm", "stringifyBigInts", "utils", "jsSha3", "unstringifyBigInts", "utils", "import_js_sha3", "unstringifyBigInts", "utils", "keccak256", "jsSha3", "unstringifyBigInts", "utils", "verify", "Buffer", "verify", "qString", "checkBigIntInField", "checkBigIntInField", "hash", "checkBigIntInField", "hash", "verify"]
}
