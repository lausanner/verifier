import { Id } from './id';
export declare enum Blockchain {
    Ethereum = "eth",
    Polygon = "polygon",
    Unknown = "unknown",
    NoChain = ""
}
export declare enum NetworkId {
    Main = "main",
    Mumbai = "mumbai",
    Goerli = "goerli",
    Unknown = "unknown",
    NoNetwork = ""
}
export declare enum DidMethod {
    Iden3 = "iden3",
    PolygonId = "polygonid"
}
export declare const DIDMethodByte: {
    [key: string]: number;
};
export declare class DIDNetworkFlag {
    readonly blockchain: Blockchain;
    readonly networkId: NetworkId;
    constructor(blockchain: Blockchain, networkId: NetworkId);
    toString(): string;
    static fromString(s: string): DIDNetworkFlag;
}
export declare const DIDMethodNetwork: {
    [k: string]: {
        [k: string]: number;
    };
};
export declare function buildDIDType(method: string, blockchain: Blockchain, network: NetworkId): Uint8Array;
export declare function findNetworkIDForDIDMethodByValue(method: DidMethod, byteNumber: number): NetworkId;
export declare function findBlockchainForDIDMethodByValue(method: DidMethod, byteNumber: number): Blockchain;
export declare function findDIDMethodByValue(byteNumber: number): DidMethod;
export declare class DID {
    method: DidMethod;
    id: Id;
    blockchain: Blockchain;
    networkId: NetworkId;
    static fromGenesisFromIdenState(typ: Uint8Array, state: bigint): DID;
    toString(): string;
    static parseFromId(id: Id): DID;
    static parse(s: string): DID;
}
