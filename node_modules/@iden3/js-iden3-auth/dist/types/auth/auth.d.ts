import { AuthorizationRequestMessage, AuthorizationResponseMessage } from '../protocol/models';
import { IKeyLoader } from '../loaders/key';
import { ISchemaLoader } from '../loaders/schema';
import { Resolvers } from '../state/resolver';
import { VerifyOpts } from '../circuits/registry';
import { Token } from '@iden3/js-jwz';
export declare function createAuthorizationRequest(reason: string, sender: string, callbackUrl: string): AuthorizationRequestMessage;
export declare function createAuthorizationRequestWithMessage(reason: string, message: string, sender: string, callbackUrl: string): AuthorizationRequestMessage;
export declare class Verifier {
    private keyLoader;
    private schemaLoader;
    private stateResolver;
    constructor(keyLoader: IKeyLoader, schemaLoader: ISchemaLoader, stateResolver: Resolvers);
    verifyAuthResponse(response: AuthorizationResponseMessage, request: AuthorizationRequestMessage, opts?: VerifyOpts): Promise<void>;
    verifyJWZ(tokenStr: string, opts?: VerifyOpts): Promise<Token>;
    fullVerify(tokenStr: string, request: AuthorizationRequestMessage, opts?: VerifyOpts): Promise<AuthorizationResponseMessage>;
}
