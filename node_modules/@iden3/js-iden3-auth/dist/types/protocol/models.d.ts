export interface Message {
    id: string;
    typ: string;
    thid: string;
    type: string;
    body: unknown;
}
export interface AuthorizationRequestMessage {
    id: string;
    typ: string;
    type: string;
    thid: string;
    body: AuthorizationRequestBody;
    from: string;
    to?: string;
}
export interface AuthorizationResponseMessage {
    id: string;
    typ: string;
    type: string;
    thid: string;
    body: AuthorizationResponseBody;
    from: string;
    to: string;
}
export interface AuthorizationRequestBody {
    message?: string;
    reason: string;
    callbackUrl: string;
    scope: ZKPRequest[];
    did_doc?: DIDDocument;
}
export interface ContractInvokeRequestMessage {
    id: string;
    typ: string;
    type: string;
    thid: string;
    body: ContractInvokeRequestMessageBody;
    from: string;
    to?: string;
}
export interface ContractInvokeRequestMessageBody {
    message?: string;
    reason: string;
    transaction_data: TransactionData;
    scope: ZKPRequest[];
    did_doc?: DIDDocument;
}
export interface TransactionData {
    contract_address: string;
    method_id: string;
    chain_id: number;
    network: string;
}
export interface AuthorizationResponseBody {
    message?: string;
    scope: ZKPResponse[];
    did_doc?: DIDDocument;
}
export interface ProofData {
    pi_a: string[];
    pi_b: string[][];
    pi_c: string[];
    protocol?: string;
    curve?: string;
}
export interface ZKPRequest {
    id: number;
    circuitId: string;
    optional?: boolean;
    query: unknown;
}
export interface ZKPResponse {
    id: number;
    circuitId: string;
    vp?: JSON;
    pub_signals: string[];
    proof: ProofData;
}
export type DIDDocument = {
    '@context': string | string[];
    id: string;
    service?: Service[];
};
export type Service = {
    id: string;
    type: string;
    serviceEndpoint: string;
};
