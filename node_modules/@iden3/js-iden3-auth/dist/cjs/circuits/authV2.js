"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthPubSignalsV2 = void 0;
const js_iden3_core_1 = require("@iden3/js-iden3-core");
const ownershipVerifier_1 = require("../circuits/ownershipVerifier");
const common_1 = require("../circuits/common");
const js_merkletree_1 = require("@iden3/js-merkletree");
const defaultAuthVerifyOpts = 5 * 60 * 1000; // 5 minutes
class AuthPubSignalsV2 extends ownershipVerifier_1.IDOwnershipPubSignals {
    constructor(pubSignals) {
        super();
        if (pubSignals.length != 3) {
            throw new Error(`invalid number of Output values expected ${3} got ${pubSignals.length}`);
        }
        this.userId = js_iden3_core_1.Id.fromBigInt(BigInt(pubSignals[0]));
        this.challenge = BigInt(pubSignals[1]);
        this.gistRoot = (0, js_merkletree_1.newHashFromString)(pubSignals[2]);
    }
    async verifyQuery(_query) {
        throw new Error(`auth circuit doesn't support queries`);
    }
    async verifyStates(resolvers, opts) {
        const resolver = (0, common_1.getResolverByID)(resolvers, this.userId);
        if (!resolver) {
            throw new Error(`resolver not found for id ${this.userId.string()}`);
        }
        const gist = await (0, common_1.checkGlobalState)(resolver, this.gistRoot);
        let acceptedStateTransitionDelay = defaultAuthVerifyOpts;
        if (opts?.acceptedStateTransitionDelay) {
            acceptedStateTransitionDelay = opts.acceptedStateTransitionDelay;
        }
        if (!gist.latest) {
            const timeDiff = Date.now() -
                (0, js_iden3_core_1.getDateFromUnixTimestamp)(Number(gist.transitionTimestamp)).getMilliseconds();
            if (timeDiff > acceptedStateTransitionDelay) {
                throw new Error('global state is outdated');
            }
        }
    }
    verifyIdOwnership(sender, challenge) {
        return super.verifyIdOwnership(sender, challenge);
    }
}
exports.AuthPubSignalsV2 = AuthPubSignalsV2;
//# sourceMappingURL=authV2.js.map